cset: moving following pidspec: 15115
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.818942268 seconds)
loading group "shootout"... done (took 1.181076104 seconds)
loading group "string"... done (took 0.672848568 seconds)
loading group "linalg"... done (took 8.587956978 seconds)
loading group "parallel"... done (took 0.181297996 seconds)
loading group "find"... done (took 2.917049088 seconds)
loading group "tuple"... done (took 2.115475517 seconds)
loading group "union"... done (took 14.80586959 seconds)
loading group "dates"... done (took 1.467447245 seconds)
loading group "micro"... done (took 0.217991061 seconds)
loading group "simd"... done (took 4.769536346 seconds)
loading group "io"... done (took 1.05665336 seconds)
loading group "random"... done (took 9.509701385 seconds)
loading group "problem"... done (took 1.514667546 seconds)
loading group "array"... done (took 25.201750706 seconds)
loading group "misc"... done (took 1.886705991 seconds)
loading group "scalar"... done (took 43.433424089 seconds)
loading group "sort"... done (took 3.32645501 seconds)
loading group "sparse"... done (took 12.697880729 seconds)
loading group "collection"... done (took 18.360917015 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.422804756 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113280231 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.126728896 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.111974371 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.182330086 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.117965459 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.12739573 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082674988 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.92747557 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134578509 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113422195 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.421837531 seconds)
done (took 5.314409376 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.16824465 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.089860466 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082167003 seconds)
  done (took 1.38289742 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069876675 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061561698 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066050208 seconds)
  done (took 1.408505103 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063683236 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133169385 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064741392 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065252019 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065044507 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064850029 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064802308 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064704189 seconds)
  done (took 1.7376717 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070832938 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066392318 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064586058 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.06582678 seconds)
  done (took 1.481733476 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063845063 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119925927 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063063961 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062961661 seconds)
  done (took 1.520801506 seconds)
done (took 8.993944837 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138175462 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.828413751 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.775801089 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.124235612 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246530313 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.366278512 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122597579 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.181815506 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.08738804 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073857271 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.120196773 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076606351 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.386380811 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.507237221 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069779922 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.168956909 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.647956633 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087615239 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135510648 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.436400501 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071721921 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086163782 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.082624064 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069666205 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.337190629 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153357429 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.669810905 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094547814 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06816906 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.093815956 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068917367 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076632535 seconds)
  done (took 10.701023609 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091525176 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088898778 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067275227 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122348902 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092425726 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.06898391 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07396199 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066519219 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087567438 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122713816 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088822479 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097605685 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065103852 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067858368 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072298914 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195613445 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.079169708 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080235891 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065962067 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079836176 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104376061 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077018913 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077269602 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076727337 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.131250306 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167681196 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.095215289 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.097884489 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067249863 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078730406 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113975905 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123858769 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065467656 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063940865 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118787186 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.094015934 seconds)
  done (took 4.593866223 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.88197156 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094351407 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081246716 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07306325 seconds)
    (4/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.112830967 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104445817 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.11192213 seconds)
    (7/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.063715263 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123789074 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098164434 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.120858892 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070388631 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.1487135 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.672960208 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.15813875 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070441509 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118866404 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.355147391 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.06275455 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.06873258 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066834051 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069582083 seconds)
    (22/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063593401 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067956187 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113364805 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064605498 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173814156 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.578185455 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068703868 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066927738 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09422177 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064123091 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.137458332 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090579883 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068332281 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.541839205 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064041039 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.17396494 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088357174 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093306618 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065738492 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066796558 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07714485 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065145545 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107166087 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077667903 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.511515693 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067913106 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.579610296 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224463877 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071318211 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070343666 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100207516 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06337464 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066507207 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.893613022 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.143463134 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065514311 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.271705854 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067546975 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066482176 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067330235 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100261522 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065748267 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067063025 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071789978 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094560549 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.788258223 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088981583 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.095064176 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065408918 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.4004663 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072328808 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067318387 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067904339 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067323076 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104233073 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064890314 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064754604 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109018553 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093413018 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087774206 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068459821 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065730803 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064557977 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.334123802 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.163014239 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064439638 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065256026 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.470595324 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.061910109 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063884615 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066553367 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.205116643 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065914944 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063105781 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063880319 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098203794 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066774557 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.334035 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065296598 seconds)
    (101/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063191535 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.483220351 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070135581 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102421145 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118528805 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066309063 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.09950657 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066649204 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063660317 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072302715 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064668009 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063306793 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068362833 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064742222 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06500309 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067747496 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067237771 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066239693 seconds)
  done (took 22.534538424 seconds)
done (took 39.927833907 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312877521 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077371088 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077395426 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07746008 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078060047 seconds)
  done (took 1.887532297 seconds)
done (took 3.243778846 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.250603196 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.074420718 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062729212 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.200376555 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.086743648 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173612613 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.212471761 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.157771046 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.086841154 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086469485 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.087132586 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.218086251 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.223431112 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.087022286 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.157667058 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.224395719 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.087013317 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062727352 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.087001028 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086988761 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086820468 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062608994 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086423297 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.08708088 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155897469 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086005808 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062055982 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.155583828 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.085395312 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.156302134 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.085305581 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.085352292 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.085225287 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.155001202 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.085159621 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.154024212 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.179972224 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.085421858 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.084944363 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.084973824 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084518937 seconds)
  done (took 6.216476296 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073110911 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081057447 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082735802 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060852572 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07103243 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081447037 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060383164 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080335779 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08989067 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081423615 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080418014 seconds)
  done (took 2.189757426 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068792478 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081115035 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082847579 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060711019 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071636095 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08163153 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060517634 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081663329 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084117646 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081993708 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081884901 seconds)
  done (took 2.132735016 seconds)
done (took 11.822333273 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095892618 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063892697 seconds)
  done (took 1.44020458 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.2221961 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.493862248 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.948371075 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090998388 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070231607 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083782544 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.195090065 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065578735 seconds)
  done (took 7.638124733 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.097519816 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067905255 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069428097 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065912437 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065769668 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066121804 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.068152712 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066405711 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066802855 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067180519 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065935045 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066769681 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066937451 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067943568 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067914994 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.066311391 seconds)
  done (took 2.499781106 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101546642 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.068016513 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097713316 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060688061 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070123713 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06124052 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069226507 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071237489 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.06859535 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.06948631 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070868226 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069467779 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069453456 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.070080107 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071328459 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071289882 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071390444 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069331685 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071210186 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071939971 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07087706 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071365914 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.072058366 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069760309 seconds)
  done (took 3.139263219 seconds)
done (took 16.014984187 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172828048 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073324572 seconds)
  done (took 1.5348314 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066102886 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066744461 seconds)
  done (took 1.437112888 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071203953 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058655498 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076071644 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068463794 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059741723 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.05961806 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075289731 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059902656 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059432161 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059735755 seconds)
  done (took 1.950379161 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061400017 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.067288074 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064957211 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063091775 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065262099 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.061166289 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063493272 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061459414 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067724999 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060203343 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064329983 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081324955 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064025299 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081729202 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063762228 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064287321 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065784836 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063602875 seconds)
  done (took 2.490518597 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059665843 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059922443 seconds)
  done (took 1.432264352 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063173939 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059934398 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06273561 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062400683 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060241452 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059841504 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060564512 seconds)
  done (took 1.735471241 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.419797009 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122362052 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.342654847 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067458256 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.075026999 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.257536333 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063471869 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068392455 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067585054 seconds)
  done (took 2.835775081 seconds)
done (took 14.736071726 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08106532 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.178611805 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085530489 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.379874488 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091123988 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065390643 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.118011037 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.176538691 seconds)
done (took 2.509218912 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.27564249 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.135593938 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.310868977 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.147013004 seconds)
  done (took 2.908971851 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.329145463 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.076867369 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075754073 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064801305 seconds)
  done (took 1.872889506 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.062870356 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069433276 seconds)
  done (took 1.454655492 seconds)
done (took 7.843202567 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069862596 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059838783 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.089584207 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.06549284 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062569048 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.062281625 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061567344 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062493371 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.060166864 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.062443724 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061832692 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.062538134 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062724211 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062396736 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06201257 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062460061 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.062339301 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062437168 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.060214972 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0620518 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061433556 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062477009 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061621061 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062322683 seconds)
  done (took 2.874252047 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077629595 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063823766 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06510508 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064983521 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065313735 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064826665 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065025528 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.06389823 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065231603 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063676368 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065665376 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065623765 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063767357 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065611075 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064017672 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065868556 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.065167654 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064179845 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063872822 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065831189 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065341052 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064198496 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06568303 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065180575 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065623102 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065613945 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063536957 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064022511 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065703113 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065802799 seconds)
  done (took 3.297807026 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.0647143 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058329606 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.05923091 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068134656 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058238074 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058788847 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059370328 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058300854 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.05967889 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060333434 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059325927 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059129617 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059487157 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.05885433 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058674553 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059234618 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063610443 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078063514 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058895436 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058641389 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062937271 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059018737 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058378006 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058833587 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058850643 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058623442 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058228006 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059088024 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058600011 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059103022 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058434263 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062678212 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06405698 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058695066 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068741115 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063629734 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058701698 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065122959 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059625213 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058523061 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058471541 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058451445 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058942232 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058671763 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068954906 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058990484 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059766963 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059083277 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059199952 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058546464 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058533723 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060362018 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06745946 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060320927 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058924377 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.05991436 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058400965 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059276727 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.05876084 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058888727 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.05861709 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062397699 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060100007 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.05925609 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.07879393 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060376637 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068931889 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.05907476 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059107005 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062496216 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059306985 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076798614 seconds)
  done (took 5.72773908 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069856761 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070614108 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077559181 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068529319 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062639052 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059530239 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063414351 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059671097 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069172409 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064053099 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059875632 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063461966 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069129082 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06376113 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060851708 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06876112 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063413989 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062721972 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.05956247 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06369358 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06069738 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063184676 seconds)
  done (took 2.774268949 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.13686284 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064636586 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.104413581 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069058483 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067281528 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069090942 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065009323 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06460486 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065316864 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065829554 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065729229 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064921414 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067460623 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065608313 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065679385 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066223201 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064720535 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065632202 seconds)
  done (took 2.637146391 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.07519263 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064212298 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087871968 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064059214 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064141864 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06407726 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067795911 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068477234 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063975362 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064693309 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068599041 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064369422 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.064477379 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064667313 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064018761 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064431682 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064095237 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064857319 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06852235 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067979457 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068119769 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068800592 seconds)
  done (took 2.818410677 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07730137 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063156795 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.07877883 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065123441 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058860791 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058902916 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064906392 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063648431 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064764976 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063740986 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063795076 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059223746 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065899799 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063866311 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065806899 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064226143 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063593521 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06384731 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063160503 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059401111 seconds)
  done (took 2.634835918 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070400991 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061507148 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061530511 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066620771 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061826907 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062142357 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06692606 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061806213 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062011476 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083775764 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062038967 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061976235 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.077490501 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065285443 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.062207513 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067429845 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.067693713 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066988135 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061780733 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061937092 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083920861 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.062007141 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.067351918 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062333577 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061682413 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062002531 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061458275 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065340896 seconds)
  done (took 3.181805924 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062486507 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061363239 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062266616 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061976915 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061962935 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06167759 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062202534 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061873653 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061580173 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062105093 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061337445 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061566355 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06442516 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062170392 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.062130403 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.062008412 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061802752 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062362121 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062174392 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062458867 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061986381 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061979172 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062008841 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06228858 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062269912 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06197214 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062368066 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06277577 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06165957 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062136471 seconds)
  done (took 3.212408547 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071059962 seconds)
    (2/2) benchmarking "in"...
    done (took 0.06963442 seconds)
  done (took 1.489143829 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060090416 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075539219 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058052013 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070731965 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06671573 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062141531 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067958197 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067454816 seconds)
  done (took 1.871132343 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.065141008 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090320813 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060576271 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.061028572 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063401648 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125423696 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.07295209 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072239986 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074448855 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063013805 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061224953 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072865587 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060340801 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073788667 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061820014 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069631246 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067876598 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078374093 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073302382 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058676956 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072925704 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061091834 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.058953119 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061356838 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060336646 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067698712 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.07619473 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073265456 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068655778 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057911126 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079229239 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058783781 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060062102 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068801056 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.064301192 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059499883 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096031412 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059854981 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064600285 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059282405 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072234872 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080876466 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074847598 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.07864518 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061897643 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062236097 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060114294 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062445993 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063633492 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069162425 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.05914826 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06687583 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058965649 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060428184 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070117373 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060025262 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.065334402 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069905926 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074209298 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070574327 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069389892 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07616596 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069007734 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068365974 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061239036 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080344348 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061655729 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073216889 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074767602 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060671554 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073227123 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058820513 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058135467 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059179294 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.093205204 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061195989 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060854907 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059048059 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059267777 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060455295 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068734409 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064756025 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066689696 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062579966 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07540696 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068853048 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059175386 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066079907 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.077018385 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062552454 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059225416 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075379511 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062469874 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058393467 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076910833 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068965858 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060418423 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.05992533 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062773637 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072847875 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06048938 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057350266 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06778116 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060781722 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061050741 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063375768 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067079763 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058931865 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.068966664 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063472012 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060186124 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057546605 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063451707 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059185239 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057349289 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067823099 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058223022 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072392409 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064711174 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072845201 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072959745 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069300609 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073957781 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058106633 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056935338 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076181773 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067776693 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059559524 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075647627 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057688385 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071461544 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057479854 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.05976808 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.203829199 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.05956774 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062505263 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060436159 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065495196 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061489803 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062189222 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065779252 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068634045 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.072056402 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06092559 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068618518 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059964243 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075319945 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069543145 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063823116 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062431447 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059751483 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071101363 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.0656206 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068918154 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058973009 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059737958 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059240385 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070183278 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068813242 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061179675 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066699425 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063962831 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059965375 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059515376 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06054172 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.062876616 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062592516 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.06030867 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067337303 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068213677 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073485381 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066407439 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068743135 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058706238 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058535736 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06072147 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058578709 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063414982 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069097955 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074476666 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070738891 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.079650785 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059238029 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069007632 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060458971 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.075762075 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072717618 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060472508 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063898664 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058298381 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060703492 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.0685145 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070987796 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.073169303 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074577506 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064003685 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064472105 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060297238 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074572682 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059494779 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067509652 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068583559 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.064013149 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059229762 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061019445 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068432487 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063635585 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059451324 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074624417 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065540876 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058568114 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073732284 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059749016 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070112414 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058722079 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.063691634 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064765244 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060935091 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068915233 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074727386 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058249225 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06055149 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074860796 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061063178 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060873051 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067754679 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074650508 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064067283 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067455432 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070133921 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069021987 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063465448 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068701396 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059930253 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068711356 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062048691 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070666198 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058807647 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076802106 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057830379 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074215607 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059579548 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070116269 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059667804 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06871915 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060025129 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076060659 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060645408 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059826747 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.0710073 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057453506 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067996567 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058109471 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064287839 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064924173 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067566044 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059766115 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068115111 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059821095 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067300735 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062945495 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066580181 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067917201 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063083271 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058553978 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067102352 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069350294 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066441828 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059091734 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.05965497 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058640736 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.20846556 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062340213 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062215901 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069252713 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065088074 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065915002 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061416832 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06164137 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061428275 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068141519 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069159319 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077561102 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068183675 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067229009 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069360403 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.05870967 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075271852 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059179514 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069510961 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058058271 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064823187 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068649295 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060041735 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078272845 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060841498 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067455952 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071794458 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068487141 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063539675 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078958055 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064126678 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069304545 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068635992 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065190063 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067732262 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063083778 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069574946 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070772687 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071266941 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061717282 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068514625 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069319767 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06133557 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06686152 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060962398 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067495602 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060864098 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058516209 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063925051 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070609887 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063661037 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064113705 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059371479 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059504875 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060205383 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.066311458 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.06379821 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068132801 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074818663 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058565108 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060278755 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058847518 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063147002 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077490899 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069274365 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067189931 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064232099 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058674424 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061072265 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062257834 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061122275 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064661422 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059947533 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060257821 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071311668 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06137666 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063810417 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059572935 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060190158 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068862825 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064113638 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060042985 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065878453 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058984236 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064341801 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058325182 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060861137 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063677443 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058642835 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063054156 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.070110747 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075528213 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065846202 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068576359 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060268502 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067591944 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074739305 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066420599 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06052991 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068709367 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.05834097 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077745316 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068400997 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067944614 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069475386 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060355522 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076133193 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063534241 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069170274 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074496348 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060698901 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065512546 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058946689 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074790008 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063544898 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058479652 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066880368 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066732267 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065041227 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070884101 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059148061 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06656146 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063954639 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062006054 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059680174 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059651665 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067127603 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074170707 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.058844582 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.061888161 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066305563 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066564332 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062636297 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070511561 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066451501 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05989213 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060357438 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062802962 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.204011171 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07231783 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061856712 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066480526 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066229879 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060900325 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068213163 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077776987 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070750778 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070724524 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060522671 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059823396 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079024123 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064698769 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064166748 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069159635 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070461509 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07354422 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069962012 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077664962 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061203736 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066207449 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07287613 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061568624 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060403591 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064237799 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062095014 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.06953618 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070053884 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.067583746 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061839326 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066726616 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.073348711 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060446875 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064155871 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.064137863 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.059763948 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069905237 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068003559 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071279144 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06070253 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058679752 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062638701 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068374402 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067174096 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068530628 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060471552 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065717616 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072713079 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06698938 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061938533 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.05857929 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062273325 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068087465 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063652301 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058865277 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063736318 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.063112138 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066359433 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068528452 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063790193 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058764311 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.076079589 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067608831 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068287069 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.06122542 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061080313 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059925454 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058774279 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070532527 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.059095122 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060892488 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063973805 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.061309559 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076823592 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067800031 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075214077 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059957255 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063821039 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058684012 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068882393 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063926439 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059678022 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069675619 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.058309154 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074385505 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070653226 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064673653 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058606634 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.064482902 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067118575 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074351526 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069230248 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068027845 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.063094109 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06898668 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060840153 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070376081 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058627033 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.057885708 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069831804 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068097603 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072006964 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059174489 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069609289 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061165046 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067974892 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067602451 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06117011 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061202754 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061049361 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068815591 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064066811 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069385985 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064312672 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076050608 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060208551 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07051535 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068245453 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070085095 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072954252 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07151701 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.067163248 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059843754 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066786187 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.06676004 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059618081 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063520864 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.061420521 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079457927 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059827967 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059565949 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072204228 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.064366374 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.05823892 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.064374521 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.204707819 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071209937 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061654702 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071129377 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063758108 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060579892 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064354071 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064452918 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058621573 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059181806 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059100592 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069264727 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063708967 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059605427 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078205685 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060888035 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.067832335 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070662274 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066050705 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.061053828 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058494928 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060431133 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072791535 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074700326 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062741181 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067941264 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060656201 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068797335 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058099239 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068557295 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06795546 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068089452 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058701692 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060180797 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074784379 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074966273 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064301523 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068945256 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068840826 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060587162 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080483164 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.06833892 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060242313 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069982049 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061627394 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058565306 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058405456 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060658192 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070701928 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058614467 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061408659 seconds)
  done (took 41.093824096 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096204124 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060497252 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059095294 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.05920581 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067099902 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060275964 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059460388 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059776287 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059711223 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061484776 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059113191 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061766188 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065436499 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.0717656 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067383104 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062632931 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059010358 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060035182 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058968896 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059665151 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065265409 seconds)
  done (took 2.788439477 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062609508 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062939391 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063507288 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063318627 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062387656 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.05919447 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063412731 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059399252 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063733947 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059602463 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063573745 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059160242 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059405265 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059425453 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059736547 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060762936 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063808753 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06262304 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.059204293 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063262448 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060762234 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062786876 seconds)
  done (took 2.790698004 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.060778138 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059444348 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067780964 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058602007 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058728938 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062212847 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058678698 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063384939 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063424795 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06337083 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067917188 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.05947899 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058258604 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.06448564 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058177223 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059714407 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.101451671 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059839116 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059909594 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.05845615 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061454901 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068525293 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058613403 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059073099 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063092442 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062338542 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.05865882 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061297801 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059809274 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063381654 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059739267 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058313758 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.067880445 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067426244 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06325793 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063474181 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060698347 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059665353 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058948462 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058810874 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067475071 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060247448 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058950458 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060080501 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067716674 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058556957 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058243807 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.067693279 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058355067 seconds)
  done (took 4.495561924 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069422313 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110823316 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064432946 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092492621 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071788622 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064854573 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064393662 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093119158 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059885789 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06115131 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072635278 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07312561 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06219296 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063272598 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065773956 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061478103 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062444964 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060856321 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.06432201 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061678895 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064119129 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.06579999 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071584754 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071854472 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06261834 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060663491 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061175881 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.06283929 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071781957 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064627659 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.0632407 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06344807 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072313644 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066640071 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061298217 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061837715 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072532557 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061874691 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06173038 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060297062 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061304373 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062620708 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.065881747 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.07275453 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06193481 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066060274 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062067388 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.05956694 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072099425 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061565473 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06539521 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072954404 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062626947 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062112199 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063883765 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072251279 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061585749 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060358123 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061976565 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071670928 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060053919 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062727049 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075279231 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061232377 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064902409 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.07275205 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066532735 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062466509 seconds)
  done (took 6.112936973 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067911634 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.094030563 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074099719 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074260265 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069634244 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069347398 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069339199 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069472551 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069331387 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072428008 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069149072 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.103960846 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065828484 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071379361 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069434437 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069237691 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069576031 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069232914 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069153044 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069254532 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069005733 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07424448 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069235898 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074247912 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071810557 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065682967 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069426372 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.06938843 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074581467 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069318436 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071737026 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069399287 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069465259 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074599851 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071640732 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069077638 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060126526 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06912133 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069549147 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069326472 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065895263 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07429735 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069226667 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06563321 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069402419 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069314615 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074733838 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.072151524 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071253742 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073044319 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069904026 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074995998 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069466357 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069992949 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074909487 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078334253 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074542656 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074917304 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069760349 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074700615 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074667116 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077333319 seconds)
  done (took 5.922908036 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07192041 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065476273 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.078043209 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059013632 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058938467 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068325058 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059239191 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058750805 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065867078 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.066134681 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067364509 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068504142 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070177377 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067219885 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068392444 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070303556 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068311917 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068431121 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065886004 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068344353 seconds)
  done (took 2.806119945 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073728199 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077705723 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064619762 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068086831 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064654658 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068503374 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063714796 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064623557 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065192471 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064749782 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069412102 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069294045 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065093964 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068473276 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.069206679 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068157557 seconds)
  done (took 2.542547472 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.063159894 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066758187 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065212185 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060440353 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062168825 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059480773 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06077044 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058669393 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061684294 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073300086 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060271148 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.063255964 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060796366 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059416848 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.05953903 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064254749 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062303879 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060131925 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060510587 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.064722953 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069214577 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062934406 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064394111 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061262081 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063673154 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070167668 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062586244 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063161798 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.06018396 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063090648 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061986679 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066788138 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062377595 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060408819 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059024901 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060249284 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060240901 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062683462 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062941597 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060425641 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.05867322 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065448745 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060464457 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061033896 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062426019 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062869241 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062001333 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.066059617 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060504378 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062583493 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060594675 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062114711 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060931851 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067651643 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06230365 seconds)
  done (took 4.899041386 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076221615 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064369765 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059264728 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058931471 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063937143 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064930785 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06425095 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064998667 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06527455 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059109795 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06518505 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064335773 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065535629 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064605374 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065652218 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065310034 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060281738 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066055135 seconds)
  done (took 2.631760821 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065540691 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065068721 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063921144 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061104976 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060980138 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065949873 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059649976 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061427792 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061816371 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062960674 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0626074 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061780886 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060807151 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060565138 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065252068 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061173931 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060510906 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.05982825 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060842896 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059571602 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065707899 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059305839 seconds)
  done (took 2.83324425 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086791365 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082630559 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.126145099 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078550946 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086902757 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070475421 seconds)
  done (took 1.998421484 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.092785225 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096657933 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063909778 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064536393 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068671152 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067808333 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067725415 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067281002 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071436822 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071424566 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06726424 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071166874 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070469666 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072719515 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068994964 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069061844 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067435724 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067067614 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064280381 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074853925 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067565869 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070758929 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067652976 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06720634 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067145558 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072673861 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070563909 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070847983 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066946567 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070860025 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068851965 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068030905 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070952179 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071010753 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064109794 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070462204 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06745668 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074389929 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069003229 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07230597 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063842932 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06869464 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070256551 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070660047 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070786304 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067367099 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070614216 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067419353 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067481775 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076150206 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069096093 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072556415 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068939715 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071305485 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070497397 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076192201 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071499834 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072668546 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069096634 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070963001 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072444688 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06953554 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072608593 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07122877 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069350444 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072841565 seconds)
  done (took 6.120908931 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102332672 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064720685 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067160849 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071095058 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072392429 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067281819 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067434552 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067406288 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067441636 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064929255 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102773895 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067824561 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072754479 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075716497 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067912405 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067490173 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067624688 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072732577 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064639563 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075874889 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06749122 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072098752 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072474368 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072197405 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071007723 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069474771 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067500637 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067449465 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06743405 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067037788 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070432784 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067089039 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07217882 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064373373 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072672248 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067243705 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066849951 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070277033 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067009377 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068910093 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072499043 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075048732 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067068055 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067180994 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070899703 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067354627 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067689437 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064355336 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067535051 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065106284 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070858043 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071001172 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071068374 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072676872 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067297991 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067451543 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067406554 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067407722 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067444416 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069356521 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072806924 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067559594 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076376774 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067549639 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067621448 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072663335 seconds)
  done (took 6.120174672 seconds)
done (took 126.999907619 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.249775457 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.208377891 seconds)
  done (took 1.911942292 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072625593 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163846626 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072917754 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072570207 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106632072 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105458413 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073899773 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070417413 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072674564 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070428965 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.136772747 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073727507 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.06987217 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070083588 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070128579 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070008461 seconds)
  done (took 2.847783274 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.10567191 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184233785 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.102982011 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.069728236 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151417544 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076378374 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071950022 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076780294 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076764163 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069650672 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.105975791 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081766808 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074063115 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074392307 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069873997 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075053195 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076329191 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075680474 seconds)
  done (took 3.097898471 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101247533 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089780628 seconds)
  done (took 1.675043981 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.154965588 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.103296016 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142725876 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.343542085 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137320803 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.137227046 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142173054 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.136663047 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.108130842 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131545523 seconds)
  done (took 3.0145641 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103618658 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102993797 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.306647819 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102862638 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082040763 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077004848 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074618203 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079958115 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073636107 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074854732 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119716609 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072837473 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070264736 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121701292 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096432532 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105058823 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068778856 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076148384 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077476932 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068814876 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073623497 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077730344 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.174416076 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076444695 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097316905 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073083562 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075129032 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.071911866 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072191103 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076215877 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076875812 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.097183589 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076005745 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080244069 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074746436 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094575853 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.06929548 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096255392 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.07221396 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070537426 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072857224 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077033594 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070108973 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076078545 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073011073 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075892025 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078077887 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.06877592 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072982193 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072066375 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070321152 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074389238 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073695208 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075148926 seconds)
  done (took 6.155664021 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105584593 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106203047 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068736444 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.111609251 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105555816 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069715528 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105115846 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100738061 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108946377 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069520018 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068569929 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068456289 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074965061 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078473351 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113329439 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.106063185 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069647672 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068476676 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.105854838 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107349315 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068541073 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.100995184 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.098578224 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104720675 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066494622 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067742653 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066373505 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066812932 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071817012 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.073055134 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067122834 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073800989 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078738771 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073416607 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06608914 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066619862 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066340639 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07337433 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07445241 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074735766 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072649836 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066542374 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066616436 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067149307 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0691448 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067091446 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073397284 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073739879 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07327666 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066758041 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067420012 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066381421 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066907842 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073389355 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072181936 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074150401 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07379367 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066480757 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067028907 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068403649 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074911396 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074655055 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074213861 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067989693 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074922405 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066644939 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075728129 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078770503 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067116927 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067204312 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066661289 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066635036 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067151484 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072657329 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072752923 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06767131 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066961943 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066838885 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075107877 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073006329 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066581085 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072305331 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066293267 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066764517 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067365359 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.0670411 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.071967692 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.07364615 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067381014 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066743149 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067173254 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066466544 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065979541 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071687129 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073101802 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073801775 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072576069 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067084334 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072910728 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072506588 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067756676 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.07245465 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066715141 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06648141 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066476787 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071986431 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.071271557 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.073175482 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066118132 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065470732 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07136 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073533804 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065710099 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070583483 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073696611 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.071681981 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.065184461 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07456214 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065576229 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07342729 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065887044 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073551313 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066034308 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.071216319 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065581767 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065266238 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.065772237 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.071607058 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066317487 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065849459 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065812653 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.065923213 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.071542723 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074605388 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066580282 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.071806711 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.071347428 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066249385 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.071356586 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065580302 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.072647857 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.065948397 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066112451 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065247814 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.073954864 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065748952 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.064955038 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.065329475 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.071806626 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.065477574 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.072099113 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.069410459 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.0647836 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.073748057 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.072270858 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.069601824 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.071920719 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.065151011 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06484407 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.065228065 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067940745 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076243294 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074963421 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067363005 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065525715 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071579719 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.0764627 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.065764555 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075200869 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073889763 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.073029083 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066299886 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066412447 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077173181 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074420628 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.073819762 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.070941678 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.070695604 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068755259 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07211025 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.071685361 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06576849 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078628166 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06496246 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.075675938 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.070624024 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071004366 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07209211 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.072933276 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076788458 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074564652 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.075989772 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067328798 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067231254 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072026771 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.065883751 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067555513 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072755055 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.065787717 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.0668875 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076345815 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067019717 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075129353 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065975969 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.072309215 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066294764 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06649427 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079375628 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066316985 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067129084 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072898668 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067956527 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075527897 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.073962313 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07399377 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065880973 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067827613 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072324822 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.0753533 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065232542 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06706471 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066703116 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071516735 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.070720907 seconds)
  done (took 17.688518196 seconds)
done (took 37.885349122 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172892485 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.118055221 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.223281121 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.20663396 seconds)
  done (took 2.352654699 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.103855863 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067430989 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081811902 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091341257 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066421823 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.07672621 seconds)
  done (took 2.052238798 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203084064 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.177917313 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.248151212 seconds)
  done (took 2.186027105 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.375472277 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150346221 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219369458 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.506554812 seconds)
  done (took 2.91273088 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.10978491 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.0988244 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.076637677 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.110333706 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.083950809 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.061616861 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.132446697 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068903087 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.098624586 seconds)
  done (took 2.464921011 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.137922964 seconds)
done (took 13.817167645 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.121540437 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.471070693 seconds)
    (3/341) benchmarking ("sort", BigInt, false)...
    done (took 0.301987904 seconds)
    (4/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.218199084 seconds)
    (5/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068241435 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.157364463 seconds)
    (7/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.225918656 seconds)
    (8/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.277143236 seconds)
    (9/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.171833954 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141914509 seconds)
    (11/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.072925823 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.090200054 seconds)
    (13/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.077278978 seconds)
    (14/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.09308886 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074457209 seconds)
    (16/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.18982148 seconds)
    (17/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.222158172 seconds)
    (18/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.117268775 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076359773 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077494672 seconds)
    (21/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074379542 seconds)
    (22/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073520239 seconds)
    (23/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.205368317 seconds)
    (24/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.077275632 seconds)
    (25/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.184453778 seconds)
    (26/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068394959 seconds)
    (27/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.183618782 seconds)
    (28/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.095666402 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074173408 seconds)
    (30/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.077103395 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.121138674 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.180057292 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129209597 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125337828 seconds)
    (35/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.197972047 seconds)
    (36/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.177147163 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.090936163 seconds)
    (38/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.164540127 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075423586 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.071687096 seconds)
    (41/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.150238772 seconds)
    (42/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065025695 seconds)
    (43/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.132714862 seconds)
    (44/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.071868301 seconds)
    (45/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.064630256 seconds)
    (46/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.24337402 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.077486528 seconds)
    (48/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.153539509 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072983454 seconds)
    (50/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.200674186 seconds)
    (51/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.221527924 seconds)
    (52/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072291616 seconds)
    (53/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.111977948 seconds)
    (54/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.065903389 seconds)
    (55/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.193187336 seconds)
    (56/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.147753108 seconds)
    (57/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.201175689 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.074554429 seconds)
    (59/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.196230475 seconds)
    (60/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.117102057 seconds)
    (61/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.217087403 seconds)
    (62/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.161564285 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092472337 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146666579 seconds)
    (65/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084451004 seconds)
    (66/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.140262895 seconds)
    (67/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.237784821 seconds)
    (68/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.086440433 seconds)
    (69/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.17487369 seconds)
    (70/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.070774318 seconds)
    (71/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065512882 seconds)
    (72/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.23155353 seconds)
    (73/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.06391498 seconds)
    (74/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.307741607 seconds)
    (75/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.079447499 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073619266 seconds)
    (77/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.072116924 seconds)
    (78/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073132522 seconds)
    (79/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093685607 seconds)
    (80/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.072062469 seconds)
    (81/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.17087936 seconds)
    (82/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.198438666 seconds)
    (83/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064540128 seconds)
    (84/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.081512446 seconds)
    (85/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152358571 seconds)
    (86/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068344481 seconds)
    (87/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.141279188 seconds)
    (88/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.066254073 seconds)
    (89/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.130428196 seconds)
    (90/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072961184 seconds)
    (91/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.071647174 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064677871 seconds)
    (93/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.166764663 seconds)
    (94/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.164123473 seconds)
    (95/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.219017883 seconds)
    (96/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.144291679 seconds)
    (97/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.141208463 seconds)
    (98/341) benchmarking ("sort", Int8, false)...
    done (took 0.151887843 seconds)
    (99/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.075072098 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08592567 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.083454073 seconds)
    (102/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.178698423 seconds)
    (103/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.06841577 seconds)
    (104/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.234632704 seconds)
    (105/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.07206546 seconds)
    (106/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064166949 seconds)
    (107/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.143382692 seconds)
    (108/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.136814395 seconds)
    (109/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.064647864 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.086093631 seconds)
    (111/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071106943 seconds)
    (112/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091831197 seconds)
    (113/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153386563 seconds)
    (114/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072231215 seconds)
    (115/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067059883 seconds)
    (116/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.064312676 seconds)
    (117/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.144980608 seconds)
    (118/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064790092 seconds)
    (119/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.071644247 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067690318 seconds)
    (121/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074597638 seconds)
    (122/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.06483459 seconds)
    (123/341) benchmarking ("sort", Float64, false)...
    done (took 0.135295664 seconds)
    (124/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.197034114 seconds)
    (125/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072467005 seconds)
    (126/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072412926 seconds)
    (127/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073317509 seconds)
    (128/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074665013 seconds)
    (129/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.090591456 seconds)
    (130/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070954036 seconds)
    (131/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071810817 seconds)
    (132/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.064831902 seconds)
    (133/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073734262 seconds)
    (134/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.075501051 seconds)
    (135/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.16824584 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089464577 seconds)
    (137/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066005992 seconds)
    (138/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066859038 seconds)
    (139/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.075579526 seconds)
    (140/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073833003 seconds)
    (141/341) benchmarking ("sort", Bool, false)...
    done (took 0.14219987 seconds)
    (142/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.081190936 seconds)
    (143/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.068130833 seconds)
    (144/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.064109197 seconds)
    (145/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063099342 seconds)
    (146/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064172983 seconds)
    (147/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071571098 seconds)
    (148/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072943586 seconds)
    (149/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071085512 seconds)
    (150/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.0732485 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.08924248 seconds)
    (152/341) benchmarking ("sort", Int64, false)...
    done (took 0.065456336 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064158847 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.142115354 seconds)
    (155/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.226135392 seconds)
    (156/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064557738 seconds)
    (157/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.193953676 seconds)
    (158/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.162936284 seconds)
    (159/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073337571 seconds)
    (160/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.070532492 seconds)
    (161/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153455003 seconds)
    (162/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.082250679 seconds)
    (163/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.06858772 seconds)
    (164/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064583189 seconds)
    (165/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077427848 seconds)
    (166/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.064384059 seconds)
    (167/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063552917 seconds)
    (168/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.161938529 seconds)
    (169/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.136730332 seconds)
    (170/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.088165459 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084277463 seconds)
    (172/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.186958648 seconds)
    (173/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.063717924 seconds)
    (174/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072609617 seconds)
    (175/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.063981128 seconds)
    (176/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.136422756 seconds)
    (177/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062330191 seconds)
    (178/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065073332 seconds)
    (179/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.148991868 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.129239196 seconds)
    (181/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.086611835 seconds)
    (182/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.063229321 seconds)
    (183/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.143223978 seconds)
    (184/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.070741038 seconds)
    (185/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.318978698 seconds)
    (186/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066536128 seconds)
    (187/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.066474687 seconds)
    (188/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065482351 seconds)
    (189/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.067062116 seconds)
    (190/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.08190575 seconds)
    (191/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.065537402 seconds)
    (192/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070497822 seconds)
    (193/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173362667 seconds)
    (194/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074527406 seconds)
    (195/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.163771531 seconds)
    (196/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064270516 seconds)
    (197/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.067694475 seconds)
    (198/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064960202 seconds)
    (199/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062830616 seconds)
    (200/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.17015301 seconds)
    (201/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.065090814 seconds)
    (202/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064159983 seconds)
    (203/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.064487638 seconds)
    (204/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.064857464 seconds)
    (205/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.064229408 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.085636642 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083279473 seconds)
    (208/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072206732 seconds)
    (209/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.066737319 seconds)
    (210/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071361595 seconds)
    (211/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.064510364 seconds)
    (212/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.141201196 seconds)
    (213/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064406583 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092910951 seconds)
    (215/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080642507 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.081831692 seconds)
    (217/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.151686578 seconds)
    (218/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.073292368 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.124288558 seconds)
    (220/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.068948584 seconds)
    (221/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.162062568 seconds)
    (222/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066441374 seconds)
    (223/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071480285 seconds)
    (224/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.082789305 seconds)
    (225/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.062572707 seconds)
    (226/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.080530591 seconds)
    (227/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168591243 seconds)
    (228/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.064081634 seconds)
    (229/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.06760167 seconds)
    (230/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064270416 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.092317333 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076308863 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074516676 seconds)
    (234/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064913065 seconds)
    (235/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065615662 seconds)
    (236/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.064228126 seconds)
    (237/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064975926 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06423441 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150009071 seconds)
    (240/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.064460275 seconds)
    (241/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071464359 seconds)
    (242/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075288628 seconds)
    (243/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073272054 seconds)
    (244/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063958581 seconds)
    (245/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.0662997 seconds)
    (246/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.063199651 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.063249825 seconds)
    (248/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.226656341 seconds)
    (249/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071127469 seconds)
    (250/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067130178 seconds)
    (251/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.063936743 seconds)
    (252/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190208866 seconds)
    (253/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064689609 seconds)
    (254/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065360137 seconds)
    (255/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066028219 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062750144 seconds)
    (257/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066234873 seconds)
    (258/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.063450281 seconds)
    (259/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.064094931 seconds)
    (260/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075264897 seconds)
    (261/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.074507274 seconds)
    (262/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065596306 seconds)
    (263/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.063817721 seconds)
    (264/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.070787671 seconds)
    (265/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063426106 seconds)
    (266/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065339682 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.087572556 seconds)
    (268/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.06218139 seconds)
    (269/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076550704 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.083190564 seconds)
    (271/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064994252 seconds)
    (272/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.06530934 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.06492636 seconds)
    (274/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.062842093 seconds)
    (275/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063884439 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063587368 seconds)
    (277/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.064854396 seconds)
    (278/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064245201 seconds)
    (279/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.064240388 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.062459162 seconds)
    (281/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.083106755 seconds)
    (282/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066089754 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.131263014 seconds)
    (284/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.150769203 seconds)
    (285/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065534799 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148513149 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.063782707 seconds)
    (288/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064649856 seconds)
    (289/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.064244197 seconds)
    (290/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.064449229 seconds)
    (291/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064213317 seconds)
    (292/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075699155 seconds)
    (293/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.076226482 seconds)
    (294/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.064117169 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120889706 seconds)
    (296/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.065772287 seconds)
    (297/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.063858432 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109557925 seconds)
    (299/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.063562653 seconds)
    (300/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064671678 seconds)
    (301/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064638445 seconds)
    (302/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089201663 seconds)
    (303/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.067440455 seconds)
    (304/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.079671317 seconds)
    (305/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062704086 seconds)
    (306/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191424086 seconds)
    (307/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072733003 seconds)
    (308/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065295194 seconds)
    (309/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.065160109 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063461419 seconds)
    (311/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.063825505 seconds)
    (312/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.065352011 seconds)
    (313/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.064852491 seconds)
    (314/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.070440405 seconds)
    (315/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.069306894 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.086127526 seconds)
    (317/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.07448309 seconds)
    (318/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.174408291 seconds)
    (319/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.071721646 seconds)
    (320/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.244019597 seconds)
    (321/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.066443478 seconds)
    (322/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.06968512 seconds)
    (323/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065595978 seconds)
    (324/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065235492 seconds)
    (325/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.065836934 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.065763498 seconds)
    (327/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.066548704 seconds)
    (328/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.064918644 seconds)
    (329/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065470479 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.090128256 seconds)
    (331/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064796601 seconds)
    (332/341) benchmarking ("sort", Float32, false)...
    done (took 0.137771195 seconds)
    (333/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.068108501 seconds)
    (334/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065211957 seconds)
    (335/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.064459734 seconds)
    (336/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065080742 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121788437 seconds)
    (338/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.066728983 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.083838231 seconds)
    (340/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.064205535 seconds)
    (341/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.063905714 seconds)
  done (took 36.534697804 seconds)
done (took 38.114710851 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089848406 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078292414 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076730043 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073507014 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076985274 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075433494 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076409592 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074327691 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.075822044 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074809013 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.075188081 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063523501 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071952398 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078888865 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07302265 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079368527 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076166601 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079383653 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064437356 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078302658 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.091251154 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.075823668 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072330837 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.07742139 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.06411224 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073560483 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087157692 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084943356 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070216288 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.072821547 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071215315 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082187011 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072256193 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070350024 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073424558 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069860876 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073186171 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.07086572 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086759903 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069820956 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064565631 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076212109 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071478537 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072347762 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.07269683 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.0763551 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.06948643 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.07763856 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064004188 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075280274 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087465794 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068615526 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070553426 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072756922 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069252044 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073159216 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071234115 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075419248 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069018365 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075770487 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074951514 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07254677 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063698019 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072461132 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071233566 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07174907 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062687521 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068921801 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064022709 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063406723 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062669554 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072773262 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070759404 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068742206 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062828299 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063475982 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.062862197 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076146316 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069775796 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073563423 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063928566 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068943459 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068594328 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064057418 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068690527 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075373419 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.062652384 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064081644 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065552636 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078070147 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.069878041 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063593855 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075095748 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068499973 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068399071 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.063717697 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.062468116 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068463917 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.071472235 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.063496556 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062909324 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068705261 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.06862551 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072301528 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.063898841 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068608154 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.0685785 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062403487 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.072669847 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070510669 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072360985 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076505061 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07254051 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075659179 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064202026 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06249169 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073141002 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063826574 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068625771 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071146643 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069042205 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071921728 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063803726 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062576457 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068315248 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.06989448 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064193395 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.064388086 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063842978 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073091625 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07072855 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062387449 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063780323 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072565441 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072407453 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062581057 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062391399 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072582418 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063891779 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.0691066 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.06886508 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072466778 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063475512 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063346422 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062153417 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062132423 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062871525 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.067996173 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07049415 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06357493 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071698142 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.21464295 seconds)
done (took 12.545667205 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.065173867 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105822575 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.078075276 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080308278 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077137585 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065389489 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067960567 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082536895 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067702106 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088581577 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089559202 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085659924 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.095005135 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062884287 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064198862 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06502751 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062727392 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076081104 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081151448 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087759995 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.100570623 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064290981 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080536257 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08419693 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078582421 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082019506 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065557808 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065333173 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067892671 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082867964 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090446992 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064053188 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065425994 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081924861 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.079264783 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.072393913 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065519514 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070445696 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067934682 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064266087 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066266912 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082177769 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070570229 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071101214 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065518011 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065237992 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065026419 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071109025 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081602201 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.07014792 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076286352 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.083213296 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066020811 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064812233 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062943359 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071172251 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06443007 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065116251 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065174908 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064199614 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064578402 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067196074 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069289108 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070692696 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067845045 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070177332 seconds)
  done (took 6.478237407 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.080388939 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.090095491 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078946053 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.07930889 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064075443 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064952522 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065314858 seconds)
  done (took 2.208854362 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065286097 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072313089 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076429577 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076445373 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.086193489 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.073647469 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065239077 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096355514 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064042291 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072810077 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.079844985 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077818205 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068186874 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076969254 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065206654 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.076190706 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065018269 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072171227 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072484501 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07834578 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069111329 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094496958 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078261736 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065337992 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.078221548 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071820647 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066638266 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.06515551 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065439388 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064765729 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064139048 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.086746448 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.070448689 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.076988312 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065153456 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063798185 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.069209224 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065005552 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.06860403 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07360147 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.068023012 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064378274 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064780974 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064337767 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.0656099 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068891146 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065242581 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064483951 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064066895 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.072419661 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06350252 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.070804148 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066841704 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069430075 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.06903781 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068695205 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071935147 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064571574 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071669932 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070640927 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064470075 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076871897 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075662458 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067930227 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076150419 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072846817 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070498523 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.068223984 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.064323494 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.064190056 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064741968 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076136271 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.06783637 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066720959 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065137943 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069439163 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068256086 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.080142784 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079676719 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.07778876 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066952047 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064483147 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068433656 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.079597945 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069282293 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064238195 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065896993 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063942056 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069781344 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064732901 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069296918 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064508907 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.071163657 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066793865 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066858188 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072116722 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064734792 seconds)
  done (took 8.490595447 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067346555 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066515463 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065456624 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065657876 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065977848 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065573861 seconds)
  done (took 2.113476946 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087339708 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064567748 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076317173 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.064798762 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087329421 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.07191012 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071437873 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067212322 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081359024 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075513892 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071521399 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07389855 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074304858 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066938197 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.071126645 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065895134 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.0716615 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068010266 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074960929 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06717039 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081354897 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.06715944 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067174831 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076884882 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068115673 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066099152 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065888126 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.074777307 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074770368 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066493395 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066405246 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067985466 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073097394 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066659113 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.070944381 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.073718429 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064825537 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070123359 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067422915 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.0679345 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.07404913 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066608969 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.067191821 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070083153 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066450041 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073316077 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070450095 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.0685506 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.07057744 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.069812134 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070271931 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065578918 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067835406 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070363324 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073531217 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066424361 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070220405 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070827906 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066402244 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073615285 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06492173 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068360058 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066466066 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.06751407 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069638903 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070622193 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073330798 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066594423 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066921891 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069666244 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070356804 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065097622 seconds)
  done (took 6.741848461 seconds)
done (took 27.69635685 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542541928 seconds)
  done (took 2.203893067 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.898417641 seconds)
  done (took 2.599461662 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.084113813 seconds)
  done (took 9.791857699 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.332453158 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.398299348 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.726380377 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.130197513 seconds)
  done (took 3.324607551 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.746192596 seconds)
  done (took 2.457536053 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227158242 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217748754 seconds)
  done (took 2.16283837 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.344465273 seconds)
  done (took 2.047518858 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.134835221 seconds)
  done (took 2.839446078 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.23118734 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159901977 seconds)
  done (took 2.103259234 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.530612839 seconds)
  done (took 2.235849637 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.231935612 seconds)
  done (took 5.946412611 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.229603193 seconds)
  done (took 1.970486572 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.226732235 seconds)
  done (took 1.935610871 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.011830612 seconds)
  done (took 3.7116184 seconds)
done (took 47.039365668 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.081658426 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084032002 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08409644 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079024151 seconds)
  done (took 2.003542753 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071889375 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.067998242 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070934319 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071198301 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068859434 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.069808819 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070653846 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067153164 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.068874852 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.067742676 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066349806 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068069753 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070623018 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067718148 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070750135 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071990784 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067929883 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068224211 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070284742 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.068014121 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070610045 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068057978 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066315256 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067882232 seconds)
  done (took 3.359225608 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076214331 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070155039 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073565159 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.06882503 seconds)
  done (took 1.997791742 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074553971 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074134485 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082944336 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087993664 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073858733 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.075080761 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081399431 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.082016258 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06328952 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084578745 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06616181 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064663324 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064997991 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083829833 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08108189 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060388962 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06204592 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074943155 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.073887217 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076713577 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066568743 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.06360035 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074079981 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074929153 seconds)
  done (took 3.474936662 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079814997 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063271943 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078488931 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088731032 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089589506 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063131372 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076422456 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090653189 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125206326 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063376538 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069711209 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063524898 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102082407 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063578004 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.07826138 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.107200275 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109483576 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067725914 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096782811 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063445336 seconds)
  done (took 3.355645807 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073614008 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067266 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.06888455 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063600099 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074582094 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070793241 seconds)
  done (took 2.138187111 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066400932 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.065534141 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.06776647 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070121472 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065968407 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065771374 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064928863 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063944288 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064019548 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064566569 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064820953 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.06516245 seconds)
  done (took 2.500802482 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.145105886 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067038413 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068205363 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063965865 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.06564834 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064667558 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078076162 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066516721 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.081182587 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064611464 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064467689 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067116386 seconds)
  done (took 2.610812871 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101974208 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108128546 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142346013 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114562453 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114185944 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094627165 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123133112 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092916082 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157144685 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135320159 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114802019 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091627837 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084101052 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067476587 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097912042 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11603088 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134652028 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070690455 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110760361 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161579899 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128882528 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.132256975 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146045314 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114219269 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088122203 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145429041 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094795367 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099691579 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121732962 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123731093 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117067196 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.094978549 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069158894 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068730891 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145859745 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10048067 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117655692 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090644846 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102866019 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085966323 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105216909 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067168913 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.082785674 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110283576 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082547265 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128594235 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085660262 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113098107 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078795732 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134915608 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120926661 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096135079 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082854222 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101682168 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.28545697 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110028442 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13201619 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104664453 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080685171 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116226835 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101042183 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097952198 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105366024 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077572144 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.174387111 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086165469 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109010022 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109393945 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091522141 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091980751 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104501118 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132672484 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122509866 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.122407765 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13512231 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092881782 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119071992 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.09770343 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126642112 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102536753 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070782532 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.118871273 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.127408395 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096623702 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098904187 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127361041 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090304172 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075232821 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.097242919 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.116406606 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077948203 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.110140205 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078755316 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106312893 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131057354 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094637929 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109490139 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114489804 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075887077 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152396123 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106299119 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070985838 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114717619 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111884561 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153427761 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092290042 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074049004 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096169725 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.255642661 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.147401588 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105396033 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077981891 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107827192 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137595126 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093050736 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166774049 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093361158 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138061188 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109635156 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084562104 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073089207 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088692398 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109727762 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105073854 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109504715 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087718362 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081361277 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084758029 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108641037 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08993112 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078501422 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111119318 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098860475 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.07298061 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086342608 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076717316 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13981892 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076253444 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135800418 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123328557 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076744766 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103688357 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095806686 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106058311 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095351358 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114125821 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13932753 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114034082 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087516699 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.092588977 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106398873 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141930195 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124677568 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090169416 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074677852 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098013535 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109911359 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09536685 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12354359 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093644214 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106747044 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100419195 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139766474 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141579196 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097771963 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097520586 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102602114 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.27813789 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074812564 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153493989 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102060387 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115467056 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082091263 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138602404 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111562893 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087741905 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084992098 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097793615 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101868351 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104458539 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140511926 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.093363147 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070293193 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090831819 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141049011 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074080645 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107286006 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088162377 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090510067 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116203843 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090925693 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079157751 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.06630261 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124381129 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156849031 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068474444 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112614432 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.10902617 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10109679 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.119613172 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.06783263 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116854487 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137175949 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115473013 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139094026 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14512006 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114601706 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116056357 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111978381 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103558061 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077437594 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123619078 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.132475957 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094208518 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091060374 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133988839 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115682758 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134632163 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.112156811 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109917373 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.10093687 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.262214272 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101024607 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099892854 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142129758 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119839093 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121640943 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083687845 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103682099 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115559809 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133029046 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079473759 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138953959 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081401333 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115585073 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.074828628 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121503114 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077357559 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108868734 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077635892 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097109043 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067895484 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.071931313 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138227789 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.109383008 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103136393 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097083143 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.135692566 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133507726 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07895275 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105509834 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112681712 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099018925 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113881291 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106614876 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086739675 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09331599 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106843395 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08277982 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079514469 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11284607 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092407085 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124670883 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082276575 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072990058 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138791184 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102569959 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093187585 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076132478 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105678608 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119305933 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090862368 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084977259 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112363328 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102425858 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139928406 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088502611 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095723796 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121645194 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077792663 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089867743 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067239815 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.082706544 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07324176 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.284334135 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074436672 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113693851 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.066915763 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127381578 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084792176 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09066544 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099906022 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108792407 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125158719 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092500254 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137868412 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087404771 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115350346 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105483493 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092017583 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086052296 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101125672 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097944064 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.119465942 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.094080139 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119659767 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140209079 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101835235 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139616878 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089220758 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119368046 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104657075 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122427746 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110944102 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145701939 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136225676 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110757398 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109372603 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07301657 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092682913 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102844068 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109044957 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172724881 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123390525 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070451275 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103735645 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092098682 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105403626 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10286569 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080113224 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144610139 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099964306 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.090530892 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111256007 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.0896576 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101142386 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073431667 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092302141 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.097166033 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090819493 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.250220518 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113223588 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125469641 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111001005 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140240722 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097382577 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090435009 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.116512463 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108776758 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108430319 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084005687 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084527915 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135078923 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115793168 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125368283 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097774039 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106627468 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109446019 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098170526 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122542423 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105557955 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.124052913 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07841593 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074156667 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066588946 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.069977593 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120448485 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106642613 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110099158 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096113355 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070284511 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100966054 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104121943 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069965923 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087357154 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092348564 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092868913 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089395009 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104438798 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111573028 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089137724 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101668829 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096994633 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144775662 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097978292 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086440913 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14214434 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148529293 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086782897 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091460629 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069489322 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077291351 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111117028 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147772802 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148932751 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07513422 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083988012 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.082444019 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083755714 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.068784435 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.237328937 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090140377 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102578754 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096880329 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110112986 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102203519 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073397043 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100904807 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096969548 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090104264 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101629933 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116024863 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122097739 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.138314558 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108290128 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10447001 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074036482 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.078517897 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073563297 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077102625 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09935592 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076746975 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074101643 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139858271 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089312305 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101682677 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106533215 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086181548 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073051439 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133507011 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067144524 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132623986 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069241824 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079648665 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080678961 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077294187 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092239548 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136952213 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107756994 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110928605 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10457475 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102365176 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139201042 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154751283 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078336578 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141964531 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074226814 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073600275 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073458971 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111640823 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087930053 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112432623 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139191778 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088979024 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101452202 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075141563 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141098933 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096066756 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101541498 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08338987 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076138129 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138433945 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.234650077 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078514355 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088001633 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109097099 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07060602 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10169851 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082381095 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077476919 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139871939 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628520122 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088142857 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.073574674 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093360827 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.13903417 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124630737 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092307308 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105821402 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116076465 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097502529 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092854763 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104810372 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.179624428 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071737849 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09204412 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101186183 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095640247 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099159597 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.095793904 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.083872578 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090143227 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084889492 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077574282 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10573758 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087389308 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094807423 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104768292 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081086157 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085390284 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128599196 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101665945 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080390873 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086611527 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103564434 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086700828 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098754842 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067509259 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111663785 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088745416 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115230801 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.093118933 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104650611 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125398496 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087545797 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135886495 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.105412537 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120646267 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08519051 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076315024 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123786223 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.08620524 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075355355 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145505331 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.250754891 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091649608 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102243703 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094931817 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111242989 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114898496 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109341093 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095097271 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076991777 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097731926 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.100775871 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083537191 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076439735 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072672476 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074236602 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105243322 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083350562 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080572311 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111568349 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086692583 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100631795 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.098158708 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119514539 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080662481 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098494125 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106906168 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089527155 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107409918 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098014895 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125944627 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17200127 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123500257 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126435629 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132961637 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07527109 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073780632 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066496063 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112896944 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0770903 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087113185 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078976751 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131900659 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.079895312 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109867406 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.22714379 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078111993 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091200505 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094249849 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.067551353 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080983695 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105515542 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084853181 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078184076 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116915176 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08082956 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126004588 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109453487 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098060821 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093078018 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078978622 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112815307 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102453171 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126507297 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0915839 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.0726486 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110063017 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099479679 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13305042 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.070521092 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077158597 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123997981 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09875009 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125845582 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076289371 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142671402 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136273579 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095081408 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128322506 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06770876 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079654198 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085107622 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.120936288 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08069532 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105487035 seconds)
  done (took 66.321052254 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.168300446 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.153271372 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.094790004 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.115310873 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199258759 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.20509694 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.134008729 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.104173328 seconds)
  done (took 3.108831248 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.067155607 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081552956 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079241295 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.203773363 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.094247733 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065296262 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071074567 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080235988 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065105077 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06471482 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099275046 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065684171 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065376609 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366879842 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064132782 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070419206 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065434457 seconds)
  done (took 3.536455384 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.33029703 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.003627828 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.243144949 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.296692871 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.143593059 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553222472 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074246514 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080598818 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.691984069 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368645898 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.137466973 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086011218 seconds)
  done (took 19.882376464 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.07449006 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076682127 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076310435 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073262884 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072536265 seconds)
  done (took 2.243019886 seconds)
done (took 118.259532831 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081257489 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.169084705 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.065738516 seconds)
  done (took 2.140346353 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.079896576 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078598458 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.078593582 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076550448 seconds)
  done (took 2.191855763 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.072791402 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.07455222 seconds)
  done (took 2.017972075 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.22093079 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.17297227 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087447924 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.079766459 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077325626 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.077847195 seconds)
  done (took 2.119197997 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069089511 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.068892463 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069829752 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069967607 seconds)
  done (took 2.148494613 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066189579 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064150343 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.066980042 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069109688 seconds)
  done (took 2.137057125 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082650501 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08405647 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113729709 seconds)
  done (took 2.151276848 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.080726996 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080753024 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.075655195 seconds)
  done (took 2.114283693 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.10629867 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094772013 seconds)
  done (took 2.073430758 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.078142203 seconds)
  done (took 1.956347128 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.08751255 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095278946 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136665781 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.104169764 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.136817409 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123716092 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074999231 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075576317 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07179709 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070352263 seconds)
  done (took 2.849990121 seconds)
done (took 26.332638205 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076441721 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.365418501 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357277383 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084895045 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.668876739 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354847977 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.006803432 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08905786 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098611995 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.065846051 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082502612 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.646722123 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.998488017 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.319748773 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.984861103 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.317950815 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.649673746 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066489871 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065340345 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066108901 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.993507158 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065539163 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066087356 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066323067 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.649324942 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.371741214 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066971799 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.31831938 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065662108 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069777671 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355332309 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067591321 seconds)
  done (took 16.370065288 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.06769638 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.119902783 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070206157 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08173773 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.067880872 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.066919577 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069045781 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06661152 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109962213 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06639754 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083269987 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065412973 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.069597739 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067433981 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.085573671 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.065867828 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069126755 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069670771 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066418568 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067018384 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084605351 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065917457 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067052183 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066499834 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066510094 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.07897305 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067070022 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066149916 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06618938 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069656561 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070451478 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06723507 seconds)
  done (took 4.220807813 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.118413479 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123686518 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070514306 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106792374 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115397975 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068619004 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.148446125 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088982232 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112898708 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066158155 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083342111 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06584107 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101573251 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067227396 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086246946 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066082658 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068747366 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066559947 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06584623 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067083631 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085227708 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066351322 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066444097 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06673254 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066730116 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081547624 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066939947 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066154826 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066583614 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070055764 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071330224 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067614733 seconds)
  done (took 4.49267522 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067610161 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069211769 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.07527269 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.07855563 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.063938791 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066410177 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067612018 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064228822 seconds)
  done (took 2.447983765 seconds)
done (took 29.4226805 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077081309 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065768128 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068910314 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085543632 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071419803 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.06779606 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062558345 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072414321 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069119285 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069470964 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071092982 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065095985 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.0675256 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062440211 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069721726 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063667258 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070592699 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068197859 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.068659977 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.069830754 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066508702 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069461935 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072623427 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068566831 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.06830978 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.068602031 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.072951376 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069874578 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064293091 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067112385 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.065942094 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078668622 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.070170722 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070352578 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.063863832 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.063990004 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068197073 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066054997 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070082184 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073226102 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.06604343 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073079163 seconds)
  done (took 4.7635362 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.085439123 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091427598 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084307844 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079294228 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.104966652 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079174549 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088717299 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076963683 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075681485 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.087833018 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071203914 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076677933 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078578158 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073215488 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.075714624 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.071830844 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077052913 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071088508 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.075693092 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.075638471 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089152725 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068818608 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.076734693 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077343486 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071625613 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.076956956 seconds)
  done (took 3.95628481 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070979775 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086157837 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090242085 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.138191468 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107224947 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080333442 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.079689675 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091409629 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.098563021 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.065587825 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070042186 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091633707 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094564446 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073381943 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104048865 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084064707 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078018366 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067598186 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072708273 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100498806 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088688732 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084490125 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098737035 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.085847136 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065146201 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075178628 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.072980802 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08179537 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073401798 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078112335 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070051966 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069562402 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.06666379 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078246411 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.072285869 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.063743712 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087691249 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078179792 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.080279841 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.103849099 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.075518921 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.067149058 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.093265774 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13102365 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.06554101 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068229856 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.069945084 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.07817561 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067279305 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.0955465 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082206236 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065579441 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.084939311 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067339333 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067081416 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081912248 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067680405 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.067558885 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.117811693 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.071452994 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.086843065 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.070906887 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.086619991 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.065393905 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077024393 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067168801 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067036883 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.064268587 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.099934548 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.072846096 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.116572917 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.066547548 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06347938 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.077299557 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.076851664 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072353654 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065003124 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085202645 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077421478 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069340003 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.076336949 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068278414 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.068664168 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100729238 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064167981 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063349842 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.063415309 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068108072 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.068767792 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.065959777 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.078708841 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065046434 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.068625543 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081337308 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.065145594 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066406607 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068155983 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06662231 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.064917315 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.075913626 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.069439864 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067072351 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078125259 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.066502216 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.068797427 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080489044 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.0750293 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.064867597 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066601018 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.067602274 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067233975 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.069628698 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.068755387 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067411133 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072616699 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.072638109 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071391098 seconds)
  done (took 10.940370717 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.159568042 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.149641288 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066533703 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.144698398 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.073707982 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.069624872 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.145876613 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.085319047 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066068319 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067352802 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.065106075 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.093871838 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089162301 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.100643026 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.070373009 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066610924 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091466575 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.098906743 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.149213194 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.143643194 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.089406609 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.073998155 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.068902363 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.067902965 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.067796361 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075306781 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082358523 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.074466456 seconds)
  done (took 4.536162787 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072893448 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081668092 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.069792293 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.089921523 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084292155 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066943535 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.067917391 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067410695 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.082940563 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072770136 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.06604759 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.070645185 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069578749 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.066835648 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.066982152 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.07263718 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.07258048 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06517728 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070280608 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070639336 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.076939175 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.091958868 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070314722 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.066242878 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.068968575 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066292136 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074212472 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076089617 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.065794491 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.096293779 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063176588 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07039797 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.079945593 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067277906 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.065605823 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.066581399 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066102149 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066081412 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066374992 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064223973 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064004393 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071165344 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.064563908 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071581148 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.080237353 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.073623036 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.066990107 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071419359 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.068903927 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.062888683 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069103739 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069323675 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.068339818 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.074370684 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069291576 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.068444982 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.06687165 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096224192 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.071910886 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065799976 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.065199706 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.064259906 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.0677744 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07388275 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.082614439 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.067811176 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064344195 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.06584325 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.070438748 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080118152 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065140481 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.070875611 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063011045 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066338372 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.068449807 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.068726471 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067265035 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064073484 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.065334005 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066048915 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.066431054 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.065898606 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.065433475 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.068163553 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.063376904 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064306078 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066508857 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067227915 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072374886 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.064810063 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.068486684 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.067213318 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.064649626 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.068477629 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.071499882 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.068914805 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.085713539 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074673646 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.066584016 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064111561 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080349199 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06799878 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.06512636 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071065928 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07019469 seconds)
  done (took 9.312469399 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088508795 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067351619 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.085719622 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092284006 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076111949 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.070646681 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.079937632 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066555417 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08211555 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065525251 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.074703653 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064321556 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079195985 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.074640989 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067293883 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076358913 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068498754 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086411176 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.080663088 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.06441499 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075052683 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078060631 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078383945 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.083777594 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.083624617 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.084479516 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078301234 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068647193 seconds)
  done (took 4.092385927 seconds)
done (took 39.479309722 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.977217028 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.134105005 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.961238194 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.224087653 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.0081285 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.193344784 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.205585455 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.95698224 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.213651436 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.990481672 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.287309622 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.334729088 seconds)
done (took 69.447019569 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.977338351 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.103566576 seconds)
    (2/2) benchmarking "String"...
    done (took 2.172329848 seconds)
  done (took 6.173674221 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.551587879 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.95767207 seconds)
    (3/3) benchmarking "different"...
    done (took 2.007574033 seconds)
  done (took 8.411868862 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.048283678 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.584046063 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.216935269 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.952443612 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.95805756 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.389404641 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.757398906 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.417791611 seconds)
  done (took 33.172397815 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.180155397 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.157130327 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.694878077 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.745870774 seconds)
  done (took 16.710346738 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.549489077 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.205568949 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.206428446 seconds)
    (4/4) benchmarking "different"...
    done (took 2.201093415 seconds)
  done (took 11.108700573 seconds)
done (took 87.596179425 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.943976925 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.999445922 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.96919885 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.097582994 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.009550702 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.973714869 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.945912182 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.960521625 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.942367307 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.944623256 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.374279133 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.938557126 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.948839735 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.975476681 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.939397627 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.953743846 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.993559703 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.959928315 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.965697279 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.588431675 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.443357105 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.943118414 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.945065915 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.000198382 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.088342946 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.974419676 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.498590112 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.936391823 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.534689526 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.953683395 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.945548122 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.937613759 seconds)
  done (took 209.506988867 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.933321007 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.700214122 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.791275587 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.965904704 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.194439255 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.126827599 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.06964841 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.274321036 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.934616341 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.937591272 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.059532646 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.932737553 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.085466825 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.881648617 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.925493347 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.02019219 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.06847306 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.107536642 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.928588937 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.119080991 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.952628704 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.878358111 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.839222083 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.054109565 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.94059289 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.011930311 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.933808517 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.936913613 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.121060809 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.044591535 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.965404446 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.967077593 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.060090991 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.797057022 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.954336338 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.938454759 seconds)
  done (took 174.323889216 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.097171047 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.954294046 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.997567398 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.155006067 seconds)
    (4/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.935048687 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.69280329 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.6574981 seconds)
    (7/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.935879959 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.935256103 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.935474476 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935072552 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.944156525 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.937380285 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.003962017 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.455990872 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.947836945 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.937379378 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.937197526 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.435766602 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.93966654 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935428772 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.936642717 seconds)
    (22/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.93585888 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.999771487 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.308580481 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.071373439 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.939579779 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.947417596 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.072223107 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.945614108 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.936261887 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.073277815 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.938648553 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.014598047 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.071925936 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.946097634 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.01884369 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.944033846 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.419189741 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.936434526 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.936688091 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.93786324 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.999269377 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.936482143 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.033297934 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.026455221 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.922747281 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.948109554 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.003583685 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.624639489 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.940469915 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.937269497 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.936357924 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.936712199 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.936397566 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.967898171 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.939601979 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.961488952 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.537082087 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.936872048 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.936480212 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.937020713 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.936854794 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.938089511 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.945199127 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.975561203 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.739674744 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.127547671 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.326008215 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.751626421 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.937596687 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.839517002 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.99615489 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.938816997 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.016082901 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.937361156 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.938764736 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.937079149 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.937190795 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.059646523 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.050351422 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.939076072 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.072412393 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.941801715 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.938199848 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.232192743 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.508504535 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.938814688 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.95054634 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.99536948 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.938422983 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.9379245 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.945691115 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.058126743 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.941060292 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.938550621 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.938174568 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.032503518 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.939434679 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.089424005 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.167047433 seconds)
    (101/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.938454547 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.013150636 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.185141107 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.16290335 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.940639196 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.939366415 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.953975096 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.940332768 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.931310857 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.949159272 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.939719629 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.939494001 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.939104324 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.939986638 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.939646432 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.940750569 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.95143924 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.939738279 seconds)
  done (took 427.669697976 seconds)
done (took 815.527184232 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.639002724 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.705891055 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.548702896 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.583005136 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.551621531 seconds)
  done (took 14.905723762 seconds)
done (took 16.783131244 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.959036427 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.957697927 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.94512531 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.963577652 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.962919809 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.960028921 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.991643814 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.982822922 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.978639226 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.959053125 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.967216476 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.962783116 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.96490085 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.981007217 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.972301795 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.959125608 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.959250193 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.952994004 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.966920135 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.964656085 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.961569705 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.959217128 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.96144325 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.967102425 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.976180421 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.965497414 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.9567968 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.964291473 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.965894367 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.964834353 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.999731017 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.968603869 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.993123751 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.970599128 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.969884092 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.974588084 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.960716483 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.985603525 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.963931635 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.000199679 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.971191139 seconds)
  done (took 82.591994623 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.950354818 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.081469973 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.158247705 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.981308245 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.949622865 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.159274814 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.005977054 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.077108497 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.078876224 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.160567336 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.171538107 seconds)
  done (took 24.65438083 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.948833414 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.087871314 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.181948014 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.984925149 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.94162639 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.165218229 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.012381345 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.082799364 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.083897725 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.164497774 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.172886734 seconds)
  done (took 24.715180365 seconds)
done (took 133.838338835 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.316783456 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.973112633 seconds)
  done (took 6.170533957 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.945860386 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.962852786 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.093838675 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.946800707 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.945174937 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.947036906 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.947482157 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.945925072 seconds)
  done (took 17.616003031 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.945922123 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.946184448 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.945780044 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.936578391 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.94590058 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.945594962 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.945446869 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.945903003 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.946747284 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.946723059 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.945285522 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.946232441 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.946009579 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.945746543 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.946487776 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.946090051 seconds)
  done (took 33.009160584 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.946393507 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.945966322 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.945672215 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.946099438 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.94678762 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.947064206 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.947924763 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.946581099 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.946902125 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.946191199 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.947173914 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.946618681 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.947126693 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.946844887 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.947513191 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.939469822 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.946843013 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.94684806 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.94479363 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.922292601 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.946897006 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.937603569 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.952455094 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.947204597 seconds)
  done (took 48.568026231 seconds)
done (took 107.251961752 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.196252953 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.541104021 seconds)
  done (took 8.620535497 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.950875583 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.947466954 seconds)
  done (took 5.849532264 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.947964219 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.947472791 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.947739539 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.94743217 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.947774972 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.947988843 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.948124763 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.948182593 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.948100066 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.947495003 seconds)
  done (took 21.36080346 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.948315423 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.947987239 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.948276653 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.948752953 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.948222747 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.948160313 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.948988354 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.947807568 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.948158845 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.948174804 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.9482176 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.948523078 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.94834873 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.949028873 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.94928328 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.949168325 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.948673919 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.950053664 seconds)
  done (took 36.958233667 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.948937354 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.949126865 seconds)
  done (took 5.782142527 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.948863418 seconds)
    (2/7) benchmarking "second"...
    done (took 1.949314992 seconds)
    (3/7) benchmarking "month"...
    done (took 1.949158223 seconds)
    (4/7) benchmarking "year"...
    done (took 1.94964746 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.949030439 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.949197416 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.949056682 seconds)
  done (took 15.529001971 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.950724058 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.109276846 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.165838013 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.556205303 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.950709006 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.951626844 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.812319633 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.951410942 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.95331075 seconds)
  done (took 21.286772085 seconds)
done (took 117.268848713 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.795888972 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.951159912 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.264951579 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.025195589 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.97607402 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.288449074 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.992520724 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.501442218 seconds)
done (took 43.681397579 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.067131887 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.947827151 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.978052653 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.977955667 seconds)
  done (took 22.789539638 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.950251549 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.263424886 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.971145937 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.894761416 seconds)
  done (took 22.982284135 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.326836947 seconds)
    (2/2) benchmarking "read"...
    done (took 2.297306745 seconds)
  done (took 6.513690701 seconds)
done (took 61.239293199 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.950578118 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.950830178 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.951019542 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.951557419 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.951616058 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.95063775 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.951268058 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.951568177 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.940671695 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.951707081 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.951338769 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.951263733 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.951188797 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.938839967 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.951533857 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.95205994 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.952210245 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.952145239 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.952371208 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.944369883 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.9520296 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.952316562 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.952602874 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.952527623 seconds)
  done (took 48.695396126 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.951065839 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.952152681 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.952418265 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.951911192 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.952603084 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.951829687 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.952373539 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.952538368 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.952632111 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.952155428 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.952583532 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.952566214 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.953109002 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.953903623 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.95228496 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.952417944 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.952256067 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.952736273 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.952470968 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.952264317 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.952834213 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.942830626 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.953462745 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.950875225 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.953143594 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.952754437 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.95307721 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.95328618 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.953162061 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.953487457 seconds)
  done (took 60.455267 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.953668529 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.953273386 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.954273972 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.953258722 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.954779808 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.953906092 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.954020568 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.95388931 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.953865036 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.954065664 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.95454505 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.954152401 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.954028825 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.954119083 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.954384606 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.95459099 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.954233651 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.954385692 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.954767799 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.953871679 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.955014518 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.954208544 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.954774807 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.955308714 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.954923964 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.954180419 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.955284956 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.955641413 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.955146267 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.955050324 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.95479492 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.955547533 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.955637026 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.955200536 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.955214695 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.954746137 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.955414652 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.958417577 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.962779794 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.955462372 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.955573917 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.955348537 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.955107358 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.955479954 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.95506078 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.955610695 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.954913016 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.955942816 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.955403685 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.955786265 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.956011486 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.95609673 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.955087942 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.956312757 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.955888356 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.956007146 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.955822216 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.95569194 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.955941505 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.957169708 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.956546363 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.956647764 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.956042953 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.956760582 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.957310946 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.956867223 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.956004404 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.956356935 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.95688423 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.959291014 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.956887293 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.956960476 seconds)
  done (took 142.683201187 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.957762618 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.957212414 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.956467543 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.957346925 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.957375335 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.957471219 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.957688934 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.95685115 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.957262432 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.957173316 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.957518712 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.957583844 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.958087028 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.957863071 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.958792168 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.957623931 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.958038542 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.958041586 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.957441416 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.95780906 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.957696534 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.957956655 seconds)
  done (took 44.960159076 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.958405249 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.957743313 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.957932772 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.958219063 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.958245766 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.957913927 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.959126669 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.958330864 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.958076622 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.957833186 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.958517459 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.958678954 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.95873934 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.958750834 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.957869848 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.959085205 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.959105003 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.959095965 seconds)
  done (took 37.145535521 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.959155288 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.958602267 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.958659861 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.958798892 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.959028935 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.95905522 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.958616776 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.959244135 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.95907183 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.959282132 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.959796533 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.958782549 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.960012476 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.959419772 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.959247525 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.959706085 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.959322297 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.959728871 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.959569225 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.960120336 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.960889404 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.960293139 seconds)
  done (took 45.001519123 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.959920602 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.959576772 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.959942553 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.960433845 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.9600971 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.959928859 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.960576905 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.960260611 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.959817609 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.960782375 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.960102929 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.960170442 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.960268047 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.961067693 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.960348308 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.96078805 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.961129404 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.960808621 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.961333879 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.960512243 seconds)
  done (took 41.103739668 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.960914381 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.960695267 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.9611165 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.961442604 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.96126308 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.96172255 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.961896286 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.961254173 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.960589857 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.9615247 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.960962458 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.961805617 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.962217879 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.962146663 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.962359942 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.96260506 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.961906428 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.962268568 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.962504976 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.96228806 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.962582635 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.949666956 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.962017649 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.962352072 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.961828447 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.962183452 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.962507922 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.962960283 seconds)
  done (took 56.816218822 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.961669291 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.962500501 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.962317053 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.962332178 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.963044006 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.961660552 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.963132346 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.962592669 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.963055482 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.96035375 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.956672008 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.959782067 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.962954625 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.962702955 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.962501869 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.962182955 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954533287 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.96232452 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.963489687 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.963041555 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.963174949 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.962329296 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.953355015 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.954869569 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.955110333 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.963334893 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.963553109 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.953980622 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.963210925 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.964567748 seconds)
  done (took 60.728918421 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.981474079 seconds)
    (2/2) benchmarking "in"...
    done (took 1.982292099 seconds)
  done (took 5.863061792 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.964117513 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.964228598 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.964093148 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.963677344 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.953198773 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.951719166 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.964746907 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.96452615 seconds)
  done (took 17.589206096 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.964863645 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.967183009 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.964669837 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.964363501 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.964551936 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.971851751 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.966080707 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.966188658 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.967700158 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.966582108 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.968958923 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.969671561 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.972508807 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.969867467 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.95933881 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.965612819 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.966917658 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.967181675 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.96697323 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.964807051 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.967619356 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.965466796 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.966151956 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.965608981 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.96543781 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.967928633 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.975152293 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.966567536 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.967191 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.955779649 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.972917694 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.9658806 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.966091026 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.968167092 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.966817816 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.965790341 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.972783472 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.96645435 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.966957401 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.966931021 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.968608642 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.968465444 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.942113976 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.974339542 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.967425479 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.96745863 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.956142997 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.967341678 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.966181253 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.970346359 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.973850797 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.96722686 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.966678628 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.966916271 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.968571016 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.967753812 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.966117168 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.969582555 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.974179255 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.973843899 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.970945775 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.987550203 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.976375111 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.967995477 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.967423947 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.977579001 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.975804438 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.95686015 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.969714773 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.968658468 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.975747756 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.967768791 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.967640676 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.968823921 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.981066194 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.975840065 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.969049295 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.968792578 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.968695789 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.9688359 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.969540038 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.968163627 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.969311588 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.969526942 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.978534701 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.991831341 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.969122433 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.969320669 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.97096651 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.969901576 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.973020679 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.971786763 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.968908725 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.96902759 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.970005208 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.97197151 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.969542988 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.969402842 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.969409251 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.978262012 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.970148908 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.969399589 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.972973063 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.977658274 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.969165025 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.969611748 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.970945419 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.970449369 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.978439922 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.970492979 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.970543146 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.968929885 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.97075281 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.973944318 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.969433068 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.974274451 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.97785832 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.977824191 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.971685853 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.974316118 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.973885625 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.973370337 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.980178394 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.993473574 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.97055733 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.973771347 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.975775267 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.982305403 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.975000016 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.970333968 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.973182674 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.970269735 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.970801171 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.97297983 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.970363478 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.971035524 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.970523804 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.971156499 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.970812501 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.972127158 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.973872373 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.972970049 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.973804218 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.971175814 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.976331124 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.97217418 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.973857649 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.979320303 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.972581972 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.972321483 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.972519357 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.974660447 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.974379797 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.971814768 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.971678927 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.972375261 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.972669289 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.972776966 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.974260503 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.973075557 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.971947531 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.973483334 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.976553406 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.973738826 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.973311674 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.97382094 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.972714556 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.972958451 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.975272351 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.973507702 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.975150331 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.972888085 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.977676526 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.972477224 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.966249407 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.974144509 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.973440372 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.973480794 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.977828123 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.983621492 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.976539027 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.982741068 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.974050623 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.981152334 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.972901371 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.975489632 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.975148436 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.973811742 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.974463235 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.972667033 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.974453199 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.977626823 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.993712631 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.984429014 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.976537972 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.975506267 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.979302282 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.978210283 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.974314535 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.974313653 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.975035924 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.972353817 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.965418877 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.974401796 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.966484402 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.978432979 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.974752066 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.974885964 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.978070883 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.975101591 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.974738828 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.976119788 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.974718431 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.964197302 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.975054261 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.975149292 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.97550206 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.977455486 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.968963399 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.972348329 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.975584118 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.975797072 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.976925878 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.975697172 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.975955377 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.976055377 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.978419292 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.975969035 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.976940026 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.983468493 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.976714328 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.976473922 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.976048939 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.975225857 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.977771508 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.975886625 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.979441194 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.983772989 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.979279113 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.976066484 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.981710233 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.977167288 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.979683446 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.976958762 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.977809251 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.977251463 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.978716068 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.977225567 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.976850084 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.984286979 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.977036143 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.977823568 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.976856524 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.980144438 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.978691592 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.979455213 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.977265078 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.980336125 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.985856318 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.983598345 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.978197213 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.980949347 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.979466737 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.97879272 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.981695806 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.978989906 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.991351036 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.987021956 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.978356396 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.977651628 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.978350363 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.98035559 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.97790042 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.978202659 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.986093098 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.979104084 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.97958255 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.982280954 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.978333976 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.978585394 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.984550894 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.980155656 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.982087636 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.980172653 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.979693546 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.979910596 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.978032168 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.980904263 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.978877757 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.98073112 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.982396498 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.979834073 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.979289869 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.979081367 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.987699594 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.979354032 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.980357044 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.986318282 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.981290363 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.980118582 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.980853831 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.9797666 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.980676579 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.980751222 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.979282172 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.981463979 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.980316889 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.982691918 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.990334298 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.98373591 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.987536667 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.982206113 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.990616345 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.980291028 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.979938096 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.98108858 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.983754633 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.987815647 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.980194061 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.97979418 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.988737894 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.981263211 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.981507385 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.984499813 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.980396327 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.980999636 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.97977854 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.983268965 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.985482982 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.983376183 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.981133896 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.981592994 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.981412919 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.980997074 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.98396303 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.983201087 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.982095765 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.981866412 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.980041116 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.981384559 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.982194422 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.981537826 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.981705603 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.981557282 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.981146171 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.988818358 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.982090822 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.982869172 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.986316279 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.982513511 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.990761317 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.982883113 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.982548916 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.982329785 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.981274957 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.984885005 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.981824205 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.982645201 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.982758486 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.981994372 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.984598887 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.99360289 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.990361656 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.986270054 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.984624592 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.982550624 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.983390089 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.992962702 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.005375711 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.983569549 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.98518935 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.986503478 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.990322488 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.985009377 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.988813932 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.987058573 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.990711671 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.984455623 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.983437998 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.986541349 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.995410724 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.983988189 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.983440913 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.983607507 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.987820414 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.986477025 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.98333723 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.984652383 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.987169151 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.985006839 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.995529428 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.984157075 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.985147797 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.984417798 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.983247071 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.984428063 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.983528762 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.986446214 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.985327337 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.984546099 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.984939256 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.986886992 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.989032219 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.984138303 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.987955084 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.993409237 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.984715325 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.984861629 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.987122515 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.985602475 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.986308586 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.984925738 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.984842855 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.987217869 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.984350379 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.986686493 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.989055836 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.99398364 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.986758233 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.984306128 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.98497741 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.988187413 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.98528604 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.985893917 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.987355712 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.99452166 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.989692881 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.99689515 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.995308898 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.985670196 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.986785835 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.993335736 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.994489739 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.98638165 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.98563971 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.986436732 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.989062174 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.988747394 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.987295659 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.986939619 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.987434785 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.991769575 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.985973755 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.986841611 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.987048943 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.987188827 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.989921887 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.988320778 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.992039527 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.987039906 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.986678214 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.986411793 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.988064765 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.989046741 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.990103054 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.987329173 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.987315504 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.989029104 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.988739058 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.991415778 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.986960711 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.987557143 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.988880213 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.98710845 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.986542891 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.988049558 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.986984457 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.987802189 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.991112695 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.994757471 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.987415852 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.989400895 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.988826665 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.992568428 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.988561675 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.988089494 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.988904864 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.987507904 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.99681901 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.987897173 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.988417217 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.9886778 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.988287571 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.993347941 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.989986604 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.99367425 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.988943357 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.988969326 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.988170348 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.992699358 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.997381783 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.993480431 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.991636777 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.995733193 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.993700157 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.989777736 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.988518073 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.988485444 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.989444436 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.990519247 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.992431336 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.990828145 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.992322492 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.988762485 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.991481654 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.989950668 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.99208262 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.989432782 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.989349588 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.993356269 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.998775105 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.999479176 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.989470518 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.991371968 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.990614191 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.993996264 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.001341684 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.990737048 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.990784559 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.990359239 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.991862293 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.99170915 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.998001731 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.998576362 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.994588975 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.990372236 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.995955802 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.007969785 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.992719732 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.000269266 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.021217584 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.992919597 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.991348819 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.990940136 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.991573118 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.991629479 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.994325001 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.991204302 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.998491583 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.991993747 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.991090731 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.998894627 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.991259425 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.990986824 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.991052175 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.992875704 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.997262294 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.991858689 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.998961792 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.99181091 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.99160129 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.991894038 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.994427938 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.991311863 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.992083337 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.992087592 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.994444646 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.991689287 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.992511541 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.000749353 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.992368715 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.993780353 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.005305443 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.00316495 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.992861474 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.991994591 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.992711891 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.998619506 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.995392714 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.992497569 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.995992802 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.000851724 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.9956272 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.999420098 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.994925709 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.994097696 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.994796299 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.992807464 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.993884355 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.005285385 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.003853615 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.994066923 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.994445611 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.999586882 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.993307579 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.000186249 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.999946256 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.996416769 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.994682654 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.991555622 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.992998945 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.983212411 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.993886079 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.998066189 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.001238331 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.983581599 seconds)
  done (took 1182.877805512 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.99424889 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.993699245 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.994054992 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.993379392 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.99333668 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.993987586 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.993432497 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.993601514 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.993764761 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.98429277 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.994648888 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.995064376 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.994009748 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.993998837 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.994770311 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.980916827 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.994698899 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.99463706 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.994280349 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.994660915 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.994308032 seconds)
  done (took 43.781335428 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.994765127 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.994624643 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.995295602 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.995166975 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.994873204 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.99438249 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.994640265 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.994460455 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.995913954 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.99442181 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.996062728 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.994839349 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.995943862 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.99532358 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.994616252 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.99592762 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.995186944 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.995650633 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.995122583 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.996046634 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.990684291 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.996156823 seconds)
  done (took 45.818262264 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.996705652 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.996396071 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.997092784 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.995456679 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.996564042 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.997092245 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.996191511 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.998152146 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.996962962 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.997913586 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.004246968 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.003492207 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.996402226 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.999974205 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.996324453 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.997115139 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.142293026 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.996465186 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.996334806 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.996734179 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.996302906 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.003303529 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.996761052 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.996549502 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.996977775 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.997374766 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.99763093 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.997968006 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.997786915 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.998725369 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.00246118 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.997971166 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.998217804 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.000646954 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.998327335 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.998174882 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.00131858 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.998191045 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.998057952 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.996790646 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.006940691 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.020605973 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.998064507 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.997707401 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.00476459 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.997900792 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.998078543 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.001850582 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.996385483 seconds)
  done (took 100.020389178 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.999017118 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.998318678 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.997260265 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.99838568 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.997909549 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.998204726 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.998180885 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.998483724 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.999144476 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.998625735 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.998604784 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.999375172 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.999135308 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.999398423 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.998542208 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.999476474 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.999324841 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.998212348 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.999030435 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.996004054 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.998907525 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.998757328 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.999105257 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.996109805 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.998925268 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.999300337 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.999468809 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.999631076 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.999152868 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.999127412 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.999630394 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.999819836 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.999737643 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.999478228 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.00009803 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.99984105 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.999880876 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.99991182 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.999766652 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.999742895 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.000330694 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.00000677 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.000351429 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.999951386 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.00099019 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.000506311 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.000319003 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.000227002 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.000188889 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.000271664 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.001213061 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.00028578 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.000582504 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.000521506 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.999914144 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.000857557 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.001450482 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.000681317 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.001424029 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.000833812 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.000395671 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.000327148 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.001463048 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.001856118 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.001917635 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.001313782 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.001608285 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.001398367 seconds)
  done (took 137.912035733 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.001677423 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.001701717 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.001525735 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.000602147 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.001046194 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.001570761 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.001750444 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.001932023 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.00191403 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.001631671 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.001777318 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.002917003 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.002809948 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.002102256 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.002656507 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.002216457 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.002179876 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.002702549 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.001986154 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.003674466 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.00230829 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.002881183 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.002965903 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.002861221 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.002466928 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.002564556 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.003151912 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.00277768 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.003351323 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.002999747 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.003306843 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.003970603 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.002766558 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.003503524 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.00307646 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.003716689 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.003746713 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.003310231 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.0038864 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.003085411 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.002624432 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.00321597 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.003984619 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.003697035 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.003461988 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.004466179 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.003216754 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.004444543 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.003899784 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.004030876 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.003988672 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.004477833 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.004342675 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.003825172 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.004306439 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.003923166 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.003941388 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.004819203 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.004434145 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.004127257 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.004968755 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.003788105 seconds)
  done (took 126.127354681 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.004964627 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.994941264 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.004514418 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.004916685 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.004945648 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.005064841 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.004712243 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.004901052 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.005353745 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.993547778 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.005440114 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.004605185 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.007413557 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.004875321 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.005678666 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.006231909 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.005345275 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.005405762 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.005922907 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.005523283 seconds)
  done (took 42.022979088 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.005570874 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.006189137 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.005166182 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.0058348 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.005792824 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.00578504 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.005238713 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.005897777 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.006128347 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.006445669 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.005913916 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.006373712 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.005050934 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.006694995 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.005764118 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.00594161 seconds)
  done (took 34.032718249 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.006501551 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.005627957 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.006200253 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.006592938 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.007484597 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.007135964 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.006668055 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.006796213 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.006953792 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.007385606 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.00707506 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.006591113 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.007015018 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.007344052 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.007209605 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.007329923 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.006513576 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.006602987 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.007145736 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.007008479 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.006998624 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.006789082 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.006826165 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.007188988 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.006995788 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.007723763 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.007719118 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.007173278 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.007757766 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.007544808 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.007343716 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.008641715 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.007912157 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.007687915 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.007746338 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.008827254 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.008584789 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.008696375 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.008367083 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.008277426 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.008178724 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.007875612 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.008524052 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.00773316 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.008441665 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.008710511 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.009160385 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.008903627 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.008529862 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.008560683 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.008645873 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.007735519 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.009063695 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.009142784 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.009350934 seconds)
  done (took 112.362105444 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.008819898 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.008879179 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.009162932 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.008667033 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.009333082 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.008599296 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.00918372 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.01045707 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.009565083 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.00890667 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.009205744 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.009136172 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.009345374 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.009917812 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.009716395 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.010434341 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.009639578 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.009448206 seconds)
  done (took 38.111129409 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.010082089 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.010051295 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.009529997 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.010001946 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.010233593 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.010548547 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.010319451 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.009745954 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.010056264 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.010523934 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.009896504 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.009650467 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.010569447 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.01027586 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.010526536 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.010833695 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.010484106 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.010745236 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.010959458 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.010757724 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.011023111 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.010908098 seconds)
  done (took 46.172468764 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.011558549 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.011148954 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.025987688 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.032652804 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.032111973 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.045592884 seconds)
  done (took 14.103887288 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.011151572 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.010899993 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.014085467 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.011517517 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.011336993 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011276078 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.01119019 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.011189432 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011903714 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.012194716 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.011181099 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.011935952 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.011490919 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.012087194 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.01227556 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.012015281 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.012045275 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.011506402 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.012342442 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011680278 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.012328743 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011426405 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.01177319 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.012706599 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011728464 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.012472898 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.012282508 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.012852862 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011614523 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.012460314 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.012412516 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.012878911 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.01348659 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.012720516 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.01302702 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.01201216 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.012577144 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.012863997 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.013563799 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.01314336 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.013045493 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.012398 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.013686021 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.012936274 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.013847161 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.013348613 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.013676336 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.013687785 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.013458563 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.014164631 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.0132963 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.013832664 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.013761174 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.013685887 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.013611178 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.01297308 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.014024375 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.013952719 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.013868298 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.014621518 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.013821375 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.01326384 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.014242493 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.014098572 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.014990534 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.013297952 seconds)
  done (took 134.788136701 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.014060075 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.01444111 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.015614155 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.014342742 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.014828862 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014932267 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014269218 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.014623855 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.01415864 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.01404353 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.014444063 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015680326 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.014597659 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014765257 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015237162 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015508396 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.015353042 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.014614189 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015524318 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.016080276 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.015809359 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.015575705 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.015772731 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015727832 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015758098 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.01610105 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.015690624 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.016421136 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.015501967 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.015831774 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.016029705 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.01564218 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017014511 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.01673538 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.016111236 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015773764 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.01585027 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.016467483 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.016373238 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.016123256 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.016276614 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.016577599 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.016162009 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015726666 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.016135034 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.017173572 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.016504328 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.016213919 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.016744169 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.01748965 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.017211696 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.01697481 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017099783 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.017402112 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.015911456 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.007268062 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017602323 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.016322572 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.017130092 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.01738469 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.017101121 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.017391743 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.017934011 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.017320313 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.017141568 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017588439 seconds)
  done (took 134.99719751 seconds)
done (took 2756.061505666 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.068788765 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.135425179 seconds)
  done (took 16.155191802 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.184987108 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.060772508 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.206984921 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.138102541 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.023904818 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.026859708 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.022995521 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.022283175 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.113727504 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.022709269 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.044031727 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.023001637 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.022104056 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.022714302 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.02259599 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.024224478 seconds)
  done (took 54.948882412 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.024594948 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.025742252 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.023297802 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.022967899 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.033940282 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.09723438 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.044645764 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.026834633 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.037462898 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.058615711 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.041281908 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.03029869 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.030500772 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.028141508 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.112158416 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.069721265 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.081572457 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.099012837 seconds)
  done (took 38.841005431 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.104148579 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.036871771 seconds)
  done (took 11.101941926 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.039050511 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.037884088 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.023594773 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.036024962 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.025127697 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.054737476 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.035014545 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.035079872 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.047479268 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.029202744 seconds)
  done (took 72.351202061 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.025533185 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.026917366 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.279003283 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.034583836 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.031100248 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.04736691 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.023745884 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.055184202 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.027658525 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.023270817 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.035327652 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.283699221 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.035848477 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.024510887 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.454402273 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.037089682 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.029877524 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.056437178 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.057220029 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.031090302 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.031633926 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.027905171 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.187144572 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.711054833 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.026066506 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.028918401 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.032541266 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.023292816 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.022603554 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.025918027 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.027303202 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.025789541 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.028451274 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.024760288 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.032160424 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.028847013 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.524805902 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.043726375 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.032744897 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.113024099 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.069719155 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.032633674 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.856229999 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.028145333 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.02396604 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.031181904 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.710385553 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.109922831 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.028264573 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.2095508 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.36105916 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.041627604 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.19681663 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.183457712 seconds)
  done (took 141.460385256 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.022992748 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.261526435 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.177854189 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.025628737 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.282322522 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.234893025 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.026191776 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.070994539 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.02681775 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.226879836 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.278612857 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.128394828 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.026971018 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.026293638 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.026525237 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.02596133 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.173911993 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.092848278 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.027481389 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.024137208 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.049172656 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.227212246 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.147588251 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.027348242 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.051297363 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.232186219 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.147479871 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.12801054 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.790881744 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.02464104 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.087662288 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.027309362 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.02772407 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.024932483 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.178489426 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.119123764 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.109148478 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.027656787 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.024751531 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.025699758 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.698779405 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.225454511 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.121574344 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.150074893 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.278310795 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.24034729 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.638301261 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.025264058 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.652866928 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.191531587 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.232534346 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.235089594 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.146086286 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.029692015 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.314741656 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.025627496 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.025921887 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.247367127 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.245890456 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.125527533 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.028122503 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.027622278 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.026233865 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.264646151 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.029926884 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.11788376 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.029042903 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.02860977 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.120534474 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.128730094 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.255381623 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.248172212 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.058848413 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.344818451 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.518119331 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.229893982 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.09193113 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.248388858 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.029788139 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.026908507 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.106662507 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.87417792 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.282408528 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.269809346 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.227032014 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.058427484 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.679498371 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.027778018 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.21482273 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.218358996 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.261501484 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.270175322 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.263446739 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.399933859 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.027203263 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.027176871 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.352185369 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.145006808 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.973763421 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.379138454 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.723593948 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.518723711 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.053958859 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.373398615 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.15855441 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.031102986 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.675898186 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.028059988 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.233984914 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.06812205 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.030983195 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.028402772 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.21887196 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.931978062 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.027838685 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.729861329 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.088654375 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.031691224 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.233778525 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.03174723 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.273474501 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.032518617 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.262474615 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.661572521 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.059805955 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.204540857 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.274892289 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.659357531 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.26960353 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.272741858 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.143485764 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.254016359 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.844301514 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.03031833 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.29118373 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.032253111 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.028924115 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.198554039 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.034238228 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.172667016 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.034167109 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.295606143 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.052069336 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.259748095 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.032729417 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.268548116 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.062739673 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.080804243 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.03199044 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.159836342 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.032947545 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.87583582 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.187733088 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.032634181 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.03130565 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.61757847 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.030651883 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.17912695 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.256315882 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.051677316 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.101101961 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.598366496 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.02842707 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.11897643 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.054261842 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.677704423 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.030918627 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.283103681 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.985206128 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.507436026 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.030172034 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.266197953 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.217945642 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.024598708 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.032510051 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.873548983 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.031833056 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.03128713 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.18786882 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.516227917 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.935969801 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.230738712 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.037605267 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.159450444 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.036297655 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.110066447 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.372574315 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.032177497 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.031504154 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.032519908 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.034706692 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.033469144 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.241445524 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.059301028 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.467316992 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.169482007 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.288837368 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.33911429 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.230874925 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.07426919 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.039228745 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.255227813 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.026158388 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.09516345 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.035512494 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.052072145 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.260720782 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.036355496 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.237795714 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.267528498 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.046657756 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.080773657 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.037478509 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.033567652 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.946567737 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.177920298 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.120013526 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.03660338 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.03356139 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.148140525 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.155136726 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.215693069 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.852565467 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.177154108 seconds)
  done (took 937.07099227 seconds)
done (took 1273.880564236 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.033162215 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.037633696 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.040163315 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.03872109 seconds)
  done (took 30.117092989 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.036415875 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.034040101 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.03529604 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.037639485 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.035963338 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.03704376 seconds)
  done (took 14.182707723 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.034149452 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.038735149 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.038706897 seconds)
  done (took 23.079221451 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.462689703 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.442607909 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.10957931 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.179005269 seconds)
  done (took 11.163552047 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.04061315 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.036047843 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.036809826 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.036010027 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.036184001 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.03685837 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.038572846 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.037340947 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.038067018 seconds)
  done (took 20.313624151 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.200974172 seconds)
done (took 105.023764158 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.378008507 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.218286226 seconds)
    (3/341) benchmarking ("sort", BigInt, false)...
    done (took 7.046893253 seconds)
    (4/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.155887095 seconds)
    (5/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.100589512 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.166153732 seconds)
    (7/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.610082376 seconds)
    (8/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.038351587 seconds)
    (9/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.506349645 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.163506332 seconds)
    (11/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.135170364 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.428855872 seconds)
    (13/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.20172242 seconds)
    (14/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.745132961 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.055558813 seconds)
    (16/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.147500149 seconds)
    (17/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.435638471 seconds)
    (18/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.169535741 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.053245105 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.053889089 seconds)
    (21/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.055425319 seconds)
    (22/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.04916706 seconds)
    (23/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.338639289 seconds)
    (24/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.126471928 seconds)
    (25/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.036696114 seconds)
    (26/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.102416093 seconds)
    (27/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.74881663 seconds)
    (28/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.046391189 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.057785434 seconds)
    (30/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.040833301 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.134961395 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.139781294 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.166591006 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.040449336 seconds)
    (35/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.444110231 seconds)
    (36/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.133962535 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.280165022 seconds)
    (38/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.158193352 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.271028226 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.128190685 seconds)
    (41/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.528615522 seconds)
    (42/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.276303804 seconds)
    (43/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.166468556 seconds)
    (44/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.13710547 seconds)
    (45/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.03890865 seconds)
    (46/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.281274983 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.564496104 seconds)
    (48/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.064461145 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.049910669 seconds)
    (50/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.252173162 seconds)
    (51/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.423183914 seconds)
    (52/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.060391897 seconds)
    (53/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.868427097 seconds)
    (54/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.048812799 seconds)
    (55/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.069640301 seconds)
    (56/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.043587098 seconds)
    (57/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.331878927 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.290688529 seconds)
    (59/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.426843928 seconds)
    (60/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.060703716 seconds)
    (61/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.238835888 seconds)
    (62/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.40720824 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.757869628 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.073886955 seconds)
    (65/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.865942362 seconds)
    (66/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.252469011 seconds)
    (67/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.825279709 seconds)
    (68/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.390467848 seconds)
    (69/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.043908157 seconds)
    (70/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.442012705 seconds)
    (71/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.751685747 seconds)
    (72/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.048098377 seconds)
    (73/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.456727284 seconds)
    (74/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.244826518 seconds)
    (75/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.054480665 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.142028435 seconds)
    (77/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.348644395 seconds)
    (78/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.056991094 seconds)
    (79/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.079511736 seconds)
    (80/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.271127503 seconds)
    (81/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.489866383 seconds)
    (82/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.300047056 seconds)
    (83/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.452889838 seconds)
    (84/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.312982788 seconds)
    (85/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.068304022 seconds)
    (86/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.133886778 seconds)
    (87/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.308380136 seconds)
    (88/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.952135674 seconds)
    (89/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.051343389 seconds)
    (90/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.05414207 seconds)
    (91/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.12684898 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.366328334 seconds)
    (93/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.134270629 seconds)
    (94/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.195808521 seconds)
    (95/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.360938737 seconds)
    (96/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.198015914 seconds)
    (97/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.318928039 seconds)
    (98/341) benchmarking ("sort", Int8, false)...
    done (took 4.992804192 seconds)
    (99/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.176588367 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.285217898 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.411737374 seconds)
    (102/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.208340274 seconds)
    (103/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.129764095 seconds)
    (104/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.919689126 seconds)
    (105/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.157878522 seconds)
    (106/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.201743287 seconds)
    (107/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.045929658 seconds)
    (108/341) benchmarking ("map", identity, Int8, false)...
    done (took 4.267732075 seconds)
    (109/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.453351147 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.372579086 seconds)
    (111/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.060496488 seconds)
    (112/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.042851006 seconds)
    (113/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.117217193 seconds)
    (114/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.058065203 seconds)
    (115/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.103203108 seconds)
    (116/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.205450614 seconds)
    (117/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.540630142 seconds)
    (118/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.222343122 seconds)
    (119/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.23435863 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.321293001 seconds)
    (121/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.339200944 seconds)
    (122/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.355397643 seconds)
    (123/341) benchmarking ("sort", Float64, false)...
    done (took 5.767233812 seconds)
    (124/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.342252105 seconds)
    (125/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.06373006 seconds)
    (126/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.052345561 seconds)
    (127/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.059318518 seconds)
    (128/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.712075484 seconds)
    (129/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.818737331 seconds)
    (130/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.262652767 seconds)
    (131/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.134662734 seconds)
    (132/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.601272748 seconds)
    (133/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.379181353 seconds)
    (134/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.045855445 seconds)
    (135/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.641128327 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.919472856 seconds)
    (137/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.977974982 seconds)
    (138/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.210099649 seconds)
    (139/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.508084538 seconds)
    (140/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.428883713 seconds)
    (141/341) benchmarking ("sort", Bool, false)...
    done (took 2.262707204 seconds)
    (142/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.177380027 seconds)
    (143/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.15399946 seconds)
    (144/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.263949758 seconds)
    (145/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.158427657 seconds)
    (146/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.249322115 seconds)
    (147/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.123876302 seconds)
    (148/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.056398845 seconds)
    (149/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.060046409 seconds)
    (150/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.059272066 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.93150943 seconds)
    (152/341) benchmarking ("sort", Int64, false)...
    done (took 5.697411908 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.357278196 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.184006824 seconds)
    (155/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.361175307 seconds)
    (156/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.310303143 seconds)
    (157/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.365536807 seconds)
    (158/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.167693644 seconds)
    (159/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.052967379 seconds)
    (160/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.048772832 seconds)
    (161/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.931449536 seconds)
    (162/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.338289068 seconds)
    (163/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.126639434 seconds)
    (164/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.164708234 seconds)
    (165/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.651596102 seconds)
    (166/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.186405161 seconds)
    (167/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.261283355 seconds)
    (168/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.158640799 seconds)
    (169/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.203180696 seconds)
    (170/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.051895028 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 4.686593302 seconds)
    (172/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.052697369 seconds)
    (173/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 3.900234562 seconds)
    (174/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.065999764 seconds)
    (175/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.275652945 seconds)
    (176/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.124678976 seconds)
    (177/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.196679927 seconds)
    (178/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.04573678 seconds)
    (179/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.986339134 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.191746974 seconds)
    (181/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.059613321 seconds)
    (182/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.68147028 seconds)
    (183/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.04859431 seconds)
    (184/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.156858362 seconds)
    (185/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.047268069 seconds)
    (186/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.454566137 seconds)
    (187/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.047887567 seconds)
    (188/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.347098886 seconds)
    (189/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.313687413 seconds)
    (190/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.303475943 seconds)
    (191/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.156154769 seconds)
    (192/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.066245379 seconds)
    (193/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.046621788 seconds)
    (194/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.747947457 seconds)
    (195/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.295538151 seconds)
    (196/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.451197142 seconds)
    (197/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.288626901 seconds)
    (198/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.3476099 seconds)
    (199/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.072283672 seconds)
    (200/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.992472835 seconds)
    (201/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.454373943 seconds)
    (202/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.375576921 seconds)
    (203/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.161549246 seconds)
    (204/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.051039283 seconds)
    (205/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.48373563 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.480355106 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.062372558 seconds)
    (208/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.209080926 seconds)
    (209/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.128678226 seconds)
    (210/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.062834727 seconds)
    (211/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.347914766 seconds)
    (212/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.155960677 seconds)
    (213/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.337087632 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.829974614 seconds)
    (215/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.061760047 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.95644844 seconds)
    (217/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.056194745 seconds)
    (218/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.131818494 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.785776841 seconds)
    (220/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.290543819 seconds)
    (221/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.166315553 seconds)
    (222/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.362176475 seconds)
    (223/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.299949031 seconds)
    (224/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.319014371 seconds)
    (225/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.133733984 seconds)
    (226/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.249723907 seconds)
    (227/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.055756466 seconds)
    (228/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.248097431 seconds)
    (229/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.137571944 seconds)
    (230/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.542210358 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.149818296 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.687517324 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.340598802 seconds)
    (234/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.050270504 seconds)
    (235/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.347408475 seconds)
    (236/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.347459838 seconds)
    (237/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.287045753 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.446507977 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.05431227 seconds)
    (240/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.18313688 seconds)
    (241/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.064685821 seconds)
    (242/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.050647972 seconds)
    (243/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.104828448 seconds)
    (244/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.229023651 seconds)
    (245/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.513642843 seconds)
    (246/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.054867171 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.185660514 seconds)
    (248/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.354954845 seconds)
    (249/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.071139521 seconds)
    (250/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.1273572 seconds)
    (251/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.184558482 seconds)
    (252/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.055178438 seconds)
    (253/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.750018008 seconds)
    (254/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.141081349 seconds)
    (255/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.091780872 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.226336951 seconds)
    (257/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.722816629 seconds)
    (258/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.603857499 seconds)
    (259/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.157700068 seconds)
    (260/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.829773219 seconds)
    (261/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.049022967 seconds)
    (262/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.185360106 seconds)
    (263/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.461620694 seconds)
    (264/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.068526666 seconds)
    (265/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.330389485 seconds)
    (266/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.054100738 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 4.614939612 seconds)
    (268/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.144749062 seconds)
    (269/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.735086885 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.336938239 seconds)
    (271/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.464446265 seconds)
    (272/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.052024298 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 8.569313502 seconds)
    (274/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 3.701820151 seconds)
    (275/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.400487146 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.18072406 seconds)
    (277/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.374491551 seconds)
    (278/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.388076936 seconds)
    (279/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.842942555 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.068063986 seconds)
    (281/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.542871044 seconds)
    (282/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.181567898 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.184997263 seconds)
    (284/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.042420598 seconds)
    (285/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.057024349 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 8.762927032 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.354280635 seconds)
    (288/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.361724653 seconds)
    (289/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.057882413 seconds)
    (290/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.350303196 seconds)
    (291/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.056298886 seconds)
    (292/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.921908512 seconds)
    (293/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.665622145 seconds)
    (294/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.77932679 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.054994002 seconds)
    (296/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.11316081 seconds)
    (297/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.141623078 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.17899446 seconds)
    (299/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.260620386 seconds)
    (300/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.376495453 seconds)
    (301/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.288345633 seconds)
    (302/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.069802058 seconds)
    (303/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.133629659 seconds)
    (304/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.57119311 seconds)
    (305/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.159559621 seconds)
    (306/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.053088909 seconds)
    (307/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.066999459 seconds)
    (308/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.052081917 seconds)
    (309/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.166506437 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.396736597 seconds)
    (311/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.488569662 seconds)
    (312/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.190648485 seconds)
    (313/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.995039055 seconds)
    (314/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.078578586 seconds)
    (315/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.056857202 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.965497374 seconds)
    (317/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.953498532 seconds)
    (318/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.054095992 seconds)
    (319/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.945127548 seconds)
    (320/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.935728412 seconds)
    (321/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.063738558 seconds)
    (322/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.53074319 seconds)
    (323/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.267482053 seconds)
    (324/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.160522268 seconds)
    (325/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.184372387 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.344605405 seconds)
    (327/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.842706699 seconds)
    (328/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.368390121 seconds)
    (329/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.792000849 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.777210977 seconds)
    (331/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.463806475 seconds)
    (332/341) benchmarking ("sort", Float32, false)...
    done (took 5.719736091 seconds)
    (333/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.267027776 seconds)
    (334/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.135655771 seconds)
    (335/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.257819583 seconds)
    (336/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.834053019 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.043407764 seconds)
    (338/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.434494903 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.089463822 seconds)
    (340/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.355584134 seconds)
    (341/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.458332672 seconds)
  done (took 1154.515535133 seconds)
done (took 1156.842508767 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.079293979 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.058794315 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.552320119 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.068699798 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.058397026 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.061853544 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.563133937 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.089398422 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.075259169 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.564691837 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.069793168 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.059778564 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.073625183 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.093710627 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.070692359 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.072736419 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.06453814 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.08441341 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.094299045 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.064754831 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.110112457 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.064757314 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.058584647 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.110951108 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.059531407 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.074242121 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.079768902 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.110327523 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.110048418 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.052371595 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.066123819 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.408995706 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.109462401 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.064771719 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.071678194 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.074762478 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.06543402 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.075402634 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.079563466 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.069699341 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.060134909 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.070662399 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.06355342 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.062501384 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.059854335 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.059637215 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.061498358 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.18614232 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.075233179 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.394345664 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.119469062 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.079275643 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.11203329 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.063757881 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.062685177 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.063727277 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.110503488 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.066442549 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.065560563 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.392233209 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.15313111 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.074900698 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.393328113 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.122923541 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.071785224 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.069925914 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.060537593 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.079893402 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.410008468 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.604752495 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.093703335 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.081874788 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.062851543 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.063150621 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.075497178 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.564545986 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.076779819 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.632456404 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.089830828 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.075474038 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.068779885 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.063627177 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.063009671 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.078691862 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.081943639 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.061937706 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.06824564 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.068760437 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.076230371 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.413562769 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.10486625 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.556065102 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.071116017 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.083171273 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.082855633 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.632837208 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.092661788 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.081090848 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.065960756 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.412396009 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.102039341 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.083385411 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.065618126 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.07479172 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.177757411 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.082906888 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.08435308 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.062195706 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.085377193 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.070390907 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.063424133 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.077851896 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.083596971 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.098498199 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.080420337 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.06433897 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.072701277 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.070139687 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.082025878 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.072717157 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.071461428 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.075389692 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.065178268 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.115953935 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.0832834 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.079037101 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.179309253 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.069920138 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.189727675 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.07831323 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.070705313 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.063563053 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.397717552 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.108470736 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.086545707 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.07110882 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.087346217 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.086959607 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.08170716 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.066586695 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.080582866 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.06744342 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.117415959 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.065354312 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.089998813 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.116940413 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.079072472 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.071185629 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.08352359 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.100153615 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.086263825 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.069387632 seconds)
done (took 324.956801189 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.112348578 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.064679943 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.14121621 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.064381595 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.136021273 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.120650198 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.063053374 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.06466504 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.064663842 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.454368576 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.064215478 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.069405709 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.062951397 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.065203946 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.116497687 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.065111612 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.064649015 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.300005604 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.065318657 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.123441814 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.065070069 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.065168077 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.06465954 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.451314265 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.065230856 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.065844116 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.12464233 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.065126879 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.304086985 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.065564348 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.066417902 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.304821651 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.12466364 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.078441219 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.075812122 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.071622885 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.137840287 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.074849232 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.114493943 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.114210583 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.142815825 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.099498981 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.065456807 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.064482106 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.068716511 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.067070925 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.066703485 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.099816108 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.06499275 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.071928152 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.301343318 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.074200947 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.071899512 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.066195384 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.066770994 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.082648854 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.066419058 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.067473585 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.12666382 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.067420561 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.11517012 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.453060076 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.456911002 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.06695649 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.066142625 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.067021793 seconds)
  done (took 196.807402538 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.133962568 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.153553647 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.135394452 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.072298839 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.119254114 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.135652073 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.072285273 seconds)
  done (took 16.819571019 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.075341639 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.067545221 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.090906528 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.090556119 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.067876939 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.206769517 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.0794528 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.074025487 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.093988437 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.06779232 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.403975498 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.091892273 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.075954098 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.068211575 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.079386072 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.097410918 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.070447134 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.067267682 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.166115462 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.145561671 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.073682677 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.075489155 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.097633788 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.080729394 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.06928426 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.069113009 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.068919862 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.075958198 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.069369221 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.068050193 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.059867685 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.082206146 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.068790052 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.068021748 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.069681316 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.069723473 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.069047502 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.069620492 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.07010697 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.069963404 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.069388366 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.06991064 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.070156674 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.069767054 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.069107085 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.092588166 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.069871434 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.06975353 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.069536207 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.070607784 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.098678083 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.070336571 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.07031489 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.074916945 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.110614489 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.077767156 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.070094856 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.070537393 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.070877339 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.069764294 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.070019293 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.150153193 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.09342657 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.070242448 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.094292499 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.108136519 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.07062672 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.070843797 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.070202267 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.096406628 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.070928674 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.094569884 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.070876159 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.170176527 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.070957537 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.212528222 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.093853083 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.075254686 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.075455683 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.071056191 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.078760117 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.071207888 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.074052721 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.077982209 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.076650607 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.07153249 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.071275475 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.073361424 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.079140326 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.071932852 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.115669358 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.071183879 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.071720138 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.16924953 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.071986918 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.169719288 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.097953692 seconds)
  done (took 224.545117201 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.077593991 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.073932197 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.085268418 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.07361789 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.072812214 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.077465779 seconds)
  done (took 14.463119549 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.075070708 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.07730844 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.072674519 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.073005159 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.072815749 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.073631118 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.072202685 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.074967382 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.076755499 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.072953284 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.072951255 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.074017516 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.073723361 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.072936948 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.0741688 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.073070856 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.073524015 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.073689648 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.072885366 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.072911582 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.317711313 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.073474652 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.073491902 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.076987154 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.079156979 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.073522492 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.082710255 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.073941647 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.073395153 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.079715528 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.077807975 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.074974511 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.076784419 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.073851373 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.079130319 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.078466806 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.078981358 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.075065753 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.074473192 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.075101513 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.075727353 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.074347874 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.074865501 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.068123976 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.077847236 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.083168313 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.080903762 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.08440915 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.068833381 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.066732854 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.073746665 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.074715444 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.076090231 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.076035773 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.080439036 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.082188255 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.080372859 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.075504196 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.075765334 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.07976543 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.080153633 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.075933836 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.077740221 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.080077043 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.083489776 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.076526865 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.079910386 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.080213323 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.076233917 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.076080957 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.075954739 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.076659397 seconds)
  done (took 152.7170732 seconds)
done (took 607.347113982 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.118680809 seconds)
  done (took 9.124282536 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.07642425 seconds)
  done (took 9.167679225 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.292189073 seconds)
  done (took 12.291637338 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.141799274 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.103604511 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.079132289 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.084511903 seconds)
  done (took 30.43001377 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.297136096 seconds)
  done (took 9.303973503 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.088074156 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.073911695 seconds)
  done (took 16.23148964 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.208802658 seconds)
  done (took 9.216066727 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.531450855 seconds)
  done (took 9.563106735 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.099501728 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.101166634 seconds)
  done (took 16.225122903 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.077736371 seconds)
  done (took 9.084174788 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.823830262 seconds)
  done (took 9.907346353 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.084518092 seconds)
  done (took 9.109040888 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.14292897 seconds)
  done (took 9.151021026 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.922165815 seconds)
  done (took 9.929513257 seconds)
done (took 170.740354117 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.084286715 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.075273354 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.075560986 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.076155635 seconds)
  done (took 30.318234455 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.113064295 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.112713922 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.121446953 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.111938751 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.103381902 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.102716672 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.112729418 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.112499797 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.103798842 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.110538114 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.113757798 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.110270937 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.112611401 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.121794371 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.122059813 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.10986228 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.113786936 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.113802493 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.104040746 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.121538881 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.111383912 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.112911556 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.078831936 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.078694701 seconds)
  done (took 52.637504736 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.269016992 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.145679255 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.233010878 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.125289896 seconds)
  done (took 10.781249482 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.078505484 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.142320954 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.130616314 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.12404211 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.130608854 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.180646858 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.132599518 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.215543803 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.207718553 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.204233897 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.086018848 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.099845065 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.104444792 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.124954062 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.18202903 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.08009693 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.079739244 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.193458967 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.141790189 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.337800546 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.079727303 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.133234223 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.131315607 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.132554625 seconds)
  done (took 53.463615433 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.080869686 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.088238389 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.087487799 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.081143666 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.081746244 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.081633657 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.087289009 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.082479818 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.103732975 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.083080454 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.080755358 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.081608684 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.087898813 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.080708712 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.081461707 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.094473943 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.095022809 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.081403274 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.085198562 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.089129576 seconds)
  done (took 43.72595227 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.079104018 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.926410858 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.426971352 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.331019536 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.07971709 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.080803 seconds)
  done (took 32.93461509 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.094072025 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.09727304 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.08770131 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.105213854 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.127718393 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.090862121 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.139972485 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.245919858 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.090741311 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.1391542 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.101701586 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.0885998 seconds)
  done (took 27.421182344 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.079296607 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.080650253 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.081205202 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.093735177 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.092641675 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.089712233 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.08875747 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.08009658 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.094829414 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.100334533 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.089910304 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.092803563 seconds)
  done (took 47.075391572 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.294240833 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.306886858 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.294170122 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.626167386 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.402669547 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.057807565 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.36930718 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.295277857 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.788696002 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.815385462 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.373756018 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.055001154 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.025413434 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.008301469 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.000010835 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.325228155 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.084575191 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.941319734 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.334268864 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.124075345 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085847808 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.083999231 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082250364 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.371538951 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.402461629 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090637402 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.296747414 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.098842276 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.082657634 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.298393599 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.604281716 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.138146432 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.28593299 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.340578238 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.419940673 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.127258606 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.085541156 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.211698648 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.130744808 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.118561952 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.093858223 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.094765461 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.617331405 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.094941531 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.355990558 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.084938565 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.089461755 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.08123666 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010627312 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.334866392 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191041902 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.084816567 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.119472222 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.518096122 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20499224 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.327021694 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.088623762 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.215108201 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14439477 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.266072507 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.184159195 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.087720107 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297348311 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010252984 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.411032283 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.201090618 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.087199947 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.089798472 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.785303504 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.326838097 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.16649747 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.333233254 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.835551657 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.08649976 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.087486198 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.130005459 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.177420819 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.085719879 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.383601914 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.075409811 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.012178576 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.184680695 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.48332372 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090943825 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.085454953 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.093605205 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.932587052 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.011879016 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.182582968 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.268342708 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.403101175 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.087409171 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.087618442 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.108818144 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089788791 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.032291303 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.601272403 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.153173082 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.012696929 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.657998314 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.633322551 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.05614238 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.518165537 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133171318 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.362916299 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.241132464 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.495839842 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.296945911 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.335175867 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.620790928 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.094012312 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.648489599 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.170281685 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.166401192 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089243228 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.646641566 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.225128574 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.315304141 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.198731084 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.089943266 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.015514086 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.101168074 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.293345073 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.639588909 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.145919195 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089524495 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.094481988 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.090160219 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.092735932 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.196935427 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106318378 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.382136582 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.156651003 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.091036637 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.027869665 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.095798775 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.37208569 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.646764697 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1515501 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.342344989 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.341393806 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.791745049 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.687308117 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.036231337 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.350582058 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.15722847 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.157054247 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.657460199 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.22031631 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.18880665 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090820803 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.226135319 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.097551303 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.09453731 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.389452082 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.523648418 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.51864426 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.133946441 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.091845439 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.132549862 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.229293273 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.335179914 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117132172 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.117116955 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.097776465 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.174639426 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319341294 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.092326092 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.019030477 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339869735 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.332634378 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.379981567 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.497021462 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.122908628 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.163872406 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.102749312 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.306090261 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.17376209 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.751537966 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.639911783 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.308960325 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.620605474 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.058264728 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.732645957 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.278645705 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.468103551 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.109314408 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.545870705 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.231542357 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.733250596 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.123672773 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.620464525 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.019796291 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.098815446 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.428510162 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.046706918 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.407791009 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.151402158 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110710102 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.095858502 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.094777366 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101836231 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.98117816 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.199047673 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163754253 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167456258 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.021942494 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.665961764 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.134162811 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.096839175 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.094009803 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.408988794 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.912632108 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047286631 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.095426395 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.171480004 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.835374808 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.646707374 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.099393136 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.098975768 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.69969387 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.100688878 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.001937246 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.101371072 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.824341658 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121314863 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.28408109 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.78817592 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.382906861 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.163684582 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172359398 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.095842734 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.103201031 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.796322799 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.104447625 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.795869452 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.379277405 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.362251101 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.53334947 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.152170297 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.305384375 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.110596905 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.097159073 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.554227441 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.121220839 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.098262351 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.299379709 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.615457633 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.357574563 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.733444852 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.18310526 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.097236775 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.364354757 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.082027214 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.642549075 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.783600053 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.090022297 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.096664849 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.364226233 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.782091555 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.098717144 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.073210989 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104570498 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.310128561 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.300684271 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.3689629 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.392959688 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.542277557 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.024305928 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.102685008 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.12033393 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.341654937 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.097928774 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.133373882 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.543455668 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.127018921 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.526968255 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.37685891 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.409744139 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.725398157 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.362771297 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.156167777 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.109938762 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.747725784 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.215029674 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.031165418 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217111643 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.024974497 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.817082482 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.391753244 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.090466844 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.361227991 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073550487 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.434913849 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.390497847 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.292412188 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.140954059 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.134313596 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.098200651 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.147952811 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.099044198 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.248764803 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.216129915 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.106800943 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.595784876 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140019269 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146189818 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.104739305 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.585097462 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120282789 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.103951943 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.794550925 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.124968253 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218973376 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1714408 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.827652531 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.682209779 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.180466471 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.976759737 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.746738683 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.367667378 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.150330111 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.550045099 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136179824 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.505062035 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.100959803 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.312970916 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.105640307 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.635265644 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148402651 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.367470589 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.054714836 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.314594623 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.300933721 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.12547229 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.106543506 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.028229163 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.205168528 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.982560253 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.082584095 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.104078116 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.784065937 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.481299446 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.267271171 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.517308091 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.922289342 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.104356921 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.438898438 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.492141753 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.666932354 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135268403 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.093134289 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.361194377 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.22993422 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.336265537 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.369251667 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.110582867 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.129095997 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.304734744 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22793221 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.021907006 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.576661636 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.687132252 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.804049899 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.107216317 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.303365704 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.370288647 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.330753352 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.139145856 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.175803058 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.508119523 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.373616816 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.165460154 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.030385581 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.102901115 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.497416824 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.611519234 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.200774059 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.344234693 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.410312347 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.651761759 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.674930911 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.491188745 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.474506975 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.501968206 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.51584843 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.315807612 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.464573452 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.424029917 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.687244938 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.516165585 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.31664611 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.195093664 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.37597815 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.972802043 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.814834395 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.348811542 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.110038177 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.033720578 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.311709634 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.171540021 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.411108204 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.633799309 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.352904237 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.295496111 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.57442192 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.642727867 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.25309644 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.131171551 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.070422077 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.129057647 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.125759014 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.104793042 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.59635596 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.394404709 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.11942021 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047861155 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.777728038 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.033551783 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.319333837 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.248380985 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.141922977 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.662304484 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.302288108 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.205576813 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397977983 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.302653043 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.143028806 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.032412327 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.821422778 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.052653016 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.132598297 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.531065263 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122862895 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.109167354 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.310233894 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.035633087 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152305657 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.111443861 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.304925761 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684515945 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.377312148 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226215282 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.349283209 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.406636654 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.918249654 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.131659431 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.379287535 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.034183906 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.690419998 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.787138432 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.147627551 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178533415 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.107266054 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.110258243 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.378661362 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.371266324 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.262943343 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.67330931 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.14149471 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.131021182 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.368647103 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.197742249 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.110383934 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.113143368 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.59461855 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.34240528 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.107905752 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.093764178 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.320731884 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181563984 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.305479193 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.184112132 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.622513801 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.113147218 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.92880837 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.208024802 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.058599177 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109084317 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.788016225 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.170240773 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.10988375 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.381060757 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.724567116 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.30017877 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.503435121 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.000873982 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.25788181 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.153239761 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.112156319 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.174735885 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.3911262 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.405774817 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.10949193 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.380213417 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151592377 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.115099485 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.770611273 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.078677206 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.109565932 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.831060444 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.027062864 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.841373309 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.506549969 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.114474085 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.11311865 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.11195637 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.035745842 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.110460143 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.286336504 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.09174236 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.179865667 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.381918285 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.34992932 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.191214139 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.11404967 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.111652111 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.117198209 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.323361534 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.624814473 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126628506 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.810874164 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314218346 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.118643717 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.593200865 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.551808668 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.318873367 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.153116065 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.265262591 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.352727354 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.649215204 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.263853792 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.090388282 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.338943141 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.113114446 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.383100036 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.386361617 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.112295766 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.313673218 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.665542308 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.402278705 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.465071462 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.421777936 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.17078804 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.274581221 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.051088148 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.113497409 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.113581344 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.378245337 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161107946 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.112238023 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.121375321 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.667069767 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.831043504 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.577258496 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265201366 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.357991285 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.86642954 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.865717643 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.114941126 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.039653162 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.112865981 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.139040403 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.11566435 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.039204395 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.766785725 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.833899279 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.325216718 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.423021519 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.040301544 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.316684004 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.693753425 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.0394286 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.081844154 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.113297514 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.371658566 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.041716682 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.115991789 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.067240912 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.323598085 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.785808338 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.385830143 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.114904882 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.059501259 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.119819899 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.116434545 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.113927438 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.198341401 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.115264832 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231268995 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.382102644 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.411608679 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.213449371 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.753203478 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.836514634 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.05239953 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158377245 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.674276615 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.68527696 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.324966684 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.235581383 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.832548112 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.059829865 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.117322246 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131512753 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.372165837 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.11959986 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.117210575 seconds)
  done (took 2214.14069975 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.162597578 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.17964843 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.173824965 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.277658277 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.130525913 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.146310879 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.161114819 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.168849476 seconds)
  done (took 59.445458118 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.115966237 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.414310584 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.156472489 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.117384884 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.116140073 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.135666274 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.303550779 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.144167982 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.116166629 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.12047507 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.116477024 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.124149441 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.116266843 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.116046135 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.121417388 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.381087786 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.137192262 seconds)
  done (took 80.927780678 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.173879208 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.042987018 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.119647922 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.924554408 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.16574132 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.413763968 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.119679775 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.116915499 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.463710664 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.417325527 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.126976478 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.12883066 seconds)
  done (took 95.259324941 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.119037422 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.117557273 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.118452414 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.118183515 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.117816604 seconds)
  done (took 12.637155013 seconds)
done (took 2762.835631833 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.359048905 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.211015936 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.189073772 seconds)
  done (took 6.445917459 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.261224168 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.310903251 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.426292959 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.429964308 seconds)
  done (took 11.479561794 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.413277948 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.499323202 seconds)
  done (took 6.959729488 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.48640697 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.138863292 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.50596294 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.120334275 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.120685387 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.122420513 seconds)
  done (took 23.414717295 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.119148442 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.118670457 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.118777134 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.119068618 seconds)
  done (took 10.520821761 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.118230574 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.899671137 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.117728425 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.126344926 seconds)
  done (took 22.309019211 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.339417322 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.128309476 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.891120891 seconds)
  done (took 10.406902 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.742336031 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.564994423 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.732552996 seconds)
  done (took 10.087805456 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.262207672 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.955598891 seconds)
  done (took 8.265036165 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.264235591 seconds)
  done (took 4.311283963 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.952065967 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.432395246 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.609243822 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.629329727 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.699031834 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.329878146 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.434653755 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.382997536 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.51615564 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.512870861 seconds)
  done (took 27.546037911 seconds)
done (took 158.285884472 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.550517606 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.144737203 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.328208821 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.494867083 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.360651526 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.327964702 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.423033579 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.484068241 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.172528858 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.157476835 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.497082692 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.362538936 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.359805466 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.137214805 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.37992937 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.137788747 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.359529677 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.580727877 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.182623036 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.426186505 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.421025301 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.132869697 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.327818961 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.161507512 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.361343403 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.281198421 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.749401466 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.137066138 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.331892229 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.763911765 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.28344908 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.565793126 seconds)
  done (took 177.43439343 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.000481474 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.121794488 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.121572758 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.12153313 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.436195672 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.122811803 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.124074261 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.122466347 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.448007744 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.43608324 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.111879506 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.425781457 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.122382293 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.12260606 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.124635204 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.122979958 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.569207152 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.041994836 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.122808086 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.122810959 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.123649425 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.306423011 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.12294635 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.313718852 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.556961077 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.125031969 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.122938635 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.122595772 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.124202958 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.123865977 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.12420221 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.123323652 seconds)
  done (took 216.28446085 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.123401427 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.125373161 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.123828873 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.124300573 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.124967649 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.124073566 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.12343287 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.123665964 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.867407814 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.855174735 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.125199404 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.125316471 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.124437757 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.124302282 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.124913715 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.124873518 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.123230694 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.125255199 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.124744906 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.124761988 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.124290573 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.966615155 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.125098623 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.011529741 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.125821852 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.126313251 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.124500341 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.127198109 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.127346611 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.124762605 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.125869883 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.125214295 seconds)
  done (took 229.250879706 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.366022776 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.125103038 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.12653451 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.138289634 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.126370354 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.126229402 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.131760381 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.372042735 seconds)
  done (took 21.567343453 seconds)
done (took 646.594849371 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.471271777 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.84811342 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.257132818 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.149336588 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.376929199 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.190527673 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.14382022 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.207556784 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.797124818 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.219187244 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.562375689 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.151856802 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.882522793 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.169439148 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.262280608 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.204713423 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.530356736 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.806804487 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.280569826 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.806359551 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.345968864 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.065211361 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.225167308 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.833775275 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.575244915 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.089682614 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.156939792 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.52870906 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.148931675 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.382613329 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.798804322 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.391133077 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.159676243 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.149725516 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.200841364 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.193548136 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.338140349 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.156507258 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.254533338 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.855839664 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.792198591 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.674303307 seconds)
  done (took 110.681670788 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.134175757 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.131645506 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.132111967 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.131997992 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.140314515 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.132014991 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.13267471 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.133413716 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.132471355 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.132883686 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.132881092 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.140098005 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.133184306 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.140461153 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.132848449 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.132326206 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.13321131 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.140817255 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.132563607 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.132878863 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.132335846 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.133145201 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.129342059 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.132915133 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.134340879 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.133699935 seconds)
  done (took 57.544284008 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.129933505 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.283129944 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.416698708 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.160419163 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.130043777 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.133110499 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.158632974 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.136083858 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.13220841 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.132522852 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.243264195 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.134191139 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.141881972 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.412717715 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.158075893 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.129931549 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.129991318 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.131663938 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.289573938 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.145974965 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.161562929 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.137481583 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.160768689 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.145768557 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.134116493 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.131951881 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.134371032 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.53281273 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.142024573 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.243677534 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.176066611 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.165324627 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.476823405 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.423948703 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.197442243 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.138683533 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.131419122 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.289024322 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.143678284 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.132678558 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.159918782 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.139826295 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.416631817 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.633537809 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.146532724 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.131716674 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.530406941 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.298346889 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.179713533 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.144983544 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.42455309 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.160171227 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.132182573 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.134067629 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.169252949 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.143066344 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.133013826 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.373608574 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.147999524 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.160622729 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.139603172 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.133556505 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.297316763 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.141511864 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.291411012 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.141960016 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.129832212 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.134299336 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.420055395 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.160634005 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.632607027 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.14722581 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.132845059 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.245584157 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.293999436 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.556764778 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.147048513 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.298900291 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.496026217 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.170079674 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.144458211 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.517830905 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.17392733 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.143985914 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.133179 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.134124951 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.133990843 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.177558497 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.160424391 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.555907368 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.636829101 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.391399114 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.173615608 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.146860789 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.125704696 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.374945267 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.144586645 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.124390608 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.416009777 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.655561846 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.149225165 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.141363613 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.616882849 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.150151061 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.164120982 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.14627329 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.427807538 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.163394249 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.177654706 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.134723069 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.141430782 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.138134637 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.164123795 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.145947849 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.134774031 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.609835615 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.307036332 seconds)
  done (took 263.239662021 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.138501011 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.134510929 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.135780016 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.13449858 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.134953497 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.136207279 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.133885743 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.133229826 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.136312478 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.133748084 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.1344813 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.134479252 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.137101222 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.133924605 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.171144162 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.13691136 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.623494428 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.13518018 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.134431096 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.137013664 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.706406887 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.141694311 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.134181988 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.137559387 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.137775373 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.135424937 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.137412931 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.168985565 seconds)
  done (took 174.998302975 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.136625247 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.183927646 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.148461968 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.183665683 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.149003266 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.136930523 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.158209019 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.152620641 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.14256104 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.136562622 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.137822845 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.16474548 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.145013485 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.211719764 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.166285407 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.166230861 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.215223823 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.144162701 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.13766178 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.137557998 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.185385016 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.150538425 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.165147227 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.191772694 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.149412847 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.18536191 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.150105271 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.13791901 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.137720493 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.226799728 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.153812315 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.165811286 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.172724995 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.156381613 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.230790683 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.228524226 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.219801257 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.166470913 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.141720806 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.138013085 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.139517601 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.140208522 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.185322529 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.150938729 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.139410824 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.228834943 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.1549652 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.137732363 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.161489482 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.138570806 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.150664294 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.15446133 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.171567545 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.240287941 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.182932779 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.164607677 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.160869368 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.156004783 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.138582601 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.212578835 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.147458187 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.229008942 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.157676269 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.140301947 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.141073614 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.144103902 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.186925924 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.174324291 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.217377832 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.14884005 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.213245718 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.195030297 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.153169098 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.14100256 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.140615025 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.188323731 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.226115791 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.194755499 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.199250766 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.175453369 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.149155728 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.1407945 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.14146113 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.168828686 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.148033122 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.229809256 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.230795246 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.148782299 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.141179492 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.141184143 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.141393908 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.163543888 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.196873242 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.180083127 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.224186851 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.175367208 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.176581408 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.148914802 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.152628265 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.146588267 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.172382235 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.148864751 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.153579865 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.47389965 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.176680559 seconds)
  done (took 229.971895061 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.508569208 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.191636023 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.210693983 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.422669469 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.530159394 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.270381782 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.179782241 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.199936698 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.199083298 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.310537846 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.24724974 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.232866608 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.175902516 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.164431141 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.190162352 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.197603502 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.216322599 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.48777644 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.28617977 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.873418771 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.178512599 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.448190693 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.473851898 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.528802748 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.226990494 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.601384316 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.799559598 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.277882737 seconds)
  done (took 69.704092515 seconds)
done (took 908.19388452 seconds)
SAVING RESULT...
DONE!
