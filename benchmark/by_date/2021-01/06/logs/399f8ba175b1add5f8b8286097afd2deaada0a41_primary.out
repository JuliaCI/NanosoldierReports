cset: moving following pidspec: 7259
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.846128719 seconds)
loading group "shootout"... done (took 1.182087922 seconds)
loading group "string"... done (took 0.67307812 seconds)
loading group "linalg"... done (took 8.627724202 seconds)
loading group "parallel"... done (took 0.165564411 seconds)
loading group "find"... done (took 3.047848554 seconds)
loading group "tuple"... done (took 2.145065378 seconds)
loading group "union"... done (took 14.950688226 seconds)
loading group "dates"... done (took 1.454272124 seconds)
loading group "micro"... done (took 0.219606061 seconds)
loading group "simd"... done (took 4.791973172 seconds)
loading group "io"... done (took 1.083805218 seconds)
loading group "random"... done (took 9.601921524 seconds)
loading group "problem"... done (took 1.526099175 seconds)
loading group "array"... done (took 25.362695423 seconds)
loading group "misc"... done (took 1.892493952 seconds)
loading group "scalar"... done (took 43.769534717 seconds)
loading group "sort"... done (took 3.332018715 seconds)
loading group "sparse"... done (took 12.819052967 seconds)
loading group "collection"... done (took 18.778886252 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.4376486 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.116325308 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128754378 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.113986477 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.184759927 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121171888 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129736262 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.084785415 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.945991839 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140684811 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.114879793 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.42644815 seconds)
done (took 5.493498707 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.171092769 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092856449 seconds)
    (2/2) benchmarking "String"...
    done (took 0.08278419 seconds)
  done (took 1.490196447 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072834278 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060521785 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067581165 seconds)
  done (took 1.514108434 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065737433 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136852743 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065440822 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066673014 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066954948 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066249058 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06671582 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066438858 seconds)
  done (took 1.855809922 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07314897 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067183455 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065158835 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.066803055 seconds)
  done (took 1.591842452 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065965774 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123091457 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064934647 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064629517 seconds)
  done (took 1.634410146 seconds)
done (took 9.660107958 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.141594458 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.815193558 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.77662889 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.124581396 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.254291429 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.363467511 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122043421 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.182422949 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087032776 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073797255 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.120387136 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07647583 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.389429 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.502352389 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070009053 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.16879046 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.653005282 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088182477 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.131659661 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.465865649 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071776279 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086453624 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084545422 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069446694 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.332910677 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152040119 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.669008526 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091352026 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066760382 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094338824 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068649295 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077941379 seconds)
  done (took 10.825166097 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094728207 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090445203 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069125315 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124491298 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095223864 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070311458 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075531945 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067695106 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089430287 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124960277 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089232037 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.096747802 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064655707 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068620045 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.073598313 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.196810063 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.079016281 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082877995 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066846616 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081467015 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106058 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077699444 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076949542 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076720091 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.128283173 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.168084939 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094998295 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096811989 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064553211 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077501311 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113994789 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123966875 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065499417 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063968884 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118759196 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093737013 seconds)
  done (took 4.72307659 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.879685206 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096565248 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083785077 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07434742 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107508509 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114465423 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122638151 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.124271278 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100671315 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069104403 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.115098136 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153636209 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.677587272 seconds)
    (13/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066522958 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.174989576 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070230739 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118496743 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.356180432 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.074532809 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068397989 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066934137 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071380862 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070293955 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113073337 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066115557 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177063336 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.583885075 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069430448 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068051846 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095107849 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064150895 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.13889827 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092916733 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069924006 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.554760656 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06580445 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063842653 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.203243842 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094288696 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066987892 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068302633 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079221102 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06615762 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10909218 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080777049 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.513849448 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068047482 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.583713517 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.223151689 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072872569 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071723695 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064440654 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102609222 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064063028 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06760314 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.9021417 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.143452218 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065767472 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.274508883 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068616121 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068278884 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068978323 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099435237 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067095219 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068643929 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072958213 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096316743 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.890154782 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088166375 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096425946 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067421626 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.409417881 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074571454 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069373126 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069461897 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.06877978 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.107114956 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066317933 seconds)
    (78/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.063803301 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065817728 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.111584334 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.09479537 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086996559 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068866236 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066476772 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064546577 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.319888041 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.155293096 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065255352 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065625395 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.477720887 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062281807 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067152473 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.0665763 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.207647761 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065715157 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063046077 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.06374169 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097844309 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066600155 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.338305494 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065424019 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.468389618 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067552012 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101469849 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.117839883 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066299649 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098740957 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066341399 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063325857 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072092233 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.063896904 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.06423063 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.07000185 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065833993 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066543533 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069446509 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068740049 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067898022 seconds)
  done (took 22.918079674 seconds)
done (took 40.666974002 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.319366258 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079187868 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079329016 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079337653 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.07948083 seconds)
  done (took 2.002084658 seconds)
done (took 3.470652269 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.25441674 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073581529 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062718004 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.199868842 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.08885315 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.17375478 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.215306153 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.158542235 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.08627958 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.08583351 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086470301 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.214227342 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.221439392 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086597243 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.156724306 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.22313843 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.08644508 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062665195 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.085861613 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086363217 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086508942 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062541649 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.085924076 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.085700855 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.154970093 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086174501 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062366757 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.15666606 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.08629719 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.156820335 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.086238585 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.085711526 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.086422278 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.156081745 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.086348883 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.15623532 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.182304104 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.085498901 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.085494594 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.08568747 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.0845201 seconds)
  done (took 6.325961634 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075485499 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084458887 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083217394 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061117539 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069844245 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080277918 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060688593 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08014347 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086361179 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080819487 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080411285 seconds)
  done (took 2.288407282 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070599161 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083272296 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084614208 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061507845 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073189488 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083525215 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061374327 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082729188 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086477225 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083644587 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083515842 seconds)
  done (took 2.256881116 seconds)
done (took 12.260226725 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098180832 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065680686 seconds)
  done (took 1.546396718 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.2256178 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.494290886 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.899938956 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090882413 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070169813 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083346625 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.195078783 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065375811 seconds)
  done (took 7.701805734 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.100542995 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.072042841 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069375618 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067063013 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067122566 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069154205 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068583449 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067456064 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067601027 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068322626 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067944624 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069615772 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068156778 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067138736 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068274366 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067500495 seconds)
  done (took 2.624170535 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104014199 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069093431 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099556326 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061754934 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071472455 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062057958 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070690844 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072427705 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070237241 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071077326 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072523018 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071604287 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071651346 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071567866 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072949287 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073027335 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073448453 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070861791 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073480718 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.07397624 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072416444 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073168334 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073662844 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071488761 seconds)
  done (took 3.2887143 seconds)
done (took 16.563642935 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175811091 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072701396 seconds)
  done (took 1.640057169 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068175657 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067223125 seconds)
  done (took 1.545500862 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072804405 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058976432 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07571833 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068333432 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059558091 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059456743 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074682537 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059634553 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059678626 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059534573 seconds)
  done (took 2.057826394 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063245556 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068662747 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065498065 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063299076 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066639008 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062078681 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.064784595 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061818186 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067127867 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059812823 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064145036 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080808778 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063354722 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081807709 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064602957 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065352299 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067513134 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064721442 seconds)
  done (took 2.608425446 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061264854 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061615383 seconds)
  done (took 1.54357704 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065254396 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061658257 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06363999 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063596965 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061857671 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061269905 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061880631 seconds)
  done (took 1.852519617 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.428128706 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121914207 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.34547216 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067878315 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074693488 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259316491 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063673674 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068707704 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069232562 seconds)
  done (took 2.957423031 seconds)
done (took 15.633044632 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082927709 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182448059 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.08771216 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.378274768 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089610518 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065183291 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.111372344 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.175058635 seconds)
done (took 2.614320447 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.27849163 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.131082489 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.308409739 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146114885 seconds)
  done (took 3.010491449 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.333230489 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.076969931 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075481205 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064729001 seconds)
  done (took 1.983875568 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064858314 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07079306 seconds)
  done (took 1.565047208 seconds)
done (took 8.27855602 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072000788 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.091633342 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061128164 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.067261037 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063423543 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.062962148 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06127006 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061250439 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062259746 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059762128 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.062107694 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.062218996 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062276093 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062001821 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061436901 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059955901 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062257304 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061668894 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061713784 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061349646 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061811591 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062534149 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061228363 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062248577 seconds)
  done (took 2.982764543 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079782976 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063877308 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.0650035 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065835513 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066740029 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066130137 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066319629 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064953238 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064813374 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063488834 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065314441 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065163574 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063684 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065232962 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063613396 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.066505232 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066235773 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065171442 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065051808 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067294565 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066666541 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065392226 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067130153 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066469823 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065712099 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066096178 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064985687 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065454377 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066799683 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06745916 seconds)
  done (took 3.429998333 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066266905 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059771946 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059744247 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069493607 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059727781 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060211757 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060340546 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059655716 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059874624 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060793614 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.06078257 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060225904 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060872148 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059932427 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059936695 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060449164 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064974389 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079649733 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059228635 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059710558 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064448674 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059898375 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059682475 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059572737 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060362226 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059475612 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059486114 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060307787 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.05982601 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060492083 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059499158 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064391513 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06503283 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058345446 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069680068 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064018752 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059316007 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065301538 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.06120632 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059702388 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058965514 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058111023 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058358702 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058646101 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068575725 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058811151 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059521682 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.058886386 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058626667 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058326534 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058558388 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060314817 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067183512 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059890171 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058440856 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060051291 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058469586 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.058825725 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058529756 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058464471 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058403427 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062227921 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060076693 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059383074 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078092754 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059741745 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068615423 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058319476 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.058902454 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062641537 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059050669 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076429192 seconds)
  done (took 5.87445051 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071426104 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069541134 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077434073 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068582536 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062363348 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059391714 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062745522 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05924311 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068224094 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063331642 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059331339 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062986521 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068254042 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063165746 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060534309 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068622602 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064559804 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063974839 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059826905 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063098125 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060634584 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063025001 seconds)
  done (took 2.881048117 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.139089386 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064330132 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103355542 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068534527 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067016591 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06828028 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064698269 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06438439 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065383954 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065567709 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066154419 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064768581 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066915637 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065467563 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065209588 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066532846 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066468671 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066481171 seconds)
  done (took 2.746843285 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077502279 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065379993 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089942982 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065186168 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065645545 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065357997 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069031368 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069871368 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065293408 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06557679 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069998281 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065430261 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065261688 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065717424 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065354385 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065863682 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065833735 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065555648 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069570647 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069323302 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.07028154 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070565927 seconds)
  done (took 2.957982264 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078008561 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064257173 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080390461 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066487857 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059970151 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059868119 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066088158 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065539895 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066521588 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065077144 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065378402 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059068034 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.06528031 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063827994 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065635076 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063669515 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063524007 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.0638682 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063108895 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059461285 seconds)
  done (took 2.756791391 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072615694 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061721989 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061384541 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066586728 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061232503 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061503322 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066753919 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061653946 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061323077 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083168371 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061995043 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072718939 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066640474 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06505082 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061463159 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06651206 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066862301 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068093697 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06252166 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061309659 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083194043 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061571852 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066290275 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061829129 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061139683 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061250635 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061634099 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064661829 seconds)
  done (took 3.284225275 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064245643 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062659768 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06312708 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062981891 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062996373 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063050827 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062778958 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062754345 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062747851 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063409063 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062761872 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062775745 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06600151 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062696408 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06298019 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06296104 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061709284 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062157297 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062287755 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061736225 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061531295 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061478801 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061307822 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061712757 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062492721 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061602237 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062018085 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062140988 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061677694 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062061303 seconds)
  done (took 3.334821992 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073281297 seconds)
    (2/2) benchmarking "in"...
    done (took 0.0703573 seconds)
  done (took 1.602848461 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061193448 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075428442 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.05800909 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070214235 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066686539 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063751177 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067153988 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066880299 seconds)
  done (took 1.980946494 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066456684 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08823226 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060198953 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060520136 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063144655 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125586622 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.073028747 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071926171 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07417653 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062884663 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061137059 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072122221 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060076984 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07386204 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061696593 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069309245 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067573508 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078536696 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073158549 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058690385 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072510185 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060749481 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.05877758 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061032316 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060115508 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067611324 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075734888 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072587505 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068500399 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057795356 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078678121 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059060021 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060488994 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069677971 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063227342 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059230624 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095758434 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059385469 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065072365 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060753399 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073301138 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083168224 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076260801 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079824744 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062784977 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063178208 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060924752 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063013227 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06436597 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070301362 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059990398 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068098777 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059554885 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062074168 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071453727 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061095457 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066583662 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071171482 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075665002 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07248309 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070628095 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077225297 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070664575 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069021811 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062704793 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08162984 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062906717 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074585342 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076235311 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061605022 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07451887 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060185967 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059473714 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.058890723 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09260739 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061011798 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060111849 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.05889886 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059148661 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061914249 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070604282 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065626352 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06878757 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063944526 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076750136 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069962084 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060500846 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067205076 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079005435 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064109527 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060960627 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077753092 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064104498 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059837392 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.077606635 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.069731271 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.061568316 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.060292203 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062479981 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073109239 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060563133 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057776787 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067851752 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06036597 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061150907 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063351836 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067155087 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059036338 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069100657 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063547833 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061042111 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057752887 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063285566 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059845253 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057935044 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068277032 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059149628 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07334852 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065481767 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073228927 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073513425 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069365245 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074657609 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058429501 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057360269 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076768243 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068049955 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059849518 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076590331 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.058317481 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071780161 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.058171606 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.060735684 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.206008855 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.058583015 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061448435 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.059275472 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064240917 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060621924 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060913715 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064657187 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067392271 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071275249 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060317173 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067648694 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059349079 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074667411 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.06915108 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063386385 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062247665 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059460167 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071035032 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065676937 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068275539 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058483195 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059406335 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059022999 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.069597743 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068862179 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060846727 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.065753309 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063692146 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061191037 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061286621 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061521235 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064205786 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063931608 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061010781 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068615657 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069376727 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074559392 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067061217 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069617962 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059296356 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060068072 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061972389 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059709374 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064475422 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069711082 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075864928 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071613538 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081697331 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060127239 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069864628 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061560963 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077144869 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073622653 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061132971 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064983715 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059159572 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061718599 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070161494 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072225384 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074238918 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075676671 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064851866 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064892191 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059974351 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075597968 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060687164 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068796952 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.069921716 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.064844431 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060402843 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061710479 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069707794 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064857561 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060372473 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076348859 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066477863 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059991304 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.074777116 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060571228 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071405435 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.059915176 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064096767 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.06574619 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062245029 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070469123 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076231995 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059387452 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061048707 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076031913 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061281354 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060412769 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067150425 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074465325 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063551702 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067128544 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069837318 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069019864 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063702942 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068638031 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059744822 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.06854643 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061692728 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.071066472 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058835208 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076892851 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058114055 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073961726 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059323867 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070278938 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059728316 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068595911 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059792537 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075791019 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060509649 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059650823 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071126279 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057975086 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068444432 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058654523 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06422208 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06586474 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068795043 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061225674 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069866727 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061646339 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.069092625 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064850654 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068597548 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069577107 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.06504377 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059617152 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068603107 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071535351 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.06763984 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06107008 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061382986 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060012326 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.209867361 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061041955 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060965589 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067684632 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.063791635 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065978432 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061857141 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061966707 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061950628 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069281637 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070278534 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078706056 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068951443 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068266956 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069873345 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059617592 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075861046 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060453429 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070397421 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058235361 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.065840475 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070083882 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060209583 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079142277 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060480579 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067173053 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071256035 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06805467 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.062526668 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.076656397 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06299221 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069238915 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068433749 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064670617 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066889169 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06222312 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.06995182 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070241026 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071377715 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060775205 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067186616 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06840454 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061103523 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.065973148 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06106023 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.06762256 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060696501 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.0580368 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.06465949 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.071464729 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.064903408 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064337335 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059228056 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.057546067 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.05943464 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065484959 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063636351 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.06879345 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075922398 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058501349 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060401625 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058709316 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063151125 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077263972 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.06975474 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068275376 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065472224 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059767372 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062039851 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06265821 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060604735 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064548378 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059629935 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060005081 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071617044 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062253453 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065063469 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060681526 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061134276 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070249714 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064957093 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060921084 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067131904 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060169311 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065024798 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058064828 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061917481 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06540242 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058571427 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062622664 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069453479 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075504968 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065971756 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068039354 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060188627 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.06696422 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074621735 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065842205 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060123277 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.0683595 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058616267 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077534442 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068676546 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067755945 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068785756 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060363926 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076209265 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063732428 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069055087 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074674129 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060035596 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065220433 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058525498 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07431683 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063326837 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058417645 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066680313 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067303444 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064991697 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070802889 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059672242 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066973649 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064024528 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062329677 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060864072 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060224684 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067748751 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.075046606 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.059544265 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063039303 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066711136 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067404106 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063362389 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071705929 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067061791 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06019766 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060713748 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062886577 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.059669103 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.070896168 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.05926591 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.063364058 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06347397 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058154513 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.065717439 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075090017 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068583971 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068521285 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058354054 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.057920829 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.076519734 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062730388 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.06212978 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067353809 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.068576731 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071314561 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068459186 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.075464255 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.059407449 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.064315275 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070878442 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.058983324 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.058431872 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.062494998 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.059798737 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.067404525 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068213664 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.065874876 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060147204 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.065267299 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.072181823 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.059758294 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.063256621 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.062360775 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.058654888 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.068263807 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.066208423 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070268601 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.059805297 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.057518007 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.061500835 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.067215278 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.065909682 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.067244324 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058865638 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.063854328 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.071385594 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.065934226 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060996672 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057515083 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061140053 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067476679 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.061693349 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057455527 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.062863272 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.063610983 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065460222 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.069283831 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06403313 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058413312 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075215842 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066129574 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067145341 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059727471 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059606151 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058695274 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057399748 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068828149 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057412829 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059344107 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.062985877 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059091348 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.0749539 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.066053997 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07331415 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.058642765 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.062736469 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057284023 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067622497 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.062591433 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.05796701 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.068497638 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057160401 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073005091 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.068460255 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.061260363 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.05679231 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06241938 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.06511141 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.072433329 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.067061343 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.066090971 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.059949851 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.0667119 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.058598582 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.067396536 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.057045365 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.056172626 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.066647923 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.065493694 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.06947643 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.056853796 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.067570926 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.059239127 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.065914967 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.064619222 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.058951249 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.058678161 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.058592976 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.066469061 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.061982985 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.066268459 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.061572073 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.073517117 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.057844995 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.068148556 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.066892773 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.067382417 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070833397 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068879281 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.065065814 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.057416234 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.064892646 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.064587724 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.058292305 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06281069 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.05978995 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077314715 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.058263524 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.057967819 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070508881 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.062028707 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057360473 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.061925803 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.061832203 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.066974221 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.057774297 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.067555305 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.060640446 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.058021376 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.061631879 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.061838398 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.056117175 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.057226245 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.057210961 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.066694775 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.061517176 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.057424113 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.075161288 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.058993472 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.066459641 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.06724617 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.063864656 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.058400669 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.056118142 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.057848775 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.070054989 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.071969766 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.060964241 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.066210962 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.057911305 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.066155438 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.056456712 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.06547689 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.065624188 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.066506661 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.056888323 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.057508063 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.072505108 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072777484 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.062308469 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.067068709 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.066754877 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.058083841 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077294403 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.066393691 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058261095 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.068044457 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059680476 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.05680626 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.056995999 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.058257552 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.068358291 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.056721055 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.059165224 seconds)
  done (took 40.722449986 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.113864115 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065446438 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063824206 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063451323 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070294848 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064462911 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064900433 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065816395 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066021694 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.068226917 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065081906 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068397295 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07160715 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.078975887 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073629581 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06905244 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065178278 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.066270638 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065061943 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065937716 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07141896 seconds)
  done (took 3.263540626 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.068734006 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.06826341 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06811888 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067614911 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06705492 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063951261 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06820736 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063779796 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068222252 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064095132 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.068524035 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063770328 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064230753 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.064393338 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064620689 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06552813 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068360041 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06740032 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.064615137 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067797235 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065111793 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067414596 seconds)
  done (took 3.043035976 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.065659295 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063992917 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072523275 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062159479 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061954046 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066112799 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062351583 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067465872 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067702952 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067203302 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.0722 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063637005 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062342086 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068575657 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061787405 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063052295 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106648704 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063245534 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063599838 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061824297 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064765459 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071761435 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061466607 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061701504 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066237511 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065410551 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061270288 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064168766 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061898128 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066095169 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062465914 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060938549 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071248195 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070401591 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066308465 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066158623 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063301491 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062969136 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061870322 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.06158846 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070254509 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062835756 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061769061 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062952268 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070723864 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061394461 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061181143 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071321428 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.06134206 seconds)
  done (took 4.804451813 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072645754 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113733683 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066185337 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095943747 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074485487 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068165123 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067587012 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097346132 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.06223195 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063318518 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075377716 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075702198 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064298752 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065308501 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066537284 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062583238 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062977924 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061846684 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064821924 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061862899 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065209629 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066813439 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.072553316 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073317891 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06418211 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063901274 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06337201 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064731384 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074464472 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066059159 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063873433 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064493813 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072482418 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067622451 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062312459 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062249192 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.073156739 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062808149 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062600632 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061010374 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062209647 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063755801 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06708611 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073659311 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062698943 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067142456 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062964726 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061099874 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072708221 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062451374 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06708773 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.074329286 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063865593 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062887911 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064061291 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074184457 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062973526 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061185081 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063454718 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.072621126 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060826773 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063305258 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076195769 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062851071 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066862148 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073564513 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067410473 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063638876 seconds)
  done (took 6.363331429 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072194244 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097778056 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076875248 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.077097275 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071841407 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072360712 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072064723 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072294991 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07250517 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075623486 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071960723 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.105288124 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066655048 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071725449 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07066736 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070507302 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070562678 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070820252 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07038481 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070221296 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070176416 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075015241 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070715642 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076935353 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074077828 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067178026 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07056155 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071374272 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075726024 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070741183 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073290308 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070988764 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071330749 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076088778 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07304922 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070203761 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060936383 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070028033 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070107142 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.07029457 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066697298 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074902533 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070163694 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066670261 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070120478 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070117078 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075185615 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.072545568 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071588503 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073125216 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070305128 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075274722 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071320229 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070544228 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075156819 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078310314 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07652598 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075900592 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070102233 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076859512 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076612402 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080075993 seconds)
  done (took 6.14959288 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075980491 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067725369 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079533044 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061065923 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061098172 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070401072 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061168022 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061113955 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06808893 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068044632 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070105421 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070813646 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073429311 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069602466 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071106768 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072875303 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070871358 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070825771 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067736841 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069916072 seconds)
  done (took 3.001708525 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077076089 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080397855 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066859759 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070472488 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066807091 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.071309823 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066474079 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06727704 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067631612 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066965668 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072074625 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071868062 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067702325 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071087425 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072223422 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070889851 seconds)
  done (took 2.73089407 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065738859 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069648848 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067042214 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062145177 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064469488 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061612701 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062398071 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061144333 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064100867 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076289258 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062640819 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065153047 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062860143 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061607237 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06180407 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065012942 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063780118 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06209565 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062365437 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066943813 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071207107 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063177634 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065178258 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062086994 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064444943 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070868329 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063631965 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064707296 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062320879 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064985848 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064488111 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069060106 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064581338 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062527528 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06106454 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.06214055 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062287493 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064755474 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065018269 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061617773 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059304242 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065827635 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061162524 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061292171 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062378994 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062952766 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062272111 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067918129 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062381928 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064498391 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061974252 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063597328 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061707157 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067484271 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062605145 seconds)
  done (took 5.131816065 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079272681 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066566775 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060354461 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059823664 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06430917 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06522011 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064638557 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.0646572 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065391111 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.05964003 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065641324 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06469692 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065524752 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064825302 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065184362 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064985527 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059479438 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065092218 seconds)
  done (took 2.785647084 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068984948 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066289409 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064017052 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061263247 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061067691 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065823156 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059948024 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061194797 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061030262 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06164927 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061567513 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061523735 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061130019 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06119683 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065210579 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061514407 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061404196 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059900074 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.061386662 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059733216 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066143944 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06009508 seconds)
  done (took 2.983792776 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089491097 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085328808 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129429424 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080980098 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090086402 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072677723 seconds)
  done (took 2.160715221 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096228756 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099690131 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065956011 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066261743 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071170287 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068948446 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069236328 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069381401 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072979793 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073254884 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069133599 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072891086 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072648332 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074953436 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071514907 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071260139 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069162179 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069516323 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066465138 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075939328 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069421506 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072964548 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069962095 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069314419 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069524023 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074577368 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072921216 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073130421 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069352547 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072609361 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069102472 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067346245 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071173635 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072977564 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066010187 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072514036 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069191765 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076891589 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070962152 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074418234 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065745905 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069508389 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070683341 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070300243 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071067107 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067776197 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070479174 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067408442 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067605428 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075665228 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069664574 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074345468 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07101578 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072883085 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072736444 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078224193 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073192013 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074598808 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072237477 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073393997 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074569813 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071076919 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074630611 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073328339 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071233736 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074805643 seconds)
  done (took 6.384005355 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105597921 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066597739 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069418372 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071899549 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074447514 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069642833 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069380084 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069451244 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069541535 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066824235 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105697931 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069693096 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075054782 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077057167 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06929474 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070169713 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069665094 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075052798 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066761905 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078435376 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069487549 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074577966 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074644348 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074890555 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073215266 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071110074 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069366765 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069124865 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069240971 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069474885 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072466077 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069515468 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074652538 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066446462 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074545693 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069426411 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069624253 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072402258 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069272721 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07091034 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074522619 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077139018 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069243931 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0688954 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073052686 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069019409 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069253818 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066358772 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069113078 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066746883 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073568792 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073072367 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073072633 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074740443 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069832128 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069446246 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069394168 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069454649 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06951682 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071444223 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074676348 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06963897 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078223565 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069269118 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069816569 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075155193 seconds)
  done (took 6.409884732 seconds)
done (took 131.198100151 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220551884 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188655766 seconds)
  done (took 2.010860448 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075240035 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.165029215 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073422549 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073049595 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107036234 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105771672 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074364777 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070810154 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073502159 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070374962 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137243864 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.07433332 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070407839 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070433419 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070791048 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072012778 seconds)
  done (took 3.009629425 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109430339 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.210001251 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.081780832 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.06997551 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.153305212 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076715848 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072487026 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077253557 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076785524 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070325993 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107734671 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083804272 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076128532 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076811479 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07179301 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.0751607 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076345114 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076807274 seconds)
  done (took 3.279288935 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.10398525 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.090579599 seconds)
  done (took 1.833047984 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.16408618 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.104542419 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144112904 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.34303584 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134338471 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.137358557 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.141570102 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.137597152 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.1124425 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133172889 seconds)
  done (took 3.181155857 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107216456 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105719583 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305493402 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100648366 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080673881 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075473213 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.07330293 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077827475 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073372501 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074500828 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119543576 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073223601 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070889482 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.125382557 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096590132 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104463312 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069179498 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077385379 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079687653 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069551408 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075440906 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077679242 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.175421187 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.07645106 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097096782 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073335973 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076572588 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074154338 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074117027 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07837303 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079404328 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100353406 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078541733 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082344811 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077497946 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097320011 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071604787 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099008585 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074389744 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072393125 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074812605 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079403329 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072028359 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078538542 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075139901 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077361021 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080067913 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070716402 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074666283 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074212548 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071932965 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076348355 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.0746558 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07522583 seconds)
  done (took 6.377305117 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108765959 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106327822 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068169488 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110764409 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103927081 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068423746 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105230075 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101125714 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109284899 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069759297 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068779467 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069102059 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076744411 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.081099126 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.114457649 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.106211241 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069914381 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06822262 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.106364042 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.105885573 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067115779 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.100356329 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.098257586 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104741355 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06658496 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068037742 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066679011 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067489958 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072104543 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072989489 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067720752 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075962856 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082948594 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074008682 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067968508 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067776203 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068162985 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075641667 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076364043 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076625466 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075118489 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06778666 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068398888 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068393782 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069135052 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067708626 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074771582 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075585842 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075025513 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068716704 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068768375 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068338333 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068921356 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075370588 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07430586 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076719149 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076308872 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068324054 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068499722 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070222736 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077547719 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077300308 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076489114 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069934423 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076747685 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068208123 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078806924 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082064343 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068555895 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069084149 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068799961 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068395201 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069087761 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074599079 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07485471 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069033673 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068684963 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068308362 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07718155 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074588175 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068290086 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074066219 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067987919 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068761594 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069028111 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068935556 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074080492 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.07586294 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069313865 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068756181 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068646213 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06910538 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068247481 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.07486425 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075858404 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075721954 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074634309 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069215081 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.07486751 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073772826 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06735045 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072982578 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06727651 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067498995 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067872107 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075160803 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074551614 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076326728 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069012465 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068723106 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075245688 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077557442 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069257303 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.074774125 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077503822 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.213109387 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.06868744 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078509248 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06954182 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078312927 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06803936 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076629786 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069599575 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075149149 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069014391 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.06794789 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06881859 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074880805 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069325952 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068693441 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069090429 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069007949 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075604031 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078994852 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069660191 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075415292 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075761711 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069391891 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075444655 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068901047 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076550123 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069433401 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069218383 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068235332 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078169256 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06878148 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068505167 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068146533 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077629891 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06904473 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077063548 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074521496 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06788111 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082047492 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077181952 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.073137176 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077072518 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068935814 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06822342 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068230196 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071427354 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074210337 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075572594 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069532023 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069010122 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074236241 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.078182368 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068167418 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074281591 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074431767 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074780734 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067764759 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068575465 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077831938 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077776865 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075026618 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074882294 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075965249 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068754021 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074806272 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07460164 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068225643 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082429916 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069030583 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079038255 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075395581 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073838393 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.0750606 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076501081 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077456721 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077680524 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080096763 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068626741 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068234407 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.074759766 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068782948 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068694063 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074145934 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068981414 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068819145 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080751459 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067237561 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07479726 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066464335 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07491843 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067860353 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069050655 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080294614 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069115076 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068753825 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073314574 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068120901 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074559049 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078212354 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07286188 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068429913 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068993921 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075642179 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075862204 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068064882 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068407792 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069132793 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074530367 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074518305 seconds)
  done (took 18.456329911 seconds)
done (took 39.79524727 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.17026302 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112583728 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.2068344 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.196596017 seconds)
  done (took 2.42179815 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101869775 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06487108 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.080726982 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.08937714 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.064913127 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.075947152 seconds)
  done (took 2.163458393 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.199080008 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.17208421 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239932676 seconds)
  done (took 2.282831393 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.368631052 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.151162288 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219296582 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.500900855 seconds)
  done (took 3.016590003 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110346939 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.099183411 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077561977 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111369324 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.083312313 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060355613 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.129932765 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.06763355 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.09785205 seconds)
  done (took 2.574617629 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.136530018 seconds)
done (took 14.292714122 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.122099718 seconds)
    (2/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.122945259 seconds)
    (3/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.294544438 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.216911889 seconds)
    (5/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.097234488 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.094422801 seconds)
    (7/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.106403551 seconds)
    (8/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.211157712 seconds)
    (9/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078049048 seconds)
    (10/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.178727745 seconds)
    (11/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.225226446 seconds)
    (12/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.175011088 seconds)
    (13/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076779343 seconds)
    (14/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.208660543 seconds)
    (15/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.114954495 seconds)
    (16/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068989681 seconds)
    (17/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.139567679 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076025619 seconds)
    (19/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.24947672 seconds)
    (20/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.240580853 seconds)
    (21/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.148878533 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.07789456 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.164830827 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078521629 seconds)
    (25/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.144605825 seconds)
    (26/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.185894764 seconds)
    (27/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.237925843 seconds)
    (28/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.240042118 seconds)
    (29/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177881262 seconds)
    (30/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.1540568 seconds)
    (31/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.190655607 seconds)
    (32/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.079938456 seconds)
    (33/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.238233232 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074568846 seconds)
    (35/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074421717 seconds)
    (36/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.076568422 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.083539195 seconds)
    (38/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078624977 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075693489 seconds)
    (40/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.216593637 seconds)
    (41/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069276882 seconds)
    (42/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132997525 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076994119 seconds)
    (44/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.14446024 seconds)
    (45/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070563147 seconds)
    (46/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.23100766 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.153890494 seconds)
    (48/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.1423253 seconds)
    (49/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073771058 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086475822 seconds)
    (51/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.084278895 seconds)
    (52/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.140403865 seconds)
    (53/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.064412757 seconds)
    (54/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.150536313 seconds)
    (55/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.222469475 seconds)
    (56/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.246120138 seconds)
    (57/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.197566543 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082977945 seconds)
    (59/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.079015939 seconds)
    (60/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.184921478 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.092133629 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.15694967 seconds)
    (63/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.164326088 seconds)
    (64/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.067328583 seconds)
    (65/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065492408 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.085628354 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.120673738 seconds)
    (68/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.105135487 seconds)
    (69/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.171586457 seconds)
    (70/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074791267 seconds)
    (71/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064008092 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065802701 seconds)
    (73/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.072764786 seconds)
    (74/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077356292 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.080538674 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073650193 seconds)
    (77/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.191205699 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.277579094 seconds)
    (79/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.140948535 seconds)
    (80/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.07478884 seconds)
    (81/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.073953 seconds)
    (82/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.201753332 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.128745219 seconds)
    (84/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075597963 seconds)
    (85/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066471252 seconds)
    (86/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.168703402 seconds)
    (87/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083258995 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.136508322 seconds)
    (89/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.226275456 seconds)
    (90/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066335634 seconds)
    (91/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080956445 seconds)
    (92/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075096577 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091448078 seconds)
    (94/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066083099 seconds)
    (95/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065990532 seconds)
    (96/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.07255816 seconds)
    (97/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.078438105 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123977874 seconds)
    (99/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.157017438 seconds)
    (100/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.092481538 seconds)
    (101/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.222999311 seconds)
    (102/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181889526 seconds)
    (103/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.183731699 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.065946153 seconds)
    (105/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.165803853 seconds)
    (106/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.065348813 seconds)
    (107/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067167286 seconds)
    (108/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.240339926 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.089856379 seconds)
    (110/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066030604 seconds)
    (111/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.220520924 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073417975 seconds)
    (113/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.073043619 seconds)
    (114/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.065829937 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145029878 seconds)
    (116/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173397154 seconds)
    (117/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08823112 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.065161258 seconds)
    (119/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.067555915 seconds)
    (120/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066864632 seconds)
    (121/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.165123479 seconds)
    (122/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.191721205 seconds)
    (123/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.202431194 seconds)
    (124/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.076413926 seconds)
    (125/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.153933649 seconds)
    (126/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075439759 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069312864 seconds)
    (128/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07851871 seconds)
    (129/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072112534 seconds)
    (130/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.064073651 seconds)
    (131/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087712845 seconds)
    (132/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072659602 seconds)
    (133/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065971114 seconds)
    (134/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.147209558 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.129113864 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074835025 seconds)
    (137/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.069481875 seconds)
    (138/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.065717514 seconds)
    (139/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073993279 seconds)
    (140/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.067766708 seconds)
    (141/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.073870651 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073398127 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075585005 seconds)
    (144/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.075810951 seconds)
    (145/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073974659 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087467097 seconds)
    (147/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.09017876 seconds)
    (148/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.070021182 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074778004 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 0.147735947 seconds)
    (151/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.065991258 seconds)
    (152/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.144416676 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125177681 seconds)
    (154/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065814114 seconds)
    (155/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.171127541 seconds)
    (156/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066074094 seconds)
    (157/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.065591299 seconds)
    (158/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151151474 seconds)
    (159/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.07290381 seconds)
    (160/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074796562 seconds)
    (161/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.083088604 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 0.066863861 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.065558115 seconds)
    (164/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066355926 seconds)
    (165/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.15728644 seconds)
    (166/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075653161 seconds)
    (167/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.081711407 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.156938038 seconds)
    (169/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.072394543 seconds)
    (170/341) benchmarking ("sort", Float32, false)...
    done (took 0.138582117 seconds)
    (171/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070075392 seconds)
    (172/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065255066 seconds)
    (173/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065680202 seconds)
    (174/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.074585979 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082835923 seconds)
    (176/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.083862711 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083268334 seconds)
    (178/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.06581429 seconds)
    (179/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.065279332 seconds)
    (180/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065748438 seconds)
    (181/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072050367 seconds)
    (182/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.067340437 seconds)
    (183/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074684797 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09541577 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098304391 seconds)
    (186/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.066415062 seconds)
    (187/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075372227 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064049681 seconds)
    (189/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.232629005 seconds)
    (190/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072005172 seconds)
    (191/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064078087 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.090217701 seconds)
    (193/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064481781 seconds)
    (194/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065481013 seconds)
    (195/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067241221 seconds)
    (196/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092093853 seconds)
    (197/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.166655804 seconds)
    (198/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.201843658 seconds)
    (199/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.065253792 seconds)
    (200/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.084962408 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.146273579 seconds)
    (202/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063883959 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.149971165 seconds)
    (204/341) benchmarking ("sort", Float64, false)...
    done (took 0.136318731 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.083684325 seconds)
    (206/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065885477 seconds)
    (207/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073963274 seconds)
    (208/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.065824125 seconds)
    (209/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.145120218 seconds)
    (210/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065841202 seconds)
    (211/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084442531 seconds)
    (212/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.09492166 seconds)
    (213/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.167462204 seconds)
    (214/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.069081604 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064106217 seconds)
    (216/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.183750208 seconds)
    (217/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.066873206 seconds)
    (218/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.072449363 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.147963453 seconds)
    (220/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068465598 seconds)
    (221/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068064985 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073182092 seconds)
    (223/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069502999 seconds)
    (224/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074011406 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072809255 seconds)
    (226/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.066447196 seconds)
    (227/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.066343508 seconds)
    (228/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.069979596 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.06778686 seconds)
    (230/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065449157 seconds)
    (231/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.069451276 seconds)
    (232/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.160326163 seconds)
    (233/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.06688768 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.090886327 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066361546 seconds)
    (236/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.06592513 seconds)
    (237/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.165678038 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077478762 seconds)
    (239/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.084116088 seconds)
    (240/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.065674358 seconds)
    (241/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133655732 seconds)
    (242/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066035747 seconds)
    (243/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072745949 seconds)
    (244/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.145110383 seconds)
    (245/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.162369695 seconds)
    (246/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.076953248 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.089268161 seconds)
    (248/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070994524 seconds)
    (249/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067087422 seconds)
    (250/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064449344 seconds)
    (251/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.062248759 seconds)
    (252/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064361864 seconds)
    (253/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.063765832 seconds)
    (254/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.071677674 seconds)
    (255/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.07472728 seconds)
    (256/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064454944 seconds)
    (257/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.065906965 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062478315 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.063664459 seconds)
    (260/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.063790974 seconds)
    (261/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.06607575 seconds)
    (262/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067039071 seconds)
    (263/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069993496 seconds)
    (264/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.149338383 seconds)
    (265/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.064902057 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111705137 seconds)
    (267/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065042629 seconds)
    (268/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.065439709 seconds)
    (269/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.081049971 seconds)
    (270/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064071087 seconds)
    (271/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09259286 seconds)
    (272/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.068373922 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066211814 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085440214 seconds)
    (275/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.0771307 seconds)
    (276/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066387893 seconds)
    (277/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.065742692 seconds)
    (278/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.06599571 seconds)
    (279/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.063807669 seconds)
    (280/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.064260826 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.065445823 seconds)
    (282/341) benchmarking ("sort", Int8, false)...
    done (took 0.15125755 seconds)
    (283/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066567292 seconds)
    (284/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.065157893 seconds)
    (285/341) benchmarking ("sort", BigInt, false)...
    done (took 0.264260496 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151278827 seconds)
    (287/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065929765 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06551944 seconds)
    (289/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065396873 seconds)
    (290/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.066572637 seconds)
    (291/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067338843 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065060324 seconds)
    (293/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066265836 seconds)
    (294/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06617742 seconds)
    (295/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.06623403 seconds)
    (296/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073209674 seconds)
    (297/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.076993898 seconds)
    (298/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.065434459 seconds)
    (299/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065569359 seconds)
    (300/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.0658551 seconds)
    (301/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.065146312 seconds)
    (302/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067513155 seconds)
    (303/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065963619 seconds)
    (304/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.065908181 seconds)
    (305/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.065582221 seconds)
    (306/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.067421626 seconds)
    (307/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067109767 seconds)
    (308/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.066366003 seconds)
    (309/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072477878 seconds)
    (310/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065836086 seconds)
    (311/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.081990443 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.06543404 seconds)
    (313/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.077050786 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065357432 seconds)
    (315/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066023468 seconds)
    (316/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190977623 seconds)
    (317/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066234997 seconds)
    (318/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075036863 seconds)
    (319/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065721874 seconds)
    (320/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.065795284 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077205981 seconds)
    (322/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072833115 seconds)
    (323/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.249847626 seconds)
    (324/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065774065 seconds)
    (325/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068139862 seconds)
    (326/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.137405274 seconds)
    (327/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069467035 seconds)
    (328/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070370746 seconds)
    (329/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067900381 seconds)
    (330/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.07042799 seconds)
    (331/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.064749436 seconds)
    (332/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.066254883 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.145786745 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.154038714 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150927525 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.083584187 seconds)
    (337/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072174442 seconds)
    (338/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065201946 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.086960064 seconds)
    (340/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064464871 seconds)
    (341/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065609177 seconds)
  done (took 37.217573385 seconds)
done (took 38.909587014 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092709945 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080323786 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078318995 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074228347 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076864364 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075106678 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076338324 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074410807 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.075677322 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075381333 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.075044073 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063246444 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071824231 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078770491 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072366528 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078920306 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076220593 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079529004 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064888434 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.077838528 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.091237234 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.075345145 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072202694 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.077415325 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064285099 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073438632 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.08758342 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.08483833 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070270389 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07317964 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072434061 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084346135 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073140211 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071534241 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075211541 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071266203 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074927999 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072597329 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.08934642 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.071251683 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065377239 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077818202 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072623191 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07228542 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072939249 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075921667 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069207696 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077161379 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063503404 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074821003 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086472241 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.06834234 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069959963 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072059205 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069633661 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.072958795 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070073691 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.074747207 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068725924 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075232194 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074954212 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072220283 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.062947555 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072109886 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071010625 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071188437 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062358794 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069371732 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063810142 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065043527 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.064415959 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073931732 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072180933 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069905644 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064076254 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.06503081 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064015001 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076943938 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071173397 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074525538 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064989811 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070575619 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.0699114 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.06512366 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070510796 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076545505 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06354247 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065137419 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063861136 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079425058 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.07128159 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065093979 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076790577 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070331488 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070172923 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064735852 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064045559 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069816764 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072970295 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06501228 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063555995 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070326912 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069884064 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072946535 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064347829 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068496438 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068465648 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062075449 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.072242406 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070452874 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072204778 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076359452 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.071951293 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075287218 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063603633 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062106242 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072928109 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063481663 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068509178 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070706439 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068638273 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071258677 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063539214 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062279719 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068273567 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069577638 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063537002 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063450201 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063392817 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072474087 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070209021 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06199354 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063445422 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072207866 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072262708 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062668374 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062377933 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072623759 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063701476 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069083275 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068802672 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072153722 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062750702 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063609999 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062847649 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062892947 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066265076 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068499652 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068206265 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063919878 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072264278 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.214942106 seconds)
done (took 12.710718695 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.066832355 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10638475 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.07760469 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080307893 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076743016 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.0651241 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067593363 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082169124 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067365757 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088178982 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089166133 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085553003 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094590301 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063045512 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064250249 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065384847 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062903039 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076396168 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080873581 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087491105 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.100302643 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064171565 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079939102 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083498198 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.07818952 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082251017 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065669083 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.064821997 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067159628 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08278907 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.089924755 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063927675 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065190123 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.082856594 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.079836504 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073224483 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066411782 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071355945 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067901256 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.063919427 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067451455 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084200203 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072553596 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07296975 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067390499 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066763009 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.066304358 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07301499 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083422222 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070029822 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075861864 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.083232461 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066091916 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065539188 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064132577 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071542028 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065109539 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065501757 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065378829 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065341711 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.066080187 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068459012 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071207076 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.072189348 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069523833 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071912739 seconds)
  done (took 6.607986682 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083000194 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092321841 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.080973972 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.080966243 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065434007 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.066495973 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.066111603 seconds)
  done (took 2.333824075 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06726426 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.073938935 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.078285517 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.078519669 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087915291 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07605697 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066705991 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098166446 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.065231047 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074480816 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.08202595 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079160968 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067696533 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076974631 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064692468 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.07630824 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065224521 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072123109 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071825831 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07770592 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068670045 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095375658 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079740528 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066671143 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.079781356 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073762908 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068307946 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.06646643 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066746212 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065873593 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065956161 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088191664 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.072400435 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078683721 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066368295 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064850105 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.070657716 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066821031 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.07042528 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075086729 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069963542 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065702691 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.066186346 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.066070062 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066986422 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.070543285 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066583201 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065823615 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065546927 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073472842 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064678963 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072107177 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067857126 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071300791 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070524037 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070775266 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072791964 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065896741 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073378617 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.072371628 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065893504 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078490513 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077627021 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.069770858 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077642188 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074817675 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072795653 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.069606614 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06575398 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065175928 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066304885 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077582416 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069158293 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068293937 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.067006617 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.070917487 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.069662445 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081118449 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081839097 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079712791 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068215066 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065880137 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069871798 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081297005 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070573315 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065691512 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.06641911 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065282154 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071131453 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065681613 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071018135 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065695788 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072994568 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068418155 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068166814 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073952888 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065981274 seconds)
  done (took 8.736647135 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069098931 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.068482942 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.06727412 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067156035 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067411635 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066892753 seconds)
  done (took 2.23574656 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.089827501 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.066100784 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.078323397 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066430241 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088495746 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.071331501 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.073068614 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067762232 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081027598 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076066116 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.070923767 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.074068681 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073603505 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.06648376 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070759298 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065682682 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070885152 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067568693 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074810355 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066853095 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081182878 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066553988 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066543084 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076414868 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067721172 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065822016 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066623147 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075497268 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.07468303 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066185557 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.06615238 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067981355 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074947864 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.068179888 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.07283598 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074941503 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066455439 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072127943 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068886695 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.06919621 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075154938 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068611703 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.068512579 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071845016 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.068151826 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075423133 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072008122 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070153917 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.072509248 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071568055 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.071868573 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066961364 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.06902524 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071719377 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075116505 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066843462 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070778314 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.071426586 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066454155 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073089621 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065270322 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069644812 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068147827 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069435122 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071271867 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071875081 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075267822 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068060808 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.074947271 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066002402 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072195055 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066185535 seconds)
  done (took 6.91002446 seconds)
done (took 28.596045469 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542489272 seconds)
  done (took 2.301982033 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.888391054 seconds)
  done (took 2.696537565 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.281277574 seconds)
  done (took 10.094957939 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.337498913 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.403003487 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.735005252 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129144534 seconds)
  done (took 3.454011801 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.739088549 seconds)
  done (took 2.561647711 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231215407 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218820123 seconds)
  done (took 2.268719392 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335811938 seconds)
  done (took 2.147901437 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.149435112 seconds)
  done (took 2.957545906 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.232816484 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159691183 seconds)
  done (took 2.215968237 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.534510086 seconds)
  done (took 2.351234921 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.237631672 seconds)
  done (took 6.059132956 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.234862793 seconds)
  done (took 2.094764969 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230520512 seconds)
  done (took 2.05553357 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.012830462 seconds)
  done (took 3.829779927 seconds)
done (took 48.904779221 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.08405954 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084007419 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083412707 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.07905904 seconds)
  done (took 2.11983975 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.073946456 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069590785 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.073499654 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073298925 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.070402855 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070564164 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07190434 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069343977 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.071115322 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069685279 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.068185336 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069682949 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072679597 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069757595 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.072189368 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073498988 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.069396204 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.069576127 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072080505 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069294581 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.07261508 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070295475 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067974498 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069524134 seconds)
  done (took 3.515470382 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079022333 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072115219 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075068734 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068904428 seconds)
  done (took 2.123056264 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076605042 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.075958384 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.084449611 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.088334537 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.074099888 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076534665 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084191435 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08411129 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.065304169 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086693656 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.067692528 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.066275102 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.066336702 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085346855 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082762808 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06216445 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063524954 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076388286 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.07529165 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078177984 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.068108267 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.064837947 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075553376 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076703181 seconds)
  done (took 3.629309666 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082042001 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065013265 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.080051868 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088941975 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089512485 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063336963 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.07660981 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090757543 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125420194 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063418092 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.070001704 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063455146 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102139071 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063551686 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079467236 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109156821 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112078375 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069799686 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099310353 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065193139 seconds)
  done (took 3.497993627 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076139657 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06928276 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069752714 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.065273007 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.076225213 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.07289442 seconds)
  done (took 2.268032309 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068173981 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067467631 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.069507731 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.071795674 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.067314989 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067585992 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.066863505 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065425797 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065701933 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.066583973 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.066338653 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066844217 seconds)
  done (took 2.638784144 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.14885678 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.068743738 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067890417 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063755696 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065657349 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065846281 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081189849 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.068289705 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08206164 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064875174 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064803155 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067429056 seconds)
  done (took 2.739398548 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104662266 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107898664 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141951743 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114356269 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113949463 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093535738 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12284324 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.093268977 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.156161009 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133615615 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114064416 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090732016 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083894102 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067208052 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096783127 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115455556 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1330519 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070827807 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110342407 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.16125543 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127973243 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.131002888 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14428891 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113759822 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087937468 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145463594 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097539825 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100725014 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122332473 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125944325 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116508241 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097698856 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07117309 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070785926 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148687718 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101289197 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117167687 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090776468 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101569252 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085311974 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104071718 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067210689 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.082622434 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.10933557 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081530671 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126970068 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085816469 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111621596 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078541642 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134289177 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120042616 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095829594 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082679607 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10144406 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.288997172 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109200222 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131902849 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105010369 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080619195 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116119512 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100402642 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097389389 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104457863 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077872383 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173294645 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086034213 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108945858 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109024381 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091363919 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094308534 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107087331 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134639344 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121566128 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.121770179 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134370411 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092473426 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118773348 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.096716798 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126588945 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102281203 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070864906 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.117673654 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126011518 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095811588 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098086504 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126143427 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089361601 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075213207 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096383656 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.115511372 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07769859 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.109600038 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07822257 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106184969 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129100948 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094206797 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108352366 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11358103 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075716868 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150294378 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105767226 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070414496 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11439163 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111281945 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154410129 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093807693 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074543133 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097764273 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.256867765 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146368578 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104546537 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07798112 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107753558 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136909289 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092271166 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.165961172 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093222495 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136943485 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10931452 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084854276 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073125756 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088045362 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10906942 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105171561 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109482831 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087356053 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081247522 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084810137 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108577817 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089824323 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078522309 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110899269 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098923971 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072342204 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085719587 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077570369 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138674841 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076027347 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133979847 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122071159 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077074314 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105656492 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09694562 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105454871 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095078871 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114053791 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136431479 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113333375 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087699729 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.090981947 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105253495 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140234024 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123775597 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089875068 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074765258 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097860244 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108689463 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094881685 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122850395 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097357232 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105539057 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099995478 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138342079 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142021493 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09811217 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098735389 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104206056 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.281153501 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074759183 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152096995 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101447155 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118059029 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083625611 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13773585 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111464007 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087312309 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084713652 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09753061 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101083748 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103533888 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140631834 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.093532741 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070552832 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090266945 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140586314 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074386823 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107404213 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088481319 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090804912 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115424931 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.09101302 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078768131 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066510564 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12383394 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155327396 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068320374 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111965848 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.108664508 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099952311 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.117875069 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067080496 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116006294 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13905481 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117353828 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137521449 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143817478 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113659308 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115420744 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110814397 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103272537 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077219121 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122617652 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131360662 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093524125 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090455649 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132892323 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115505299 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133382022 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113768322 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112089174 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.103034496 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104984829 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.260382404 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099521737 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140995514 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118197664 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121648978 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083954742 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103541599 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115007602 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132250019 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080011833 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138080069 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.08169138 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115637534 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.074998432 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121429724 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077541898 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108693854 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077126046 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097247823 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067366423 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.071986187 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137368098 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.109268048 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102477716 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096789906 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.133870646 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132849382 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079011939 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10561204 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112697434 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09842679 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113313442 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106336234 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087850164 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092620182 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108083756 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084637871 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.081738557 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.115123813 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094557968 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127143024 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083714636 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074807369 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139855593 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102186497 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093176633 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075305515 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105725092 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119081881 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090596137 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085034148 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112065942 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101225473 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138421062 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088413998 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095927112 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121608915 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078486285 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089818697 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067517743 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083231483 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073865925 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.1247368 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073965287 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114053382 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.06654858 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127331361 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08438816 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090626167 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099099733 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107603468 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123175125 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093515295 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136745494 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085651853 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112618939 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102500213 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090694058 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084465198 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099621268 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096704862 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.119739142 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095399523 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119106948 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136626461 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099045015 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135429305 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087813463 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119045348 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104559133 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122322627 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10665574 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138059206 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130300798 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106112563 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106167287 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071260285 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089323851 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099648992 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104573737 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164077919 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11711596 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.069058185 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099830289 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089970163 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101566499 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099332083 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078031759 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138173289 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095420309 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.083790107 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106300953 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.084930072 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099082095 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072147684 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090948293 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.095148602 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089876422 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09313867 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.393679424 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130843533 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118597065 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.148377916 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.103053829 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.095771776 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122351431 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114853472 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113617708 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088924454 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088244618 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140127759 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121471355 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.131862011 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.103231643 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111617439 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112652451 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100217524 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123578337 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109919631 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.128637991 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081327644 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077082989 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069473233 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073043227 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125080919 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110429136 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113075691 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099847179 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073388486 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105044326 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108157704 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072193984 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089527372 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095222449 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100758307 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092429351 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106793326 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115231472 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092139749 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105178474 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100270564 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148483558 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101772652 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089682811 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145355987 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150765618 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088778091 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093605501 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071850466 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079473731 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113872763 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150276672 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152394509 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077587318 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087243521 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.08625862 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0874944 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.071208068 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.08735875 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.255980032 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106732879 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09993092 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112545157 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10332503 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073412352 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.1030627 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097918309 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091907678 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104666321 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11888092 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12503973 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.141610777 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110446501 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107724921 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075836624 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.08076065 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075440156 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079632703 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102122624 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079266471 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076048626 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142894148 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092560592 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104902923 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109000673 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08892434 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075551388 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133990606 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069580793 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135282243 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071390689 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082417908 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082908475 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079089135 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094382685 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138521754 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108352974 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111275495 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104506713 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101946138 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13809628 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152803957 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077570648 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1409324 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073691021 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073330963 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073683596 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113318266 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089839457 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115511951 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140848923 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090898561 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103878336 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077296454 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142293159 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.095916796 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102954225 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086732476 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078892784 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142038818 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077343396 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.238461911 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088682722 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109858358 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07256399 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104722862 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085125601 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079592884 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141987709 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.630225849 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089670939 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075271587 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095924144 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.14199568 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127123335 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095037173 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108183166 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118833053 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099822596 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095330242 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107178102 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.183120281 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07429793 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094531654 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.103568833 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098329665 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102116979 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098555075 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084793144 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09320604 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086858705 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079119384 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108231525 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089128464 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096983052 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107976531 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083104262 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087434026 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130992602 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.103964488 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082413875 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088752533 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.106302979 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08939174 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101133205 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069040601 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114310735 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09125705 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117860301 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095518595 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108109943 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126697411 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089708234 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136031581 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.106291076 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120339748 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084860504 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076005759 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121840693 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086252725 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077378852 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142840189 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092550487 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.251963579 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104868115 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097365676 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113502837 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117749223 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112638479 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097477845 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078945643 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101020691 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.102786864 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08472193 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078172989 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074578326 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.07599591 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107295488 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085434918 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083478945 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115243792 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089316481 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1038948 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.099232307 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121092306 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082474942 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10061247 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110416929 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090996216 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106996733 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097871718 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125257065 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170703371 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122630183 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125847694 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131282052 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074836076 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073621394 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066761331 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112434762 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077343079 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.086437779 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078869375 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130305686 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080001003 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1092927 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232576403 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080544369 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093605566 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096048726 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069516517 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083472963 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107920688 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086542825 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080160308 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118968123 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083339452 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127418548 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111322108 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100107675 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095064285 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080281759 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111105504 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102803662 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.12616068 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092300136 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.072958858 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111864876 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100659295 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.294670126 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071589574 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078615109 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126563937 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100983508 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129166358 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077757134 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145784274 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139486501 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097244943 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130297476 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0692984 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081086436 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086295924 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.122820318 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082789803 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107717611 seconds)
  done (took 66.973367001 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.154954895 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141583075 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.079797587 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101506847 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185148422 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194378322 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117624111 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094007622 seconds)
  done (took 3.067895964 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.068277838 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084553201 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079915229 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.20762477 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.097094714 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.067074193 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071705864 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079937031 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066225236 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.066926892 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101556437 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067632463 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.067293507 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.383157625 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066330934 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071930154 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066956719 seconds)
  done (took 3.688642538 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.335907753 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.967657076 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.234394737 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.220182897 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.143600893 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.555368753 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074703347 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080612538 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.6939976 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368533826 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.140814683 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088739809 seconds)
  done (took 19.893410795 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077097633 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079064806 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.07818874 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073207534 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072736065 seconds)
  done (took 2.357121071 seconds)
done (took 120.351054297 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083994485 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.173774116 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.0677855 seconds)
  done (took 2.257437458 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082388847 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.080703449 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079532229 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076022183 seconds)
  done (took 2.309741898 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.074817032 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076058831 seconds)
  done (took 2.131759865 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.219887555 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.174295715 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087374427 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082191524 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.079680817 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079970303 seconds)
  done (took 2.240240145 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071523726 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071221107 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.071422199 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071979335 seconds)
  done (took 2.269221786 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.067914407 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.066184712 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068244956 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070604748 seconds)
  done (took 2.257097218 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085516161 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086782378 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114279749 seconds)
  done (took 2.269927836 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083480852 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08241556 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077570768 seconds)
  done (took 2.230967472 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.11037288 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.096531575 seconds)
  done (took 2.188199534 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080117928 seconds)
  done (took 2.067504217 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090797449 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.097121469 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.13819756 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.10388333 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142337767 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.122195981 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075201822 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076090563 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071501603 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076228586 seconds)
  done (took 2.976293659 seconds)
done (took 27.742651669 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079738319 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369277955 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.359990642 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08750594 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.671820679 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.356375722 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.011581024 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091609102 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101966916 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06846405 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08576797 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.648841349 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.003741337 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326464149 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.988675923 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.32434038 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652448568 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068771008 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068112282 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068303948 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.993919533 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067746922 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068031442 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068419545 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651339603 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374380052 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069497936 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.32826358 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068511072 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072413149 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.35804477 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069632941 seconds)
  done (took 16.578937836 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071021635 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123976989 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073037204 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084755058 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070337682 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.06964643 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071429121 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.068999873 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11337239 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068929654 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086385124 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068182539 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072405285 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069643559 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.092021765 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068250311 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070840551 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069191011 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068819922 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068978245 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087030578 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067998715 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068993737 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069248256 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068637666 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081917887 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069952386 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068116593 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068573882 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072542602 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073100942 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069850701 seconds)
  done (took 4.421632839 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122787524 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127418363 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073239913 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110138753 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11846071 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069988879 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152376989 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092768205 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11708416 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069064186 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086515882 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06931322 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10534216 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069656747 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08957739 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06861477 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071097609 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06879332 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067962318 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069380366 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08809572 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068465424 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069106041 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068418202 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06786944 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084021764 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070174955 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068868907 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068554329 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072666155 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073650208 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070023581 seconds)
  done (took 4.697503362 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069919962 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.071413164 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.078127687 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.080725273 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066142335 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068602977 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069471913 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066432241 seconds)
  done (took 2.581566489 seconds)
done (took 30.285075699 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079848363 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067807189 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070845403 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087210184 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.073992846 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.070287161 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064360112 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.07418431 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070989788 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071775524 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073610157 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066886698 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069980432 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064673227 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072155539 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065885543 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.072752515 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070022314 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.07035402 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071955097 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067973925 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071142828 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073789089 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.069869224 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070131071 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070260989 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074853663 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071677006 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065869019 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068383205 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.067923645 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.08090609 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.071996859 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.072077302 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065530668 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065365117 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070422435 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067897082 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.072104086 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07512351 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067816688 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07463666 seconds)
  done (took 4.950998507 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.08939114 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094831474 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.085854773 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079536315 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107728739 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081231624 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.090867687 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078895559 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077385051 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090877328 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073428841 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.079027091 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.080412419 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075203586 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.07763764 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074019235 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079916369 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071579686 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076461308 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07565232 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089028003 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069003169 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.076746391 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077315993 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071418633 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077165552 seconds)
  done (took 4.120860274 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073465038 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088486701 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091333068 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.139206399 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.106781799 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080796745 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.079987178 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091305494 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.098723327 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.065818087 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070321159 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091539738 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094742349 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073047032 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10628648 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085179346 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078913365 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069035157 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074580836 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102854833 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090861698 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086927956 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.100700121 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088135272 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066771509 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077473423 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07518833 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083776886 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075341533 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080802218 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071961124 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07455611 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068235871 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080590109 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.072135094 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065835994 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.09003817 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080807809 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082370406 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106356209 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078068934 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069040056 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.09866971 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134208433 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067347804 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070103882 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071342876 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080766297 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068926496 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097889936 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08690468 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067147369 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086590243 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068999827 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.06884848 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084702904 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069345404 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.113514172 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079871146 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073590285 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088057257 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072606674 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089353491 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067029831 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078155578 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067333595 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068172662 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065558693 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103753749 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073775161 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.118709907 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068309033 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065424557 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079660294 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.079136309 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074110773 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066725828 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087402585 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079809811 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071024217 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.07905156 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070086642 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070416652 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103345001 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065897267 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064962606 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065041214 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069498792 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070317185 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067538199 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080926927 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066608465 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070163097 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083108907 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066948575 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067687017 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069480843 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068588878 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066394167 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078138469 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071178333 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.06925278 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079846628 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068125051 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070597266 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.081973662 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076685103 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066568429 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068458183 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069497351 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.06913214 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071817831 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070442604 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068925401 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074634364 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074642524 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073297614 seconds)
  done (took 11.268081706 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165650673 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154820398 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068597641 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.14941853 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076125199 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.072165919 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.150767754 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088080822 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.06848192 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.069354936 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067182617 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.096777009 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092401882 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104627169 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.07245865 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068579926 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093862298 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.101634856 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.153006751 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.14744495 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091929323 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076486161 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.07033903 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069620188 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069212104 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076922002 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.08664762 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075952943 seconds)
  done (took 4.738357256 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075187652 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084068303 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071882375 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092545439 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086669068 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067975546 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069901543 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069250844 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084808023 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074860369 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068085175 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072686882 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.072148843 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068685473 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068961628 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.074687973 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074529369 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06682511 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071340764 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072462254 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078506912 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094211828 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071991621 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068227652 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070472825 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067883697 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075172428 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077666033 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067567607 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.098500287 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064834153 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072371435 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082618676 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068803475 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067629281 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068483719 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.068009545 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067870249 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067985159 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065887355 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065645671 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072914117 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06616545 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073653578 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084958072 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075281493 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068129152 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.070103215 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069719631 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.06438366 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069958766 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070655998 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07028489 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076882892 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071578229 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070583132 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068968204 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099595507 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074157465 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.06731529 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066850098 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066176849 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069551881 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076155154 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084552312 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069554267 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065745269 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067819623 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072774402 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082042617 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066941055 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073204613 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064456764 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.068000895 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070395962 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070829619 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068800592 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065892536 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067657781 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068297966 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068131695 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.06745965 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067701139 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070440136 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065335785 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066071107 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068209287 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.06877973 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073922716 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066608623 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070529045 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068863488 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066552407 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070259209 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073302534 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070596794 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087730971 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076307518 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068381604 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065853767 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082892033 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069608735 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066941211 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073466982 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072794494 seconds)
  done (took 9.626379548 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091195993 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069375039 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087712765 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.094518921 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078994184 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07344708 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081824959 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.068570559 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.084554602 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067262411 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076962713 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066524572 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.081890088 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07803499 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069678793 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078489399 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07083162 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08923648 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.082912263 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066421373 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.07728118 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080592209 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081075785 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086097453 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085743229 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086816516 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080227743 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070459553 seconds)
  done (took 4.271997393 seconds)
done (took 40.97662687 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.102708113 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.240048173 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.089209103 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.336223662 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.39243987 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.104801731 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.315656161 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.076939752 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.161495511 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.137255954 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.39104715 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.468847243 seconds)
done (took 69.890932063 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.201945897 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.222977089 seconds)
    (2/2) benchmarking "String"...
    done (took 2.292962001 seconds)
  done (took 6.526423422 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.677014847 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.075851951 seconds)
    (3/3) benchmarking "different"...
    done (took 2.122369969 seconds)
  done (took 8.880116893 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.180055319 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.830918818 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.316602805 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.074939699 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.076297083 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.423948641 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.862903199 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.532425673 seconds)
  done (took 34.125842126 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.305027424 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.29157512 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.873713017 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.873660738 seconds)
  done (took 17.398570138 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.680052244 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.338258559 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.337478458 seconds)
    (4/4) benchmarking "different"...
    done (took 2.329799665 seconds)
  done (took 11.757456414 seconds)
done (took 91.177972813 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.078174058 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.313952237 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.082006746 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.244451451 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.129753511 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.112399807 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.088823416 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.118465142 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.074824281 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.079363049 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.511745054 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.073431466 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.077615438 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.104941676 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.073815544 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.087361512 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.175775842 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.073345574 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.133548742 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.718614381 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.599301758 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.07783022 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.077739472 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.131929558 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.175418853 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.103950289 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.111267179 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.087988226 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.693301395 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.082827982 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.084022221 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.079257417 seconds)
  done (took 213.662770917 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.075911109 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.239963348 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.307030407 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.098940284 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.539475475 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.269331121 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.221562419 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.600469879 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.080969077 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.088687185 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.181953864 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.073945492 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.19920095 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.024661589 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.074275298 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.178544152 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.350154854 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.209218148 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.073854562 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.2673544 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.096428433 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.041870722 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.008084495 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.159318999 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.114708741 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.125847729 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.08300703 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.08486227 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.263325448 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.32372507 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.091316165 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.12001341 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.210520993 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.94512262 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.092197687 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.084277198 seconds)
  done (took 181.010004346 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.441687051 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.087126125 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.142599336 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.295266481 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.851586567 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.810056041 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.078971544 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.078406885 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.078589082 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.086642617 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.077719583 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.082635464 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.147763191 seconds)
    (13/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.075389145 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.344361611 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.094174719 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.076757575 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.080071666 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.294420483 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.082431675 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.078890996 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.07929003 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.143992181 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.447628342 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.211966412 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.079125542 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.091669176 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.215918744 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.087344206 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.079751921 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.215385394 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.078068214 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.15779963 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.212463071 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.088719883 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.161880957 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.082826628 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.573593931 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.079316751 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.079615936 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.081744573 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.142836879 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.076191543 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.188405396 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.170234393 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.074914634 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.093638179 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.279496496 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.758002629 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.08030381 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.080353024 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.079470158 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.083462313 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.079870335 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.081785248 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.326015203 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.081240253 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.104858723 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.694205927 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.082227745 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.080962459 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.082472436 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.080727068 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.080609009 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.088784243 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.122119221 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.887684902 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.187713685 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.46597781 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.889216064 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.081179248 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.339392264 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.141215066 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.085114059 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.162018691 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.077069147 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.081055184 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.081829614 seconds)
    (78/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.080554483 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.081411621 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.221915106 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.206967719 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.081589895 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.218984998 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.082347521 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.081101456 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.264492993 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.460379027 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.077017425 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.090611915 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.129561745 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.079330251 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.079153333 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.08562482 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.187895678 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.077321647 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.065824033 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.075714072 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.172607841 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.078868854 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.120795581 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.304266689 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.146372883 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.329032632 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.31637185 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.079846239 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.078985434 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.085405342 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.071380127 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.069227302 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.083300663 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.070633096 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.070038256 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.071284118 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.071332526 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.074083209 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.070902456 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.083905158 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.069043386 seconds)
  done (took 444.043799939 seconds)
done (took 843.213940688 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.777104144 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.844803979 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.685687967 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.725806665 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.692571713 seconds)
  done (took 15.727132606 seconds)
done (took 17.725942059 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.094133886 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.084657433 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.061136838 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.091515757 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.09064254 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.093985297 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.115424283 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.086814831 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.10782822 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.087558509 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.097065223 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.090310693 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.094249766 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.111124855 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.102025123 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.101616306 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.088435915 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.082070858 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.096659831 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.094226962 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.084751996 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.082925596 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.086254976 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.093574029 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.102592311 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.088388585 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.08085904 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.088325718 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.087385035 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.090587417 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.124163557 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.092672236 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.116977764 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.094125958 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.093505443 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.0959974 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.082820531 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.108948071 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.086317106 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.122153227 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.083155223 seconds)
  done (took 87.857268189 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.07305165 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.212992946 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.284009423 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.104757206 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.07206239 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.283650489 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.129454438 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.197490078 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.204238169 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.289736312 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.308206552 seconds)
  done (took 26.157720149 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.071639937 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.207165102 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.290176505 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.108505127 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.0944424 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.288308162 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.13683555 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.203497112 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.208066915 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.288404236 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.297939707 seconds)
  done (took 26.198688157 seconds)
done (took 142.215327335 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.450099543 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.094738252 seconds)
  done (took 6.539204425 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.067597456 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.090160552 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.215743852 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.068772083 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.069043991 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.069235074 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.073015649 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.067214774 seconds)
  done (took 18.715741829 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.067137373 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.067036496 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.070464268 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.06726936 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.066228685 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.06557722 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.071754644 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.067182863 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.055306233 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.066540032 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.067960869 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.068489341 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.066139955 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.067789988 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.066296143 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.06685676 seconds)
  done (took 35.064071301 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.064952732 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.066840531 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.062604598 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.066285568 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.066383485 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.055313339 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.055670306 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.066400939 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.066825241 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.069478354 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.052526272 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.062492986 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.063540367 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.064412335 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.062790873 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.056216656 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.056149208 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.055602426 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.056202634 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.056633307 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.055316124 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.054327149 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.059850447 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.059394936 seconds)
  done (took 51.457193588 seconds)
done (took 113.780629305 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.320816805 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.663063486 seconds)
  done (took 8.966901777 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.057622784 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.040229321 seconds)
  done (took 6.151201794 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.060104469 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.051255092 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.051293894 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.031603367 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.040754962 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.052581674 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.049027365 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.049064193 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.036300677 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.048698939 seconds)
  done (took 22.450276191 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.049356192 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.048897604 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.04954303 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.048663904 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.049700708 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.048162071 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.048105984 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.048152091 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.051066877 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.047404186 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.04748291 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.048398216 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.047941093 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.051899091 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.047945714 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.046313067 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.047753759 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.046529825 seconds)
  done (took 38.856312638 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.046835481 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.046815392 seconds)
  done (took 6.070903162 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.04756389 seconds)
    (2/7) benchmarking "second"...
    done (took 2.051356152 seconds)
    (3/7) benchmarking "month"...
    done (took 2.04674468 seconds)
    (4/7) benchmarking "year"...
    done (took 2.045892533 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.047129243 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.047526055 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.047672258 seconds)
  done (took 16.309497118 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.046244821 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.20383244 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.255087899 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.646923046 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.047745609 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.048036537 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.913484009 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.050557849 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.050476024 seconds)
  done (took 22.236569921 seconds)
done (took 123.023593051 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.893519954 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.044645487 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.330513351 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.160056712 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.067295465 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.342808297 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.072052187 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.589537903 seconds)
done (took 44.474432569 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.166037619 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.044842998 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.064122196 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.068586545 seconds)
  done (took 23.148412454 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.037778963 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.365164397 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.058281933 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.989684091 seconds)
  done (took 23.43279511 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.413177124 seconds)
    (2/2) benchmarking "read"...
    done (took 2.386094166 seconds)
  done (took 6.769313498 seconds)
done (took 62.490041571 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.036901899 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.035893467 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.036893762 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.035961583 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.037688215 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.037434544 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.038388355 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.037138175 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.03781678 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.037643213 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.036454725 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.038284418 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.037267177 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.036817489 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.038105824 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.037105081 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.03717337 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.038265222 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.037816994 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.037545444 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.035917765 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.038215835 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.037835581 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.037526081 seconds)
  done (took 50.862928831 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.028435447 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.017117616 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.039924662 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.038334964 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.038793357 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.037564315 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.03831143 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.040799876 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.0366792 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.037263894 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.037773828 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.03841938 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.036454774 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.036584257 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.03831336 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.035984862 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.037397285 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036725566 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036254572 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.038518546 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.036712795 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.037172684 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.038016596 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.037458289 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.037708855 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.037275183 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.037932995 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.037715943 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.037787799 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.037871691 seconds)
  done (took 63.070923724 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.038337201 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.039126686 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.039366671 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.037049236 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.038803136 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.038653211 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.038528106 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.039149387 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.039131032 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.039130569 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.039083703 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.038156921 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.037221562 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.037110151 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.037591189 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.038781151 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.038289559 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.039554894 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.03834319 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.039036352 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.039163155 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.03928261 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.038629673 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.040186129 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.039280985 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.039258324 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.039351944 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.039740373 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.039514629 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.039881475 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.040292362 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.039874761 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.038671957 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.039881435 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.039103279 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.040007191 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.041445093 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.042857376 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.047410768 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.039832647 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.038915247 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.040752747 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.040664086 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.040282318 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.041025561 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.039499189 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.040428523 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.041044635 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.040321958 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.04007431 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.040068833 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.041351201 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.040020852 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.040878314 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.040813118 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.040456084 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.041069351 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.040627273 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.04068149 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.040880769 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.041157227 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.041924055 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.03980696 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.043311141 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.041780997 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.040766123 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.04126214 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.041358213 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.041235454 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.040648307 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.041699285 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.041598492 seconds)
  done (took 148.849830135 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.04170569 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.041080835 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.040649422 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.041333 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.040262884 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.040617519 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.040680979 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041885762 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.04059013 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.04001125 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.041163271 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.04166459 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.040977416 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.042270415 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.040991559 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.041169652 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.041448287 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.041361865 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.043280025 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.041717193 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.041337673 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.041204065 seconds)
  done (took 46.875203849 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.042987711 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.04227625 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.04232905 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.041870937 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.043213917 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.04285712 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.043341205 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.042731412 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.042841932 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.042000878 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.043021576 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.041291961 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.041976459 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042584059 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.042389769 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.042801335 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.042073532 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.042149153 seconds)
  done (took 38.73778153 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.043402676 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.042138121 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.043130794 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.044321502 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.04235573 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.043186945 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.040731493 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.04179452 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.046512235 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.043790317 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.043238675 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.042579129 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.043219502 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041648205 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042016075 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.042872603 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.043095274 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.043085428 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.042954412 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.042615206 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.044366932 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.043130117 seconds)
  done (took 46.918104059 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.04264666 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.044047683 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.04342219 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.043686485 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.043845008 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.043323481 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.044172933 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.043160699 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.043978343 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.043506148 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.043455914 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.044330937 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.044986495 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.044844282 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.044126359 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.043621135 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.045410592 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.043669446 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.044538914 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.044676923 seconds)
  done (took 42.853079693 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.045888203 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.045510712 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.045481482 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.04540882 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.045429969 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.044665739 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.045541174 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.045429291 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.046503759 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.046475938 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.045817126 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.045204438 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.046214855 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.047535835 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.046313811 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.046130656 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.045234595 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.046270213 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.047276904 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.046664524 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.04601911 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.045682199 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.046496174 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.046285589 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.047264952 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.046339474 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.046737712 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.047152602 seconds)
  done (took 59.264586668 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.045078489 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.046761472 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.046168996 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.044935675 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.044362317 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.045943502 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.04724554 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.046279514 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.033656598 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.045983524 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.046553818 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.047373302 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.045551936 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.046988281 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.046472414 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.046085851 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.045110252 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.046606942 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.047198767 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.046897191 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.047999176 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.045867512 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.046866639 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.045779187 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.045781265 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.02486166 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.048743018 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.045623318 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.047056995 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.047081637 seconds)
  done (took 63.331951564 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.066064879 seconds)
    (2/2) benchmarking "in"...
    done (took 2.067952477 seconds)
  done (took 6.110496975 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.047242992 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.048085014 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.048566023 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.047438151 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.048192669 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.048417998 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.04819393 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.047932118 seconds)
  done (took 18.360299474 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.048178542 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.051309974 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.049219822 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.048724585 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.048640055 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.056291969 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.048874501 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.05088277 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.050931542 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.049545567 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.05293403 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.052948739 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.05762795 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.053511122 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.049697915 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.050014106 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.040362672 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.050832988 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.050425367 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.048973466 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.051408469 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.050420549 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.04854783 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.050018001 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.049132127 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.050446444 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.050261589 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.051796689 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.050685727 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.049569711 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.051270839 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.03054624 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.050160615 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.051444634 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.050050834 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.049964458 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.056898547 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.051086853 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.050816482 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.051080975 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.051773505 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.053244624 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.053668046 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.058381239 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.0523777 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.050409944 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.050273621 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.051799906 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.052671353 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.055257284 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.057023665 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.052652178 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.050830463 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.049959582 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.05309178 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.05205356 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.051991637 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.052763726 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.056913398 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.058629278 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.054190595 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.071942487 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.06142055 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.051562439 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.051665684 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.061874811 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.075011356 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.052559713 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.053446888 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.04956776 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.059871774 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.052110437 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.051839835 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.052403987 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.064683441 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.061222605 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.052833536 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.052387872 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.051650993 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.052927631 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.054318619 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.051985266 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.05255433 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.053657179 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.062595471 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.07606979 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.052858995 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.052968693 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.054498912 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.053603354 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.058443563 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.054363853 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.053744667 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.052801168 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.054221758 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.056079616 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.053203037 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.053135357 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.053952789 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.060850816 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.049417817 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.026626051 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.056671357 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.061857574 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.051427165 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.054023925 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.054428035 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.05389451 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.051472803 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.042007233 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.054269527 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.054103022 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.055554841 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.059330385 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.055040138 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.059311551 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.06272788 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.061899979 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.035294032 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.055208691 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.057847401 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.058701702 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.062955997 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.078791854 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.053939579 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.058871996 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.059370619 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.065486447 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.054765971 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.054715991 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.057672894 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.054687182 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.053654071 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.056965989 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.054103782 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.055257056 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.054330094 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.05584331 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.056993642 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.05538021 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.05811904 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.055761447 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.059210099 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.055369038 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.059710587 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.056516857 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.059071012 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.063023053 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.056900083 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.056769867 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.055320594 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.058291233 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.057221552 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.057288344 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.055159156 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.055155394 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.057078491 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.05708491 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.058320322 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.055931916 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.055803252 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.056261963 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.061413431 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.026282592 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.055659049 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.056696683 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.056705045 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.057120026 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.057365439 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.0592025 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.058793475 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.057083978 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.06226904 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.056780078 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.05767171 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.057871364 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.057365102 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.057065031 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.061271283 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.068467701 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.061207837 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.066371638 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.05771883 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.064719594 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.058163107 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.059758466 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.057821535 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.058714503 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.05901594 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.058039742 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.058607846 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.06274074 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.078199341 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.068862545 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.060172713 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.059592471 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.0637411 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.062495733 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.063392176 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.058591029 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.060302866 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.060738969 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.058561006 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.059497816 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.058375704 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.062702314 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.058831772 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.058570431 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.064532015 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.058537358 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.057964657 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.061709852 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.05962238 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.060775334 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.060035531 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.058027321 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.059447892 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.059058484 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.067161813 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.061143857 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.059544458 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.059775564 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.062054113 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.059803792 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.059669088 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.061265434 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.052388647 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.058690204 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.061640563 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.066326229 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.061976077 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.060516027 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.060554745 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.060838639 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.062521443 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.061658718 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.063719312 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.06926303 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.062856633 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.060885421 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.066202735 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.060744214 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.061817926 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.060658011 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.060645394 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.062410637 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.062568653 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.061332807 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.059718773 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.068971716 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.060880381 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.062315028 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.06061671 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.063095057 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.06204708 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.063052063 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.06041262 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.0654424 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.069352951 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.06704145 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.063048878 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.066094481 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.064437563 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.062925776 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.066906287 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.062374513 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.075756037 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.071761128 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.061447083 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.061614487 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.062106984 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.064977371 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.061347135 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.06221512 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.069556986 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.063050094 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.063336541 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.064857574 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.063184811 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.063495122 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.069347922 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.063626122 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.066708263 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.063039113 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.064273257 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.059198304 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.062579588 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.064755026 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.064425662 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.063816947 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.065692337 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.063571724 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.063127481 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.062762725 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.071065519 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.063214842 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.064169311 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.070547295 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.064090724 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.063362808 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.064882855 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.064243942 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.065816986 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.06515551 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.065019358 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.066187547 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.063791908 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.067753687 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.07587255 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.067756919 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.072890149 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.065979979 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.073782832 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.065709763 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.06364191 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.064523514 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.06886456 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.072253235 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.064234901 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.06368109 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.072481806 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.065214762 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.065099408 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.069263941 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.064185508 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.06413563 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.066120107 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.067583314 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.069296273 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.067227935 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.064482252 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.059527155 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.041024895 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.065423311 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.067766347 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.068103152 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.066756634 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.065795974 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.065327757 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.06629444 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.065765225 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.066333328 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.065820497 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.064808187 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.065208354 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.074018318 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.066622058 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.066596266 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.070223582 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.067264466 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.073990871 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.06648711 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.06625265 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.066673803 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.065477355 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.070497813 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.06506475 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.066615203 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.066461181 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.066187639 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.066488572 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.078271075 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.07587765 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.070844229 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.068747864 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.067555115 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.068582871 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.076696834 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.090973036 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.067208364 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.069195528 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.071923179 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.073040119 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.069327302 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.071921372 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.071365747 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.076318323 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.069983126 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.068005246 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.070442518 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.079668247 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.069378884 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.066425504 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.068301203 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.07167278 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.071903194 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.066724364 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.068227861 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.070708948 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.070141175 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.079452842 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.068953426 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.069364022 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.06963674 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.068019739 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.067846705 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.067951313 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.069501745 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.070783816 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.068554757 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.0697245 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.071608451 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.074001035 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.06918743 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.073170766 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.077886916 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.068085646 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.069089323 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.070144887 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.069902565 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.070982561 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.069916141 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.06855131 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.072072391 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.069395027 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.069448875 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.073223244 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.078206671 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.070643562 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.069613843 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.069123148 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.073388555 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.069319173 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.069738697 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.072661966 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.078344776 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.075121721 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.080755191 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.079495393 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.071851436 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.072780276 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.078540706 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.078509093 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.06999231 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.070583736 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.071798437 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.073929807 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.073106897 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.071978154 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.071354991 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.071771107 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.07529186 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.071233906 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.071877204 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.070822277 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.07139842 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.073059055 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.073756777 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.077066139 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.071264712 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.07145513 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.070378248 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.072811985 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.071907866 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.074412938 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.071425856 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.071942501 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.072721643 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.073857212 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.076527686 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.071966514 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.071403659 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.07369064 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.070475057 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.070470439 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.071032026 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.072791381 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.071101114 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.075254739 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.079827106 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.071945148 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.073688143 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.073349333 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.076385788 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.073813184 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.072200125 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.072080495 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.071597724 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.079857982 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.073014183 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.072505211 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.073809845 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.073474732 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.077647102 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.074550939 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.07776414 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.073994584 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.073884466 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.071749885 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.076691263 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.081681315 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.078260039 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.074628669 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.081730403 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.078231445 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.07564057 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.07415471 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.072396406 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.073775875 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.074439359 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.076337952 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.075920605 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.076717025 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.074337269 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.073678617 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.074717752 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.07732875 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.073559842 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.073462051 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.077602696 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.083736539 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.082653052 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.073354774 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.075812757 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.075084078 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.078895316 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.086273636 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.075037336 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.07470604 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.075191152 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.076466816 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.076803767 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.082610155 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.083041248 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.078500504 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.075163414 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.079974974 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.09276596 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.076239285 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.084867895 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.106992873 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.07644743 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.076018962 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.077779355 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.076261881 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.076179903 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.077843393 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.075219798 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.05403567 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.073605887 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.075069986 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.082483181 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.07511523 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.074887165 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.07695672 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.077710139 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.080779698 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.077224638 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.083878161 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.077275997 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.076070726 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.078325765 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.079493854 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.075764618 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.076311877 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.07493934 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.079291509 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.076770448 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.074255554 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.085054734 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.077708745 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.076791332 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.088442068 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.063828555 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.076639079 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.077145234 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.07741674 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.081654191 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.078986396 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.077160557 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.081056027 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.084889095 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.081382506 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.085144536 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.076805105 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.078606517 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.078766003 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.077462451 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.078679293 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.088523681 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.087388701 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.079277985 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.078428835 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.084394311 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.076761251 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.083643384 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.084211418 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.06728254 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.080467039 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.079004623 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.078100973 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.076751905 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.052815904 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.081935707 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.084905098 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.078468573 seconds)
  done (took 1233.010147458 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.077774901 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.077253873 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.0778083 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.077539829 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.077732079 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.078369091 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.077903519 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.079332385 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.076971905 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.066631216 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.077887092 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.078621609 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.079444829 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.076497582 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.07848143 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.079025046 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.078967823 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.075210327 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.079655802 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.078854745 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.077915286 seconds)
  done (took 45.633736841 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.07898626 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.079190041 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.079002765 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.078340625 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.078990517 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.078786308 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.079167008 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.079011868 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.07999433 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.078661701 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.079036316 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.078374618 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.079794728 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.078813722 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.079883252 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.078968887 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.079916339 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.080555958 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.07912679 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.078508301 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.078740344 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.078285632 seconds)
  done (took 47.746037796 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.080314179 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.079527321 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.08145406 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.082277074 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.080140267 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.081332495 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.080781681 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.082076374 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.081477592 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.081812434 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.088499993 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.088311373 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.076172705 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.08399827 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.080479766 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.083551749 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.226019347 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.080766852 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.080324772 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.079034893 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.08029811 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.086393584 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.069948827 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.057763293 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.079634076 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.080692695 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.081762187 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.08277061 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.082872093 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.083706891 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.086099202 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.082326868 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.082905824 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.084615259 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.08334727 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.082556262 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.086913296 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.083799529 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.082670777 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.080806433 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.092860783 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.102188564 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.080195183 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.083052866 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.089756506 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.081969133 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.059910402 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.086313017 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.091064353 seconds)
  done (took 104.176071551 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.082737911 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.081487824 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.082381734 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.069502973 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.082054954 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.081425687 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.082186899 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.082891571 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.081273928 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.082681262 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.077926961 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.075991765 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.083908347 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.082286766 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.08199811 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.08329483 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.08387041 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.081957844 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.084419966 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.082611285 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.073098742 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.083954598 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.085388686 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.085532365 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.085032747 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.086808113 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.085715533 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.08523864 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.085262666 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.08631147 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.085102829 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.084345449 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.086463652 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.085753985 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.0837419 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.08595295 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.087040165 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.08567609 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.086641579 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.08635974 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.086665594 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.086362672 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.086299046 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.086353859 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.085049737 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.086176542 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.086124331 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.087378682 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.086418076 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.088061615 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.087423926 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.087123675 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.085396445 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.086450006 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.087333474 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.086443854 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.086918373 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.08477957 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.083489085 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.084856171 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.084999548 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.084591034 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.085388033 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.086346341 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.085355848 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.087237482 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.086932953 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.086218423 seconds)
  done (took 143.750509934 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.089911562 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.087574434 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.086255063 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.085745035 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.086343848 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.085037191 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.085096737 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.08750848 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.085831662 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.086056627 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.087069512 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.086167955 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.086199901 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.086390004 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.086023178 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.086974853 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.085677762 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.085709657 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.086232768 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.087218771 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.087705626 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.086289891 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.085917149 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.086121917 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.086559874 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.088387317 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.087372634 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.087832562 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.088393591 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.085824882 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.088226748 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.086813203 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.086080246 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.088016414 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.08783428 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.086412739 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.089684074 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.08750508 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.086773355 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.087521032 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.087825292 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.087420208 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.08677913 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.087675744 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.088378894 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.087605289 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.087235854 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.088022391 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.087348174 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.086411746 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.08849251 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.087913244 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.088302847 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.087447324 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.087641919 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.087720877 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.088337899 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.078275105 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.089227841 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.087745921 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.088759489 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.087804619 seconds)
  done (took 131.411179529 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.087156896 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.08894466 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.089473429 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.088647358 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.086938899 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.09102047 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.091094734 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.090246587 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.091921637 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.090861709 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.090207261 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.089847728 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.090942714 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.090397847 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.090635336 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.091697495 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.091791514 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.089793496 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.090332246 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.092126802 seconds)
  done (took 43.820081999 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.089979084 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.090703124 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.089623157 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.089639227 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.090711662 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.090097381 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.089856521 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.090206312 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.090720747 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.090888304 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.089477601 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.089304477 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.090378365 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.0902805 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.090596543 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.091515347 seconds)
  done (took 35.461267615 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.092139371 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.091439844 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.089466813 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.090972141 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.090830274 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.090735033 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.090999019 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.09156473 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.09196591 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.091438186 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.091320746 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.092193055 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.090414035 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.091850496 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.092347886 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.092272029 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.092968547 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.09037644 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.090451742 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.092145594 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.092954158 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.091817806 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.09236102 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.092633286 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.091153422 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.092179764 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.092943915 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.091555731 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.091912018 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.091992093 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.091365845 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.091982768 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.092716932 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.09294512 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.091559204 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.091700565 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.093251511 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.091411336 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.076599521 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.093342093 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.091762175 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.093051139 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.092897101 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.092540401 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.092987833 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.093062664 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.092756429 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.093003448 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.094625808 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.093440188 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.093515875 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.090528878 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.094497861 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.094774598 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.093770549 seconds)
  done (took 117.072304274 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.093558641 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.094135404 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.093767947 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.094289264 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.093533824 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.094122839 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.09336651 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.092809294 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.093795207 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.094020865 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.095299039 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.093640309 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.094174633 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.093919541 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.094617222 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.094360942 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.093871266 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.092857768 seconds)
  done (took 39.709483059 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.094650934 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.094599399 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.093001291 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.09450194 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.094971616 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.09313276 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.094164867 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.094959526 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.093679647 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.094327625 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.094890987 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.094988988 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.094204042 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.094316454 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.094517623 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.096014071 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.095718571 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.09558132 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.094704426 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.09649756 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.095400715 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.094955824 seconds)
  done (took 48.105085657 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.095302496 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.085422355 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.111782584 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.116457349 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.115021404 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.132210314 seconds)
  done (took 14.678003822 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.09581382 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09504714 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.09474596 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.095669008 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.095212221 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.09503918 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.096061537 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.097908681 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.095704942 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.096238276 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.095754152 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.095407413 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.096576025 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.095219291 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.096498211 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.094682137 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.096164285 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0955628 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.096241418 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.09667314 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.096213075 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.097331738 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.09602159 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.097297101 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.09665048 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.096293684 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.096656153 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.096923292 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.096959568 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09780721 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.096827857 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.096634317 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.096971434 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.097761237 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.097286769 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.097127205 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.098226436 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.097444001 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.096433355 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.097821017 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.097960516 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.095532877 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.097498575 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.09733363 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09631723 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.096342351 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.097813329 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.097887869 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.098388996 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.098348251 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.096563081 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.098156585 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0995655 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09700732 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.099395858 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.097998064 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.098587965 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.098653691 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.099136408 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.098589262 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.099464155 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.098756321 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.09888593 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.098727534 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.098222538 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.09778041 seconds)
  done (took 140.428613677 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.097692319 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.09867735 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.097086431 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.098951825 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.099124823 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.098333623 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.099131345 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.098132606 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.097359222 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.097826816 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.099037446 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.097886105 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.099225254 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.098626222 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.100573285 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.098262016 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.097331302 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.099713092 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.098865298 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.098466345 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09797258 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.097710501 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.098549998 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.10046955 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.098956474 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099377273 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.099840192 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.100000983 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09976111 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099949788 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.099383661 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099197111 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.098849462 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.100581392 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.099381069 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.100951122 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.10066326 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.100281623 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.100378996 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099264849 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.099991654 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.098557336 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.100539938 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.099372632 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.100685881 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.099833595 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.099815394 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.100303972 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.100779339 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.100682703 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.100142017 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.101642846 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.102190939 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.09997051 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.099159789 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.101388401 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.101828104 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.10074734 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.100586168 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.100457486 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.10077326 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.100871782 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.100871636 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.100393227 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.1009689 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.100991105 seconds)
  done (took 140.602760148 seconds)
done (took 2872.812253673 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.104961579 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.205484615 seconds)
  done (took 16.336461236 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.269646773 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.14476948 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.287148524 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.220083154 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.111116237 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.101099075 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.100271326 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.107925188 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.197298995 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.105677853 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.159769929 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.101838839 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.106637095 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.107309553 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.10625318 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.105804479 seconds)
  done (took 56.367597543 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.111227592 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.110597817 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.108438664 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.107033365 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.122871964 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.181829557 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.126792732 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.109193342 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.110726197 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.146383362 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.125003655 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.113734631 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.114844313 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.111922863 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.199810747 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.152559366 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.165309596 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.179609544 seconds)
  done (took 40.425441077 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.18752583 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.108955459 seconds)
  done (took 11.336654686 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.125060503 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.134955716 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.117370508 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.110364892 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.125478331 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.121568953 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.113928595 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.103441112 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.107734057 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.112986379 seconds)
  done (took 73.208683547 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.107569261 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.110226641 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.414560954 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.118475986 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.115310799 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.132988653 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.107186606 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.143922202 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.108090974 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.104635481 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.115682133 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.417520496 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.115545549 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.108836753 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.462983498 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.118134438 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.113864371 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.13841214 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.140940523 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.113375533 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.116368988 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.11277777 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.27054819 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.797038988 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.106758671 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.109875396 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.116958373 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.106102114 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.105888821 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.110203228 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.112777682 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.108327519 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.117391756 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.109699071 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.113379243 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.111167497 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.582619629 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.124005228 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.116645037 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.186586656 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.15317201 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.113125416 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.932764758 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.107991901 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.108454947 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.114276798 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.796875036 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.181202284 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.11039293 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.258458832 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.470182676 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.120973719 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.27310515 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.267316643 seconds)
  done (took 145.986953492 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.107392977 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.340282182 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.259361114 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.108367033 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.360761895 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.314675281 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.10616118 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.153344452 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.10524591 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.308557732 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.358754943 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.211249542 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.10737562 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.107227212 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.105808544 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.112837491 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.252512609 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.174241196 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.107090047 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.107598194 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.134294086 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.311071875 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.228527893 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.11073593 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.132723592 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.314313714 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.22754384 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.210417099 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.887037616 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.107247345 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.17086008 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.108043279 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.109476181 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.10453009 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.263741714 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.201857161 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.191935345 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.106232457 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.109636395 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.108612863 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.784398367 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.308572587 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.201271719 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.229697183 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.35850965 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.325204645 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.718101571 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.110564286 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.732240183 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.276622796 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.315877945 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.321222582 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.225410419 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.112196977 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.394873484 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.109467167 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.110215595 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.327561102 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.324472217 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.210099579 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.108593231 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.110105883 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.107315556 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.342266364 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.109700382 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.197937836 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.108078504 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.107154065 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.20329024 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.208006968 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.334285354 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.331675001 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.138623026 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.446626766 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.599713459 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.314116359 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.172584474 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.32847705 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.110106091 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.108523705 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.189944791 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.950664069 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.361487118 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.353591963 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.309376647 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.137786727 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.762828133 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.109807285 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.299096434 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.300145034 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.342292431 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.349445889 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.343762329 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.455556754 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.110962927 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.111632366 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.416970969 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.224724613 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.115717272 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.461489597 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.339355997 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.596335347 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.137843256 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.441997827 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.238071303 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.560646642 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.760322633 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.110914077 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.316427647 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.15192711 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.114316723 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.113319475 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.300017893 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.0136183 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.112528875 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.811891541 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.172891559 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.110983186 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.316926429 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.113504084 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.356297293 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.114461105 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.345390694 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.745229732 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.142226699 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.287618407 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.357539846 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.746555747 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.355258841 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.350018171 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.223719175 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.337806124 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.920837237 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.114585699 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.37493275 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.111733267 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.115235517 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.281091563 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.114568269 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.256775994 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.116729814 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.379370475 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.130790139 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.342484091 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.116882297 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.350794955 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.143486295 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.162353231 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.114485247 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.242246358 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.116213433 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.066755794 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.271714647 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.118751682 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.110355432 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.697752396 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.117402692 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.261087795 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.340776974 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.133019273 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.184775037 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.678812649 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.106246793 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.196737331 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.132940983 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.404786649 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.114243461 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.361483697 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.074771398 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.5972049 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.113433029 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.349043911 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.296747335 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.116946309 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.113575849 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.956176192 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.113830027 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.115339925 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.271374389 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.553876797 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.023077931 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.313942721 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.114531756 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.239961514 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.11759039 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.195593647 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.457267919 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.115387759 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.114479047 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.114727911 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.118515287 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.116884609 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.325814074 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.139527587 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.549727869 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.253086338 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.370493426 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.419249012 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.318861535 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.152452139 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.120013088 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.334648078 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.114315721 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.17764754 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.113728604 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.135380008 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.343532003 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.115671075 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.322473374 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.352363312 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.997832625 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.162109362 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.118961445 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.116967681 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.025563812 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.264782941 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.202182299 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.116056948 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.119413758 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.23386878 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.239486345 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.301181102 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.938690406 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.242837239 seconds)
  done (took 955.134801113 seconds)
done (took 1300.825668778 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.117200684 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.119094156 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.11862448 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.115077703 seconds)
  done (took 30.513169715 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.118393492 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.118789228 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.120286332 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.121513005 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.119774596 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.119175107 seconds)
  done (took 14.763355765 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.117230262 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.117515278 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.117761827 seconds)
  done (took 23.396240382 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.550039701 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.526673033 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.193277224 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.259202556 seconds)
  done (took 11.574369346 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.124238721 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.120267773 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.120577177 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.120510842 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.121960894 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.119303092 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.121785945 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.122074578 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.122225653 seconds)
  done (took 21.145773992 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.33279903 seconds)
done (took 107.769034665 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.150305793 seconds)
    (2/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.221524605 seconds)
    (3/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.970984902 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.240902422 seconds)
    (5/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.131672085 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.151640779 seconds)
    (7/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.235484068 seconds)
    (8/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.34974253 seconds)
    (9/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.391768752 seconds)
    (10/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.384802579 seconds)
    (11/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.123172861 seconds)
    (12/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.123998012 seconds)
    (13/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.384863564 seconds)
    (14/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.429191052 seconds)
    (15/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.379514797 seconds)
    (16/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.181444354 seconds)
    (17/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.204863721 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.141225925 seconds)
    (19/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.418543617 seconds)
    (20/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.540382926 seconds)
    (21/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.346529708 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.133335672 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.246879053 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.137620535 seconds)
    (25/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.217666199 seconds)
    (26/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.324802733 seconds)
    (27/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.943590614 seconds)
    (28/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.541942982 seconds)
    (29/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.124577189 seconds)
    (30/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.08199174 seconds)
    (31/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.125981892 seconds)
    (32/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.14869757 seconds)
    (33/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.40155965 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.137584056 seconds)
    (35/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.230081774 seconds)
    (36/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.519654102 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.216863577 seconds)
    (38/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.123108416 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.426663438 seconds)
    (40/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.323235244 seconds)
    (41/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.181656254 seconds)
    (42/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.123299458 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.204243393 seconds)
    (44/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.396663153 seconds)
    (45/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.140418791 seconds)
    (46/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.500410442 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.158790466 seconds)
    (48/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.278697533 seconds)
    (49/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.213106301 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.542565552 seconds)
    (51/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.824770968 seconds)
    (52/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.201741945 seconds)
    (53/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.20959994 seconds)
    (54/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.395233509 seconds)
    (55/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.30974538 seconds)
    (56/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.527761223 seconds)
    (57/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.465815876 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.376013293 seconds)
    (59/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.566547123 seconds)
    (60/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.377691055 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.474609356 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.127162805 seconds)
    (63/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.565297924 seconds)
    (64/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.215573759 seconds)
    (65/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.129707023 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 4.180036935 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.258662908 seconds)
    (68/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.918630022 seconds)
    (69/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.606852971 seconds)
    (70/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.372145866 seconds)
    (71/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.249266017 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.839790066 seconds)
    (73/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.795258389 seconds)
    (74/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.99692915 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.37335386 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.145502806 seconds)
    (77/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.674507963 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.255744901 seconds)
    (79/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.20505219 seconds)
    (80/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.144477917 seconds)
    (81/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.338645787 seconds)
    (82/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.519246489 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.130057023 seconds)
    (84/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.204945423 seconds)
    (85/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.127233183 seconds)
    (86/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.385701275 seconds)
    (87/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.942117581 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.260913687 seconds)
    (89/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.130659417 seconds)
    (90/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.520124441 seconds)
    (91/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.965237576 seconds)
    (92/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.133212186 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.004902584 seconds)
    (94/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.570374925 seconds)
    (95/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.48573802 seconds)
    (96/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.127303305 seconds)
    (97/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.130773642 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.215308085 seconds)
    (99/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.903653173 seconds)
    (100/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.138417827 seconds)
    (101/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.317777481 seconds)
    (102/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.232276347 seconds)
    (103/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.344875937 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.48413492 seconds)
    (105/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.246497018 seconds)
    (106/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.362294862 seconds)
    (107/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.128776211 seconds)
    (108/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.131449716 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.458775567 seconds)
    (110/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.544542275 seconds)
    (111/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.449836656 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.151719421 seconds)
    (113/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.318982833 seconds)
    (114/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.480676018 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.271928307 seconds)
    (116/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.038787781 seconds)
    (117/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.146064894 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.268219554 seconds)
    (119/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.029835096 seconds)
    (120/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.134284407 seconds)
    (121/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.296892885 seconds)
    (122/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.138833579 seconds)
    (123/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 4.549074561 seconds)
    (124/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.130019723 seconds)
    (125/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.176443602 seconds)
    (126/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.44994813 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.411101643 seconds)
    (128/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.810502135 seconds)
    (129/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.150030798 seconds)
    (130/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.21181542 seconds)
    (131/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.571296808 seconds)
    (132/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.216824086 seconds)
    (133/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.911819164 seconds)
    (134/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.133991662 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.801749564 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.238667885 seconds)
    (137/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.261810039 seconds)
    (138/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.530277695 seconds)
    (139/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.143372332 seconds)
    (140/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.071102534 seconds)
    (141/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.239194394 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.218423073 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.36941328 seconds)
    (144/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.2612773 seconds)
    (145/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.142665782 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.381240956 seconds)
    (147/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.135198095 seconds)
    (148/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 4.00101228 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.331472007 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 2.349046828 seconds)
    (151/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.247161493 seconds)
    (152/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.372764773 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.880760254 seconds)
    (154/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.462718698 seconds)
    (155/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.129497337 seconds)
    (156/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.460760146 seconds)
    (157/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.250767977 seconds)
    (158/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.13737121 seconds)
    (159/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.151705312 seconds)
    (160/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.147961334 seconds)
    (161/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.50325765 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 5.766633218 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.527516446 seconds)
    (164/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.8908803 seconds)
    (165/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.589482659 seconds)
    (166/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.143344063 seconds)
    (167/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.263216164 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.027886047 seconds)
    (169/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.26062974 seconds)
    (170/341) benchmarking ("sort", Float32, false)...
    done (took 5.812935009 seconds)
    (171/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.217689134 seconds)
    (172/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.342989856 seconds)
    (173/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.395068368 seconds)
    (174/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.743128867 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.356422083 seconds)
    (176/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.247570946 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.031300805 seconds)
    (178/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.610776883 seconds)
    (179/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.836244049 seconds)
    (180/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.207789372 seconds)
    (181/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.148423458 seconds)
    (182/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.081144049 seconds)
    (183/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.253458678 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.849933094 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.248694985 seconds)
    (186/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.134313028 seconds)
    (187/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.167686802 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.280182374 seconds)
    (189/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.09552625 seconds)
    (190/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.250590844 seconds)
    (191/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.552129869 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.906943797 seconds)
    (193/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.551160751 seconds)
    (194/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.131746526 seconds)
    (195/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.20740453 seconds)
    (196/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.843887024 seconds)
    (197/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.319326966 seconds)
    (198/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.550942268 seconds)
    (199/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.438514155 seconds)
    (200/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.606067334 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.132724433 seconds)
    (202/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.308780036 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.166625584 seconds)
    (204/341) benchmarking ("sort", Float64, false)...
    done (took 5.850026536 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.044540857 seconds)
    (206/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.275848248 seconds)
    (207/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.155550249 seconds)
    (208/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.448322111 seconds)
    (209/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.413964352 seconds)
    (210/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.333918486 seconds)
    (211/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.157293152 seconds)
    (212/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.187910138 seconds)
    (213/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.420758093 seconds)
    (214/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.265136704 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.152249231 seconds)
    (216/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.35123204 seconds)
    (217/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.46334704 seconds)
    (218/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.237759937 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.159585147 seconds)
    (220/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.268368253 seconds)
    (221/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.243535763 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.299447872 seconds)
    (223/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.340021319 seconds)
    (224/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.262083288 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.156466516 seconds)
    (226/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.351034643 seconds)
    (227/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.242449953 seconds)
    (228/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.268713072 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.489715085 seconds)
    (230/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.372584562 seconds)
    (231/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.513520682 seconds)
    (232/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.341911039 seconds)
    (233/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.623701594 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.014092271 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.145578195 seconds)
    (236/341) benchmarking ("map", abs, Bool, true)...
    done (took 4.010926637 seconds)
    (237/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.344256317 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.7581228 seconds)
    (239/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.431819323 seconds)
    (240/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.418215035 seconds)
    (241/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.233228891 seconds)
    (242/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.43718675 seconds)
    (243/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.160237777 seconds)
    (244/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.228670809 seconds)
    (245/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.4440352 seconds)
    (246/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.136464883 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.852452426 seconds)
    (248/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.166146322 seconds)
    (249/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.222370933 seconds)
    (250/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.014469425 seconds)
    (251/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.332413544 seconds)
    (252/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.333732104 seconds)
    (253/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.286944008 seconds)
    (254/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.150703022 seconds)
    (255/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.137743673 seconds)
    (256/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.274538971 seconds)
    (257/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.270473006 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.228779753 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.452282462 seconds)
    (260/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.144809261 seconds)
    (261/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.390277821 seconds)
    (262/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.142022376 seconds)
    (263/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 4.464748024 seconds)
    (264/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.139724309 seconds)
    (265/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.22393145 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.248473889 seconds)
    (267/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.26039259 seconds)
    (268/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.272903121 seconds)
    (269/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.477348302 seconds)
    (270/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.153163951 seconds)
    (271/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.153236356 seconds)
    (272/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.815699583 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.274891145 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.446928968 seconds)
    (275/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.745721151 seconds)
    (276/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.562571939 seconds)
    (277/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.137135914 seconds)
    (278/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.426193397 seconds)
    (279/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.220630487 seconds)
    (280/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.223916917 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.431808424 seconds)
    (282/341) benchmarking ("sort", Int8, false)...
    done (took 5.090695376 seconds)
    (283/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.385958169 seconds)
    (284/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.444097094 seconds)
    (285/341) benchmarking ("sort", BigInt, false)...
    done (took 7.140244724 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.142068823 seconds)
    (287/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.554589249 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.529772999 seconds)
    (289/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.340612717 seconds)
    (290/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.142945729 seconds)
    (291/341) benchmarking ("map", abs, BigInt, false)...
    done (took 8.552009771 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 4.333725848 seconds)
    (293/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.379295731 seconds)
    (294/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.570038269 seconds)
    (295/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.138024408 seconds)
    (296/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.188574205 seconds)
    (297/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.740526002 seconds)
    (298/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.462735135 seconds)
    (299/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.140918996 seconds)
    (300/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.364877249 seconds)
    (301/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.535584327 seconds)
    (302/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.912952139 seconds)
    (303/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.353137547 seconds)
    (304/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.256626129 seconds)
    (305/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.291588353 seconds)
    (306/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.048845058 seconds)
    (307/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.16880742 seconds)
    (308/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.349922378 seconds)
    (309/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.154352709 seconds)
    (310/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.528409945 seconds)
    (311/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.227218308 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.552188205 seconds)
    (313/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.144697392 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.45415212 seconds)
    (315/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.345803697 seconds)
    (316/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.145024145 seconds)
    (317/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.559811985 seconds)
    (318/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.978633947 seconds)
    (319/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.599230135 seconds)
    (320/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.267309454 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.999688085 seconds)
    (322/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.159994406 seconds)
    (323/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.278039257 seconds)
    (324/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.299138125 seconds)
    (325/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.433784346 seconds)
    (326/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.238259309 seconds)
    (327/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.221701619 seconds)
    (328/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.202688334 seconds)
    (329/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.88023323 seconds)
    (330/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.525188744 seconds)
    (331/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.146400166 seconds)
    (332/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.874081155 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.364263852 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.143492466 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.145279645 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.255873308 seconds)
    (337/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.160887672 seconds)
    (338/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.142808344 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.056095106 seconds)
    (340/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.435047591 seconds)
    (341/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.774202472 seconds)
  done (took 1183.062059194 seconds)
done (took 1185.443634733 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.168975989 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.152415504 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.651050024 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.158561574 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.153715301 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.156767332 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.659243583 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.178392757 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.169032877 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.662428875 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.158546176 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.15252287 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.167212228 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.187756499 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.164705306 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.16736506 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.156304538 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.178015297 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.189747113 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.158868997 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.199466828 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.158661939 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.152289023 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.20536431 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.154667323 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.167281239 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.168357742 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.205107231 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.199432091 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.155181235 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.15765722 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.505750163 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.202461309 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.159637312 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.164154948 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.1690348 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.165279576 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.167393531 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.167414219 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.169445781 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.15353619 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.165283035 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.158260193 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.156155122 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.152918745 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.15516305 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.156877144 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.278741009 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.167734675 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.489149305 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.207245314 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.168005602 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.201320051 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.157287811 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.158961237 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.155967613 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.20146799 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.160462535 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.158476557 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.490648868 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.243046634 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.167581747 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.4868866 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.215150275 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.164366989 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.163578186 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.153608928 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.16810637 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.509724374 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.698696315 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.183786725 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.176688971 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.158769686 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.157333269 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.168866222 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.659348254 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.167580641 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.728852126 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.179258365 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.169911566 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.15658216 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.157360635 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.157521129 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.172228436 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.169741655 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.155200713 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.161732278 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.163105341 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.169368968 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.506753958 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.198151523 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.651570902 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.16039367 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.170801452 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.170273525 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.72993083 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.183334274 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.169633575 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.160323415 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.507762065 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.19648537 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.171136091 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.159109714 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.166940418 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.271865893 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.171005742 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.171403667 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.158381588 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.179448181 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.163335286 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.158405256 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.171487751 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.178332579 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.192505799 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.174256694 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.156502271 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.165337401 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.164775758 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.169547621 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.168368196 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.162410585 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.168811629 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.157326471 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.209348511 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.17274805 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.173927777 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.273449456 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.166568617 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.282210163 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.173728404 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.164848616 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.159667085 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.49333411 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.200709062 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.180908086 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.16500564 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.179743688 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.180970238 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.175770005 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.161272362 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.173385716 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.161283856 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.211567073 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.161293084 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.184590764 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.210410377 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.172006428 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.164217113 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.170681637 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.194710083 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.17998163 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.163193735 seconds)
done (took 339.210225184 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.199011804 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.153392984 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.227924675 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.153524667 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.217845023 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.20334525 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.150729399 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.15296387 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.152664839 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.553196478 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.152318972 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.158154887 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.153725668 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.152616163 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.202436555 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.15255881 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.153602185 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.386017417 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.153179533 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.213170643 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.152644086 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.152678992 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.154454087 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.546043458 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.153869737 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.153717836 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.21336084 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.152283195 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.392885064 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.153853462 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.152248951 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.395383916 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.213400539 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.166780111 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.164281421 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.15861448 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.220888393 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.163672258 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.201454881 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.200338903 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.228930323 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.188118432 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.155720451 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.153822 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.158812749 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.15576638 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.15503472 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.188352607 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.152495558 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.159904185 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.386260188 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.16324959 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.161232431 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.154527488 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.154288339 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.169111922 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.155207118 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.155033273 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.213400742 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.155140359 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.20003965 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.541726029 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.55436512 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.155889722 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.154471771 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.157322456 seconds)
  done (took 202.70759695 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.221394989 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.242010798 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.22243558 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.161800869 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.208711095 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.22006837 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.161136958 seconds)
  done (took 17.515716394 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.16265304 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.159338947 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.181046575 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.17899631 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.156546415 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.299460518 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.167553293 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.163738819 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.182016769 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.15790479 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.49293347 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.180403876 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.163743407 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.156629853 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.168247074 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.185234164 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.15838662 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.158251878 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.254850054 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.236487462 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.163785588 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.164371867 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.185042118 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.169250078 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.157179618 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.157674625 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.158429818 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.165236291 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.157580394 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.157280117 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.157696397 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.173520907 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.159440652 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.156386915 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.157126487 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.158753367 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.159393752 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.157903008 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.159362597 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.158617658 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.156669411 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.157883453 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.157169206 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.158363679 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.158899435 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.181593437 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.157308979 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.158252374 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.158289699 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.16013239 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.186358306 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.15748738 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.157660927 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.163944111 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.19971706 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.165720989 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.158911099 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.158609285 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.158682678 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.158414061 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.158788999 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.237481167 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.182637001 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.158238317 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.182085118 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.196184045 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.15926879 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.159038728 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.158514813 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.184297554 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.161598613 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.181784532 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.160939558 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.258224501 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.158759909 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.304879705 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.18126519 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.16288831 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.162925456 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.157688007 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.167643096 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.159347019 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.160706888 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.166921909 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.164860672 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.159910275 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.158944068 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.160607587 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.167955832 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.160174383 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.205797731 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.159497949 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.160216858 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.2571802 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.16106899 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.25731595 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.185627122 seconds)
  done (took 233.233074805 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.164808444 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.159797834 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.174332574 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.160700573 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.159855293 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.165300784 seconds)
  done (took 15.069162262 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.163796872 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.164285852 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.158606242 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.159891497 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.1601951 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.162359099 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.16040037 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.163802307 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.164299349 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.162083703 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.160937592 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.163107111 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.15883823 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.158716055 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.160705886 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.159001416 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.163018374 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.160766481 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.162407818 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.160948952 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.408729645 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.163266399 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.162382956 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.166265498 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.167015499 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.161030326 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.172272218 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.157919129 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.144315442 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.168751122 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.16571423 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.161302559 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.167738132 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.170259621 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.168153292 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.166986073 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.166571298 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.164057843 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.16188101 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.163542816 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.164357439 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.16323421 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.161858298 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.166124746 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.164475694 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.171327145 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.169105077 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.172574735 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.163731658 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.163955506 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.165744202 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.163151201 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.163928487 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.166113963 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.168720981 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.168875862 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.169105273 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.162889946 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.163195794 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.167591547 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.165342475 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.161527658 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.165531418 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.168244406 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.171720546 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.166760617 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.167005576 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.168448815 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.169622295 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.165990133 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.167916849 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.165953366 seconds)
  done (took 159.167711334 seconds)
done (took 629.770343798 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.262324343 seconds)
  done (took 9.350518025 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.354235564 seconds)
  done (took 9.54885799 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.395604093 seconds)
  done (took 12.486951303 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.175693154 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.223679099 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.165667208 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.163872423 seconds)
  done (took 30.835421336 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.434800645 seconds)
  done (took 9.530121872 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.178404762 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.161827604 seconds)
  done (took 16.496998786 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.306618481 seconds)
  done (took 9.398464497 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.193873547 seconds)
  done (took 9.303218178 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.171414724 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.195801521 seconds)
  done (took 16.475418489 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.168637565 seconds)
  done (took 9.259215627 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.929245029 seconds)
  done (took 10.10373062 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.181619098 seconds)
  done (took 9.290430666 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.241673785 seconds)
  done (took 9.335396022 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.041617197 seconds)
  done (took 10.13675319 seconds)
done (took 173.639079509 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.174765083 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.161063079 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.162007242 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.159402042 seconds)
  done (took 30.746855528 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.201898657 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.203818187 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.215367256 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.202065265 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.192110512 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.192415176 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.201968277 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.204866543 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.192564138 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.200033761 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.202210549 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.201580137 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.202824939 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.210372973 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.211316959 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.199299992 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.202141167 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.203749984 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.191954055 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.211829789 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.201951344 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.203206124 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.167684832 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.168932058 seconds)
  done (took 54.877157269 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.361899805 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.234999517 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.322489886 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.2151245 seconds)
  done (took 11.226257916 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.168056282 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.231641283 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.221941846 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.214323787 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.221376143 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.271726869 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.221824258 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.305119337 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.296975522 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.294392333 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.175101319 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.190652335 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.192403266 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.214991411 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.272590413 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.169898718 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.170696643 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.289297593 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.231256856 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.35121956 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.169487483 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.222924702 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.219877569 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.221948853 seconds)
  done (took 55.605136164 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.169294126 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.179623883 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.176294729 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.169832807 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.16985496 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.1696512 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.180094501 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.171048172 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.192078288 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.171502032 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.170615234 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.173512382 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.176711345 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.172170618 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.169275877 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.188397282 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.183593602 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.170412712 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.173749161 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.177699235 seconds)
  done (took 45.59733972 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.169490981 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.020194261 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.516958423 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.422050392 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.168748626 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.170101822 seconds)
  done (took 33.561355244 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.185500787 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.186457037 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.176667461 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.194780445 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.218163267 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.175819097 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.230763916 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.332769468 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.176133221 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.228531739 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.187071741 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.177960962 seconds)
  done (took 28.564563442 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.169437335 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.169496863 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.170366234 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.180861854 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.181991604 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.180154937 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.178112192 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.170335435 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.181736287 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.18992235 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.177488715 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.182191079 seconds)
  done (took 48.227607722 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.384671633 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.398357778 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.38176196 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.696453075 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.486185096 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.151801613 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.459279452 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.383757364 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.912780535 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.942429126 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.459532012 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.150152579 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.121609025 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.093745077 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.093907804 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.415184794 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175759758 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.031161333 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.424034919 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.216802036 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173066355 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.174617537 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.176350695 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.471378699 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.500562046 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.176141296 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.385839876 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188013219 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.172762381 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.389205578 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.702268655 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.222954209 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.377959365 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.429445432 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.511697789 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.361123163 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.177019509 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.292111291 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.214668464 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.209997425 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.184891532 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.182871405 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.722803588 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.185338828 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.44601359 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175260392 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.177477301 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.279437472 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.095840658 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.466922897 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.287686572 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.173150452 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.210159449 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.604509689 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292611489 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.416176609 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.178480423 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.295677159 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227800302 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.411597171 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.279174143 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.276367028 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.387736733 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.099845152 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.553344144 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.298566495 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.177746281 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.17984077 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.874446459 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.41711414 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.257566104 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.47384868 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.937881412 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.175903042 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.176351589 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.219917991 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.276554933 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.17030702 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.470778315 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.168662879 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.098885673 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.274237279 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.576545699 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181539849 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.153622698 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.185101287 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.022457659 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.1010687 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.273087209 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.404733483 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.501365539 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.177215809 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.177995949 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.197181275 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177981217 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.125359986 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.67580521 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.238071076 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.103684489 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.737754814 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.718626356 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.136949345 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.596800113 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214484619 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.439425029 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.307797182 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.579557349 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.38707088 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.423922812 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.709666491 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.181663891 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.793389393 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.256638929 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252689659 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.176534307 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.742205021 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.297802003 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.449833297 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.29111801 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.17702597 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.104262655 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.18778848 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.380325287 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.721832149 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.228124851 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.175261635 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.182033182 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.177117598 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.180533661 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.340406328 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.194286057 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.470470153 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.247704394 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.17759682 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.116740339 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.179456686 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.464204502 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.730378427 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.234720274 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.428778199 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.442499737 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.8811915 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.772902466 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.122924905 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.451406405 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.248861671 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252071266 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.73848096 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.299289259 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.2754621 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.178763779 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.306904125 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.182821739 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.180928444 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.471568047 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.589019732 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.606236519 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.220911739 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.18076396 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.128315025 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.295854662 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.41522031 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.242438462 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.204630921 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.183012402 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.263038478 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.404658496 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.180909191 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.104348488 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.411893622 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.412794317 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.477368218 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.588276945 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.247091802 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.24995943 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.191435437 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.400398073 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.262821629 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.843367335 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.725013921 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.382263667 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.684677151 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.1377007 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.846843191 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.428897198 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.560124008 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.196575891 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.629690338 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.306550345 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.797728467 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.206045561 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.709623659 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.106715905 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185961697 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.503633905 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.128585347 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.495566153 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.240384626 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.193712178 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.183386064 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.183016282 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.189317879 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.092939244 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.285152138 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250545624 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.255546556 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109769393 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.767036563 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.214295418 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.184055282 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.182933403 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.540275932 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.039466898 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.132831123 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.182457557 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259043609 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.927749971 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.733094055 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.181147487 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.186358037 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.794937959 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.183148261 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.097140991 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.272913138 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.023919507 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20690609 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.418622206 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.882924007 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.478501704 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.258287175 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258551374 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.182505625 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.189083759 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.883476377 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.192479576 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.884095705 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.473749282 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.457957056 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.630446003 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.22698344 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.39302386 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.19965811 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.184490574 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.68593694 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.206701184 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184930103 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.387344643 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.702386171 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.483270754 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.826884849 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.268598946 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.18245154 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.451147528 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.185412227 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.713703433 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.878066517 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.184486686 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.184685487 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.44719297 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.868919896 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.185355971 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.161458365 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187471635 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.397378006 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.389093165 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.451085933 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.468156601 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.630356705 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.110218072 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.189554093 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.270593656 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.428137551 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.183360182 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.218382983 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.644730525 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.249387016 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.612324332 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.472703807 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.548777856 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.819554518 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.447332035 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.247173635 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.19676158 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.846552744 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.311686688 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.114964249 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303188572 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.111526123 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.943119368 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.474027463 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.198310935 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.453365415 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.160400256 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.518911679 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.481608161 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.419603992 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.231693683 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.211094289 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.186893006 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.229795923 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.186547032 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.326369189 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.297564392 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.18872199 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.680410689 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221316476 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232325865 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.190777774 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.70666864 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.205272442 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188519213 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.882516153 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.208359704 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.304723841 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258527072 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.9591582 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.7506961 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.251674126 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.074573968 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.838998156 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.457833487 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.239413517 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.624440237 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.21662777 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.592965632 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.187172615 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.400701734 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.192991766 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.704910326 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.229660073 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.44563999 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.132326063 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.397464893 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.38428156 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.205652425 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.18951586 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.11564387 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.289559487 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.068248771 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.166089334 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.191747892 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.873310906 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.598002055 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.340990131 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.627525422 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.006176032 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.191727339 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.531766172 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.592971102 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.756306693 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218178059 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190004018 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.500467839 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.323648337 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.503720247 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.462356213 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.197751728 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.214755995 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.402565614 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.316431762 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.109256507 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.666357209 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.769762256 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.890046024 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.200846031 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.394437242 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.498064529 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.424413367 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.218728736 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.2620209 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.593968661 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.460325888 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.255687713 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.115423618 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.189814143 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.58598966 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.591606198 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.286808198 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.431582967 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.488027345 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.710136486 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.742783918 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.569363917 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.604383274 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.603090781 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.604153685 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.375350918 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.533496409 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.504662568 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.782865872 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.603957281 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.40351712 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.289460778 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.459066875 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.053958894 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.900974683 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.435273903 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.196870246 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.109274789 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.398940861 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.194625359 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.583422489 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.717438126 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.440147625 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.428801806 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.660540279 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.730229206 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.331001017 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.212913713 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.160933667 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.215925322 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.212925338 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.192187479 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.671756042 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.476328735 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206627482 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.131699553 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.86126502 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.12029196 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.405819197 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.327806683 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.223722064 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.748868842 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.433627251 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.299675944 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.490847607 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.38569727 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.224260263 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119955207 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.951758134 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.138519214 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.261893321 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.616958073 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207627208 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.197644808 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397569889 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.123076268 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.240013026 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.198906332 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.381187803 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.762698023 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.46226236 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.318515751 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.424519468 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.485065649 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.070514612 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.225758922 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.466416865 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.120238926 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.767289395 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.869449386 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.232712122 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265732224 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.193191901 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.196337246 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.464987781 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.513268059 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.301527526 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.847011383 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.222815867 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.197857065 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.504791154 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.290905225 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.196691097 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.201300571 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.628475303 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.423005102 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.196348208 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.17963163 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.408604855 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.268373971 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.391280171 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.272309032 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.709006186 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.198730478 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.075376243 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301144411 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.145283161 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.191489765 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.892957155 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.255322948 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.195035134 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.467357801 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.815333459 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.396273047 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.592840929 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.052837945 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.331577208 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.233659004 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.199253107 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.200500255 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.589505899 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.498200335 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.196394556 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.464014583 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.242103984 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.197357716 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.857526925 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.159807134 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.197003266 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.954262939 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.127492785 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.9224491 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.594231305 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.268029129 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.197396275 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.199466154 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.124233062 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.195258783 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.37157709 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.192076537 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.202375131 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.559370449 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.491882878 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.293641869 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.197576729 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.196868114 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.201793144 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.409755785 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.712445521 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.21374524 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.897890943 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.40173921 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.20125818 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.679299164 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.639948304 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.405981619 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.234359971 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.343969814 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.424183065 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.728086285 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.344598947 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.177163212 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.421707529 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.199089135 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.470771603 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.473962949 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.198449075 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.412627278 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.749824137 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.481133201 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.546986321 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.515568293 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.261083533 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.350875113 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.133738791 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.197430756 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.199768878 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.461150239 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254135176 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.199498596 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207460493 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.752162388 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.94447564 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.651911279 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345059836 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.495876111 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.977483747 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.949730423 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.201785017 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.128421206 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.19746534 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.224264375 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.202941058 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.125577636 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.883706712 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.92068395 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.412880055 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.513840778 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.127988499 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.404832052 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.781708336 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.12177998 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.169302454 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.201508589 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.455644001 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.128848354 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.204621512 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.155944314 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.445560335 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.910241423 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.466456131 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.201202731 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.145427527 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.201334112 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.202556255 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.201574184 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.287132781 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.203129931 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.318727997 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.464368188 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.54228356 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.303236764 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.84114422 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.947724596 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.136910689 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241685132 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.761822838 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.769790017 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.458452599 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.329817595 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.955922863 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.144126216 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.206659298 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219475374 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.467585126 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2027164 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.204447259 seconds)
  done (took 2269.715190631 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.2580752 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.244914256 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.240206349 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.233874442 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.338230999 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.317150119 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.249203396 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.265138808 seconds)
  done (took 60.27049214 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.202199588 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.706497339 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.32750703 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.204081388 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.199824758 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.203348665 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.392678629 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.22858236 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.203552652 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.213760388 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.20475077 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.208214815 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.205336514 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.199841185 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.203322686 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.469237328 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.223745589 seconds)
  done (took 80.76588357 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.257984767 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.133457578 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.201142386 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.009555558 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.238888489 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.499766835 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.205779664 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.205074122 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.541970313 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.494299474 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.2143529 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.213680124 seconds)
  done (took 96.364250784 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.205182412 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.205910377 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.205874839 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.204607514 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.205046662 seconds)
  done (took 13.152970018 seconds)
done (took 2830.835629681 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.449003474 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.297747204 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.272784843 seconds)
  done (took 6.695502073 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.349126186 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.397794499 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.509827599 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.515186516 seconds)
  done (took 11.905048379 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.48803112 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.59661035 seconds)
  done (took 7.21186522 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.579583115 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.212941581 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.593643431 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.208020923 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.208435455 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.207116051 seconds)
  done (took 23.75714122 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.206794393 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.206585871 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.205984166 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.206722669 seconds)
  done (took 10.954704775 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.203954125 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.976656133 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.19974421 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.214310433 seconds)
  done (took 22.722796744 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.383173675 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.21955671 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.969877763 seconds)
  done (took 10.701390853 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.829754785 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.650447083 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.818735628 seconds)
  done (took 10.426868431 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.350304717 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.045358445 seconds)
  done (took 8.523028882 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.352782906 seconds)
  done (took 4.480184018 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.039100703 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.519002963 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.693445362 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.713393554 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.76219458 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.424025893 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.51875472 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.46689852 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.597583839 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.591150814 seconds)
  done (took 28.455399884 seconds)
done (took 162.796201193 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.625445723 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.223189383 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.414134843 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.581595344 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.437468254 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.416540969 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.509063748 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.569961259 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.253383717 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.237755053 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.578502456 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.439811519 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.45445485 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.230662759 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.457986635 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.224208782 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.444831777 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.652184394 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.267015049 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.500585595 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.510274003 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.226842671 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.420952039 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.239977997 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.442252288 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.368253674 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.827633659 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.222102685 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.413835145 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.83673467 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.365979764 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.655998046 seconds)
  done (took 180.179097747 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.20649377 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.205508233 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.206689587 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.205765233 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.520663646 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.210152977 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.206553605 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.203210742 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.419694365 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.40565089 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.205086407 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.502478757 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.20574509 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.205313531 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.208923323 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.204218126 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.52957042 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.213121829 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.20610486 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.205304812 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.207088027 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.387219963 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.20749271 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.399054803 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.503307162 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.207329249 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.206054089 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.205278787 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.207503652 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.21076557 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.207215169 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.206235914 seconds)
  done (took 218.764667884 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.21111776 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.20784109 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.206888423 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.206532689 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.207222347 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.207756767 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.210383187 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.208069128 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.002228844 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.99350099 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.206337703 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.212546904 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.214412116 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.206762416 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.215149619 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.207961391 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.21550367 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.208730609 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.209101981 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.197206341 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.211367751 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.934850358 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.208357126 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.964953072 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.209359379 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.212415605 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.208091872 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.20930983 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.207384911 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.208099718 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.210162863 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.208488989 seconds)
  done (took 231.883031306 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.458413258 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.212927994 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.212403618 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.21782419 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.213599959 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.21309793 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.217069409 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.463423263 seconds)
  done (took 22.344418685 seconds)
done (took 655.313285924 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.576005922 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.941666547 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.337639425 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.234832021 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.500955675 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.274579606 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.232834682 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.299312376 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.885614989 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.309155296 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.642981575 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.236761126 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.971726182 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.255746709 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.344442021 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.291182327 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.598339951 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.850248788 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.364727981 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.892363752 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.425746796 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.176473879 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.308990517 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.916741504 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.657033702 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.20229865 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.238904095 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.60070685 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.233572424 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.474304663 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.915598123 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.478601601 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.241397398 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.234950821 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.288047115 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.28064716 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.416317238 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.238076248 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.342970027 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.973652745 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.895408304 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.757403688 seconds)
  done (took 114.474620161 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.219760959 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.220214145 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.221630364 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.219696745 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.227661854 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.21874682 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.210266936 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.223311287 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.221226 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.221455567 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.222259756 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.229316764 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.222219816 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.22865406 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.221285733 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.222584031 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.221650598 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.228559201 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.222183387 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.220979861 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.221468195 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.221327489 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.218127892 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.22059834 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.221600957 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.221425236 seconds)
  done (took 59.914346346 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.217196341 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.365207502 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.491228578 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.241554264 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.2163914 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.220401234 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.246688377 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.220007672 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.219462335 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.219176879 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.313229608 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.21951787 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.230380965 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.498041539 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.241525832 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.218358576 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.219273901 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.21793434 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.374981726 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.230210519 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.247628109 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.220558261 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.246948727 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.229258917 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.220224043 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.219028544 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.222167215 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.614528233 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.225434438 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.316675727 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.260907913 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.244715565 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.565578806 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.505494368 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.280304593 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.222321477 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.219501594 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.361189989 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.226353657 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.220257991 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.24758709 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.22306993 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.50377186 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.725545904 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.231054544 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.217570597 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.612548131 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.364357407 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.261856863 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.231441163 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.511534806 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.244962967 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.219278462 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.222038803 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.256185038 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.230074351 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.220518697 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.463863265 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.231853471 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.248182771 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.220425829 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.22132868 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.385103828 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.22707695 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.372446333 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.228963751 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.226450928 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.220951275 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.50482622 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.244398513 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.724521167 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.231096572 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.220973375 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.316321393 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.374964861 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.640332208 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.231131132 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.378612401 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.586561354 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.253343238 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.216611805 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.60163197 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.256569183 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.226751873 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.219702357 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.219721849 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.220827383 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.264548207 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.246414377 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.64149039 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.725870448 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.475675164 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.256529512 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.230511231 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.222048408 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.464245724 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.227339176 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.221794919 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.501714579 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.747570766 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.232804476 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.228451581 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.706695452 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.232835963 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.249640564 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.229987875 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.516166682 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.246635416 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.264797388 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.221982187 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.228990358 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.224489726 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.250937544 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.229331275 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.221819025 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.700931854 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.371776433 seconds)
  done (took 273.255121897 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.22233305 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.218370511 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.219813584 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.219142783 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.221754881 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.221890046 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.220436324 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.221680094 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.223364279 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.221693535 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.222741454 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.221964325 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.223923907 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.230706388 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.256505357 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.223294079 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.710985669 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.222882948 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.221224604 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.221415514 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.787996461 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.229249508 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.223769325 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.221126667 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.222588156 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.224428458 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.226866387 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.252510734 seconds)
  done (took 177.50559269 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.226136518 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.27007163 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.232302788 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.270178643 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.233136225 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.225019348 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.245463786 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.234039955 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.228927949 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.223498046 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.225887742 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.251100955 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.228692616 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.298032494 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.248721361 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.251435828 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.298433945 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.226131571 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.225256733 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.226097778 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.271037251 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.236542373 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.252081614 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.274829709 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.233302461 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.271903785 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.237945674 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.224647735 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.223769854 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.313334817 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.23773409 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.251010199 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.254936517 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.240411579 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.314979811 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.31094437 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.30139369 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.249935169 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.22612973 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.225675254 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.225606486 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.226517449 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.272495706 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.234112999 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.22713902 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.314915277 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.238912863 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.226841731 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.246537173 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.22630279 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.236016547 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.243683425 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.257151263 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.319947458 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.26689772 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.249106331 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.247267487 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.240462941 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.227149426 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.301826491 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.231972693 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.314491775 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.241811891 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.229077608 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.229998491 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.232293448 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.274719075 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.257953801 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.301577958 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.229632071 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.300224927 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.275626778 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.236243974 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.227198093 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.228690834 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.275010883 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.309971728 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.275810987 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.283777535 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.257145158 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.235018662 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.228108143 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.229696282 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.257009719 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.230612479 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.315151527 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.315099953 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.231440637 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.229228158 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.228752735 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.229182726 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.250953867 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.28418842 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.26348165 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.307088938 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.25767904 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.259363762 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.231737181 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.239315975 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.232946047 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.258331354 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.232777615 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.241080922 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.586849341 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.264629414 seconds)
  done (took 239.0521695 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.579569914 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.27467225 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.298367028 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.491031256 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.596161828 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.299322974 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.263747342 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.283474262 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.283276717 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.391788139 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.330401264 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.321128077 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.260873436 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.252087393 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.277055665 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.28732167 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.310889349 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.575734512 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.373601531 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.953471598 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.261371662 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.523674945 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.570880744 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.609556169 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.313671242 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.65693449 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.890895599 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.36324329 seconds)
  done (took 72.049860858 seconds)
done (took 938.388862413 seconds)
SAVING RESULT...
DONE!
