cset: moving following pidspec: 27323
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.832996542 seconds)
loading group "shootout"... done (took 1.132042153 seconds)
loading group "string"... done (took 0.671357973 seconds)
loading group "linalg"... done (took 8.614342381 seconds)
loading group "parallel"... done (took 0.166881638 seconds)
loading group "find"... done (took 3.023601479 seconds)
loading group "tuple"... done (took 2.145861077 seconds)
loading group "union"... done (took 14.970970729 seconds)
loading group "dates"... done (took 1.452774152 seconds)
loading group "micro"... done (took 0.220972098 seconds)
loading group "simd"... done (took 4.759174606 seconds)
loading group "io"... done (took 1.103459899 seconds)
loading group "random"... done (took 9.639953003 seconds)
loading group "problem"... done (took 1.521369899 seconds)
loading group "array"... done (took 25.381785764 seconds)
loading group "misc"... done (took 1.898775723 seconds)
loading group "scalar"... done (took 43.854743514 seconds)
loading group "sort"... done (took 3.340967355 seconds)
loading group "sparse"... done (took 12.728025668 seconds)
loading group "collection"... done (took 18.749193772 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.421188497 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113064096 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.125470607 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.111720205 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.184558146 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118318288 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126000741 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082173299 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.886699941 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.136817655 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.112438578 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.421480807 seconds)
done (took 5.268453158 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.164003319 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.089227464 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082115663 seconds)
  done (took 1.380679541 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069873085 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.058403073 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065749 seconds)
  done (took 1.401707496 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063134457 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133235875 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064606551 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064989587 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065094938 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064673064 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064575194 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064342689 seconds)
  done (took 1.733639756 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070167193 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066050595 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.06399544 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065804172 seconds)
  done (took 1.47673096 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063570579 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119477172 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063005197 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062815378 seconds)
  done (took 1.516635229 seconds)
done (took 8.965065386 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.13759417 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.828024464 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.764121032 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.12075018 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.244236491 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.364047834 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122055102 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.180844937 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.086864988 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073316895 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119401778 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076258831 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.382688817 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.491158311 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069269279 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.166506129 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.647813818 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087682274 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.130644136 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.442385781 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071441765 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.085796996 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.083198043 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069592931 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.319466349 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151529682 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.665263159 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094567312 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068399604 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094392721 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069075756 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076148251 seconds)
  done (took 10.628745045 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090899667 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088224983 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067169103 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122219699 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092443656 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068638135 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073480035 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066227661 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087044361 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122223888 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.08836527 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097030949 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.06454398 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067706771 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.071931822 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195039195 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078483202 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082746876 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065945084 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079512099 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104342071 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076717935 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076700623 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07639107 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.127561487 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167061958 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094964864 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096485227 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064454946 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077668344 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113805167 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123982145 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065147927 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063604538 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.117928861 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093806148 seconds)
  done (took 4.57360293 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.876739432 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094278749 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081358321 seconds)
    (3/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.112176685 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072282314 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106670092 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.111938297 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122221048 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.121740202 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.104390143 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06827126 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.154228036 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.665328188 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.177602599 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070238243 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118453815 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.354248871 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.087817899 seconds)
    (18/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064417698 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066589259 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068364036 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071035265 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069092299 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111630106 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064208368 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173896889 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.576740937 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068721098 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067537737 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094130692 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063300689 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.137359304 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090684279 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068111485 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.540139467 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063847089 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062045326 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.196996947 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093274078 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065694581 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066801745 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07751641 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064790486 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106908703 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080035913 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.514492455 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068160062 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.578822934 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224159261 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071091967 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070303082 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.099703327 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062777314 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065986693 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.131437532 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.146635784 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065278272 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270026273 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068685617 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066831434 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068505856 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099670034 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067070007 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068219463 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072539664 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096048936 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.885439841 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088211219 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096212673 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.064817468 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.404070407 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074422316 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069133285 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069397564 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.069054933 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.107149276 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066439412 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066187813 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112340023 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093456051 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.08721783 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068162528 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065462262 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.062190033 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06458932 seconds)
    (85/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.062222421 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.338749145 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.172246511 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064284573 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065247211 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.471624264 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062335466 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066780739 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065782687 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.206761984 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065784777 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062911528 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063809694 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097457017 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067011519 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.33210412 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065111603 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.473365736 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067089917 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101216469 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118471839 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065868056 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099326892 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.06666638 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063657339 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072073231 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064236392 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.06355406 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067924425 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064488294 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065190218 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.06764042 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066471279 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065991381 seconds)
  done (took 22.933520991 seconds)
done (took 40.226266585 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312607169 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079586546 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079547442 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079264755 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080257707 seconds)
  done (took 1.892007042 seconds)
done (took 3.246013929 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.249358651 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073860605 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06230605 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.199445625 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088577045 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173801732 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.210976866 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.157451018 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.086207275 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086297992 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086261391 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.213912945 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.22252613 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.08641452 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.156934476 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.223995125 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086433069 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062409952 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086276257 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.085972327 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086467017 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.063029473 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086152222 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086152989 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155975629 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086034975 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06170564 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.155104915 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.084659445 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.155309625 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.084577328 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.084646444 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.084473388 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.154299687 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.084754717 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.15313717 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.061795301 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.084731038 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.084744684 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.084775159 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.083911108 seconds)
  done (took 6.074269998 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072925772 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.202941079 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082705984 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060772929 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069969895 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080652685 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060455132 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080750025 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086626666 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080798607 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080528077 seconds)
  done (took 2.304072374 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.06852501 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081909164 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08245192 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060258253 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071512278 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08169354 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06015443 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081169628 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.083946696 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083610659 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084115759 seconds)
  done (took 2.13784993 seconds)
done (took 11.801730509 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.094799547 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063743886 seconds)
  done (took 1.438378668 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.221067452 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.496799088 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.92563322 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.089977778 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.069825266 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.082831514 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.19466297 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.064794789 seconds)
  done (took 7.613318088 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.100585437 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065605964 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068001422 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066875642 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065693734 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06622003 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066348767 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.06775156 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.067055941 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065894854 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066570111 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065662098 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067508331 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066216494 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067225052 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067792312 seconds)
  done (took 2.49466875 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101579809 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067774637 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097707226 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060259218 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069822075 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060716213 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068956601 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070783103 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068519206 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069325908 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070769546 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069266929 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069818433 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069555402 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070892969 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071186526 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071143784 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069142645 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071473461 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072005909 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070799284 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.070944914 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071656798 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069571769 seconds)
  done (took 3.134414535 seconds)
done (took 15.980038113 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.173132421 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073595446 seconds)
  done (took 1.536432688 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066092562 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.06644057 seconds)
  done (took 1.439558629 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071213607 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059044773 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.077356572 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.069768033 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061191897 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061176763 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076983019 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061328844 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060960919 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.06136791 seconds)
  done (took 1.965804735 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061399369 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066672572 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065804444 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064279831 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066713395 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062239508 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.064783133 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062581048 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069081194 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061402676 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065562376 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.082596302 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063536315 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081530405 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063487523 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063980452 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065552118 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063339102 seconds)
  done (took 2.505836085 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059399202 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059848829 seconds)
  done (took 1.429726102 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062917928 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059849763 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062361707 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062034155 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060186138 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060039206 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060258051 seconds)
  done (took 1.731955533 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.41905707 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121914708 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341332453 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067098993 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074625426 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.253653493 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062187278 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066906214 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066782284 seconds)
  done (took 2.823465824 seconds)
done (took 14.753800696 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08064609 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.179161927 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085243131 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.376996316 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089527528 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065115191 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11142828 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.179074126 seconds)
done (took 2.498948461 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.27550988 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.227296119 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.398186012 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.12371397 seconds)
  done (took 3.065712428 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.331044951 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077028713 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075361381 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064861294 seconds)
  done (took 1.876209528 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063224273 seconds)
    (2/2) benchmarking "read"...
    done (took 0.06933227 seconds)
  done (took 1.45567416 seconds)
done (took 8.002519618 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.070066451 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.09485789 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059631041 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061573744 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.062212513 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062263131 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.061939887 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061583195 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062246758 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.05976582 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.06245804 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.062290078 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062577255 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062042607 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061715219 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062086991 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061714797 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.060098999 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062161623 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06188619 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062429738 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06123317 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061892028 seconds)
    (24/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.060012436 seconds)
  done (took 2.871851699 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077797863 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063821382 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.065111801 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.06456941 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06535826 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.06524602 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065110838 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063870813 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064954969 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063628787 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066696825 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067432731 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064985587 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067401265 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065448527 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067222905 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066863632 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065629641 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065184315 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06758197 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065968442 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064085403 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065561637 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065140518 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065361621 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065491427 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064311046 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064094173 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064928208 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065535125 seconds)
  done (took 3.313666785 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064368297 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057968914 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058742629 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068073023 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058247075 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058853418 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059045565 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058268211 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058581297 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060309314 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059511866 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058661921 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059660967 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058689886 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058809447 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.05918961 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063366662 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078223341 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058921081 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059051439 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063003645 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058827386 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058625306 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.05845239 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059359348 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058524609 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058624112 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059229025 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.05887597 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.05915556 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058718424 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063004111 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064111927 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058478504 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068392789 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063861295 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058432011 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064736375 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059336579 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058401125 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058546273 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058147724 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058803895 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058410952 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068740721 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059024182 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059393379 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059125635 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058878988 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058702947 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058633866 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06054848 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06743806 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060173282 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058327323 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059426308 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058514862 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059010627 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058672884 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058397888 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058613342 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062335152 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060064463 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059179688 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.07863387 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059940135 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068753003 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058714943 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059303299 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062201066 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059136501 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076557434 seconds)
  done (took 5.720452678 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069560601 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070367483 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077377732 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068436309 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062466733 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059351114 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062996723 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059552536 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068782482 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063583779 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.05951341 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063054144 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068660991 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063387281 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06077364 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068510399 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063379065 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062461601 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059273985 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063197331 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060827629 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062752932 seconds)
  done (took 2.766906513 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138055225 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064771953 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103860328 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069483007 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069298862 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070619141 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06634732 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066720466 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066762846 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067103615 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067141018 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066598479 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069363779 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067288248 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066982757 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067021738 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066677329 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066597524 seconds)
  done (took 2.658785274 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074709252 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063922083 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087943548 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06409205 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064665841 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064513951 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067621255 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068577384 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.064215466 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065680315 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070261283 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065464434 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065721472 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06580532 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065026108 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065587902 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065662114 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065481336 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06913859 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069234195 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068515689 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.0696005 seconds)
  done (took 2.833316242 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075992655 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063130618 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078810728 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06488576 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058748337 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058837482 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065121547 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063867416 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065056551 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063716045 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064174656 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059468522 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065675927 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064020236 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06563022 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063644047 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063587845 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063728682 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06326076 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059265348 seconds)
  done (took 2.632560542 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069908393 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061316736 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061781658 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066341098 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061455232 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06148555 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066733321 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062478306 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063038824 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085976327 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064034585 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.074849315 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068754877 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066753808 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063651015 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069469793 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068859353 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068631211 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063545234 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062096258 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083700334 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061801713 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066846377 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061789358 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062316314 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061851144 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061756456 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064969116 seconds)
  done (took 3.199021231 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062439785 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.0615535 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06203266 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062125248 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061878551 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06202792 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061809598 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061817031 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061307978 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062150067 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061852531 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061551834 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064438909 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062068541 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061619258 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.062332448 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063011686 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063740636 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063471546 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063504373 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063360136 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06355929 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063202967 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064062516 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063490971 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062955519 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063656795 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062367828 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061789041 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06191817 seconds)
  done (took 3.226232211 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071137117 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069122878 seconds)
  done (took 1.488960041 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060180388 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075478861 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057982384 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070582365 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066984277 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062294128 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067539672 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068575361 seconds)
  done (took 1.873574663 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06502442 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088254175 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060526134 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060636616 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063679956 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125805099 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.07330159 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072538307 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074209077 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063296081 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060869575 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072862608 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060250354 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074048839 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061717238 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069346509 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068045202 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078406883 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073024107 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059269445 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072995093 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061586806 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059545472 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061046939 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.059872364 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06721112 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076036957 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072944663 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069313561 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058565997 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078902864 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059028298 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060239318 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069117159 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063793653 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059658418 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097496751 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060116346 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064987244 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059420954 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071745343 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080507892 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074139758 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077540651 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061110936 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061133363 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059094779 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060969594 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062907001 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068702824 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059143138 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067666852 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059212478 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061321415 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070515008 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060270506 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06499464 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069420207 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07315221 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07192438 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070282628 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076784525 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070261691 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068530931 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061950237 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081230639 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062326513 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074047329 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075549782 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060052241 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072136994 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058428747 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058064346 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.058831628 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.091961662 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060634819 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060210696 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059128749 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.058916873 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060657412 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06864753 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064102986 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066296436 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062599724 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075157738 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068545229 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059245144 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065281891 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.077015786 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062347319 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059092748 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075188047 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062306949 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058645136 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076481049 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068529834 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060223796 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059746608 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062512126 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072553859 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060058123 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057655291 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06750048 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060591151 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061071424 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063450263 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067003136 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058849187 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069100127 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063185292 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060000364 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057399393 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062933595 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059424396 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057010193 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067905151 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058383845 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072606681 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064825771 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072286177 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072859523 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068786595 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073803553 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058090959 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056852087 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075741245 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067410985 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.05916769 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075423694 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057293173 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070879145 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057319008 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.058928547 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.204504071 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059837749 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062690221 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060588645 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064910913 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.06158092 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061658378 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065402099 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068457719 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071891266 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060615475 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068492169 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059613435 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075480013 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069709389 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063786009 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06298609 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059739655 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071239056 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066061131 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.06846532 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058358427 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059791674 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059199238 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070035188 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069218295 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061339102 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066510688 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063744621 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059597169 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059797389 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060064278 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.062754009 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062441048 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060162781 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067574989 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068368967 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073158944 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.0662892 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068404594 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058124954 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058775546 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060893735 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058563851 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063686995 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068362204 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074857007 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071064509 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.079999493 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.058996417 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.068993082 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060380874 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.075947006 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072752786 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060180117 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063921082 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058143061 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060646329 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068399956 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070657189 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07274639 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074442429 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06377294 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.063924092 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058643742 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074171049 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059341665 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067788275 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068560082 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063668028 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059380067 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060968002 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068416965 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06362613 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059145448 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074800591 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065027861 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058585438 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.074395476 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059225595 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.0698187 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058567637 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062895413 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064756155 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060998677 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069319407 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074464367 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05831386 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059540329 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074445502 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060693907 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060536119 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067495918 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074111446 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06344787 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067511006 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070015652 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069310009 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063459217 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068479038 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059952472 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068202822 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061935008 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070551029 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058889203 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076489718 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057671365 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073859047 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059399144 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069891895 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059576392 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06833013 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059972347 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075617714 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060837866 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.0592281 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070683917 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057382787 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067661593 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058005664 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063846366 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065043494 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.0677443 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059769744 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067440547 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059581864 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.066818568 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062812588 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066134959 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067176711 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.06252569 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057317367 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066181945 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068972743 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066159733 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059158897 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059273954 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058635558 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.20791729 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062011614 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061768456 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068812924 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065204754 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065613627 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060986172 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061262062 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061112883 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067904027 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068900842 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077539464 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068228916 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067156535 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068894301 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058881643 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074659844 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059754764 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069613614 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058289838 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064563391 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068341278 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059304591 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078215185 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060711315 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067210228 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071325171 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0677171 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.062663355 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.076608359 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062159782 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.067948602 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067595103 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.063863302 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.065979262 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.060895726 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067614848 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069298844 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070038653 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060026963 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067081074 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0683042 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060781973 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066616796 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060766812 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067920451 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.061173814 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058388175 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.064080586 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070756726 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063746453 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064051169 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059214457 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.057712689 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059267428 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065682544 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063917359 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.067447431 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074457271 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058022345 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060232176 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058546817 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062902044 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076955022 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.06909825 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067405824 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.063968679 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058403345 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060678619 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061091194 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059516176 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062372247 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058327216 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058726408 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069518429 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060919554 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063365891 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059360663 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059902245 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068858673 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063924865 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059622672 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065793391 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058848517 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064216566 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057968103 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060307004 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063659236 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058402483 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062798963 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069489583 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075866129 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065914241 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.06844885 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06021882 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066906275 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074692866 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066026365 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060357042 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068302982 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058602403 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07739702 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068582245 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067457745 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068768988 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059962334 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075658657 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063327597 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068647651 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073850009 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059735814 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065067 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058612581 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074387116 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063439404 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058577487 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066762996 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066960094 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064846499 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070554217 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059255748 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066816497 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063390951 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06229665 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059825313 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059387838 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067211882 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074078019 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.058626687 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.061997209 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066378399 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066512296 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062859066 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07078547 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066521165 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05912769 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059665554 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062183815 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.204149074 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072886916 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060955844 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064470486 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064165972 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059284643 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066041572 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07588876 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068881 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068923112 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058968595 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058704309 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.077218572 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062944484 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062701468 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067573709 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.069024574 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071769648 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068912577 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.075955994 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.059751813 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.064929895 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071435639 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.05999827 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.059205927 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.063047289 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.060421012 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068148802 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069251366 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.066870868 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061347303 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066293947 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.073192903 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060510862 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.063722765 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063932754 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.059594567 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069884681 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067461794 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070565971 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060618706 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058746244 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062674035 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068023058 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066859309 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068500229 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060119804 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.064794199 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072686908 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066589613 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061961599 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058899684 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061822675 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068339224 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063446249 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058625952 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063587177 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062957678 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065901515 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068759142 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063465304 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058708415 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075864522 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067413602 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.06859107 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060953065 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061181609 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059801798 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058646189 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070119151 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058644638 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.061084891 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06524933 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062101847 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078453489 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.068989122 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076985299 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061075577 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064819374 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.06042537 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070411833 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065199207 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060780831 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071099046 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059696991 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076180007 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.07263107 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065958869 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059998177 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065969019 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068449598 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075818189 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069868632 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069682644 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064089248 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070076488 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061318147 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.069904606 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058533255 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.057823288 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069247777 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067858951 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071903185 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058514721 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069279113 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06087503 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067657478 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06686758 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060603699 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060885965 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06047743 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068620952 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063541233 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068216647 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064070399 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.075742754 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.059927863 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070336437 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068616252 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.069596736 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072833408 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070945306 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.066897559 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059900024 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066547731 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066582288 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059620696 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063228078 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.061267832 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078923086 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.05978646 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.05953508 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072056904 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.063996927 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057859508 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.063670957 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.204717097 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070678539 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061527626 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070625502 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063835184 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060558428 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064342726 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064718795 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058315473 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058682696 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059232325 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069812485 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064083469 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059560811 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07852082 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060556761 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068036985 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070728669 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065618269 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060913239 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058298057 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060180658 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072539034 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074968321 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062620693 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068090441 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060690405 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068463058 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058153959 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068189999 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067368736 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068711662 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058827158 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059747092 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07417566 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075105717 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064287024 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068805775 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068484492 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060604762 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080903707 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068102358 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060783109 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070192635 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06158561 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058505099 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058870817 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060908514 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071094033 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058811725 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061332808 seconds)
  done (took 40.969399023 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096567579 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060105169 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058942029 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058921285 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066640041 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060263656 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059123593 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059720782 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.060060055 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.0617204 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059399404 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061793338 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065167394 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071704786 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067093815 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062941675 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058967852 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059651557 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058851103 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059457368 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065131709 seconds)
  done (took 2.789954155 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062090064 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062557522 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062817862 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063400863 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062415439 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058803609 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062992015 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059352241 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063572483 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.05957742 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063351392 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058887268 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059480817 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059265951 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059262871 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060746053 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063536102 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06242701 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058977188 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063060287 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060841068 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062981641 seconds)
  done (took 2.791438377 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.060637173 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059284093 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.068020507 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.05824343 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058015453 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061846904 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058485901 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063051042 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063776838 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06299975 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067909576 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059314091 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058565317 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064368062 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058125261 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059680617 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.100981613 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059702629 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059502619 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058977107 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061090686 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068284641 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058827883 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058756066 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063198529 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062090171 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058378827 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061249228 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059253353 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063209222 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059559019 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058234792 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.067942105 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067501356 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.062957624 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063081347 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060549607 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059912819 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058461532 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.05845597 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067594593 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060568549 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058960196 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.059964948 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067562299 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058348499 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058258359 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.067939562 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058126076 seconds)
  done (took 4.492984003 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069200407 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110500177 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064217182 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092317128 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071283056 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064457079 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.06445764 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093407743 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059891325 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06051672 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072149027 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072724787 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061429026 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063045155 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065548008 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061383456 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062120749 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060631544 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063806252 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061164084 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063792758 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065325957 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070739065 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07147246 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062567465 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060885331 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061149767 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062614965 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071124291 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.065127659 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062750203 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063236473 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071188008 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.065997997 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.060833226 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.060915192 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.071874441 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061613276 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061372003 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059843442 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.060983125 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062370897 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066215316 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072207267 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061439189 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066134401 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061809495 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.05976129 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071495804 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061469566 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065218954 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072240956 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062490143 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.061246498 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062394539 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071254965 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061395951 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.06031058 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061781633 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071185463 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059874372 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062047846 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.074714241 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.060820901 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06464617 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072248882 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066447274 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06260392 seconds)
  done (took 6.089238492 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069382334 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093468352 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073818444 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074110502 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069272991 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069424748 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069250425 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069291813 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068788738 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072088632 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069034837 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.10407402 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065577103 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070590836 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069175547 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.068879725 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069073664 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068920538 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.068880759 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068855954 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.06896151 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073543734 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06894548 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073897521 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07113682 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065506537 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069013351 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069254074 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074153789 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.068756027 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071525815 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.068851087 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069089302 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074191343 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07146784 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.068773882 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059923709 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06907933 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069106244 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.068942642 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065533284 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074016707 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069001327 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06543123 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069193124 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069373379 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074381202 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071869463 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.0709023 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072500824 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069686437 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074828823 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069539341 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069633105 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07446243 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077095583 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074205696 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074485449 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069318595 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074352336 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07446924 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076516 seconds)
  done (took 5.903588922 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073520797 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065324146 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077335429 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058336845 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058787048 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067751368 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059039327 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.05866063 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065854311 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065995909 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067431028 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06805363 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069882256 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067465016 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068009749 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070544801 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068307108 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067749284 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065151417 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067723606 seconds)
  done (took 2.802908547 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074841378 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.07736508 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064652096 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067412574 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064549856 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068081596 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.0636853 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064463935 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065014019 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064672695 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069394762 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069117453 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065233541 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067966965 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068854147 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068133298 seconds)
  done (took 2.54320138 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06435771 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067263591 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065426491 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.06001665 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062308305 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059386096 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060624283 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058752026 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061631816 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073489827 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059678267 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062763933 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060151913 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059366882 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059439514 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062359401 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061498435 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059625206 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060246349 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.06434203 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068680246 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060595772 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062387706 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060350985 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062954278 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.06946463 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061086343 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061882345 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059537007 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.06233512 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061975277 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066387041 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062439704 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060180371 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058720127 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.05968016 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060056096 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062143197 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062225026 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060314625 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058652808 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065202856 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060158998 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060605779 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061336556 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062489041 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061364235 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065532782 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06019456 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.061915198 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060094567 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061539984 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060335822 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.06698304 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.061779374 seconds)
  done (took 4.874002382 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076906194 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06432142 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058704911 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058541587 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063769386 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064485728 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064159749 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064265802 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064738925 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058980681 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064335511 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063517779 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064237428 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064843959 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064368621 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063860323 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058429175 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064073952 seconds)
  done (took 2.619583331 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.066845783 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064178132 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063460519 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060511055 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06096168 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065137818 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058832961 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060457801 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059998447 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060803835 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060904343 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060401017 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060132286 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060348202 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064817723 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060653182 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060445603 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059153176 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060813613 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059073695 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065474694 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059042159 seconds)
  done (took 2.818602225 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.087421689 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082401235 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125653536 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078338724 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.087108 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070100442 seconds)
  done (took 1.996398415 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.092964806 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096346548 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063915236 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064045755 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068473395 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066812835 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066753325 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067117367 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070407483 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070391061 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067137332 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07103554 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069850362 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072112143 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06847025 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068401035 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066930908 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066687232 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063993204 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074149839 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066871674 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070213889 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067251485 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066351338 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066891657 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072203644 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070054812 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070748503 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067137283 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069822082 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068358596 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066745459 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07035377 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070553544 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.063920772 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070051641 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066603034 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074786589 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068657917 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071543926 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063429952 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068486253 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069617877 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069471729 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070138446 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066933839 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070028323 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066835262 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067185585 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075215915 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069033607 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071881627 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068545985 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070631318 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070250058 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075617552 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070879653 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071927911 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06857451 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070798013 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072024842 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068576084 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072258095 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070807684 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06845224 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072328065 seconds)
  done (took 6.090368359 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103466358 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064356772 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067034596 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070722449 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072059867 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066971627 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067530139 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067396462 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067489455 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064919183 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101958101 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067074526 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072211414 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074994491 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067534769 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067188272 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066991682 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071975983 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064417715 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075434983 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066793862 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071551977 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071745349 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071790307 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070578967 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068325017 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066963487 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066514933 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066916465 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066917121 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06984997 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067339825 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071914066 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063992256 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07204721 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066752802 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066482003 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070250396 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066780116 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068877761 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071802468 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074713008 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066809105 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066930044 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070790553 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066738837 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066780372 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064502043 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066987188 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064111662 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071057863 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070707104 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070856878 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072566359 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067352913 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066970373 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067057056 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067017969 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067141249 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068589042 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072036421 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067133261 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075596691 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067281748 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06720365 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072129972 seconds)
  done (took 6.098524596 seconds)
done (took 126.793068331 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219173947 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188217039 seconds)
  done (took 1.861374489 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074670622 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.164324693 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07269973 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072447225 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106040582 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.104994406 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073726546 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069877545 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072376822 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070049211 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.136390432 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073425613 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069750769 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069587973 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070026519 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069629571 seconds)
  done (took 2.847246647 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.10595998 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.20221474 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.079783917 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067518257 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.148594299 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074460544 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.069791483 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074509369 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074191087 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068120186 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104854637 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.080782405 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073371429 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.0741843 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069974502 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073417939 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074401079 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074014062 seconds)
  done (took 3.069674744 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101797445 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089780752 seconds)
  done (took 1.67899433 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155396601 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10313314 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.141946713 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.33976268 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134439867 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.135406008 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.138918358 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.134350187 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.107601065 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131096774 seconds)
  done (took 3.001625907 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.104473639 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102754493 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.303059913 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.099716846 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079409137 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074709517 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072745188 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077416061 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07271226 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.073720526 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119001045 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072662847 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070111822 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121093616 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.095786698 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.103932331 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068693168 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.075542174 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077078556 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068224838 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073847242 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077387194 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.174111301 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.075816536 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097270943 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07263992 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074601074 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072237571 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071652716 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076052185 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076606915 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.09632362 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075590941 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.079919489 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074583505 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094156587 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.06910072 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.095526811 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072128552 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07023304 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072731115 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076767408 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.069695683 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.075608107 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072855291 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075147613 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077623345 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068509356 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072742677 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072290912 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070151218 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.073949237 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073431517 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075123616 seconds)
  done (took 6.123057491 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105098095 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105597861 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067825566 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.109740648 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10276278 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067957937 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101680812 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097758983 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105630385 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067677 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066836778 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067398289 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075403061 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079400783 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113785572 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105691943 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069084486 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068644765 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.106910288 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107452292 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066641892 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099486265 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097252608 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103503992 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066115534 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067843113 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066070062 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067145936 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.0714022 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072787733 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.066664785 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073031887 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.07796221 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07263211 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065624601 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.065898194 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066097289 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073477537 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073714684 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.073619876 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072562947 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065762043 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066204572 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067172894 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067398909 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065829229 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072446552 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073229459 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072363815 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066583196 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067054418 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06623883 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066690495 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072647834 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072129351 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073842253 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073377689 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066233796 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066513628 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068110909 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074712721 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074081384 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073830269 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067331263 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07448877 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066357362 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074910407 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078081933 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066378408 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067178772 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066534771 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066179331 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066906537 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072649224 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072082699 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066995639 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066432673 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066658205 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074567635 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.071941828 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06615905 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072300102 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.065967543 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067933379 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068304122 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068122193 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072679427 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.073069953 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067250144 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066647854 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066303038 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066584655 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065726994 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071399779 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072427179 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073058043 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.071988952 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066865745 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.071785997 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072362815 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06704133 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072369146 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.065959459 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066460479 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066188079 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.0717008 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.070304199 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.072575939 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065603109 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065006862 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.070816655 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073717339 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065618866 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070255725 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072685719 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.208701076 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067381339 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076325393 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067793353 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075334082 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067539433 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07558472 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067050835 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072662868 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06704708 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066631019 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066693159 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072884301 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066774163 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066568346 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06680837 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066615665 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072323616 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075942181 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067176976 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072489708 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072930092 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067125776 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072270821 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066664828 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073546019 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06699201 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066845718 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066197526 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075342018 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066642906 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067169754 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066936504 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074564309 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066764533 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074513977 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072094663 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066236879 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076060313 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074644407 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.071971206 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.074843618 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067261169 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066878695 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066253991 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069320555 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071611698 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072633614 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067005983 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066295722 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071609791 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074568112 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066238613 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072050553 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072064262 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072415289 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067011048 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066989454 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075405019 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074569252 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072565473 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072437974 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072853973 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066571294 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072125385 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072315861 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066654315 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078816822 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066868106 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07619885 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072928447 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071757872 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073459639 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.07422376 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074477156 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074898466 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076374891 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066884369 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066279109 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072465571 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066344738 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066487188 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072771707 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067144122 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067042254 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077160621 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06680487 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074903695 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066122121 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073078163 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066277181 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067012174 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077750626 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066745116 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067270067 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072322759 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066446727 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.071652629 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074477437 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072014815 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066075902 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067077698 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073133159 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073149084 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066104802 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065990563 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066588853 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071599025 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071038072 seconds)
  done (took 17.815457653 seconds)
done (took 37.895828154 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.167291854 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112420877 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207949047 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.196597437 seconds)
  done (took 2.267759051 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100615431 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063534806 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.077651246 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.08764996 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063425356 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073481515 seconds)
  done (took 1.996782631 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200300935 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.17290942 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240918645 seconds)
  done (took 2.135675437 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.362933912 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.14557696 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212106369 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.495371563 seconds)
  done (took 2.844276769 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107038074 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097483528 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.07481751 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108653401 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082499198 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060628663 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.130443804 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067217524 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.096653101 seconds)
  done (took 2.412964884 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.135862816 seconds)
done (took 13.338943635 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.234295265 seconds)
    (2/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.234093795 seconds)
    (3/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.165948849 seconds)
    (4/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.104713261 seconds)
    (5/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.196003662 seconds)
    (6/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.091391273 seconds)
    (7/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.233197078 seconds)
    (8/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.21036356 seconds)
    (9/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.173911401 seconds)
    (10/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.122409286 seconds)
    (11/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.178832815 seconds)
    (12/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074186738 seconds)
    (13/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.064173715 seconds)
    (14/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.076670444 seconds)
    (15/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.074271737 seconds)
    (16/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.063956427 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073317882 seconds)
    (18/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072466086 seconds)
    (19/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.075860646 seconds)
    (20/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.141675366 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074819734 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.115964544 seconds)
    (23/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.232224021 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076004142 seconds)
    (25/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.219601877 seconds)
    (26/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.075183951 seconds)
    (27/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.145686556 seconds)
    (28/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068454522 seconds)
    (29/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.185793816 seconds)
    (30/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.240200907 seconds)
    (31/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.243519204 seconds)
    (32/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.070853273 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072101365 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.147697173 seconds)
    (35/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.076142061 seconds)
    (36/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.153523359 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.138990613 seconds)
    (38/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.197356564 seconds)
    (39/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.063977075 seconds)
    (40/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.073332693 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087243556 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073670507 seconds)
    (43/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074375622 seconds)
    (44/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.091672825 seconds)
    (45/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064442142 seconds)
    (46/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064154151 seconds)
    (47/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.17970893 seconds)
    (48/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.063596064 seconds)
    (49/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070820146 seconds)
    (50/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.175081889 seconds)
    (51/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.177136605 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.086162839 seconds)
    (53/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.064109398 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.085194146 seconds)
    (55/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067081466 seconds)
    (56/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.136423223 seconds)
    (57/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.223850268 seconds)
    (58/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.072003793 seconds)
    (59/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.113443649 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123628642 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.076457131 seconds)
    (62/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068107384 seconds)
    (63/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.176504564 seconds)
    (64/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079753404 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.07287974 seconds)
    (66/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.149742321 seconds)
    (67/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.06984694 seconds)
    (68/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.072040445 seconds)
    (69/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079150924 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.064840151 seconds)
    (71/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.158874572 seconds)
    (72/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.062941884 seconds)
    (73/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.229958734 seconds)
    (74/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071355915 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.063429313 seconds)
    (76/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.065917255 seconds)
    (77/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.07344178 seconds)
    (78/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.070537887 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.070642517 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.084231449 seconds)
    (81/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.208287536 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.124854602 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.087121048 seconds)
    (84/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.061182333 seconds)
    (85/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.233867099 seconds)
    (86/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178363297 seconds)
    (87/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.18469299 seconds)
    (88/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.141949599 seconds)
    (89/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069249023 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.090723328 seconds)
    (91/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152524857 seconds)
    (92/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073166038 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064131596 seconds)
    (94/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072443518 seconds)
    (95/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.090617197 seconds)
    (96/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.083372238 seconds)
    (97/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080476064 seconds)
    (98/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.170458157 seconds)
    (99/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068704021 seconds)
    (100/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.064424499 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.089000202 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.085164124 seconds)
    (103/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.090304703 seconds)
    (104/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.070403462 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.063487257 seconds)
    (106/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.064853157 seconds)
    (107/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.142008146 seconds)
    (108/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072218147 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071432336 seconds)
    (110/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.06544545 seconds)
    (111/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.072855648 seconds)
    (112/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.070762702 seconds)
    (113/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.160127514 seconds)
    (114/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.161548385 seconds)
    (115/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.19505955 seconds)
    (116/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.080955483 seconds)
    (117/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067372608 seconds)
    (118/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.134634423 seconds)
    (119/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.074228198 seconds)
    (120/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.079706586 seconds)
    (121/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.074918317 seconds)
    (122/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.185612939 seconds)
    (123/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.063784707 seconds)
    (124/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.069835313 seconds)
    (125/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067023075 seconds)
    (126/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.139963289 seconds)
    (127/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.143580875 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.079085347 seconds)
    (129/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064213421 seconds)
    (130/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.063827199 seconds)
    (131/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072691644 seconds)
    (132/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.143571858 seconds)
    (133/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.064144427 seconds)
    (134/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.063948405 seconds)
    (135/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065253917 seconds)
    (136/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.19282722 seconds)
    (137/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.193782491 seconds)
    (138/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.244754393 seconds)
    (139/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063293181 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071462223 seconds)
    (141/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.063305159 seconds)
    (142/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071429402 seconds)
    (143/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.063827006 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073155658 seconds)
    (145/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.168558568 seconds)
    (146/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067051615 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.123101681 seconds)
    (148/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.071289973 seconds)
    (149/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.06212155 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074065033 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 0.143047677 seconds)
    (152/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.139993223 seconds)
    (153/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.071110004 seconds)
    (154/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.064040899 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130030407 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083868303 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072077625 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074842455 seconds)
    (159/341) benchmarking ("sort", Int8, false)...
    done (took 0.149970021 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 0.066177807 seconds)
    (161/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.197613327 seconds)
    (162/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.148116901 seconds)
    (163/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.154070652 seconds)
    (164/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.065640508 seconds)
    (165/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.070807836 seconds)
    (166/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063271294 seconds)
    (167/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08214853 seconds)
    (168/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.080474933 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.084976602 seconds)
    (170/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066814453 seconds)
    (171/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064195159 seconds)
    (172/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073073537 seconds)
    (173/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.219129938 seconds)
    (174/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.080936533 seconds)
    (175/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.080860662 seconds)
    (176/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064289695 seconds)
    (177/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.061891577 seconds)
    (178/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095814499 seconds)
    (179/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.063595358 seconds)
    (180/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.088627561 seconds)
    (181/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064271918 seconds)
    (182/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071632015 seconds)
    (183/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.063424347 seconds)
    (184/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.067323576 seconds)
    (185/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.08803236 seconds)
    (186/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.169207628 seconds)
    (187/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.147802722 seconds)
    (188/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.064472847 seconds)
    (189/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.075261183 seconds)
    (190/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.142385109 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.062836741 seconds)
    (192/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.065176631 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.062514696 seconds)
    (194/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.15152693 seconds)
    (195/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.237936973 seconds)
    (196/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.190667164 seconds)
    (197/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074083547 seconds)
    (198/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.063557547 seconds)
    (199/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067465058 seconds)
    (200/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.063722051 seconds)
    (201/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064248975 seconds)
    (202/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063449459 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086619113 seconds)
    (204/341) benchmarking ("sort", Float32, false)...
    done (took 0.135667469 seconds)
    (205/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.162061889 seconds)
    (206/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062122568 seconds)
    (207/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.065014792 seconds)
    (208/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.06588181 seconds)
    (209/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.163119358 seconds)
    (210/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067373186 seconds)
    (211/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063346783 seconds)
    (212/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.07138443 seconds)
    (213/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064199339 seconds)
    (214/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073395355 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.086795242 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.06372342 seconds)
    (217/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070862731 seconds)
    (218/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.187903325 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130251466 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140013161 seconds)
    (221/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.19119257 seconds)
    (222/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064487615 seconds)
    (223/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.063730608 seconds)
    (224/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.062610763 seconds)
    (225/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064910685 seconds)
    (226/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.190571529 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.065992892 seconds)
    (228/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066557907 seconds)
    (229/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.063844825 seconds)
    (230/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.067532117 seconds)
    (231/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071666504 seconds)
    (232/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.197960105 seconds)
    (233/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.161514136 seconds)
    (234/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.074426139 seconds)
    (235/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.137484013 seconds)
    (236/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121112756 seconds)
    (237/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.063419318 seconds)
    (238/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.064268259 seconds)
    (239/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066353896 seconds)
    (240/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070663186 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.073539906 seconds)
    (242/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075190424 seconds)
    (243/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.063570588 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.129604862 seconds)
    (245/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.063360634 seconds)
    (246/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.148963001 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070850395 seconds)
    (248/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.064604293 seconds)
    (249/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063297791 seconds)
    (250/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.06414695 seconds)
    (251/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.063310899 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070717297 seconds)
    (253/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.06676372 seconds)
    (254/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.065026363 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.145550079 seconds)
    (256/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.063695204 seconds)
    (257/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063625329 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061493893 seconds)
    (259/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.063057934 seconds)
    (260/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.070773967 seconds)
    (261/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.06339452 seconds)
    (262/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083565849 seconds)
    (263/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067378633 seconds)
    (264/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.128757709 seconds)
    (265/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.0657345 seconds)
    (266/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084083766 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064004626 seconds)
    (268/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.081168365 seconds)
    (269/341) benchmarking ("sort", BigInt, false)...
    done (took 0.259834796 seconds)
    (270/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065477557 seconds)
    (271/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065572336 seconds)
    (272/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.06402242 seconds)
    (273/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071911398 seconds)
    (274/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077078785 seconds)
    (275/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066563986 seconds)
    (276/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.236267884 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065008731 seconds)
    (278/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.218474333 seconds)
    (279/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064643843 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087883311 seconds)
    (281/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.064790552 seconds)
    (282/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063048989 seconds)
    (283/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.065375683 seconds)
    (284/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064948644 seconds)
    (285/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.147068009 seconds)
    (286/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.064886436 seconds)
    (287/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.088923932 seconds)
    (288/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.065834489 seconds)
    (289/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.064137994 seconds)
    (290/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.082133462 seconds)
    (291/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064560562 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.123552147 seconds)
    (293/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.089638393 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063445379 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148105384 seconds)
    (296/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064910268 seconds)
    (297/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064752431 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.113128525 seconds)
    (299/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.113120553 seconds)
    (300/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.063823419 seconds)
    (301/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.086261103 seconds)
    (302/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064075812 seconds)
    (303/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.062328915 seconds)
    (304/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06361823 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.148519084 seconds)
    (306/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.072497409 seconds)
    (307/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064232439 seconds)
    (308/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.062808183 seconds)
    (309/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.136677919 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.062789027 seconds)
    (311/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07123983 seconds)
    (312/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.070544918 seconds)
    (313/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.063243048 seconds)
    (314/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.06306681 seconds)
    (315/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.07825696 seconds)
    (316/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.064652017 seconds)
    (317/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.063217472 seconds)
    (318/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.062445636 seconds)
    (319/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.147469409 seconds)
    (320/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.06661958 seconds)
    (321/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.260162773 seconds)
    (322/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068061593 seconds)
    (323/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.065349851 seconds)
    (324/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.065132901 seconds)
    (325/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.067019471 seconds)
    (326/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.06526561 seconds)
    (327/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065305482 seconds)
    (328/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064882697 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076106348 seconds)
    (330/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.063879978 seconds)
    (331/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065180296 seconds)
    (332/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.067865459 seconds)
    (333/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.063947076 seconds)
    (334/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.063259077 seconds)
    (335/341) benchmarking ("sort", Float64, false)...
    done (took 0.138255221 seconds)
    (336/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.063999035 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.081066234 seconds)
    (338/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.077110804 seconds)
    (339/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.066252076 seconds)
    (340/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.1680819 seconds)
    (341/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064155126 seconds)
  done (took 36.17894192 seconds)
done (took 37.723562308 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092066252 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079823588 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078259453 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074546933 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078431394 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076756386 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077406752 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074645777 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.075506417 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074725904 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.074040616 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.062641114 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071203139 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.077850366 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07241807 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078382986 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.075881929 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079251117 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.063608096 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.077050504 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090500943 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.075025051 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072153089 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.077009146 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063488283 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072305969 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.08637412 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084006388 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069882885 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.072681562 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.070727969 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.08131082 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.070656181 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.069288717 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.072799084 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069534194 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.072610749 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070004757 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.08610975 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069466784 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063643026 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.075019763 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070643527 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071129433 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.071623356 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.074915377 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.068983191 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.076858463 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063328108 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074537028 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086378055 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068155652 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070200223 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072015155 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069104845 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073126659 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069628465 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.074900513 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.06853996 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075035189 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.07475693 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072588452 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063433319 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072231702 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070792036 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.070838375 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062114905 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06837424 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063212487 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063307476 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062129882 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072017506 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070084038 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068169265 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062630682 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063340569 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.062169401 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075546104 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069344536 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07271531 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063157241 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.06832939 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068114882 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063689283 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068218808 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.074650326 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06249978 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.063289916 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.062619901 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.077393759 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.069835455 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063074698 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074554552 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068173454 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.067756662 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.062984636 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.062332549 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067760045 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.070898503 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.063277892 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062226679 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068188591 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.06771707 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072028359 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.063736792 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068311419 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068787832 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063405896 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073336804 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070814371 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.071821053 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076274459 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.072013691 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.07499562 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064760782 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062076878 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072893722 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063345419 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068059857 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07087854 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068583497 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.070978485 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063672897 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062498049 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068413259 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069577482 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063377917 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063751078 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063403835 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.07239648 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070052213 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06171547 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063327077 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072280876 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072017688 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062801909 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063092804 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073782733 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064569864 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.06992435 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069750478 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072550209 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.0623746 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.062445865 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.061659748 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062112736 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065020306 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.067177427 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067289072 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.062855186 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07091559 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.214964113 seconds)
done (took 12.454138861 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067793219 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108713884 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077551268 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079782844 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076807098 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065026492 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069114006 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085021871 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.069153457 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090555932 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091266774 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087388723 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096745954 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.064151323 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.065258602 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066310692 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063781753 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077666379 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082957567 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089201628 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.10174034 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.065121913 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081862888 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085355461 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079936303 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084014099 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067088895 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066426995 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.068539885 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084647765 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091552292 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065409136 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06657198 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083664205 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081037911 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074156026 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066279841 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072182009 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069014892 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06396858 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065794091 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081240652 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070282994 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07048981 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065490667 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065250506 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.06434409 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071102804 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081493181 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069607798 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075805971 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082381732 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.065835916 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064710819 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062635856 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071046439 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064232516 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064976431 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064742612 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.063831337 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064597774 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06718758 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069022887 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069765289 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068046997 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070069348 seconds)
  done (took 6.489799836 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082494875 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.090476228 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078514154 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078800899 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063706965 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064709195 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065816727 seconds)
  done (took 2.176622562 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067065784 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.073677812 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07778357 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.078240206 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087554716 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076180958 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066245365 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097863086 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064781299 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074401429 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.081800905 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079267118 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068950471 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076552761 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064790808 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.076070025 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.064478968 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071694084 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071869599 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077785658 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068085167 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.093993101 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.077986379 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065282678 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.077731402 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.072029845 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066690112 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064695309 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064917158 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06400883 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063843745 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.086044383 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.070475618 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.076140698 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064823655 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06289768 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.06833812 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064947351 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068082936 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073606752 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.067466275 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.063827753 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064270962 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.06434848 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065055305 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068391063 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06540332 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064120253 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063984269 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.071397904 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06342446 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07039867 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066217296 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.068996822 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.068801786 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068687616 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071261725 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064435337 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071458399 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070501768 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064073224 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076687492 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075659013 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067674461 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076275558 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072777613 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070707012 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.067813741 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063790354 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06344525 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065502699 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078034735 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069602064 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.067826854 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.066768262 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.070372169 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.069631816 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081150066 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081194689 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077142291 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067797663 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065957278 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069157161 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.080047543 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069911108 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065560367 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066477733 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065113974 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.070515996 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065866251 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.070510569 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065981819 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072957189 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068557966 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068429285 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074288444 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065907246 seconds)
  done (took 8.486554051 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068986745 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.06834332 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066017527 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065672067 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065740549 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06552942 seconds)
  done (took 2.083377797 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090316034 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.066231867 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.0775953 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065576113 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088318879 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.070647157 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071344695 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066577986 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.080863109 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075130957 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071048189 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073647641 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073751667 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.06659186 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.071540297 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065930942 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070957309 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067312702 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074596457 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066638536 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081020039 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066906232 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067108233 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076542703 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067822459 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065420756 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065818686 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075453298 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074278132 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066210547 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066146406 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067719163 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073138661 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066538303 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.071199456 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.072826813 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064457982 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070390246 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067073098 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067209027 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.072810325 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066500245 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066879846 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.069964358 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066500124 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073014191 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.069722693 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068003448 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.070776662 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.069652575 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.069992733 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065074787 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067589178 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070168688 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073410399 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066441238 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.069611876 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070814037 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066122882 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.072843648 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064833067 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067824775 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066616667 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067790606 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069346193 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.069747491 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073050633 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066558859 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071308113 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.064654687 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070124775 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064237724 seconds)
  done (took 6.694786873 seconds)
done (took 27.565976873 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542676932 seconds)
  done (took 2.167548954 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.887842446 seconds)
  done (took 2.554773689 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.596129322 seconds)
  done (took 10.268258665 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.3503737 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.407797175 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.730912961 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129932117 seconds)
  done (took 3.326940009 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.75168953 seconds)
  done (took 2.432578268 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.232121981 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218770564 seconds)
  done (took 2.138518397 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.33512024 seconds)
  done (took 2.003005243 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.140344655 seconds)
  done (took 2.81160948 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.234609172 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159815185 seconds)
  done (took 2.072147895 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.537481069 seconds)
  done (took 2.209608058 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.261664499 seconds)
  done (took 5.937920555 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233134586 seconds)
  done (took 1.94593298 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231199111 seconds)
  done (took 1.907229784 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.018242215 seconds)
  done (took 3.686821997 seconds)
done (took 47.139976926 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085033304 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084377013 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084081842 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079246339 seconds)
  done (took 1.976887871 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074411984 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.070075953 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.073241332 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073697402 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.071014117 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072154569 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.072461493 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069401117 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.070742298 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069774841 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.068315146 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069996121 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072405785 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069671371 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.072556225 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072331644 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068483857 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068221016 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070088564 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.068205287 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070526453 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068669292 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067021125 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068837552 seconds)
  done (took 3.362565741 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078539853 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072035182 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.074720716 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070832625 seconds)
  done (took 1.975778356 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076990074 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.076164395 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085257546 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.089506992 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073836194 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074789748 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081198403 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081733677 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063292176 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084602978 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06606012 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.06560879 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.066024156 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085866688 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083180039 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.062100983 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06341776 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076719164 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.075934412 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078721198 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.068023723 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065335284 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075686207 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076800707 seconds)
  done (took 3.474549411 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083075568 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065317225 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082013969 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.090470835 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090403166 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063766203 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076444307 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090326034 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125784848 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06348055 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069878951 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063859304 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102526949 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063399533 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078821909 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106339886 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109145244 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067957667 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096707414 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063522894 seconds)
  done (took 3.343220583 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076540618 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068245587 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068318001 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063602281 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075142992 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071330777 seconds)
  done (took 2.115428048 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068631289 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067808536 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067885336 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070625125 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065785467 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.0657268 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065246201 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06407933 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064059515 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064863101 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.06504019 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065614351 seconds)
  done (took 2.477112725 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.149003886 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067411749 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067987243 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064045709 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065491041 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064822114 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079176216 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066654804 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082059685 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064679922 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064649044 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067449052 seconds)
  done (took 2.585836304 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105006038 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108991823 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142604414 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114362246 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114413603 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094375784 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122233194 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092900576 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157534341 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134152569 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113859756 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09096399 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083931293 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067388848 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097241411 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11584364 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134393737 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070496236 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11057987 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161696008 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128798633 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.132049127 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145115241 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114496319 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087994028 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145183008 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095004213 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09950075 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121679034 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12324856 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1166931 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095343432 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069304837 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068546493 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146206244 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100566233 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117101629 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090767289 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102340992 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086144933 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104582649 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067325976 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.082746434 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111373545 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082310495 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128502152 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.086010191 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112665535 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079011084 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133979953 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119176335 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094845618 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082379245 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100385364 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.28768103 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110119487 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132111804 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105444554 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080491376 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116698775 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101196798 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098099234 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104839685 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078220949 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173940049 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086723754 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108660441 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108948193 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091728425 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092217566 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104593013 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132354336 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122954149 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.122885251 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134567263 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092577198 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119403773 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097441245 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126342462 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102094217 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070857576 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.118229862 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126189051 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096192401 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098225442 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126822755 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089809417 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075079106 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096537527 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.116097284 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078563396 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.109427932 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07824012 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106341242 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130816373 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094842697 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109174131 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114614241 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075609883 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152169262 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106211338 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070294072 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114725199 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110537149 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151297159 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091020582 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073368484 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095990359 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.258986876 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.147103727 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10567353 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078403132 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108868808 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138758132 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093224219 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166452836 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093907557 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137679259 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109829135 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085032395 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073102396 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.08796522 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109946991 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104951356 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110046139 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08787481 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081637098 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084745181 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109653123 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08990501 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07862901 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111548344 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099145101 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072685628 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086014365 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.07758273 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139368832 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076087319 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135529361 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123042166 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076815167 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104040212 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095752154 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105498049 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095695562 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114498711 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137720912 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113818664 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08740985 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091185484 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105718591 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141005548 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124312161 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090361873 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074933956 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097607637 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109657072 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095348108 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123015763 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09796591 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106327566 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100976819 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137814147 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139716437 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096468204 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096985415 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102238739 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.280060483 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075335932 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154047225 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102559376 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116364189 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083383961 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138158205 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111566993 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087377926 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085481345 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097973001 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101189249 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103258122 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140131863 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095045555 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070769703 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090282268 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140813375 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07403008 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10700478 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088307121 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090750764 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116018388 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090195085 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079363775 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066050254 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125193124 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155586665 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068258805 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112405148 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109563198 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101235836 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.11892499 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.068260592 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11610168 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135523274 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115377034 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13817103 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144578745 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113664639 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116261959 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111332645 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103147301 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077736017 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122403469 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131623814 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093970775 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090279112 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132614812 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114908031 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.130397029 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.111177229 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10989321 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.100259489 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.265232256 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101124615 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099813874 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141739331 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119454317 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121373136 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083612519 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103063043 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115118107 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132013596 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0800499 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138335989 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081044612 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115218688 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075044747 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120558375 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077134768 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.10883372 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077351892 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097434318 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067524365 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.071807643 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138070073 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.109215093 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102855356 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097291342 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.13487395 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133947546 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079089375 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105752766 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113961571 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099072287 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113984727 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106757621 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086607966 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093034718 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10684301 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083107838 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079525411 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112083384 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091954553 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123598956 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081836227 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073108068 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138054563 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102573371 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093368903 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07585226 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105685244 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120030647 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090516664 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085239155 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112794804 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102534309 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138559228 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.087516462 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.094753092 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120185101 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077809354 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.088888882 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066619069 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.081786385 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073315584 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.285331837 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075006572 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114393785 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.066944115 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127744167 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08438884 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090885997 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099837598 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108754538 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125072289 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093311146 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137163567 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086756936 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115401332 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105139112 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091704046 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085882131 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100702498 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098286557 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11931946 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.093664816 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119470144 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140392084 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101793662 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138941563 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089213506 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119060337 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104366626 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123329405 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110629671 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144569466 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135414378 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110071196 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109284946 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072908332 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092613856 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103014083 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10915079 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170990268 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122531834 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070033049 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103237422 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091747097 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105526345 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102794106 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079825249 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143156356 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099744469 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085959935 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109277659 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.087387464 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100223352 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07302769 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091749314 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.095361111 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089934579 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093489019 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109781868 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120812618 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107185364 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.136005328 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.094902992 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.088701012 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.112939605 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105187535 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105182918 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082290118 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082374796 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130592917 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110092007 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.120078779 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.093016168 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100540898 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102578219 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091274509 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113917932 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098691693 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.115219995 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074721504 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.071278081 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.064788707 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.06822911 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114085333 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100242293 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102790893 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092275574 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.068974425 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09663048 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098630683 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067710962 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08258812 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086980347 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092900662 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084483098 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097330434 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.107567702 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.085557117 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096629513 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09211599 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133866734 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.093204667 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081610574 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132682229 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13551938 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081253707 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084849255 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.067857913 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07508346 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104524209 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136910402 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136978356 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.072844575 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08099835 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079187032 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080093596 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.068070571 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.35632557 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090866376 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105886248 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100484956 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.114285955 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107525072 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076534692 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104095569 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099915721 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092742701 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104856136 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11917379 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125508359 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.141071773 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111006775 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10878223 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075969355 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080359444 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075578293 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079142119 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10243279 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078867383 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076252105 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141813159 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.091201706 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103938009 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10858543 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087660257 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074225808 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1321267 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068466529 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131968544 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.070293941 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080782293 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080699191 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07733048 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091696726 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137034238 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108018512 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111119571 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104570058 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102790196 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138339827 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154087167 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078270066 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14170012 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074343138 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073873771 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074566984 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111537797 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088025243 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112945487 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138356932 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089796768 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101434865 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075389162 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141626622 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096844835 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101807251 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084927398 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076809714 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.30167386 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078250099 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.077789159 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08824996 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109631978 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071238406 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102203241 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083210964 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077852002 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140172843 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628164871 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087841824 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07391647 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09410319 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.139340056 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124867522 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092185591 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105404395 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.115965754 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097282887 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092481151 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104955402 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.178763238 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072625222 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092115647 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100750991 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09598851 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09970308 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096346079 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.082466726 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09069861 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084731528 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077662525 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10515098 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086991187 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094661572 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104724834 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081059051 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084640177 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127914002 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10188946 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.079891962 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086341149 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10342274 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086411788 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099131072 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.066985632 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111225642 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0891398 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115208823 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092960709 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104920168 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124332583 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08762751 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134774754 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.104182482 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119533584 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084915984 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.0759978 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122839128 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086191889 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075495423 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.304248551 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092215497 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.090918627 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101324454 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094613447 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110972236 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114708154 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108779723 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095322848 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077084772 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097180968 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.099660445 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082633384 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075956479 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072642493 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.073982928 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104721661 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082846099 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081297421 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111935337 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086580683 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100953007 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.097738675 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119632883 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080861714 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0983381 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106915687 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089788966 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10730881 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098498331 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125828054 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171420202 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122889666 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126505883 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132089417 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074713885 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073577116 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066971885 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11272949 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07711336 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087006856 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079121781 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131495115 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.079798308 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108998568 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.228995442 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078402951 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091872911 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094540005 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.067736176 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081355491 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104971001 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084815059 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078770861 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116747495 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081624416 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12511982 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109372395 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096816457 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092640964 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07876022 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111499003 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102111965 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.125325597 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091696969 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.072201871 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.269582017 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101237432 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134509905 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.07117736 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078623911 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126232881 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101151275 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129520402 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077757117 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146253578 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13947973 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097257231 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130964453 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069224361 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080873258 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086976377 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.122295134 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082059648 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108203589 seconds)
  done (took 66.16776659 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149226313 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139197209 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.079759817 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101632246 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.184789046 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194721647 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117714942 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.093715686 seconds)
  done (took 2.940003775 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.06784391 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081556777 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.0788258 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.202929549 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.093488235 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065379573 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07053994 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079971657 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065764498 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.064485941 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099719717 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06570871 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065525898 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.374590923 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064213349 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.069813849 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065472937 seconds)
  done (took 3.536235432 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.333631851 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.935506086 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.240716891 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.188458783 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.146379892 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553019879 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.07436209 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080420854 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.690901229 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.367346412 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.140375389 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.085985447 seconds)
  done (took 19.70511421 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078240995 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.078737711 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077473804 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.074292818 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074290587 seconds)
  done (took 2.31940266 seconds)
done (took 117.675760677 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085056364 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.175439236 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066987136 seconds)
  done (took 2.143367158 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083415513 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.081010847 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079175419 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076735769 seconds)
  done (took 2.192996646 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075915582 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076382069 seconds)
  done (took 2.010691729 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.220167915 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176440565 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089223504 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082872313 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078584811 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078751721 seconds)
  done (took 2.11547978 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072147967 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069968773 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070494199 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07050028 seconds)
  done (took 2.142305957 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068906883 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065212158 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067597552 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069993804 seconds)
  done (took 2.13328505 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086154759 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084678387 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.11426594 seconds)
  done (took 2.147342864 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084037754 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081772214 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076630075 seconds)
  done (took 2.107292225 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111244062 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095398343 seconds)
  done (took 2.064170731 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081066029 seconds)
  done (took 1.944325437 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091012768 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.097022941 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.137336384 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105524957 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.144475082 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.124382718 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076232697 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076867526 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072596919 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.077142924 seconds)
  done (took 2.862007564 seconds)
done (took 26.299318433 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080397169 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.37312769 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.359001286 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085800951 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.670542707 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.355277977 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.005048587 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089681357 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100188929 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0665774 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083344284 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649352858 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.998325872 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.329219385 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.981485354 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.327726596 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651388901 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067444106 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066444998 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067106936 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.987406737 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06656436 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066757567 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067158138 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.648218443 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374830967 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068263046 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.328771904 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066925329 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070821055 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356405552 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067856434 seconds)
  done (took 16.413087828 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071559511 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12485035 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070746496 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082786658 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068980105 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068234553 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069751046 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067331454 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11129163 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067238793 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084017465 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06628381 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070522626 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067976239 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089673453 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067222852 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069107363 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06805557 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067593631 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067471891 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085577944 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066744618 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067496263 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067781015 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067429612 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080338282 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068740525 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066615049 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067480757 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070837347 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071795047 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068366034 seconds)
  done (took 4.253452639 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123040175 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125100097 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071654552 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107697786 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.116444881 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068709534 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150445366 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090882375 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114422232 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067679584 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084406582 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066944345 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102983489 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068535015 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087363245 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066982821 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069526385 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067882679 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06735288 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06744458 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085512383 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06678011 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067673642 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067714373 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067814497 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08235097 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068040228 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067182651 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067252741 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071019275 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072110011 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069399331 seconds)
  done (took 4.523041142 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069943508 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070036849 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076100065 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.079626808 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065130283 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067508128 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.06848533 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065069968 seconds)
  done (took 2.440375744 seconds)
done (took 29.513210568 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080006131 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066110534 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.06937469 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085902032 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072710986 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069206952 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063544645 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073287589 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069978873 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.06995258 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072081277 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065640452 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069174841 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063650367 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071004816 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064919353 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071352502 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068936897 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.069506186 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.070390527 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067141433 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.070167068 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073181445 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.069682665 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.069728184 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.069579163 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074087678 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071073911 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065164307 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067774358 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.066887931 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.079306291 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07119354 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.07088896 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064762204 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064885322 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069264669 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067124287 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070854764 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074134161 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067220429 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073873328 seconds)
  done (took 4.789776994 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089231987 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.092546663 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084904163 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080831403 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.105752226 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080481836 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.089555009 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077687216 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076414098 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.089095101 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072362438 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07753345 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079626161 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074224828 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077336799 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073460826 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078205183 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071900165 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076729843 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076683377 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089838372 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069826129 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078138628 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078189943 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072159847 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078141921 seconds)
  done (took 3.991128263 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073403582 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087618598 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091239644 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.139893258 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108184238 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082002083 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.08118864 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092838513 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099792078 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066805511 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070901168 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.092646961 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095361668 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07414955 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105229826 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085242777 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079404698 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068868078 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073888766 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102041123 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090264481 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085639038 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099820675 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087255768 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066270988 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075986426 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073866417 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082945723 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074315062 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079259102 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070666098 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07351853 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067221851 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079100931 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070565324 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064477316 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088355878 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07983064 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081312422 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.104823041 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076858076 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068337009 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.097246368 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132881345 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.06607762 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069146952 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070978453 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079605545 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067835176 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096632162 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085593223 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066086649 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085197207 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067962785 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067970396 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083296996 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068317631 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.11175107 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078708667 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072738034 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087161016 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071834573 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087555725 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.065843501 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077947761 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067865276 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068203934 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065428565 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102484329 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073580939 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.118499424 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067435331 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064245898 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079039411 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077709965 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072895151 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065965549 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086368309 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07882274 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070530367 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078336689 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069265521 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069899369 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.102839069 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065737878 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064939753 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064665196 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069148474 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069660364 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066798702 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079782277 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065895272 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070061936 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082065577 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066415794 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067102553 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068763496 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067767078 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065873718 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077098682 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070231039 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068185215 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078933385 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067400049 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069941914 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08139517 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075858107 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.065961117 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.06718984 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.068932022 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.068053161 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070715873 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069917251 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068489032 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073506081 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074112265 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.072772845 seconds)
  done (took 11.07256616 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165786732 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.151915024 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.06803695 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.146642516 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.074928832 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.071229602 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.149443448 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.087064367 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067295803 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068371549 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066588816 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.095347559 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.090694897 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.101963853 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071223093 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067685761 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092864326 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.100266477 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.151614875 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.145949023 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090639016 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07504596 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070008994 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068734908 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068476058 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07765657 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.089124494 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076256321 seconds)
  done (took 4.579014307 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075868565 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084464464 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071660624 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091348309 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08496608 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067103749 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068933353 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068489481 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084540816 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073590957 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.06719762 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072285642 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070983841 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.06813957 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068236229 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.074177352 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075519756 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06657281 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071274882 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072309587 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077656293 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.092859596 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071203914 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067096409 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069848095 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067624325 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073859729 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076323603 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066994904 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.097360688 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064147758 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071230836 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081239928 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068411109 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066859375 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067737645 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067082706 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066875993 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067446048 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064863354 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064821671 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072514401 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065578413 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072437219 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083922935 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074935524 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068076389 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069296297 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069591903 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063791062 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070433223 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070394877 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069723373 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075612477 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070674089 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069451158 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068543869 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.097606267 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073019806 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066261521 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066534004 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065271562 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068588193 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075182574 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084060489 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068506297 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065146962 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066933242 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072041473 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081309943 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066271832 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072340727 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063791041 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067165249 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069289826 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070189609 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068349171 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065232397 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066715521 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067028367 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067483751 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066808934 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066452447 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069403465 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064868194 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.06495152 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067174796 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068130931 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07285561 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065596555 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069762694 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068472356 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065702438 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069444593 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07249909 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070292662 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.086753844 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075095319 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067292186 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064729294 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081259252 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06858186 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065924633 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072184734 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071702555 seconds)
  done (took 9.42709892 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092395231 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068677155 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087170186 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093279505 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077402675 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072103128 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081159033 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067546841 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.083524151 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066160162 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07576616 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065172543 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080141921 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075803252 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.06885283 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077994272 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070145435 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087848904 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.082163159 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065510895 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076160396 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.07946257 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.0793205 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085233902 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084953834 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085543864 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079154072 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069297436 seconds)
  done (took 4.118592647 seconds)
done (took 39.856462892 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.964858644 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.138571811 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.963528694 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.222381116 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.015083748 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.077735663 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.074229043 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.950936012 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.054864184 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.010022666 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.281911292 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.326976612 seconds)
done (took 68.035791822 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.049001551 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.093351681 seconds)
    (2/2) benchmarking "String"...
    done (took 2.171740852 seconds)
  done (took 6.150360097 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.549056224 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.949636624 seconds)
    (3/3) benchmarking "different"...
    done (took 1.998202211 seconds)
  done (took 8.375049987 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.051009827 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.586964966 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.207926404 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.947527897 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.950395144 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.359226507 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.75368735 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.415249526 seconds)
  done (took 33.103669258 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.301855126 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.206581903 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.693872716 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.729769538 seconds)
  done (took 16.866990949 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.555539235 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.211411249 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.211475636 seconds)
    (4/4) benchmarking "different"...
    done (took 2.205477562 seconds)
  done (took 11.128218069 seconds)
done (took 87.706951836 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.949639921 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.996568653 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.952814637 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.105446059 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.996333744 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.988390758 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.959205701 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.992853804 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.950568292 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.952407154 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.378409219 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.947028347 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.946781775 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.983132876 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.105551268 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.997031698 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.479764296 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.957653715 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.00036056 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.580179439 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.493845851 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.963239199 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.96855829 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.012549438 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.147368496 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.992168319 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.106733201 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.958347843 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.563789843 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.971029992 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.960509545 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.955211319 seconds)
  done (took 210.195113019 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.954198809 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.930199049 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.013758818 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.986425191 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.449807715 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.147406221 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.095076392 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.506027725 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.956653348 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.982798669 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.057262243 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.952274627 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.07807957 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.888548732 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.950085904 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.962149834 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.16553065 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.092876461 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.951666059 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.142358792 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.954737738 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.903137428 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.874144796 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.046512754 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.955847336 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.027660817 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.959480409 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.959528885 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.140132601 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.133539349 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.970749362 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.987668198 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.126414789 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.826343771 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.978344661 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.978922869 seconds)
  done (took 175.976788005 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.135274406 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.966578394 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.018760753 seconds)
    (3/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.95439285 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.092290258 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.707050581 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.683853378 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.957917669 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.958228061 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.955935635 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.963376394 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.963244073 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.026027117 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.288830421 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.974682955 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.957923688 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.957737973 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.152879488 seconds)
    (18/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.959073817 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.963392757 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.964320123 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.958780381 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.022384144 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.331516677 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.095788694 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.95858057 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.969493589 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.097173276 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.965782058 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.959525894 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.095053638 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.959445889 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.036049394 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.092020897 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.96700332 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.040704095 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.964621209 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.443150704 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.956243477 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.959495432 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.963278517 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.02127022 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.956156322 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.058611458 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.04665471 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.957372302 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.973003222 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.15675075 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.612336921 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.959672362 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.959640345 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.958470818 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.961287067 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.960744796 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.706709784 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.961194344 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.988399334 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.539663684 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.957993208 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.961177972 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.959540222 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.961835708 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.959065846 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.967112049 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.998399209 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.757655447 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.020927991 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.347803885 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.764343452 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.959245892 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.256480545 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.02001511 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.962035051 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.040374761 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.95808859 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.961393848 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.96060013 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.961331954 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.047127425 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.042775051 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.960549601 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.095948481 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.962846581 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.958703668 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.961086138 seconds)
    (85/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.960934244 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.973315188 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.221623363 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.151393558 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.973264057 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.021398395 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.960117415 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.959872704 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.976374814 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.121896419 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.959911399 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.959866422 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.959230915 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.144349241 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.959639321 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.147513011 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.184481122 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.035170681 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.211315982 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.188550351 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.964208053 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.959730078 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.975551504 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.962562834 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.959983444 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.971462648 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.961150536 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.959634453 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.96163432 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.960831772 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.947852351 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.965618546 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.974327419 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.95887538 seconds)
  done (took 430.312158499 seconds)
done (took 820.553638345 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.67194383 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.744806682 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.583299403 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.616041354 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.58507672 seconds)
  done (took 15.094080104 seconds)
done (took 16.987147469 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.986200732 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.978686377 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.965199841 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.984894314 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.980758219 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.980867067 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.012684487 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.003787893 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.000893351 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.97957887 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.988670028 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.981774092 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.987122246 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.002255069 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.99264328 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.988695856 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.983048481 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.974129939 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.990669332 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.985549582 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.980978038 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.978690428 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.983156995 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.986559737 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.994854943 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.98290671 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.975314708 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.984001313 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.9855632 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.985973641 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.021585511 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.989229963 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.015384559 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.991589883 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.989710365 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.994238501 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.980506958 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.007448136 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.983674941 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.022129986 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.991426749 seconds)
  done (took 83.469401944 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.971139572 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.105876915 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.180177139 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.002914867 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.972254887 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.181119536 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.026744867 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.099743405 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.102984334 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.187844799 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.188651667 seconds)
  done (took 24.921761351 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.97183296 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.107654225 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.189580969 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.006455366 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.973521705 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.18485557 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.034276276 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.103293393 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.105810117 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.185378095 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.216241759 seconds)
  done (took 24.987887983 seconds)
done (took 135.275168984 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.344719473 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.995335316 seconds)
  done (took 6.23772054 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.966678928 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.983866424 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.115600481 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.967481127 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.967650705 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.968303219 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.967212117 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.965995228 seconds)
  done (took 17.801126659 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.967672609 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.965909087 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.967014187 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.965950698 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.965129608 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.965188818 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.966011322 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.965675383 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.966819445 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.966002777 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.967230152 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.966923033 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.96589319 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.967424902 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.96823096 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.966737222 seconds)
  done (took 33.362660783 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.968343575 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.967099064 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.967109689 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.967858424 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.967228041 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.966856138 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.96972864 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.967491006 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.967822042 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.967442135 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.966985388 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.96888182 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.967469083 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.966975553 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.969140288 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.969212845 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.964716535 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.96828635 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.968919949 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.967158019 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.967478027 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.967306195 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.973390274 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.967898806 seconds)
  done (took 49.131292063 seconds)
done (took 108.441085991 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.149380149 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.51514884 seconds)
  done (took 8.564513059 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.973484637 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.967999983 seconds)
  done (took 5.90904807 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.967594845 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.968655866 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.968679656 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.969380921 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.969664935 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.968328247 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.970085737 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.969068696 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.968660547 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.969370998 seconds)
  done (took 21.588986517 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.969765872 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.969111893 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.968536739 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.969241487 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.969690451 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.969504803 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.970491952 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.970471845 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.970387684 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.969205106 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.970678109 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.969502246 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.969316944 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.970652515 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.970198261 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.970113325 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.970518051 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.970557059 seconds)
  done (took 37.358601205 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.971231363 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.970457443 seconds)
  done (took 5.844226652 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.971575529 seconds)
    (2/7) benchmarking "second"...
    done (took 1.970938418 seconds)
    (3/7) benchmarking "month"...
    done (took 1.97000464 seconds)
    (4/7) benchmarking "year"...
    done (took 1.97122962 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.970356268 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.970409634 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.97024141 seconds)
  done (took 15.695534829 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.970863853 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.15462579 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.20524818 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.579746547 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.97194702 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.973404009 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.851982546 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.97353804 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.974467674 seconds)
  done (took 21.557354376 seconds)
done (took 118.418035764 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.829698688 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.973419343 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.220336477 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.097332307 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.998751381 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.317100408 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.011806925 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.52852416 seconds)
done (took 43.879755666 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.108515419 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.968664445 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.00182192 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.001699701 seconds)
  done (took 22.875589337 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.97202384 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.289046208 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.993513155 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.94386722 seconds)
  done (took 23.113641309 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.347520076 seconds)
    (2/2) benchmarking "read"...
    done (took 2.32253885 seconds)
  done (took 6.578923941 seconds)
done (took 61.583424803 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.970970578 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.972026356 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.973374604 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.972129664 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.973151978 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.971383431 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.973913945 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.972671639 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.972555328 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.973187625 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.973753613 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.973226126 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.972580054 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.972580893 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.972408261 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.972026214 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.972790595 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.972189942 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.972945388 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.973526417 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.972547063 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.972606993 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.972639673 seconds)
    (24/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.973322181 seconds)
  done (took 49.249191712 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.973869382 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.972534231 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.973716514 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.972622844 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.973905049 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.974400132 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.973781329 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.972908449 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.972945741 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.972737698 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.974066736 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.974134561 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.973661215 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.974222254 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.973553961 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.974070439 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.974179769 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.973521898 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973397222 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.973919383 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.974081988 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.973761215 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.974574658 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.974353003 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.975630318 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.974461373 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.97351755 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.974846757 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.973666539 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.975453834 seconds)
  done (took 61.121694447 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.97509955 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.975371088 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.974551182 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.975385849 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.975569819 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.974350399 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.975557594 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.975996044 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.977344672 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.975771929 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.974564675 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.975643276 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.976893898 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.975651166 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.976270497 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.975261695 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.975530381 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.975822958 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.975968852 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.976014317 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.974470853 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.975751538 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.97567978 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.976119532 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.976211442 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.977078559 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.977379989 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.974896852 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.976425668 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.976432091 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.97675427 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.977016207 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.976353951 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.97641439 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.978560365 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.962853016 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.952193966 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.979054101 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.987109157 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.976252499 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.978151652 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.976202695 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.977030475 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.977378178 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.980106743 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.981052693 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.977853335 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.977785928 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.977229098 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.977839891 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.978310413 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.977280024 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.976364635 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.977077512 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.977901169 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.977637484 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.977642852 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.977590415 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.979179306 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.978828687 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.977507715 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.977444902 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.978216302 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.982957566 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.977804224 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.980217498 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.979457507 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.978638998 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.978812623 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.978161062 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.980881826 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.979581359 seconds)
  done (took 144.232556275 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.978053295 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.979783924 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.97812178 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.979509952 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.984089056 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.979262898 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.98063371 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.98050503 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979813331 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.980997392 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980762307 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.979143965 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980508551 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.977934112 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.979724178 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.979953819 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.977859421 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.97982157 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.980235002 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.980068387 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.98672015 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.982244419 seconds)
  done (took 45.476887824 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.981499178 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.981186521 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.981201267 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.983254559 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.982403245 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.982789392 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.980575557 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.982393442 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980249444 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.984421466 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.98099797 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980388401 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.981444409 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982021463 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.979702068 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.980626943 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.982584236 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.982089219 seconds)
  done (took 37.580952895 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.98325444 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.981694657 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.98404256 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.981922669 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.983843283 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.981655999 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.982705425 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.984901508 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.982799248 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.981292555 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.982075995 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980985625 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.980068257 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980829529 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981905114 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.983396256 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.980486533 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.983121243 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.983486068 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.981456342 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.983786386 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.982204735 seconds)
  done (took 45.526054137 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.981744359 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.984487361 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.98333997 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.982556143 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.982858937 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.982012769 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.982480517 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.982921201 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.981913679 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.983165275 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.982325093 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.98288197 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.983066597 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.983259744 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.982892886 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.981892677 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.983076737 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.982837225 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.985310115 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.984167233 seconds)
  done (took 41.574964201 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.982121037 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.985359892 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.982673502 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.984103132 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.983566426 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.983559418 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.983213592 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.985380932 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.98424705 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.984369352 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.984260054 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.983413877 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.984029394 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.990896113 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.987602318 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.987451011 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.988121189 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.985960723 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.984299748 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.987093287 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.986881334 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.98555918 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.988840004 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.989673649 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.984820514 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.985197026 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.989953166 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.988111211 seconds)
  done (took 57.516359069 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.987143821 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.990199703 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.986174672 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.985950502 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.981511701 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.979904463 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.98562707 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.986738963 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.985431565 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.984680163 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.98616973 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.987762462 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.989092387 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.994277322 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.987305216 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.990852277 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.988020305 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.987819334 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.986160614 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.985349096 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.987214832 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.986049741 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.987270319 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.987355563 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.986808369 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.98552929 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.988419301 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.987700256 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.986178208 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.986404391 seconds)
  done (took 61.524929129 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.007722193 seconds)
    (2/2) benchmarking "in"...
    done (took 2.003496008 seconds)
  done (took 5.928147725 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.986141089 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.988457087 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.988457327 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.992645981 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.988275702 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.98827094 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.986050994 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.991490089 seconds)
  done (took 17.828094006 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.988311497 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.992107901 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.988350246 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.987186444 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.986551717 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.997042337 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.987393647 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.989725016 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.987494724 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.988793119 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.992841164 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.993862159 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.997269031 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.991734165 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.98693586 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.989883092 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.989078567 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.990166537 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.991020774 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.989161419 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.991403507 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.986739012 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.986721273 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.990561291 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.989960853 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.989814912 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.99949228 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.989943912 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.993427469 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.987946824 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.995694713 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.988028934 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.990599078 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.990602272 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.989166633 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.987681266 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.997372496 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.988731294 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.991972624 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.98818616 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.993502699 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.989719285 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.991942381 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.995341591 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.990775047 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.959780222 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.983624325 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.988354276 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.990424391 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.990237721 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.997827858 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.989407021 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.989009705 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.990698104 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.990280861 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.99172962 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.99025943 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.992307565 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.996597572 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.996266389 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.997979828 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.01113935 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.999051263 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.992173309 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.991095524 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.999786847 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.018760357 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.992920037 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.993284653 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.992626841 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.002040232 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.990782301 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.992989489 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.992163138 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.009511828 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.000038223 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.990225605 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.989705304 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.990365483 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.992047104 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.993662374 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.99062926 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.992071147 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.992988166 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.002340155 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.020501298 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.990750764 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.990306099 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.994157137 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.991800977 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.995526737 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.994789978 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.992089067 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.99012647 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.99287987 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.994500783 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.990888967 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.992524904 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.992610444 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.001569485 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.991992024 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.991273039 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.995871085 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.00200719 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.991246078 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.99283986 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.994657036 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.992289335 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.999438613 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.992952471 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.992147469 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.991867942 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.993011947 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.999545805 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.992025061 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.996693483 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.004300572 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.000717897 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.994069928 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.996652425 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.995113306 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.997279559 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.005281792 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.021227239 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.993347107 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.995798893 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.999566431 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.007620823 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.996329956 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.993493312 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.99530325 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.993097757 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.993435554 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.994857172 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.992715509 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.994400962 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.993087969 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.994320254 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.993650272 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.994123743 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.997476287 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.996380414 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.995651218 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.994267463 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.998090463 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.994090353 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.997815505 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.002169095 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.996105222 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.994673143 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.994115516 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.997515715 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.996927295 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.99627233 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.995420765 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.994446316 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.995061578 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.99536885 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.997586287 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.994613029 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.994394606 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.996332894 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.999513542 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.99831413 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.995081304 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.996294138 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.995461742 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.994219619 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.996104228 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.994679297 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.998294398 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.996358308 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.000152781 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.994283033 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.995036326 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.994752899 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.995977759 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.995305806 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.998725505 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008889153 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.000814509 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.008362596 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.996579289 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.001945166 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.996093723 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.997562994 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.996668303 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.996135173 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.995865234 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.995774921 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.995796889 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.001084192 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.019283225 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.008195956 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.998415189 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.997777667 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.002357267 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.000664056 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.0019965 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.997227621 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.997864265 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.000526504 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.985333725 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.996676488 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.996970816 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.999672517 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.997388904 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.996654014 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.000281961 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.000100065 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.997227759 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.000595625 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.998239924 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.999640091 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.998847933 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.996973975 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.999025427 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.998388941 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.005185996 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.000175141 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.998120017 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.997025064 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.999072271 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.99881413 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.998724104 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.998757414 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.001431082 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.997822959 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.000198799 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.007814914 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.99968456 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.998484617 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.001538982 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.997424536 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.001316201 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.997627057 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.002456346 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.008514325 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.000688602 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.999111744 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.002886481 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.998381338 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.001724039 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.998638716 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.002920752 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.000115496 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.999805673 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.000748226 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.998773015 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.006105659 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.99829429 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.000930333 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.000081586 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.002577976 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.000508368 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.002139995 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.00006677 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.002880609 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.008514975 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.005764226 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.000504332 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.003823144 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.003375491 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.000827181 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.005855949 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.002540331 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.014275886 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.010537511 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.999094851 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.999649456 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.000812283 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.00336579 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.000056949 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.999506893 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.007618879 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.002352094 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.00219226 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.005565301 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.001457082 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.000498509 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.006496031 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.003702389 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.004525115 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.003044701 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.003227106 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.002564958 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.00166709 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.003777378 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.001247447 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.002905681 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.006372309 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.003652733 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.002085301 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.001597689 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.008671263 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.001619351 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.003032027 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.010697638 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.003645715 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.002519886 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.003439008 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.001423983 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.00221706 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.003419385 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.00268197 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.003527683 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.002287408 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.005768523 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.014193962 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.007483041 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.010834566 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.004527972 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.014482783 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.002492587 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.001616152 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.001927632 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.007311105 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.011597987 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.00288816 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.002656744 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.010932474 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.003663827 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.005384199 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.008093286 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.003118563 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.003774652 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.003531225 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.004176246 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.01008818 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.007425776 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.002053231 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.002749757 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.003415726 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.004197141 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.00769124 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.005136355 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.005354261 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.004663051 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.002905583 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.008342509 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.003746335 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.002971639 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.004513513 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.002073942 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.003778639 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.011857172 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.005961804 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.00512397 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.008585447 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.005682654 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.01300081 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.003990004 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.004604792 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.006336431 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.004674765 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.006900137 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.006932797 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.005597686 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.005381912 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.00477103 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.006822274 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.017044884 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.012826484 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.008853848 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.007532578 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.0051935 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.008784892 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.01606914 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.032797537 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.005511143 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.007293322 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.010833014 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.012725772 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.008107978 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.012713734 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.008347618 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.016756367 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.007171735 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.005795733 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.009724968 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.020038869 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.005642026 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.005386905 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.005329131 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.010442441 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.007568827 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.006190926 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.006999776 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.009986419 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.007050722 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.018318821 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.008544798 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.008332929 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.006998796 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.005771885 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.005783215 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.006853474 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.010700706 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.009110431 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.007468187 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.007830391 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.008361897 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.014485601 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.006237979 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.011778014 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.01991103 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.007492051 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.00865213 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.009174935 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.008231981 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.011783175 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.007979154 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.994094585 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.009800155 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.007752026 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.00969936 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.01192332 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.017622173 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.009421013 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.007495028 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.006718547 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.011842686 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.008139045 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.007272637 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.009482715 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.016492208 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.011390285 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.022557419 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.021204814 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.008232323 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.009898565 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.019527181 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.019026709 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.009379216 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.008724084 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.01100367 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.01256959 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.013104429 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.01011614 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.00984472 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.009859154 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.015372499 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.00998069 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.010717283 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.009131696 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.009663622 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.011902083 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.012331453 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.016531152 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.009863164 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.010257229 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.008923526 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.0120062 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.011695911 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.012851914 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.009265195 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.010722442 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.010995408 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.012221114 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.015079964 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.010634356 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.010347083 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.011888665 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.010755505 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.009385544 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.010788406 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.012678542 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.010145654 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.015808059 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.021323115 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.010799065 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.01211467 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.012074853 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.015315401 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.012882579 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.000386346 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.008046599 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.00971639 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.017973724 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.012258057 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.011648122 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.011540818 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.012662895 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.016765137 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.013515334 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.013869201 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.010173556 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.011156901 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.011141915 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.015432394 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.02356226 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.018862409 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.015103987 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.020434837 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.016508437 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.012806123 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.010154311 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.01022976 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.012717645 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.013691825 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.01666783 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.0159907 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.013738983 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.013314795 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.014015444 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.01953535 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.015442474 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.011322843 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.012514251 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.015885844 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.023477142 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.019397877 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.013586565 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.013605031 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.012956868 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.015310456 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.025294636 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.012352206 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.014761335 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.013094951 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.013896654 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.013384918 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.023340178 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.023335569 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.017864596 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.013199398 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.018960392 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.034743731 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.01754046 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.023610214 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.049458081 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.01670717 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.013932247 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.014429009 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.013732342 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.013691825 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.017564242 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.017864926 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.020391984 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.014918344 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.013400892 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.020976114 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.015888327 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.013904584 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.014624997 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.016174599 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.020885079 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.014623542 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.020645795 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.015001769 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.013901799 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.014563035 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.017724511 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.013783446 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.014424028 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.014156474 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.017700761 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.01503321 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.014535177 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.024740276 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.016028519 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.018467992 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.028910154 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.028771929 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.015079061 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.014993885 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.017872957 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.019844604 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.020681557 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.015504477 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.021673637 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.026408407 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.022149342 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.028348987 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.01762441 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.01634314 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.016559003 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.016191798 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.015555003 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.029025294 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.028798258 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.020977169 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.017190685 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.022994578 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.016468158 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.025189898 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.024480352 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.018312486 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.018012889 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.018481764 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.017426546 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.017474556 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.018423817 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.020825438 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.027812168 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.018581182 seconds)
  done (took 1196.731664477 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.016662554 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.018709583 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.0167779 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.018064046 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.017986967 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.016523899 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.016474261 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.015378123 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.01556698 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.014483378 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.017902151 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.018021967 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.014675067 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.016208485 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.021583976 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.016844654 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.017241802 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.016025168 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.020690882 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.021541194 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.01731952 seconds)
  done (took 44.316796229 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.018475225 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.015583491 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.018673587 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.016752471 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.017289681 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.015757206 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.016550035 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.020762923 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.013884207 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.01390348 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.015609265 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.016352086 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.030711225 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.023918532 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.028003585 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.028353252 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.027806649 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.029770982 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.027690086 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.028033388 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.029266773 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.030161151 seconds)
  done (took 46.429550156 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.028112605 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.028122116 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.028320957 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.027596945 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.027359957 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.026751902 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.026424535 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.0290482 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.029397616 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.02419104 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.031113353 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.031300981 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.023428511 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.027329096 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.023292847 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.022605777 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.168237912 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.024427519 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.024935551 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.023123445 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.022849364 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.028817697 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.023739662 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.023718431 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.022149961 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.023194687 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.021952064 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.022714946 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.023220374 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.024202781 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.029042287 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.023555787 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.02408731 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.026328012 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.023196216 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.024469808 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.028445926 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.023594824 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.024413721 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.02282227 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.033702749 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.048532544 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.023176818 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.023250034 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.0309861 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.022809736 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.023465368 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.026911433 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.03272874 seconds)
  done (took 101.388499584 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.021392617 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.022301077 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.022546042 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.02251788 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.020095237 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.020836285 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.019284183 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.021345696 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.021950154 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.020549943 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.020271092 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.020729398 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.020710127 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.021803479 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.021309756 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.020051732 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.020979574 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.020256422 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.020893677 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.020241706 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.019811397 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.0196782 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.020473211 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.020498203 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.020583954 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.021142314 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.020922261 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.020662876 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.019056441 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.01840952 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.018380032 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.017953713 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.019224238 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.017443172 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.018298676 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.018558981 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.018710036 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.019431666 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.018365293 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.00592009 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.019125837 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.018802368 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.01953587 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.01841736 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.018662199 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.019075728 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.018476614 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.018995363 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.019324386 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.018458759 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.019355887 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.018716859 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.020082925 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.018740464 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.019060386 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.018998274 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.019974701 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.02058158 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.987780464 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.017037727 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.020411946 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.020118929 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.020751142 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.018809668 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.018771363 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.019798522 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.019922703 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.020362425 seconds)
  done (took 139.258916051 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.01992997 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.019944666 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.019980126 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.022312256 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.01985282 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.019028772 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.020559787 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.020878942 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.020646483 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.020577404 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.020836953 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.020200203 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.020854133 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.021655776 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.020197747 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.020243585 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.020702749 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.020308747 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.020698386 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.020321246 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.020213531 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.021400517 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.021160806 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.021266975 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.019513522 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.019293339 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.019865641 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.018801637 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.019573474 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.013444355 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.013227204 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.012753155 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.014502799 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.013949316 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.013420356 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.012748236 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.012507634 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.013655651 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.014111026 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.013293971 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.012264285 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.013158012 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.012349615 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.014297881 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.011534043 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.010720697 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.011692876 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.011939861 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.013070731 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.011855174 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.011641689 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.012403416 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.011686097 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.011620399 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.011431085 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.011935119 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.010883672 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.010754901 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.011853987 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.010175191 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.010690007 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.009498361 seconds)
  done (took 126.951775588 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.010159606 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.008350271 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.00841566 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.007824043 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.008290706 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.008346283 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.008183162 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.008210834 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.007843955 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.007980174 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.995974896 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.007845632 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.008457326 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.007586354 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.007987943 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.009775902 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.008094736 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.007927182 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.008443068 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.00790004 seconds)
  done (took 42.096777787 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.007608893 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.006544782 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.006643501 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.007146827 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.008392875 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.00649979 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.006864147 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.008345821 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.007608571 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.008011817 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.007552782 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.007151339 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.007216525 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.007072456 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.007229917 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.006704179 seconds)
  done (took 34.058833782 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.006566572 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.006993041 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.008111702 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.007151386 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.007107724 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.005917659 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.006586101 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.007404959 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.006680763 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.006658146 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.006500695 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.006232641 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.007915334 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.007749569 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.006222912 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.006827433 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.006697495 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.006786124 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.006185009 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.005612288 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.005758898 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.004899839 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.006671359 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.005020846 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.005990814 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.006582197 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.006551143 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.006448961 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.005225685 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.005934401 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.005570752 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.005791138 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.006733696 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.004723358 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.004747468 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.005486528 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.004772776 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.006692166 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.004648296 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.005345073 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.005699446 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.00632894 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.005129165 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.005472026 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.004632744 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.005072579 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.005570285 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.004526839 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.00468616 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.004521562 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.004767281 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.005191311 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.004284357 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.004359564 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.004270215 seconds)
  done (took 112.266791995 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.005070474 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.003139946 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.004619431 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.004016834 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.004283506 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.006593506 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.003950468 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.001920225 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.003641711 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.003761563 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.003976737 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.002186474 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.003222571 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.003492437 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.002498248 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.004263825 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.002718706 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.00283179 seconds)
  done (took 38.004682993 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.003121074 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.003196867 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.003240358 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.002689816 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.002286581 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.002194378 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.005238898 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.00351876 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.003706267 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.003248755 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.003834044 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.004124983 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.00290999 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.003255246 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.00338478 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.002952275 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.004351083 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.002820608 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.00243939 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.002863848 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.002292965 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.004111477 seconds)
  done (took 46.009081298 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.003087958 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.002196547 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.018249333 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.02175972 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.021634342 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.034021114 seconds)
  done (took 14.036994438 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.002570011 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.002975354 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.00209616 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.001228582 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.002488884 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.001604325 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.00322867 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.001941105 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002112073 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.002143338 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.002095345 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.003779094 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.002492799 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.002660009 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.001779094 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.002169337 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.004134003 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.001909401 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.001126289 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002329257 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.001395754 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.00273213 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000943093 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.000785358 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.000616753 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.001665863 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.003018857 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.002103261 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.000436324 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001272077 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.002081489 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.002178895 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.001445331 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.001495967 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.00150187 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.001803469 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.002467916 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.001783677 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.001889995 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.001225544 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.001434014 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.003820594 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.001190891 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.001119539 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001641033 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.002271613 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.003566253 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.002202215 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.001769086 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.002437334 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.002001024 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.003412005 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002163809 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.002093615 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002945461 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002461504 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.003748119 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.002464319 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.001393793 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.002728737 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.002437519 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.003614067 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.003428932 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.00261255 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.003195837 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.002409948 seconds)
  done (took 134.082835336 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.003547165 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.004008928 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.003193512 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.004000025 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.004917526 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.004023047 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.003766012 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.003206787 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.003833547 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004822413 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.003537232 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.004348262 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.004618513 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.003106962 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0045633 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004341444 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.004386701 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.004338043 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.0037447 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.00553815 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.003622246 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.003469112 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.004403308 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.005381277 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006560111 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004387581 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.003613885 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.004970799 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.003971374 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.005710353 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004195673 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004152626 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005351237 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.00380937 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.006501909 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004435079 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.005420217 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.005219611 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004446699 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006859162 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.005152261 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004902246 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005795328 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004668697 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006291461 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.005695845 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.00467334 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.005300219 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004588579 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006012335 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.005121506 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.005405972 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.005503631 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006392481 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006050531 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.005465595 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.005513023 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005078973 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.007349408 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.00794705 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.007596494 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006111838 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006886379 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.00630334 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008147458 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.006519797 seconds)
  done (took 134.273285581 seconds)
done (took 2779.375999697 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.028247597 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.075816455 seconds)
  done (took 16.045227943 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.17655887 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.05648094 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.198728036 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.127813977 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.023088618 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.023382363 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.015575979 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.014947272 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.106649676 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.015284362 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.014860012 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.014999133 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.014758399 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.017321748 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.015587166 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.016066039 seconds)
  done (took 54.807323516 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.0178695 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.020148578 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.017297624 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.015220214 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.027698379 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.09017277 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.038699026 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.020645034 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.030905114 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.048379337 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.033225049 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.021335299 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.024126965 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.02170912 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.10554777 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.060994027 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.074838342 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.090581858 seconds)
  done (took 38.705739955 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.096264535 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.031929232 seconds)
  done (took 11.081114514 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.040159442 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.023875333 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.016051852 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.028140844 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.012316051 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.014609448 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.029740801 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.034819957 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.038190709 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.031433199 seconds)
  done (took 72.218163365 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.018110383 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.017879171 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.271917057 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.024404145 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.019026878 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.041033854 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.01467003 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.046305411 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.016424736 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.013253506 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.026846934 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.275750471 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.027280739 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.016583546 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.444619094 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.026624454 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.021503353 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.048746678 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.046151484 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.019019204 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.021928548 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.018749799 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.18474357 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.697492972 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.019560529 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.019767449 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.023718975 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.013240073 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.012711817 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.022950428 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.019350814 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.014768878 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.020250181 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.020559228 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.027620239 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.020503942 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.506546535 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.034693374 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.028936458 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.103454912 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.057718436 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.020486569 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.790405379 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.018404567 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.013967815 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.022392957 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.695171851 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.108976999 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.01593236 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.197644693 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.350500033 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.029574746 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.183863036 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.172457826 seconds)
  done (took 140.892252936 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.012655729 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.248932657 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.166574412 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.014320824 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.270464027 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.22399283 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.014525969 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.057647594 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.014275919 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.214881117 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.264559574 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.114696206 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.014873567 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.012792267 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.014765202 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.01122018 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.161043062 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.079107923 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.018142121 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.012325575 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.038483551 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.212739027 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.134385692 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.016671231 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.039272538 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.21926618 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.133779572 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.114349466 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.776880968 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.012291301 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.074799694 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.015805465 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.016963346 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.01258509 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.16589157 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.104639859 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.096130836 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.016105132 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.013033172 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.013432085 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.686183829 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.212549285 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.10927466 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.136053468 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.263809761 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.226864811 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.627989838 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.013695728 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.6436933 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.17924495 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.219094651 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.221407036 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.133883677 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.016703162 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.2973392 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.01383759 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.015144112 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.235356328 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.234669846 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.113365095 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.017378974 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.016287827 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.01558909 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.252649334 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.018621701 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.10576687 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.017409157 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.014757845 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.106696803 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.115809992 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.241317628 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.233925303 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.045609695 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.333362894 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.505317091 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.217108096 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.07876837 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.236475893 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.01884108 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.015754827 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.095162977 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.855118194 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.269568737 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.255239832 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.214267068 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.045349689 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.667858003 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.016201953 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.202143733 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.206143231 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.249501315 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.256230346 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.251556863 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.386143496 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.016426343 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.016236498 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.304615839 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.132255538 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.972745831 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.368293556 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.244959369 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.517616797 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.04104524 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.35978722 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.144737695 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.02172235 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.663680454 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.016460096 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.221859209 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.05632514 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.019283664 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.017395287 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.206757024 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.920891374 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.016575383 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.719105693 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.076969804 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.01944091 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.22074129 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.020532343 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.261687377 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.021507462 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.248927229 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.648897208 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.048596927 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.191252054 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.258809039 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.652201623 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.258755892 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.25943469 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.131729588 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.242011402 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.826143641 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.019816623 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.278093561 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.020712926 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.018160973 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.187274306 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.020623335 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.59175163 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.024434335 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.282548743 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.039708692 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.246992462 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.02356564 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.256762705 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.051724712 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.067665174 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.021319707 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.149262898 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.019520668 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.865396307 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.175800733 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.022308576 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.019949553 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.619606469 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.02182485 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.168153397 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.243825796 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.039671034 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.08808671 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.587727143 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.012694918 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.107488867 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.041523227 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.665370642 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.019568041 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.272702032 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.985311922 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.494575215 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.019115883 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.254012059 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.205310095 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.024404819 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.019527324 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.861922985 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.019623449 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.019558014 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.176787848 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.473133496 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.924631167 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.218283914 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.023753895 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.148479785 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.022938052 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.094940203 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.362379633 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.020429913 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.019621411 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.022721371 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.022074873 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.022212112 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.229071707 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.046362293 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.45301197 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.158185588 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.275972356 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.326855198 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.218379559 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.06066455 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.024942237 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.243245444 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.024318804 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.083736644 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.023736804 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.041147934 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.248998077 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.023772963 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.228373732 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.255010828 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.071233528 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.068371325 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.024254334 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.023270241 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.93314948 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.166911136 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.107147781 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.024285321 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.024935346 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.136050445 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.141739727 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.204626152 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.854239191 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.16834088 seconds)
  done (took 934.353167824 seconds)
done (took 1270.043608333 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.023957373 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.011127104 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.027111187 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.028396245 seconds)
  done (took 30.046895423 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.024943593 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.023445195 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.026058165 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.024502067 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.010553927 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.024714084 seconds)
  done (took 14.091805054 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.022774453 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.02686685 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.028051267 seconds)
  done (took 23.033597374 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.451031842 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.429798427 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.100331767 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.166145156 seconds)
  done (took 11.105361723 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.030470239 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.02414371 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.025040424 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.027246256 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.026857594 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.025591764 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.027940248 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.027137395 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.026559144 seconds)
  done (took 20.204670203 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.181353274 seconds)
done (took 104.6190216 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.156454866 seconds)
    (2/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.260885084 seconds)
    (3/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.151384331 seconds)
    (4/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.16626201 seconds)
    (5/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.181042167 seconds)
    (6/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.028654771 seconds)
    (7/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 4.100366413 seconds)
    (8/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.124592899 seconds)
    (9/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.402230956 seconds)
    (10/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.063284075 seconds)
    (11/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.135689039 seconds)
    (12/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.045089827 seconds)
    (13/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.254916766 seconds)
    (14/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.030568885 seconds)
    (15/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.154604876 seconds)
    (16/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.274439066 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.042950582 seconds)
    (18/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.035569534 seconds)
    (19/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.025152247 seconds)
    (20/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.209297653 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.043063309 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.113395424 seconds)
    (23/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.362631253 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.050648235 seconds)
    (25/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.355312299 seconds)
    (26/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.029600534 seconds)
    (27/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.205648344 seconds)
    (28/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.043833532 seconds)
    (29/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.025480412 seconds)
    (30/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.216039828 seconds)
    (31/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.43291998 seconds)
    (32/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.232296582 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.040023754 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.148168179 seconds)
    (35/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.024809672 seconds)
    (36/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.226279958 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.135857817 seconds)
    (38/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.42957762 seconds)
    (39/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.241082592 seconds)
    (40/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.688877469 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.129526455 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.121638126 seconds)
    (43/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.257022503 seconds)
    (44/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.727495807 seconds)
    (45/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.028378256 seconds)
    (46/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 8.664506567 seconds)
    (47/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.239122849 seconds)
    (48/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.425486981 seconds)
    (49/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.04135099 seconds)
    (50/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.105733633 seconds)
    (51/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.244175674 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.364443435 seconds)
    (53/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.274791311 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.34367683 seconds)
    (55/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.487750753 seconds)
    (56/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.114742595 seconds)
    (57/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.319172424 seconds)
    (58/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.168290335 seconds)
    (59/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.849591178 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.033665335 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.501832021 seconds)
    (62/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.162038437 seconds)
    (63/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.027640814 seconds)
    (64/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.629242779 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.27957932 seconds)
    (66/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.913160258 seconds)
    (67/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.166281859 seconds)
    (68/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.727777165 seconds)
    (69/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.94536939 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.748283753 seconds)
    (71/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.149205048 seconds)
    (72/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.161445387 seconds)
    (73/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.966580856 seconds)
    (74/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.130918406 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.339564208 seconds)
    (76/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.233118777 seconds)
    (77/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.040279653 seconds)
    (78/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.139997822 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.027608344 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.413097833 seconds)
    (81/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.980692185 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.218374253 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.898822025 seconds)
    (84/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.041310464 seconds)
    (85/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.703539907 seconds)
    (86/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.039175166 seconds)
    (87/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.168759378 seconds)
    (88/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.299943989 seconds)
    (89/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.110102691 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.891793816 seconds)
    (91/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.929871205 seconds)
    (92/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.051624843 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.335181113 seconds)
    (94/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.044848413 seconds)
    (95/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.696934927 seconds)
    (96/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.496247835 seconds)
    (97/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.627770489 seconds)
    (98/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.5223167 seconds)
    (99/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.109612622 seconds)
    (100/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.029222047 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 4.49159846 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.429125007 seconds)
    (103/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.034615232 seconds)
    (104/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.501844342 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.424598255 seconds)
    (106/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.033560612 seconds)
    (107/341) benchmarking ("map", abs, Float32, false)...
    done (took 4.106891657 seconds)
    (108/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.161858219 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.013237149 seconds)
    (110/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.029634423 seconds)
    (111/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.136298038 seconds)
    (112/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.140330564 seconds)
    (113/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.181731116 seconds)
    (114/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.235339445 seconds)
    (115/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.454521552 seconds)
    (116/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.330714419 seconds)
    (117/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.301372971 seconds)
    (118/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.108942865 seconds)
    (119/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.337676061 seconds)
    (120/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.304383624 seconds)
    (121/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.820473052 seconds)
    (122/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.133430098 seconds)
    (123/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.325068478 seconds)
    (124/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.111409102 seconds)
    (125/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.091552734 seconds)
    (126/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.396686801 seconds)
    (127/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.031722586 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.381122912 seconds)
    (129/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.169048312 seconds)
    (130/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.168396646 seconds)
    (131/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.056301067 seconds)
    (132/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.031258148 seconds)
    (133/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 4.388103635 seconds)
    (134/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.337888863 seconds)
    (135/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.037471006 seconds)
    (136/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.370444597 seconds)
    (137/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.442019493 seconds)
    (138/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.777706537 seconds)
    (139/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.29912106 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.126836166 seconds)
    (141/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.117997559 seconds)
    (142/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.050526883 seconds)
    (143/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.20682058 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.283410675 seconds)
    (145/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.970848112 seconds)
    (146/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.098065633 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.034015218 seconds)
    (148/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.115033451 seconds)
    (149/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.12576969 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.276221527 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 2.250360709 seconds)
    (152/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.160669855 seconds)
    (153/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.329629313 seconds)
    (154/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.139766518 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.136872955 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.897469821 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.060639492 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.047823326 seconds)
    (159/341) benchmarking ("sort", Int8, false)...
    done (took 4.981062365 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 5.663537769 seconds)
    (161/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.352004279 seconds)
    (162/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.040426643 seconds)
    (163/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.916516565 seconds)
    (164/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.006970928 seconds)
    (165/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.190422744 seconds)
    (166/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.237888295 seconds)
    (167/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.235123864 seconds)
    (168/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.164243417 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.310156451 seconds)
    (170/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.096445642 seconds)
    (171/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.445664817 seconds)
    (172/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.05207567 seconds)
    (173/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.034171696 seconds)
    (174/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.32898355 seconds)
    (175/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.122852783 seconds)
    (176/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.697738155 seconds)
    (177/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.2710056 seconds)
    (178/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.120232258 seconds)
    (179/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.238515281 seconds)
    (180/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.800752353 seconds)
    (181/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.266466831 seconds)
    (182/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.040011072 seconds)
    (183/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.305749511 seconds)
    (184/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.124814148 seconds)
    (185/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.046105578 seconds)
    (186/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.033889497 seconds)
    (187/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.061618238 seconds)
    (188/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.034321218 seconds)
    (189/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.177287386 seconds)
    (190/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.035708847 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.329922858 seconds)
    (192/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.120812265 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.428518393 seconds)
    (194/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.257088446 seconds)
    (195/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.047352178 seconds)
    (196/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.313545341 seconds)
    (197/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.047418664 seconds)
    (198/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.113259565 seconds)
    (199/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.034989059 seconds)
    (200/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 5.110969891 seconds)
    (201/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.242509633 seconds)
    (202/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.269962112 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.454463715 seconds)
    (204/341) benchmarking ("sort", Float32, false)...
    done (took 5.70183651 seconds)
    (205/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.237114674 seconds)
    (206/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.061969617 seconds)
    (207/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.385709581 seconds)
    (208/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.123084103 seconds)
    (209/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.132887968 seconds)
    (210/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.146511681 seconds)
    (211/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.388902126 seconds)
    (212/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.205377828 seconds)
    (213/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.79801867 seconds)
    (214/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.053219804 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.936987029 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.286000362 seconds)
    (217/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.05132899 seconds)
    (218/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.037146696 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.13344376 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.169232712 seconds)
    (221/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.933540576 seconds)
    (222/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.359978485 seconds)
    (223/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.245680916 seconds)
    (224/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.122832738 seconds)
    (225/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.253773655 seconds)
    (226/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.039468466 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.337566881 seconds)
    (228/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.10772561 seconds)
    (229/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.559105366 seconds)
    (230/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.294341823 seconds)
    (231/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.051996392 seconds)
    (232/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.801692531 seconds)
    (233/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.319921392 seconds)
    (234/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.740943956 seconds)
    (235/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.6047187 seconds)
    (236/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.033734334 seconds)
    (237/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.579261427 seconds)
    (238/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.776347652 seconds)
    (239/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.832990292 seconds)
    (240/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.210575466 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.35535747 seconds)
    (242/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.663092481 seconds)
    (243/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.052938903 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.211209862 seconds)
    (245/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.164200767 seconds)
    (246/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.055572761 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.071391203 seconds)
    (248/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.628497843 seconds)
    (249/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.35606901 seconds)
    (250/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.286240022 seconds)
    (251/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.463655421 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.073059107 seconds)
    (253/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.137410012 seconds)
    (254/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.054081533 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.087345543 seconds)
    (256/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.17145881 seconds)
    (257/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.238213102 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.150839329 seconds)
    (259/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.450370613 seconds)
    (260/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.151085213 seconds)
    (261/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.212457222 seconds)
    (262/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.061113829 seconds)
    (263/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.203421587 seconds)
    (264/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.058469499 seconds)
    (265/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.768562856 seconds)
    (266/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.075134236 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.384409798 seconds)
    (268/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.26338533 seconds)
    (269/341) benchmarking ("sort", BigInt, false)...
    done (took 7.060575238 seconds)
    (270/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.058103602 seconds)
    (271/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.873159485 seconds)
    (272/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.133029391 seconds)
    (273/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.053968126 seconds)
    (274/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.846997713 seconds)
    (275/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.059470149 seconds)
    (276/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 8.515232726 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.176134019 seconds)
    (278/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.366879071 seconds)
    (279/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.169469095 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.973317749 seconds)
    (281/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.147617202 seconds)
    (282/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.080412151 seconds)
    (283/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.138699619 seconds)
    (284/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.30809369 seconds)
    (285/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.53941934 seconds)
    (286/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.159078573 seconds)
    (287/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.76444866 seconds)
    (288/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.454825585 seconds)
    (289/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.490267778 seconds)
    (290/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.26145651 seconds)
    (291/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.128895369 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.848524945 seconds)
    (293/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.148596917 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.479918046 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.056539835 seconds)
    (296/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.057223189 seconds)
    (297/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.464829351 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.195233791 seconds)
    (299/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.185554183 seconds)
    (300/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.242385924 seconds)
    (301/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.072763961 seconds)
    (302/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.428699462 seconds)
    (303/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.134045786 seconds)
    (304/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.439773268 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.080622748 seconds)
    (306/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.777715678 seconds)
    (307/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.269682955 seconds)
    (308/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.35422442 seconds)
    (309/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.536581839 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.297151594 seconds)
    (311/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.071979422 seconds)
    (312/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.066101737 seconds)
    (313/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.899181554 seconds)
    (314/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.493079042 seconds)
    (315/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.329496018 seconds)
    (316/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.839533789 seconds)
    (317/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.382000637 seconds)
    (318/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.250470785 seconds)
    (319/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.060450546 seconds)
    (320/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.536231276 seconds)
    (321/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.552084101 seconds)
    (322/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.139660918 seconds)
    (323/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.281196737 seconds)
    (324/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.062270549 seconds)
    (325/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.169792107 seconds)
    (326/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.46224449 seconds)
    (327/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.260198337 seconds)
    (328/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.694893397 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.9124886 seconds)
    (330/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.214503168 seconds)
    (331/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.060847366 seconds)
    (332/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.303416476 seconds)
    (333/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.754641645 seconds)
    (334/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.141526467 seconds)
    (335/341) benchmarking ("sort", Float64, false)...
    done (took 5.783341892 seconds)
    (336/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.320880464 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.96406185 seconds)
    (338/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.069188937 seconds)
    (339/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.549064779 seconds)
    (340/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.057559864 seconds)
    (341/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.060168872 seconds)
  done (took 1152.064347946 seconds)
done (took 1154.116342633 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.078693906 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.065959646 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.567041843 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.080464935 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.065480796 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.0700039 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.578197106 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.099556447 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.083458581 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.577683778 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.078585372 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.067396091 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.083589575 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.102325729 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.077569082 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.080439211 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.073604534 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.09244914 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.10226859 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.072695587 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.112624112 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.07306665 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.066820086 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.119632615 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.066308994 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.082529651 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.081941076 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.113127866 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.112402554 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.070727933 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.072800142 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.422992279 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.120082947 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.072990347 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.078729611 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.082358148 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.077152036 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.082451706 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.080895575 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.081769389 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.069484853 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.078943363 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.073112625 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.071067189 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.067762106 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.069344387 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.069332708 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.193473634 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.082293848 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.405239681 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.124616291 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.081194715 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.114924385 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.071147158 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.070592211 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.071927337 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.114690559 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.075638208 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.072917432 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.404329095 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.158327429 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.083486662 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.405614777 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.13234722 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.080501052 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.077870265 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.070062858 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.080798575 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.424153072 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.617100738 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.103163339 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.091317089 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.069806101 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.07363712 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.082995799 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.575370626 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.084757296 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.644592757 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.099145786 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.083572674 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.075584097 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.071435394 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.071699642 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.086594541 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.083338065 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.070298768 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.075870332 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.07734579 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.083958414 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.421876358 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.114905098 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.565551866 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.07982767 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.083727917 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.082718109 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.647099866 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.10319116 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.081497477 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.073618581 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.420874799 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.115730775 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.08500105 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.073723245 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.082302337 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.185537922 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.084696874 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.083833314 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.070625408 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.092695735 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.078244805 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.072261576 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.085269505 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.091602095 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.107093526 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.08794413 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.073758619 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.08067713 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.077925643 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.082484259 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.080019546 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.08089418 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.082902305 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.072116851 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.123404833 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.085501366 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.086435676 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.187670878 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.078053055 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.197281255 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.086458271 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.079252629 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.07185851 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.406357333 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.117366133 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.095133496 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.079931613 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.095141084 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.095058685 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.0906621 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.075560722 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.088304734 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.07559034 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.125640791 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.0729325 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.097974585 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.124913969 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.086023322 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.078854304 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.084719974 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.108495081 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.093152477 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.078243145 seconds)
done (took 326.195179768 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.113649421 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.063931685 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.14122881 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.064940534 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.134454336 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.12218645 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.066118397 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.0645071 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.064724669 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.465106686 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.065557881 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.072226266 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.065545952 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.067372999 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.118333064 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.055850879 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.042217121 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.305105911 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.06687594 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.126051236 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.064333265 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.06563888 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.067012391 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.466059879 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.063691056 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.065852574 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.127267975 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.066300973 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.311047562 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.066187311 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.067042189 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.309810294 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.126435619 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.079617698 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.075717411 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.074278651 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.135484006 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.075970717 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.115494397 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.118216736 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.144179159 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.101492025 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.068092328 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.06495967 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.070487811 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.067828472 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.06720843 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.099713885 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.066156369 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.073090977 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.30460455 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.075518422 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.072701937 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.067640885 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.067369698 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.083225388 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.068973216 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.069014925 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.127699897 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.067621401 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.116056028 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.46841048 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.468562422 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.068108055 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.065473514 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.068838955 seconds)
  done (took 196.909526888 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.134929487 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.153429131 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.13748091 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.07401631 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.120774598 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.136599594 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.074161703 seconds)
  done (took 16.830005812 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.076173635 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.06792006 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.093420976 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.092233399 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.067916064 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.20662904 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.079572882 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.074771759 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.094486908 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.070695798 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.405246488 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.093826776 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.078562001 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.069796106 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.080670218 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.098090383 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.071168859 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.070653322 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.166449962 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.146747421 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.07503261 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.076983711 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.098430615 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.081867825 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.06934324 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.07122766 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.068679817 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.07688012 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.070530018 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.069901971 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.069896272 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.082174321 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.070443821 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.068190531 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.070489971 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.069945496 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.070674649 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.070730727 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.070863021 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.068954582 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.070935273 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.070211192 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.070075251 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.070279547 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.069989071 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.093940486 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.071136677 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.070899598 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.071442395 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.070219601 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.099514343 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.071756958 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.071906715 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.076135483 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.112614072 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.07992759 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.07235503 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.071325582 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.072021543 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.070915087 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.070350653 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.148916308 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.09501861 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.071056336 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.094861125 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.109556868 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.072016541 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.071611567 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.071210274 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.096742295 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.07144064 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.096192147 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.072711844 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.170821358 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.072085591 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.212982418 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.09576926 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.081568602 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.078237916 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.076022826 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.085205584 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.074323033 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.077255876 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.081974885 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.080779599 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.075755863 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.074996825 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.07804465 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.083239278 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.074522172 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.121037679 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.075924944 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.076032805 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.173682614 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.075972113 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.173061018 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.100985708 seconds)
  done (took 224.718238509 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.082991475 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.07923326 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.090413982 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.07771044 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.077354265 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.08157904 seconds)
  done (took 14.494335548 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.079091221 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.082370567 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.077689848 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.058224671 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.06474365 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.075612975 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.077383481 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.079564715 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.081302234 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.076698285 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.07769954 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.078842089 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.077225972 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.076395556 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.077211103 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.077536309 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.077556263 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.076969578 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.077052139 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.077135254 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.32765237 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.077333386 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.077959406 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.081859784 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.083044993 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.077773699 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.086530653 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.077680021 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.077906565 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.084133171 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.081544487 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.078907596 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.083888938 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.085547982 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.082118444 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.082969099 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.082646256 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.080192885 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.078147362 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.079073623 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.078820496 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.077468861 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.078066648 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.079907658 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.081700637 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.086620011 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.084697486 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.088074526 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.079537351 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.080415756 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.081445528 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.079868671 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.078228935 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.079806582 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.085576572 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.086109691 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.085356757 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.079227853 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.079255234 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.084707461 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.082975269 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.080345751 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.081589798 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.084631575 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.086416836 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.081151228 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.084275981 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.08404398 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.079426669 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.080042453 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.081522875 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.078909641 seconds)
  done (took 153.021254386 seconds)
done (took 607.967542289 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.20271294 seconds)
  done (took 9.211107919 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.216354999 seconds)
  done (took 9.330500343 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.344495752 seconds)
  done (took 12.360301613 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.151616488 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.100466258 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.085292158 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.081206527 seconds)
  done (took 30.44437821 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.411144823 seconds)
  done (took 9.421623341 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.092237589 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.07825864 seconds)
  done (took 16.253327967 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.203991482 seconds)
  done (took 9.213617988 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.098343474 seconds)
  done (took 9.118812124 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.092666486 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.07999482 seconds)
  done (took 16.19743701 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.079631136 seconds)
  done (took 9.085286529 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.899555946 seconds)
  done (took 9.987497694 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.083970666 seconds)
  done (took 9.10954886 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.087181369 seconds)
  done (took 9.095161225 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.994555236 seconds)
  done (took 10.000053407 seconds)
done (took 170.836943729 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.08281749 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.08120078 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.082334125 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.077873931 seconds)
  done (took 30.33152392 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.112847157 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.11174605 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.120554848 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.110811755 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.111662105 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.1014431 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.114540409 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.112356164 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.103008871 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.118093385 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.112597681 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.108800841 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.11008843 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.1194025 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.126266869 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.109402067 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.111669648 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.111269063 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.103704021 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.120906874 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.109971845 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.110914756 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.077468597 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.080315593 seconds)
  done (took 52.637872691 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.267417054 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.143205778 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.230974139 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.129003976 seconds)
  done (took 10.777339125 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.078231115 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.142593246 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.132895776 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.122500184 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.130924751 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.180797718 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.130156785 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.220363279 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.206006718 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.204585524 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.084872206 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.100168846 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.109574165 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.12314504 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.181217603 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.076944238 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.081817125 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.205735385 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.140986426 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.335106049 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.079400295 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.138550998 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.130289912 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.128654481 seconds)
  done (took 53.472443103 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.079694414 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.089457931 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.085299176 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.079832115 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.079198573 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.080301003 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.096589866 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.081620636 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.101907739 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.084814042 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.090311634 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.082455483 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.088741497 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.080193612 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.079873185 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.097615234 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.093952401 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.082494163 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.085228432 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.086402128 seconds)
  done (took 43.733519252 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.079274631 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.929487641 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.425331384 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.332347088 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.078265839 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.083873782 seconds)
  done (took 32.939447008 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.093540828 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.09776932 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.089631341 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.104970225 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.129964437 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.093968225 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.141453805 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.245978611 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.091554074 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.138145377 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.101044329 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.089824984 seconds)
  done (took 27.429413081 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.081353998 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.08921149 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.083754216 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.09447013 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.094466748 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.092648691 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.090576029 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.079725995 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.098798312 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.101421669 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.092210684 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.093884804 seconds)
  done (took 47.105999391 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.29555914 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.308800499 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.30203905 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.623854963 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.420446318 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.077035351 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.358615419 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.300744867 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.808356934 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.914071802 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.384628717 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.069537863 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.042281325 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.009837899 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.98861676 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.326546005 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086016724 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.940021191 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.369519202 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.136227845 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090917656 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.086295698 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08978835 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.381844375 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.418026333 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.085172935 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.299789258 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101512879 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.084383321 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.306585916 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.617931889 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.143374208 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.288879566 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.342360073 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.453670329 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.144763037 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.18989568 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.199615568 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.134184286 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.119752635 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.09568753 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.097998864 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.630771572 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.099518467 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.361370827 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089025285 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.087714385 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.193986908 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.012869542 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.521165647 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215897495 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.086925301 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.121836381 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.520689338 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208306827 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.329683134 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.094252198 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.203303202 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148372071 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.450721901 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.21803039 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.185598138 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301247839 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010130339 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.547328949 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226056689 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.089736454 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.092816019 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.788186646 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.33183351 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.169836868 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.547465564 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.861631627 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.088705608 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.091562517 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.130861852 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17901151 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.056237766 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.383681317 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.058558716 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.014021943 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.184754892 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.485117429 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094247158 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.08911374 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.096175972 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.934474632 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.015606685 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.186445374 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.455868261 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.424821538 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.088891468 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.089114734 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.110667041 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09140638 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.034299286 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.584131823 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.158047655 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.013284676 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.652821521 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.652639379 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.060966731 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.498443737 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.135452067 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.37365995 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.247994033 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.496758792 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.295329132 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.336025414 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.622025308 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.093114647 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.649682228 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.149751983 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164558262 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.092018393 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.65034881 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.210587705 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.519078248 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.217942435 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.089328416 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.016016365 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.100808134 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292053874 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.625595967 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.149120997 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.091947157 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.093546929 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.08826159 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.093637653 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.200505326 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107322439 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.400393516 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.171872928 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.09027308 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.02821649 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.096541553 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.388780463 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.632065002 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.154705149 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.355015219 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.365882869 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.790312015 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.687917052 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.135537554 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.3796159 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.168470212 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164614263 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.691101879 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.231507956 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.189527613 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090887245 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.23150674 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.100795656 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.095602415 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.360667392 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.511054194 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.522383789 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.136030809 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.089696908 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.051412567 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.204587893 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.337652832 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.22568891 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.121060996 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.096052894 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.176984803 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319760198 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.091295328 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.018729017 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345405123 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.339620688 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.401186652 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.508922855 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.222862086 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.169017144 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.103113618 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.30639629 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.175249609 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.751106775 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.63908814 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331013774 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.599926745 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.056418328 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.734379092 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.473630586 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.48835906 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.106074342 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.515801391 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.211813084 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.719150108 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.126989856 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.619546071 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.024808305 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.097713741 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.435322048 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.05172258 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.424415353 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.158447116 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207417417 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.095529658 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.096606611 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102086128 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.080621971 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204623278 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164661251 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.166377687 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.02195629 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.671373313 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.136079686 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.098563229 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.096093667 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.524468907 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.976021644 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.052549343 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.095331926 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172222624 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.838449117 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.646092704 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.099114393 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.098476257 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.69812651 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.10016645 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.889277135 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.104747364 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.030006998 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126221539 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.469342024 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.810356527 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.395119035 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.176801059 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.173530999 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.096431894 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.103333842 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.796890781 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.106250639 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.797125573 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.397263218 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.376512021 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.553905055 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.169630648 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.305891609 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.110829362 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.095982697 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.673600037 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.126794762 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.097582434 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301755572 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.612960269 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.565498655 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.073063657 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.18285356 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.097728 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.386509278 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.111324443 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.634156116 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.815295686 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.116804295 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.098806703 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.366835869 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.781871541 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.101370865 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.073416796 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106090538 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.311568392 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.301937765 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.380552773 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.407174831 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.553354255 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.026684936 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.103585604 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.125319275 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.342858537 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.099068074 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.1354906 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.546174627 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.227711926 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.53259084 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.400130153 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.629692597 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.750769155 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.374564726 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.172709499 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.112114579 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.781075852 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.245864935 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.032384378 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217833876 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.026087881 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.923600599 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.398955056 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.116840916 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.389550875 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087312753 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.451541239 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.403292288 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.479405368 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.16266999 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.12990589 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.099961202 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.151435632 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.100809731 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.229664969 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.216646792 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.108801953 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.58219221 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141152594 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.147677093 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.10720469 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.674459456 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125821864 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.103774779 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.79482561 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.126137948 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221392688 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.173437718 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.909040548 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.669359454 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.16452471 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.979788416 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.749766343 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.390037468 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.164641228 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.55958868 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143967833 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.506087104 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.101576863 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.316542093 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.108405897 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.614402982 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151416286 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.378324233 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062189562 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.316474766 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.311375706 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.13093274 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.109464067 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.030452331 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.208477134 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.98197843 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.084469307 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.106536133 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.785912348 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.608740548 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.248490648 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.628801656 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.927742855 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.106356688 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.541170883 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.535025084 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.664127148 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137219855 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107048619 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.563843415 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.25247455 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.540207983 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.389773466 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.113399671 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.102085536 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.318349956 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.229566307 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.024175919 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.596466379 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.689280038 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.807290958 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.116022377 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.308395604 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.554697762 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.345247856 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141210338 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.178016142 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.509604186 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.395472364 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.180056515 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.031578559 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105452252 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.502469195 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.507339482 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.202122749 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.346734209 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.42784133 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.622283759 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.656843406 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.486786718 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.614796036 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.533628658 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.518843161 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.328070535 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.4865753 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.434313926 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.698194909 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.518149218 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.31907605 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.195723332 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.406266984 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.98065784 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.81577773 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.352819747 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.112434824 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.036232574 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.314552023 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.11986406 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.46313658 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.633180475 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.355993075 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.505718331 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.593114783 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.646150146 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.23694484 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.135368384 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.074678181 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.131363014 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.128586454 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.109727297 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.599225528 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.397905922 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.121660089 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.049712602 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.767446412 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.034532723 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.32083428 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.232597571 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.145319573 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.664582217 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.49120496 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.229643302 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414863334 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.300287596 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.14322773 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.035541567 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.929338692 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.058895467 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.238800552 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.537052052 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126330312 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.110996113 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.313580806 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.039214077 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.15523877 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.114464854 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.316619658 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.693835703 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.40089012 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.240853133 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.361159306 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.41619384 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.069666263 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156527407 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.382523853 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.037015506 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.672895692 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.791755527 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.150700065 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181187768 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110039852 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.113914832 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.382647024 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.569049127 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.227296764 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.74440464 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.144174245 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.134175625 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.575087889 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.220487143 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.112443299 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.116224924 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.578841938 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.344730143 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.111787616 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.100993604 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.325380401 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185085758 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.307042147 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.187320585 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.625234464 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.116126724 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.084348555 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.232394263 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.063138982 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.111802569 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.924562708 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.175555444 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.112689395 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.405615452 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.739909001 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.314665233 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.508576671 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.016258016 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.244570203 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.156449285 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.115193071 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.114814972 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.508352682 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.42145851 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.112175589 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.391691524 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.167446666 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.119836705 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.772903057 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.084395989 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.113164782 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.905252907 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.044118978 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.842491753 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.508901759 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.122966122 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.20846552 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.116025443 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.039435189 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.113313516 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.29192507 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.093297997 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.119624976 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.477560349 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.515355401 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219482449 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117556239 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.115573859 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.119484443 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.327174995 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.627854704 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130200732 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.814950905 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.316724665 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.121370496 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.610700435 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.567883888 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.31582982 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.152335532 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.241034313 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.361785439 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.659716817 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.240725252 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.092601039 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341711286 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.116582985 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.387222387 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.390490612 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.115574008 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.327073853 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.655310175 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.403004796 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.469146308 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.443340246 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.183830125 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.244554893 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.032227725 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.124866627 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.119263648 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.385887009 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.174168883 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.11537137 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.124597156 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.67017762 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.898884625 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.589550187 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261875145 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.53059504 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.940441643 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.875772974 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.118754939 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.041799122 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.117261092 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.141095518 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.11788261 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.042027981 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.835655921 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.843568099 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.328143031 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.427550182 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.042648135 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.318955879 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.695921239 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.04214143 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.085056293 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.116137199 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.378282303 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043954421 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.11996865 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.070707008 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.45799116 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.784779139 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.389442337 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.117797119 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.061030812 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.121372323 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.119467583 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.117398091 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.202049404 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.118141667 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.234258149 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.386430603 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.588365134 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.231528944 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.756853932 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.908928225 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.057868433 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162238344 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.67589262 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.687613037 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.460690169 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.255881132 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.913124235 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.066599509 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.121630301 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134976305 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.376639021 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.123121869 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.12061261 seconds)
  done (took 2224.436220618 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.126374825 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.172046742 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.169752691 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.184643037 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.249470821 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.219968205 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.173492107 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.203128783 seconds)
  done (took 59.547537198 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.118179244 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.543985916 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.231100184 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.119594964 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.119899354 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.123228147 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.309288538 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.147939349 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.119541741 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.123660645 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.12048382 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.123587712 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.121487357 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.131417911 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.124548463 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.411164574 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.140931265 seconds)
  done (took 79.2510752 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.176612149 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.022978637 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.121001125 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.905179023 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.153914935 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.418958345 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.123826112 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.12395759 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.453672539 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.419152192 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.179456812 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.134380403 seconds)
  done (took 95.282751933 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.121828796 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.120899015 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.121909799 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.121198838 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.120920833 seconds)
  done (took 12.657599592 seconds)
done (took 2771.674119866 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.36351957 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.217820744 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.193010558 seconds)
  done (took 6.460813117 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.264169596 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.318860063 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.42804167 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.436415312 seconds)
  done (took 11.502772056 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.404178801 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.510446567 seconds)
  done (took 6.96613731 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.490617862 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.127261877 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.517889725 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.122954208 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.111025027 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.127228077 seconds)
  done (took 23.417948697 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.123458036 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.123343012 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.122777916 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.123922295 seconds)
  done (took 10.545573945 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.121680794 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.901059531 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.120912135 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.130118059 seconds)
  done (took 22.32471276 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.332962649 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.197604315 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.885708823 seconds)
  done (took 13.467375825 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.745670595 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.573797878 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.730702392 seconds)
  done (took 10.101228497 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.947741953 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.134077033 seconds)
  done (took 8.132785348 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.267189864 seconds)
  done (took 4.317905621 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.961841849 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.436022247 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.585055523 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.642268903 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.680034575 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.338025301 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.415348353 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.372913587 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.525769218 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.516012511 seconds)
  done (took 27.525811163 seconds)
done (took 161.312516111 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.548953343 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.148012524 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.329872033 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.493347062 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.358263567 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.330276439 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.427250486 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.481930847 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.168995138 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.156372423 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.496484186 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.359918793 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.368225522 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.143225815 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.372795166 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.144741647 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.355599417 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.573570953 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.195371571 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.416525386 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.432609989 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.140799699 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.336878543 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.157842418 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.358571743 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.281716452 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.74546936 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.14315626 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.33441637 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.757632996 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.282850957 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.562540054 seconds)
  done (took 177.458443836 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.001496959 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.116493895 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.127813302 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.125977678 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.377835076 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.125659634 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.126572542 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.125064832 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.420791098 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.409006365 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.125674268 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.363666987 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.126349257 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.125651082 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.127605558 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.125914481 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.529556748 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.033642034 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.125658117 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.126461923 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.125968877 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.238025917 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.140681832 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.248016123 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.529110464 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.126228617 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.127813238 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.126624753 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.129657735 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.127173414 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.126693296 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.126023763 seconds)
  done (took 215.995471152 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.127439817 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.128478709 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.126569208 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.127910016 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.127516089 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.129665919 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.129486199 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.127612474 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.858678525 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.848382738 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.128022676 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.128032234 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.130373549 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.127788032 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.128396329 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.128582048 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.127014349 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.128075604 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.129106126 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.128349493 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.132030668 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.897350325 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.12840649 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.923663256 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.128811351 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.132365701 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.129037827 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.128841154 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.129133125 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.128346583 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.127122647 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.128914499 seconds)
  done (took 229.188864574 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.367872772 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.129962033 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.130254593 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.148064721 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.131128026 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.130645404 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.141086417 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.378343698 seconds)
  done (took 21.615940362 seconds)
done (took 646.321258159 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.506893929 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.881638119 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.26331275 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.153997046 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.380135045 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.194582343 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.148487272 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.212924732 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.791715289 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.225543924 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.541852505 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.155264157 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.840036246 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.17420643 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.263562856 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.208910722 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.495490607 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.751233027 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.278038456 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.809179712 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.349925929 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.093545522 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.228482843 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.825445206 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.556212565 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.120564189 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.14492507 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.498957245 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.153241776 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.382491423 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.80866274 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.38717344 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.162580642 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.150661625 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.205485972 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.192595674 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.331489894 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.158799983 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.260124283 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.890623341 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.785966577 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.677682936 seconds)
  done (took 110.700926791 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.13894561 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.136014905 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.137076262 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.137319524 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.145474508 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.136955233 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.137138593 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.1371099 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.136457546 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.136500236 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.137271969 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.145269344 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.138203946 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.146532845 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.137731116 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.137699807 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.137311133 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.145221981 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.138115896 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.137971919 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.13776047 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.137535253 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.134067194 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.137655101 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.139127641 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.138466543 seconds)
  done (took 57.673515063 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.134188745 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.2825643 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.421882785 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.164220749 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.134557048 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.137419145 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.16185308 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.143219323 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.137084511 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.136075435 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.227943261 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.139381704 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.145466989 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.416938394 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.157253846 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.109048696 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.135086122 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.136607275 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.290732957 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.151565638 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.165313751 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.144553072 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.165368368 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.151126704 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.138726351 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.135941723 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.138974173 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.538265552 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.145901558 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.230075994 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.179345801 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.171512823 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.485200284 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.43000865 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.195599116 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.142865578 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.134518643 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.276396296 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.147035785 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.136434546 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.163589678 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.144934886 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.419690954 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.645418958 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.149444972 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.135313132 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.530247213 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.284281974 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.182440661 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.147749641 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.428030714 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.162314276 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.134993471 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.137144507 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.173831177 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.147036054 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.13635585 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.377124056 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.151169032 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.16446141 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.14172683 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.137691412 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.298053956 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.144643649 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.287337334 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.146726938 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.142808599 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.138803802 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.424742673 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.163761505 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.64437498 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.151304173 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.137108617 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.232267708 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.293600553 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.558712468 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.150910242 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.298533615 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.50173378 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.174127223 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.148506242 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.523925195 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.176910695 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.146353951 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.137773713 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.136344141 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.137853961 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.182495621 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.16403031 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.567742817 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.646465629 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.397686078 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.178139779 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.15125793 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.139689522 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.381920819 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.148077533 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.138223041 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.41743805 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.669219483 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.152261717 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.144635614 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.623947744 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.153889979 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.167825402 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.149859407 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.432552454 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.165095251 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.183113289 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.137504511 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.145149602 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.142366202 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.167761198 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.148595007 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.138978038 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.621161128 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.290283505 seconds)
  done (took 263.62144835 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.142412327 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.139149368 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.138741005 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.13777568 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.138005813 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.139717066 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.137711812 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.137727005 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.139926943 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.138146662 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.138069803 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.140107229 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.140721339 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.141021121 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.178668532 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.140405282 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.629266206 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.138885437 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.137906634 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.139644548 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.709133823 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.147805562 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.138617791 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.139586009 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.138635268 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.139610311 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.140628996 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.175405441 seconds)
  done (took 175.117081634 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.140406725 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.187527496 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.151536823 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.187283786 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.15317757 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.140232396 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.161556173 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.156310462 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.146904739 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.140480224 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.141864669 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.167593271 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.148950585 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.214348369 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.16894544 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.170208172 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.217253463 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.14829302 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.141095971 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.141263752 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.18795901 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.154969343 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.168095809 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.19519184 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.154203575 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.189429038 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.156639086 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.141996456 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.140967293 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.230477273 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.157116676 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.168704557 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.175832634 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.158703631 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.234872501 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.230614707 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.221875788 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.170752724 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.145710927 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.141226793 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.14277097 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.143767703 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.189119547 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.155892247 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.14397381 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.233712987 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.157706262 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.143345993 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.165939443 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.142589514 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.154475114 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.160133147 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.176193768 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.242145545 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.184724545 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.16827459 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.164026604 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.162173012 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.144404405 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.215780093 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.153511623 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.231942125 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.159509504 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.146190821 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.14620458 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.147922732 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.191244781 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.178486241 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.220549485 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.153065939 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.216259713 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.198427761 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.157478671 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.145969209 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.128189493 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.180325886 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.230470514 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.197813082 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.204096871 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.17939204 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.15495807 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.144765923 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.147478506 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.171041082 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.151558905 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.232497095 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.233642385 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.15275283 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.145472967 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.145283076 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.145622617 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.16695954 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.200225987 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.185631326 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.228225964 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.1811356 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.180654804 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.151926776 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.157123784 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.150937925 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.175562872 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.153833716 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.157921322 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.525825374 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.179441927 seconds)
  done (took 230.401770443 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.51892399 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.195053417 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.213973372 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.411490763 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.532095408 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.349787833 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.183364307 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.205182726 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.20676263 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.308852845 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.252479955 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.249824786 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.180499095 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.167062311 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.194672124 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.202270868 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.222392083 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.487933303 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.289953222 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.982473687 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.181106233 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.467048476 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.484173578 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.52630818 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.230725473 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.569378986 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.83295074 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.279330142 seconds)
  done (took 70.002828113 seconds)
done (took 909.576267636 seconds)
SAVING RESULT...
DONE!
