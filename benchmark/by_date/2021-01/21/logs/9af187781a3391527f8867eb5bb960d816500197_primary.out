cset: moving following pidspec: 27229
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.847759788 seconds)
loading group "shootout"... done (took 1.205425158 seconds)
loading group "string"... done (took 0.678463682 seconds)
loading group "linalg"... done (took 8.71003008 seconds)
loading group "parallel"... done (took 0.169276435 seconds)
loading group "find"... done (took 2.990944829 seconds)
loading group "tuple"... done (took 2.130660474 seconds)
loading group "union"... done (took 15.086139859 seconds)
loading group "dates"... done (took 1.492811649 seconds)
loading group "micro"... done (took 0.221302467 seconds)
loading group "simd"... done (took 4.839673184 seconds)
loading group "io"... done (took 1.077729536 seconds)
loading group "random"... done (took 9.812088136 seconds)
loading group "problem"... done (took 1.522157745 seconds)
loading group "array"... done (took 25.656558684 seconds)
loading group "misc"... done (took 1.851833906 seconds)
loading group "scalar"... done (took 44.246711022 seconds)
loading group "sort"... done (took 3.364255645 seconds)
loading group "sparse"... done (took 13.020160491 seconds)
loading group "collection"... done (took 19.207253231 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.449708348 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.119198921 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.169078342 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.11799691 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.221405382 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124089721 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134190841 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.088203701 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.882028301 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.158087137 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.11924116 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435108652 seconds)
done (took 5.523407498 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.186869096 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.249243153 seconds)
    (2/2) benchmarking "String"...
    done (took 0.170350213 seconds)
  done (took 1.659091691 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.092417072 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062089115 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069919436 seconds)
  done (took 1.465020748 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.068305452 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136680847 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.069503161 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.069363329 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.069865079 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06938655 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.069404406 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.06952585 seconds)
  done (took 1.797131332 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.076199771 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.070919625 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.068712511 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.071014717 seconds)
  done (took 1.527523419 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066740295 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.126483901 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06794234 seconds)
    (4/4) benchmarking "different"...
    done (took 0.067539834 seconds)
  done (took 1.566745351 seconds)
done (took 9.534523362 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.165118825 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.859866521 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.872586097 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.147989833 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.27265385 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.328968052 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.126751709 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.21000859 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.115376552 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.078807673 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149922778 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.081542253 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.485948923 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.479534144 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.074616504 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.174361922 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.651683402 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088653001 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134594459 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.478772978 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.080214926 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.08909104 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08636773 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072619893 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.32590447 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154442574 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.678605246 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097951152 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.071740084 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.201089776 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.074035965 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.081420151 seconds)
  done (took 11.264727833 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.115590848 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.115535393 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.072297649 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.127699308 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095836323 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.073250232 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.078605137 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.071007203 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.093570953 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.129391701 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092102764 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.126769185 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.07103203 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.072647861 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.100706168 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.201355882 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082284687 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.085267801 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.070834585 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.084901331 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.110225109 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080219979 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.082407718 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.08172872 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133588444 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.170402367 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098548213 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099806432 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.069795756 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.082443695 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118790217 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126449105 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068328829 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067103724 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.127935421 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09752304 seconds)
  done (took 4.853347889 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.895884991 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.099319907 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.11221322 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.1032585 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.11076504 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114887798 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.148860455 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.127152533 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.104494329 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072463213 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.189429334 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.682786258 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.230121755 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.073041425 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.146527044 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.36662569 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.11162946 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071493606 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.071191666 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.10053984 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073695431 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.139505288 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068713116 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.181630007 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.61145947 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.073948992 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072610161 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099981282 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.186450732 seconds)
    (29/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.146150652 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.147390969 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.09892231 seconds)
    (32/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.068803625 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073530504 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.583004948 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.070191749 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.068265361 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.092862279 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.097798215 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069953141 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.07121453 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.082617593 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069614459 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112950301 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083905428 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.529847168 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.07358717 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.622148032 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.319262213 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.077379209 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.075588141 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.105660146 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067992879 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071266113 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.931290278 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.146637396 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.069862952 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.278615292 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069413367 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.071173647 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.072105906 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.103208124 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070319576 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071849944 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.076327504 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099966153 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.797451894 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.150913888 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099421343 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067780842 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.40280511 seconds)
    (71/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.068222036 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075456206 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071697941 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071971962 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.09686095 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.134147129 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068946418 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068703875 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.11124536 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.225657766 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.095630494 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.074154499 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072228749 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070057525 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.680170059 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.189658087 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068901523 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071273991 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.497364906 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.067825506 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069923438 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07203645 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.094561467 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.071434233 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.067349401 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.068241281 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103069417 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071676021 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.337392072 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.071004868 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.510293596 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.073896495 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.108252019 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.12234298 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.072243663 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.108010454 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.074984675 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.068934593 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.078152349 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.070064949 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.068236198 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.073406158 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.069261281 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.070154361 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.068130786 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072549715 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071965608 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070978949 seconds)
  done (took 24.268175308 seconds)
done (took 42.531075721 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.406985462 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.083342121 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.083522754 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.083495723 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.083550054 seconds)
  done (took 2.039135988 seconds)
done (took 3.449172648 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.385450057 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.079193039 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.067366142 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.212500247 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.092753218 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.182141298 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.226035703 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.163962543 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.093371938 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.092845833 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.092692089 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.226919559 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.236589821 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.092973322 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.163714642 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.237896461 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.093305826 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.067234155 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.092452113 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.092662947 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.095675409 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.067483864 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.092964128 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.092557343 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162799232 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.091723949 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066858566 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.162179131 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091788065 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.161388151 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.090323665 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.089673847 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091193745 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.162766542 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.090980083 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.160508494 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066984679 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.090175446 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.090077207 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.090345425 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.089908563 seconds)
  done (took 6.534487021 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076599604 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.086769659 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08851699 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.065408396 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075004015 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.086213586 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06531119 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085650678 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092567206 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085985235 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085699352 seconds)
  done (took 2.281325231 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071885271 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.086607001 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.088127015 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064917674 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07599708 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.086959106 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06804087 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.086462834 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089612785 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086778423 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.087550127 seconds)
  done (took 2.230338858 seconds)
done (took 12.37314082 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.191939906 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.091634666 seconds)
  done (took 1.602313246 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.266848777 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.53184034 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.993098988 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.118921069 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.098069644 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.111119385 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.223089247 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.092586404 seconds)
  done (took 7.948171915 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.100332307 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069524883 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072444402 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.101417614 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.071272759 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.071063252 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.072329895 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.072144839 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.07247235 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.07078897 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.072471902 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072680246 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.071495319 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.070763007 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.073213619 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.071588327 seconds)
  done (took 2.654229512 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.106552319 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.072683576 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.103732851 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.06488076 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.07555163 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.065724501 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.074298061 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.076328093 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.073664472 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.074081327 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.075858771 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.074095649 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.074643031 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.075047478 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.07593029 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.076828712 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.076327284 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.074812409 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.076756285 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.078088203 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.076056351 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.076942633 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.077079488 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.075401244 seconds)
  done (took 3.308748177 seconds)
done (took 16.857186679 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177563101 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.07880792 seconds)
  done (took 1.58675995 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.094602147 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.094861569 seconds)
  done (took 1.539670405 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074267041 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061894122 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.081327341 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.073498023 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.064415087 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063805298 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.080779232 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.064240228 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.064111427 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.064556839 seconds)
  done (took 2.046246851 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063932469 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069613311 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067802546 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.067262531 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069984853 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.065191514 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.068239763 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065626741 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.07184885 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.06434907 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068462193 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.086836401 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.068380748 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.087352129 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.068349876 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068926273 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.070899055 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.068606574 seconds)
  done (took 2.613659663 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06218229 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062847349 seconds)
  done (took 1.485584816 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065507513 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062932514 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065452887 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06509302 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.064178775 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.064083612 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064817907 seconds)
  done (took 1.805644016 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.427767189 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.189891896 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.431795567 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.072285125 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.081043567 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.264309856 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.067390123 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.072277258 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.072196706 seconds)
  done (took 3.077895823 seconds)
done (took 15.525147647 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083909681 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.184488231 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.116881451 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.421140639 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.095485285 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.070817687 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.116331195 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.208968557 seconds)
done (took 2.686878035 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.262444488 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.193118962 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.321587849 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.155434097 seconds)
  done (took 3.036420539 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.396582834 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.172606225 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078273749 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.069886443 seconds)
  done (took 2.092714864 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066016141 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073539295 seconds)
  done (took 1.514167799 seconds)
done (took 8.295025107 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072371225 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062349535 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.067614146 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.096215191 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06660754 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.066395992 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065733703 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.065524704 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066491796 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064336784 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.066990753 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.067048927 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066801666 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.064733351 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066585694 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066384221 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.064267674 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066705043 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066340769 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066969456 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066746405 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067288746 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06606156 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066587521 seconds)
  done (took 3.022439018 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080631079 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066836463 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.069172363 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.069218989 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.070341401 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.070105692 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.070266922 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068910211 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.07054747 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.068844267 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0705454 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.070326631 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.068742633 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.070559292 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068834303 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.07054402 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.070353481 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069115931 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068597275 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070484311 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.070102531 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06919011 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.070618717 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070308163 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.070719985 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070798881 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.068806626 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.069505979 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070350752 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.070919177 seconds)
  done (took 3.489313809 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067336885 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061899683 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.0628124 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.073125786 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062597573 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062938269 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.063214239 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.062350987 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.063029534 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063917983 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063624276 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062376227 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063929117 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062701972 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062690097 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.063340159 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.068485475 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.082873462 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062995466 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062699076 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.067745475 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.063373058 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062651833 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062693 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063590504 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062739564 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062814468 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.063518582 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.063070959 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063677818 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.063406023 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.067912021 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.068787296 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.063018312 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.073755811 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.068190852 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.063084493 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.069951229 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063821585 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.063015077 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062776325 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062847958 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062947816 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.063002134 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.073796008 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.063427214 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.064096003 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063356022 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.066080669 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062930502 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062968002 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064898782 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069008977 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.064490454 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062822671 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.064101888 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062376873 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063521251 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.063061581 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.063204172 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.063157407 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066934856 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064616909 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063665046 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.084021611 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.064548464 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.074241446 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.063148639 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063608525 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.067391017 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.063289202 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.081815567 seconds)
  done (took 6.08437363 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072459392 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.073484541 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.082479506 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.073854445 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067168172 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063546688 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067367331 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06408673 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073835451 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067895747 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06375422 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067186153 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073634133 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067796037 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065402238 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.073616325 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067856614 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067227032 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.064362271 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068036565 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065349383 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067712772 seconds)
  done (took 2.914502922 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.140529662 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069124376 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.109387117 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.073590048 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072386065 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.073995342 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069493061 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069660525 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069907747 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070276688 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070278884 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069738987 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072121159 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07071346 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070180442 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069829528 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069716745 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070084091 seconds)
  done (took 2.764296493 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078119256 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067841845 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.092814153 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06893579 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068946738 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068775799 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.07285147 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.073217113 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.069138225 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.069163324 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.073467343 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068901234 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.069312703 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069162 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06971952 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070588453 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068695773 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069629342 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.073500858 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072990235 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.07313284 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.073545654 seconds)
  done (took 2.968194555 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078484533 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067646411 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.083775275 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.070094167 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063186926 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063529319 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.069807814 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06815174 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.069564693 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.067847153 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068881014 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063264747 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.07058892 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069079802 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.07054873 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06854062 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067975588 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06827569 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067952538 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06311864 seconds)
  done (took 2.767617614 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098980243 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065346459 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065796621 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070908292 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065846637 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.066601459 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071947864 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.077538884 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066282863 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.088776166 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.066155974 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066160814 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071711369 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070053764 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06616624 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071821165 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071335694 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071442704 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065792968 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065550915 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087862338 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065758988 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071086085 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065933291 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065882117 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065665194 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065809686 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069253766 seconds)
  done (took 3.369162098 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065520775 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066046148 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.0665824 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.066398256 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.066030923 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.066089669 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066494867 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.069695693 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066096258 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066548404 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066439689 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.066313611 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.0669385 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06667718 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066149714 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.066238398 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066185957 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06735551 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067268771 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0674703 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.066996175 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067192899 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.067331401 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067049993 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067203617 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.067179946 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067275378 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066880954 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066324057 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066846484 seconds)
  done (took 3.402313021 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074398383 seconds)
    (2/2) benchmarking "in"...
    done (took 0.074571973 seconds)
  done (took 1.543561687 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062787013 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080609976 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.062492751 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.075732358 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071381521 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.069330198 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072512058 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072445251 seconds)
  done (took 1.955419464 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.093450785 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.121909892 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064558609 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.065172265 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.09566038 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131958606 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.105807671 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076497795 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079221217 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.067124776 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064798756 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.105730407 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.064180829 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077992851 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065831922 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.074096251 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.072271311 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082984755 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.078093404 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062856447 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.077524684 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065475112 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.063105119 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065406621 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064324376 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071765148 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080868376 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.077368559 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073404692 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.062083302 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.084005145 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062812387 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06422354 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073638866 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.095800759 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.06336421 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.101990846 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063992836 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068460246 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062867726 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.077021092 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.085299513 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.078361464 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.0823216 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.065207378 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065700807 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.063149093 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065278523 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.067607078 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.073503431 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.063121889 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071323052 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062444192 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064974526 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.075050762 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063614075 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068983007 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.073608732 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07785994 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.074699051 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.076714115 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.08016393 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.073010561 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071644251 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064297571 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08414058 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065297958 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.077727714 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079373137 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064575983 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077949284 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062608302 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.062177051 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062676319 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.098538329 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.065025381 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064471628 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06321136 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.063432272 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064691923 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073424716 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068364388 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071244628 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066421266 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079677605 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072919662 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063032353 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069971385 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081592145 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066756571 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063249573 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079944414 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06635928 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061893554 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080665113 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.073028016 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063923938 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063200465 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06655602 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076502486 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063739864 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060691957 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071739232 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063788824 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.231118215 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.070067674 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.073900378 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.064441108 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.075333655 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.068961427 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.065746559 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.062192276 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.06840955 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.064329939 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.062139794 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074075612 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.063344905 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07871026 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.070389555 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.079045371 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.079345355 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.074660051 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.080186376 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.063288188 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.062247798 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.085636557 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.073383778 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.064791447 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081986918 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063145621 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074652991 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062977378 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.064556778 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073673599 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062379912 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065494263 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062960192 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068275925 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064743888 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065019243 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.069427356 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.072874115 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.076057761 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064394342 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072758834 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063825364 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079674361 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073926992 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.068888662 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066834717 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064070877 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.076345206 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.071117689 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073584213 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.063187904 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064451537 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063459357 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.075249949 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074075764 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065440272 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.07111557 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.069152474 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.064280322 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063871908 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064515951 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.067831414 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066908527 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064139082 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071921828 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.073176231 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.078067712 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070857607 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.073170716 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062388818 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.063070407 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06505475 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.06293805 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.068639396 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.073546193 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079826789 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075920363 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.085492348 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063715602 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07395203 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06518019 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.081272474 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.077471852 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064717669 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068530552 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062227404 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064971617 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.073060914 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075272634 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07757197 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078892638 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.068414212 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.06824956 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06276787 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078670197 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063373952 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072160286 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072707836 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067537889 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062817274 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064494576 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072571865 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067607177 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062561028 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.07869951 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068068108 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061900985 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077172653 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062593295 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073497093 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061538843 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066288785 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068225293 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063857417 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072193094 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.222463041 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.06361164 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.065283645 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.081283174 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065849065 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065571129 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.073402361 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.080027584 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.069178687 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.072763389 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075126695 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.074834806 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.069211008 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07448987 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.064310725 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.073791335 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066845864 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.075800125 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.063245439 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081805352 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.06227481 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.079176906 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063276525 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.075169568 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.064137298 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07372578 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.064600274 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.081755518 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06540888 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.064161617 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.076294908 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.062054189 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.07319552 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.062982365 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.068881247 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.070812927 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.073431616 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.065705756 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073789475 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.064947696 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072963906 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.068740437 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072002514 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073356894 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.06863807 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062912766 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072627153 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075491566 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072763056 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064792229 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064825388 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.064016322 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.074175048 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06518128 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064886777 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072418217 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06898465 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069955384 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065219599 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06578197 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065438328 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073143081 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073903195 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082245809 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075844885 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071789631 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.074112371 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062658953 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079653177 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063827457 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071888988 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062455938 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069396243 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.073543013 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063372375 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083278854 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064744456 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.072289366 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076738219 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072843178 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067477126 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.082418035 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.067064918 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072478014 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.072333174 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068540244 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.070526316 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065333727 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072567576 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073849503 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074818442 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064354591 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.071309753 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072760425 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065131017 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071130462 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064918216 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.072234958 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065442592 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062232194 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.068401761 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075665993 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068743679 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068719781 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063050237 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061806411 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062826212 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068656135 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067263897 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071590438 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07815591 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061159875 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06294955 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061586874 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066355495 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080433765 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072883329 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.219035482 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.070111274 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.063236928 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.065726372 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.066180964 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064355817 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.067202422 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062882531 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063170002 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075078446 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065253397 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.068604718 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063857819 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064671433 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073964653 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068626606 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064150655 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.070544263 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063240639 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068992434 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062390664 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064529584 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.068470363 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062654291 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.067411881 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.074416865 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.080676381 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.070908524 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.073127264 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064332368 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.07189646 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.079752548 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070407455 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064236424 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.073813771 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062320226 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.083307552 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.073817381 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072536164 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073894341 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.064460365 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.080910128 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.068617453 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.073899418 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079489847 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064397921 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.070382619 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062664178 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079593527 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06848356 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.062764093 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.07232145 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071860607 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.069869234 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.076482367 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.064304191 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.072332451 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068978512 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067702006 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065495614 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065331555 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.073302783 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080709032 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064137928 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067958391 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071898849 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072708951 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.068530533 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076599498 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.072548976 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065082539 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065565563 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.067653728 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064250616 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.076244398 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063966772 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.068786925 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068584603 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.063287749 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.071027238 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081156969 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073959304 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073789722 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.063042752 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.063145333 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.082549258 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.067815444 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.067359225 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072732481 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.07418222 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077385505 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073833432 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.081057986 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064005052 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.070012232 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076447866 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064353061 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063544073 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067754033 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065207656 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.073044727 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073804761 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.07164278 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065501205 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070853891 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.079922277 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064042241 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067686762 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06673881 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062964803 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073114435 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070997215 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071596816 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06317604 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061688148 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066545057 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071457817 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070660372 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071624781 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062916195 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068444169 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076498761 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070694516 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065121237 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061558119 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065004378 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071943232 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.0663999 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061820609 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06749514 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066445313 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068591773 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072634875 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067260013 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061802179 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079766423 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.07070417 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071963314 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063905927 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06388976 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062978891 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061792465 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074048087 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.06190026 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063908358 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067472591 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063759348 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080194698 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071582252 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078429538 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063128772 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067319982 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061947459 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072576181 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06751978 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062794687 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072931562 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061608324 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07699998 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073332954 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06599275 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059495327 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06510588 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069314325 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076486367 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071335614 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070403486 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064494892 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070850802 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062728777 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070346444 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059038701 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058805271 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069601906 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068821127 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072746742 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.05952759 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070166005 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061958464 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068592878 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068137061 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061003517 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061278743 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061425084 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069856287 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065927363 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071037388 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066641202 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.078862759 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.062307257 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073222311 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.07133501 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072826976 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07675849 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073900983 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069529646 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062222538 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069571916 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069758829 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062548767 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066147329 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063732105 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080915769 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06250102 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061914912 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074709533 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.064821794 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059994828 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.064734275 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.064968831 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070716234 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061075608 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070460005 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.062926932 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060275787 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064836539 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066452225 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061215079 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062486859 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062606273 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072336947 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.06678807 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061859136 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082010312 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063036187 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070072627 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072879701 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068492305 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062122311 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058577545 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060456216 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.327644473 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.082656387 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.070178489 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075444476 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.067754103 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.077347728 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.065601401 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.077397991 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.076059177 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076746343 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.066234785 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066561627 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.082976279 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082657849 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.071208275 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.075626168 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.075562564 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.066842833 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08890644 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.075521038 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066845321 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.077767068 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067935093 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.065128907 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06454424 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.067199092 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.077516598 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.064754026 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.067434486 seconds)
  done (took 43.862041216 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102870223 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064375717 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063364672 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.066696132 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074043167 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066448124 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065903625 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.066224682 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066368692 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.067709913 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065440202 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065444406 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072365325 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.079681653 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074168498 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069110424 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0651332 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065851297 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06505139 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065505221 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071507645 seconds)
  done (took 3.014741938 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066010239 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066460175 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068241075 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06881729 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067883995 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.064173488 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.068738599 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06485968 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069198337 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064811702 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.068978656 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06444757 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064970531 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.064738039 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064824703 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066157741 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.069202025 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068031535 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.064342322 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068634302 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06638231 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06887785 seconds)
  done (took 2.99185121 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064034571 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062911748 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.07318969 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.063215152 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.063377092 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.067217402 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.063486315 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.069430648 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.069000754 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.069243438 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.073858875 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.064878092 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.063783982 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.071286452 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.063773143 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.065038446 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.109493602 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.065391234 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.065427608 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.063991685 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.067091293 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.074452629 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.063927582 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.064226655 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.069185084 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.067557404 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.064032845 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.066909554 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.064888621 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.069072882 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.065399844 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.063817768 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.07472876 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.073857136 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.069712688 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.069675575 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.0660252 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.065093839 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.064008306 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063955614 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.073655341 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.0656124 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.064132555 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.065722803 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.073990345 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.064037607 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.063582326 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.074335819 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.063584476 seconds)
  done (took 4.854350865 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072768365 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.118908305 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.070363349 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.099036456 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.077684701 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.070040778 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.070398775 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.099638231 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064680197 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.065528555 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.078812428 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.078729215 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066835482 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.068087086 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.070288827 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067200278 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067715128 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.066346554 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069668905 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066815317 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.06977078 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.072175989 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.077811765 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.078295451 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068075753 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.066255795 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066806677 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.068110653 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.078019503 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.070054263 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.068010063 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068829083 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.078283978 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.071973555 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066317419 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.0664007 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.078531815 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.06716997 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.066768075 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.065891603 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.066126832 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067712167 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.071272183 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.078794958 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066685581 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.072511674 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067270845 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.064930485 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.078088821 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066567444 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.070654105 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.0795685 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.068272256 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.070532651 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.068346386 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.078473307 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.067156904 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.065744739 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.067190148 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.078009307 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.065066757 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067645475 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.07882884 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.066552398 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.070386411 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.079063449 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.072357242 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.068209359 seconds)
  done (took 6.579186871 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070994022 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098159274 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07775871 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.078510798 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075190711 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.075431714 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.075163107 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074958028 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075498835 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07858444 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075818028 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.138808182 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.072042606 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077243861 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075361293 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.075646886 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.075374427 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074925854 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07490683 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075211145 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.075322347 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.080656712 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.075295527 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.08113599 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077621584 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.071481532 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.074835834 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075211919 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.080521369 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.075260916 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.077580827 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.075308099 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075649466 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.080914222 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.077474462 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07499669 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064549054 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074944483 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.075269238 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.075456145 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.071659549 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.080843617 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.075192632 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.071445249 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075524803 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075261381 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.080897898 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.077843342 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077340147 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.078686378 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.075548618 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.080844512 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074850014 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.075521522 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.080754488 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.08326119 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08110853 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.080716119 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075406585 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.080869435 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.081103028 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.082644844 seconds)
  done (took 6.400801875 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075310607 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068383398 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081537678 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06216756 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062338353 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07414997 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063864026 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063567929 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070835561 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070697066 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072814847 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073980014 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075992648 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072721313 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.073876786 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075880259 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.074356478 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.073825284 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071158576 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.074088778 seconds)
  done (took 2.997920817 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077729268 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081881628 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.069896243 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073964659 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.069604626 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.074008044 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.069464259 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070074767 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070423686 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070092324 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074913961 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.075056636 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070036883 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.07388806 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.074960937 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.074091107 seconds)
  done (took 2.71498664 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066024662 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070752629 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.097945753 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.065328527 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.067069704 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.064354488 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.065286062 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063534442 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.066688821 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.079251887 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064683185 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.067472542 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.065287763 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063980146 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.064484733 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067520905 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.066511731 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.065015681 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.065072096 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.09847139 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.07430117 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.0660108 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067545733 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064586427 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.067406184 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.073836799 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.066336636 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.067097825 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.064586253 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.0674793 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.067028107 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071869153 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.067041626 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.065223337 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.067070836 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064608125 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.065075433 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.068000374 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067316801 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064937072 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063506576 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066753683 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.065038726 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06538436 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.067017135 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.067112393 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.066171728 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.071009498 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064774603 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.067303641 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.065161123 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.066442614 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.065334148 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071605661 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066862443 seconds)
  done (took 5.287431169 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079601867 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067583376 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061676225 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061637092 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067565953 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069100185 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069430556 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069473865 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069999326 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063316226 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069982942 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068852027 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.07006421 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069636728 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070277037 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069722585 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063967853 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069979882 seconds)
  done (took 2.80192956 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067863819 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067874466 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066351834 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.065135453 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.065283684 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070575544 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063792812 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.065284024 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064986922 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06600277 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065539324 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065498364 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06528028 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.065327351 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070363532 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065679787 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.065154722 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063617808 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065406682 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063361025 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.070425358 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063734555 seconds)
  done (took 3.007514103 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.118514932 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.087546884 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.16311783 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.083810278 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.092762094 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.075879399 seconds)
  done (took 2.177812443 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095209927 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.100494045 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068631158 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068572767 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073915171 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072299136 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072161739 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072418341 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075691261 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076212616 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072298653 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076368522 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07584966 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077905382 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07412517 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074132401 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072306562 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072217939 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069304819 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080403877 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072232263 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076224638 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072598935 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072322801 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072494086 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078257476 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07575733 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076489019 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072399977 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076454525 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074420257 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072546709 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07604289 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076342388 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069536964 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075880343 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072496698 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080551314 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074504714 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078194584 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06948036 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074780678 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076414631 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076410588 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076494484 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073341188 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076190267 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072968352 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073269134 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082281922 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074076728 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077572506 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074849965 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076971253 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076813045 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08280591 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076990108 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078858212 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074907381 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077087273 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.079079997 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074877697 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078441291 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077031794 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074825383 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078408239 seconds)
  done (took 6.566544875 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106015438 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067899884 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074058266 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075721388 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078285207 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072710579 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072876231 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072674533 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072837973 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069705233 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.109700898 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073504575 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07837337 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077009876 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070697863 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070543854 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071349639 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075605534 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068251804 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079478977 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070246245 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076614219 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077099809 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076398668 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075214572 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072783119 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071530695 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072680449 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072629327 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072546698 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075918951 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072674791 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078190158 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.069677092 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078226671 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072843502 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072652209 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075986851 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072693507 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074863675 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078618862 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081166576 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072607806 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072431281 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076772336 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072833732 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072911539 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070381927 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07269775 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070254327 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076411136 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076956938 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077053652 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078757589 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073016773 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073234702 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073198233 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073244388 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073486996 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075035319 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078738044 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073168751 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082295464 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073121947 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073004551 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078620017 seconds)
  done (took 6.553706001 seconds)
done (took 135.467970162 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.236133945 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.201360407 seconds)
  done (took 1.981288993 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.07584606 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.195996908 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076129461 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.077437043 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.112165105 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.109063753 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.105856466 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.075116134 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.078048549 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.075174256 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.142937625 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.105663366 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073493852 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.074815443 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.097745428 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.075332369 seconds)
  done (took 3.115441681 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109633036 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.217345035 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.085578113 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.073057421 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.156649895 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080523049 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075462393 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.080307429 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.080672496 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.073445913 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.111600814 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.087296312 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.079128047 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.080276781 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.075068197 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.078620829 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.080059361 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.080109877 seconds)
  done (took 3.281833115 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104247911 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.094083054 seconds)
  done (took 1.777178019 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.163458593 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107820131 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.148056815 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.351014387 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.143307401 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.147324272 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.146991213 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.14072494 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.118505683 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.136718292 seconds)
  done (took 3.171430198 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107022579 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.108827582 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.31751089 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.106658841 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.08627171 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.081059896 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078614614 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.08348772 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.078505337 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079698095 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.12674516 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.078666903 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.075401514 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.128667233 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.103472285 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.111000018 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.074046276 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.08162588 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.083230317 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073812459 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.079016902 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.083568793 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.419187657 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.082036976 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.104824461 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07872954 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.079670778 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077325455 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077704556 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.081475894 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082460732 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.102360502 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.081524647 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085837293 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.080039567 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.100741929 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074886208 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102308868 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077416731 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.075531323 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.078233422 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081926368 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.075023081 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.081836628 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.081111756 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.081030143 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.083935376 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073923931 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.078414121 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077750218 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.075463267 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079237336 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07912674 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.080309002 seconds)
  done (took 6.785381595 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.121665939 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.113883091 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07326849 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.121784761 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.113723205 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.073346769 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.126854046 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.108809551 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.127712314 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.073135368 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072419229 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072134797 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.08055928 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.084403833 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.123238358 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.114256758 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.074997041 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.073327271 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.11565041 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.116134166 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072035047 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.11224859 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.117904747 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.115143309 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.071736368 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.073035641 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071598067 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071980993 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.080436473 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.079361971 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072277101 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.082760337 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.087853753 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077046472 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071352767 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071719723 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071645557 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.079071908 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081517965 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.081838821 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077601839 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071192204 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071602037 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072147531 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072540421 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070888006 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.081724134 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.079139927 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.081634848 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071994233 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072688676 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071723606 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072388228 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.079184184 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.078392106 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080867702 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.083019603 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071776678 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071935387 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073565299 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.083836898 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080531472 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.080889058 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073423278 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.08170228 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.072540572 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083354808 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.086441961 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.072255761 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07231453 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071956498 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071807757 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.07258741 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.078047415 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.078645945 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07281649 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072239562 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071751891 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080248048 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078178016 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071933364 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.080229268 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071706578 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072168599 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072111374 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07206991 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.080411705 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079433223 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072689357 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071372018 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.072087975 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07207454 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070690641 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.079414494 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077686598 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.21645609 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.082356375 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072956464 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.08218649 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.079023674 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072796676 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.078333184 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071749578 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07272508 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072222101 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.078873419 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.078207205 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080577323 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.072112132 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071609901 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.079196349 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081154977 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.072190974 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.078419674 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080693354 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.079139677 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.072061534 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082047466 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071442271 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081234699 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071889129 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081072645 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072874556 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078462616 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072645314 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.071048268 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071598718 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.081619771 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072423209 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071697175 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072289116 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072484087 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.079125663 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.08548164 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.073168393 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078931021 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.079113021 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07257978 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.081244954 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071960193 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081366563 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072492127 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072479563 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071201595 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08450944 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072289541 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.072051278 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071917945 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.084573905 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072741978 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080559985 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.078407708 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071645774 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083106076 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.081096373 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.079026334 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.081920319 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073155908 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.07240434 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071798994 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072149505 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.080896896 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.082895043 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072909816 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071842885 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.078015951 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081376317 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071850852 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.078367371 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078534688 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.078683189 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072600247 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.072232821 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082133204 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081076421 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076649479 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080489278 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079574709 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.072442011 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078160927 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.081558718 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072231006 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084439101 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072087742 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.083139951 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.081974535 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077677147 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.082079692 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.08271337 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080034897 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.080513866 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.224682575 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.072774853 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.072109986 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.078614233 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.072269383 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071955392 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.078161183 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072374356 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072545851 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.084519617 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070581639 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.081983128 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.07166887 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.079259735 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071646834 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072446982 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08387138 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.072332328 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072290807 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077648169 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071329778 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.07803105 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082371876 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.077720679 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072084313 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07234915 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.081663667 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.081392975 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071984932 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071495515 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07226888 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.080730258 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.081270162 seconds)
  done (took 19.558882037 seconds)
done (took 41.267776744 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.174230902 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.119624804 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.217703967 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.205444995 seconds)
  done (took 2.391830458 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101339122 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067524593 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.113363049 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.123918977 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.068406491 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.108515197 seconds)
  done (took 2.203755396 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201674308 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.18166385 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.249223409 seconds)
  done (took 2.24767316 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.375479391 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.156341579 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.223300818 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.515064771 seconds)
  done (took 2.989097266 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.141456289 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.134992403 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.081522728 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.146203444 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.089532347 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.065141838 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.136433698 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.072648173 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.104193892 seconds)
  done (took 2.655258996 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.144718147 seconds)
done (took 14.253531276 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.126714663 seconds)
    (2/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.108754298 seconds)
    (3/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.1677142 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.344328146 seconds)
    (5/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.323411111 seconds)
    (6/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.326844838 seconds)
    (7/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.198444789 seconds)
    (8/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.069411736 seconds)
    (9/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.330048762 seconds)
    (10/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.129485406 seconds)
    (11/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09710933 seconds)
    (12/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.224697325 seconds)
    (13/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.081173766 seconds)
    (14/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.150771611 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.129636475 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.079582894 seconds)
    (17/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.292422 seconds)
    (18/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.192790363 seconds)
    (19/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.069876974 seconds)
    (20/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.319164549 seconds)
    (21/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.100740939 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.081075688 seconds)
    (23/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.281706533 seconds)
    (24/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.171514516 seconds)
    (25/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.227420443 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081694848 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.1919906 seconds)
    (28/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.342690333 seconds)
    (29/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.076447948 seconds)
    (30/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.22167473 seconds)
    (31/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.154483915 seconds)
    (32/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.098091092 seconds)
    (33/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.303646321 seconds)
    (34/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077891589 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.077480716 seconds)
    (36/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.077442296 seconds)
    (37/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.113653351 seconds)
    (38/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092771694 seconds)
    (39/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.21111618 seconds)
    (40/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.243940493 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.210822046 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.101050856 seconds)
    (43/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.231243182 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.094502399 seconds)
    (45/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.224364785 seconds)
    (46/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.131924363 seconds)
    (47/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.081978383 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.081955109 seconds)
    (49/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.226419497 seconds)
    (50/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.305228375 seconds)
    (51/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.0690364 seconds)
    (52/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.067210358 seconds)
    (53/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.258711747 seconds)
    (54/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.081438568 seconds)
    (55/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.19466072 seconds)
    (56/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.068799625 seconds)
    (57/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.390451839 seconds)
    (58/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.082395585 seconds)
    (59/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.205637165 seconds)
    (60/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.087875091 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.091361899 seconds)
    (62/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.173339969 seconds)
    (63/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.074844087 seconds)
    (64/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.071270128 seconds)
    (65/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.082408417 seconds)
    (66/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.080333158 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078479529 seconds)
    (68/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.187855181 seconds)
    (69/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.090516114 seconds)
    (70/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.21566952 seconds)
    (71/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.17904944 seconds)
    (72/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.077972419 seconds)
    (73/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.068728963 seconds)
    (74/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.212967517 seconds)
    (75/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.069692321 seconds)
    (76/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.07993928 seconds)
    (77/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.175432866 seconds)
    (78/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.134769278 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.131669053 seconds)
    (80/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.086617636 seconds)
    (81/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.069389722 seconds)
    (82/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.076574622 seconds)
    (83/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.069197885 seconds)
    (84/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.077079078 seconds)
    (85/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.069158498 seconds)
    (86/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.068695355 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.069591451 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076780768 seconds)
    (89/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.171231179 seconds)
    (90/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.069120838 seconds)
    (91/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.073666661 seconds)
    (92/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.150738588 seconds)
    (93/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.082966907 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.152662324 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.092796486 seconds)
    (96/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.080906616 seconds)
    (97/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.163514733 seconds)
    (98/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.089238331 seconds)
    (99/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069508424 seconds)
    (100/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.068043296 seconds)
    (101/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.19114144 seconds)
    (102/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.151078462 seconds)
    (103/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.076856773 seconds)
    (104/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.153451248 seconds)
    (105/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.15997537 seconds)
    (106/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.099296305 seconds)
    (107/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.068802261 seconds)
    (108/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.169387876 seconds)
    (109/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.070630868 seconds)
    (110/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.070593374 seconds)
    (111/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.080336362 seconds)
    (112/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.080039963 seconds)
    (113/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.170113505 seconds)
    (114/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.162832188 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.076555778 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.09235195 seconds)
    (117/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.077199793 seconds)
    (118/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.076935828 seconds)
    (119/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.077340026 seconds)
    (120/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.069353328 seconds)
    (121/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.069752068 seconds)
    (122/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.080872396 seconds)
    (123/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.077226232 seconds)
    (124/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.07183963 seconds)
    (125/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.205508152 seconds)
    (126/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.088315707 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.087175152 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.074135509 seconds)
    (129/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.172237383 seconds)
    (130/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.208066183 seconds)
    (131/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.068940217 seconds)
    (132/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.068631804 seconds)
    (133/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.171063446 seconds)
    (134/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.070948037 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.121452202 seconds)
    (136/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.206081332 seconds)
    (137/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.202781763 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06918005 seconds)
    (139/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.07085828 seconds)
    (140/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.068583097 seconds)
    (141/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075783037 seconds)
    (142/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074543124 seconds)
    (143/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.077241969 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076089944 seconds)
    (145/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.069133165 seconds)
    (146/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.151317264 seconds)
    (147/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.090457759 seconds)
    (148/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.068749158 seconds)
    (149/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067952933 seconds)
    (150/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075333501 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075827947 seconds)
    (152/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.244914987 seconds)
    (153/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.092447231 seconds)
    (154/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.097095092 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.079352592 seconds)
    (156/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.231194798 seconds)
    (157/341) benchmarking ("sort", Int8, false)...
    done (took 0.154114805 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068688589 seconds)
    (159/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.070193081 seconds)
    (160/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.068869898 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119645926 seconds)
    (162/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.085964677 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.190595254 seconds)
    (164/341) benchmarking ("sort", Bool, false)...
    done (took 0.148791891 seconds)
    (165/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.078453983 seconds)
    (166/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.235916785 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.153168003 seconds)
    (168/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.087391237 seconds)
    (169/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069457144 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.068094052 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.084076288 seconds)
    (172/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.083031256 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.091441053 seconds)
    (174/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.067263832 seconds)
    (175/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075700639 seconds)
    (176/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.078440779 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 0.070043036 seconds)
    (178/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.236616455 seconds)
    (179/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.139287539 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.084752668 seconds)
    (181/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156574553 seconds)
    (182/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072981575 seconds)
    (183/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.21156573 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.100034089 seconds)
    (185/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.163896805 seconds)
    (186/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083982065 seconds)
    (187/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.145360375 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.068759876 seconds)
    (189/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.077189801 seconds)
    (190/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.069764063 seconds)
    (191/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.088368038 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.106672763 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.096306258 seconds)
    (194/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078058689 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.089222075 seconds)
    (196/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08978925 seconds)
    (197/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.073709275 seconds)
    (198/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.087568754 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066897783 seconds)
    (200/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.074411883 seconds)
    (201/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.076650721 seconds)
    (202/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078145596 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.256474295 seconds)
    (204/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.073518365 seconds)
    (205/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.07064375 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150945066 seconds)
    (207/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.08809798 seconds)
    (208/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.151528407 seconds)
    (209/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068547036 seconds)
    (210/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080708674 seconds)
    (211/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.077295928 seconds)
    (212/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.072635653 seconds)
    (213/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067147112 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069120433 seconds)
    (215/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.069013523 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066752772 seconds)
    (217/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.076042386 seconds)
    (218/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.069125789 seconds)
    (219/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068464039 seconds)
    (220/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069367167 seconds)
    (221/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.07949512 seconds)
    (222/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.075952494 seconds)
    (223/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076730489 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068688985 seconds)
    (225/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.079199752 seconds)
    (226/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.068465451 seconds)
    (227/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.075908447 seconds)
    (228/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075599603 seconds)
    (229/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.068838656 seconds)
    (230/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070713415 seconds)
    (231/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075712627 seconds)
    (232/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126616982 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.146809676 seconds)
    (234/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.068769497 seconds)
    (235/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.150579051 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071098186 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.068658915 seconds)
    (238/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.217801771 seconds)
    (239/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067158335 seconds)
    (240/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.214291076 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.094903006 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067888627 seconds)
    (243/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067367168 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116914832 seconds)
    (245/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.067100036 seconds)
    (246/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.06796393 seconds)
    (247/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.156464477 seconds)
    (248/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.070386389 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079598832 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.078212281 seconds)
    (251/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.068317356 seconds)
    (252/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.072490347 seconds)
    (253/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080860903 seconds)
    (254/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.075594631 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.249618407 seconds)
    (256/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.071456232 seconds)
    (257/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.07173251 seconds)
    (258/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.08083978 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.078240557 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.075306758 seconds)
    (261/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.092265209 seconds)
    (262/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.077049966 seconds)
    (263/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.070804507 seconds)
    (264/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.212347594 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.068587311 seconds)
    (266/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.069780197 seconds)
    (267/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.067880771 seconds)
    (268/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.069591363 seconds)
    (269/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.069683962 seconds)
    (270/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068955175 seconds)
    (271/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.068984989 seconds)
    (272/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.070282115 seconds)
    (273/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.072431869 seconds)
    (274/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073891039 seconds)
    (275/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.069311452 seconds)
    (276/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.068301479 seconds)
    (277/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.070757716 seconds)
    (278/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.070944327 seconds)
    (279/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.073897556 seconds)
    (280/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.068351118 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.068058977 seconds)
    (282/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.069165154 seconds)
    (283/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.15820609 seconds)
    (284/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.071580571 seconds)
    (285/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.187759915 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.067464844 seconds)
    (287/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.212683267 seconds)
    (288/341) benchmarking ("sort", BigInt, false)...
    done (took 0.271113808 seconds)
    (289/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.188532457 seconds)
    (290/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.077084676 seconds)
    (291/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069170621 seconds)
    (292/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076892048 seconds)
    (293/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071448337 seconds)
    (294/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.228074947 seconds)
    (295/341) benchmarking ("sort", Float64, false)...
    done (took 0.142149676 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.155204717 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.088923558 seconds)
    (298/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.069201418 seconds)
    (299/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.068969375 seconds)
    (300/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.148600194 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.13752137 seconds)
    (302/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.069259099 seconds)
    (303/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.068789703 seconds)
    (304/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.068665545 seconds)
    (305/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.069095657 seconds)
    (306/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.087310387 seconds)
    (307/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.068664445 seconds)
    (308/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.069283574 seconds)
    (309/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.069371182 seconds)
    (310/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.068969349 seconds)
    (311/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072827349 seconds)
    (312/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.067824382 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.205343863 seconds)
    (314/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.068610836 seconds)
    (315/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.068342827 seconds)
    (316/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.069202199 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.070919862 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.157409448 seconds)
    (319/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.069109277 seconds)
    (320/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.073608657 seconds)
    (321/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.069293013 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080290315 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.068440302 seconds)
    (324/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.0698157 seconds)
    (325/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.068718736 seconds)
    (326/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.068424313 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090948626 seconds)
    (328/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073111431 seconds)
    (329/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06858853 seconds)
    (330/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.083959576 seconds)
    (331/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.066989956 seconds)
    (332/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.06891841 seconds)
    (333/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.068136998 seconds)
    (334/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.070016311 seconds)
    (335/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.069154794 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068471149 seconds)
    (337/341) benchmarking ("sort", Float32, false)...
    done (took 0.141451501 seconds)
    (338/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071894616 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.190691361 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.126958087 seconds)
    (341/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067944279 seconds)
  done (took 40.485673465 seconds)
done (took 42.139632034 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.123878627 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081603877 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080149887 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077004608 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.08054053 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079448068 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.080770877 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079051974 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080187903 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079229199 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.111136788 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.0679853 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076731239 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.083659612 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077197762 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.083923943 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.083746456 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.08354197 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068517096 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082955046 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093378911 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080737698 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077286889 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.082800277 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.068786208 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.077484318 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.124056591 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087367873 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073491233 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.078134493 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076089368 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084609859 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076001234 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.0748982 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078026248 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074097657 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078068327 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.075418461 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.12378055 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072026703 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066436705 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078287689 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07333403 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073970479 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076539683 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078083688 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071532625 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080286505 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066337044 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077999291 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.122596815 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071270805 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.071259426 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076507775 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073447518 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077479909 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072652583 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07999796 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073371484 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080016398 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077324953 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076608009 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068004071 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.076791039 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.0753861 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075812962 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.06682807 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073553912 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067822046 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.067944738 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067332012 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077231982 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075013027 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073421712 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067381448 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.067919202 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067088562 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080298984 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074065962 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07757581 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068412244 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073717769 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.07312844 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068913381 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073854996 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.079603716 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.067440432 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068833335 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067167764 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082988602 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074698381 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068092482 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.079904446 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073042652 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07300419 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068026065 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067442132 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073763999 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076226884 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068161453 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067177169 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073830099 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.0726342 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.0774304 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.068543447 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073039635 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072305365 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065446526 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075357409 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074888257 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.076934597 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081104688 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076748202 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.079648746 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067588441 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066886435 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077222305 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.215665517 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073971637 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076701347 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074024346 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07628761 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.068346548 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066846213 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073593718 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074676322 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068320642 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.068452024 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.069258853 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.077475015 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075223384 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.067102097 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.068024177 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077057038 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07667847 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067043557 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067425051 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.07745552 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.068759991 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074322515 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.07437495 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.07703628 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.067822711 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.068883123 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.066810535 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067324422 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.067262559 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.073813294 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073351262 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067709538 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07548644 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073930266 seconds)
done (took 13.448602056 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067390612 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108326207 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.116122846 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.112266958 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.082231242 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070342395 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073253149 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.088696783 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071793421 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.093858835 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.09475593 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.090750728 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.135811926 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.067881638 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068774894 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069714048 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067578451 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.081215601 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.11876439 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.093168489 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.104464027 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.068297479 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.085146513 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.091966594 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.083019249 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.087006011 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070080084 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.069727575 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.071695371 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.087617425 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095082983 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068330538 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.069746551 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.086960906 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083705316 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.077135204 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06920492 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.074883799 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.06968285 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.068383242 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070990234 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08671588 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.075088933 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.075463323 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.069826405 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.070067871 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068838385 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.076131814 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.086353269 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.074295315 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.081136261 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.088200543 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.07054981 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069005111 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067143125 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.076426267 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068987662 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.069400204 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069358847 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069272956 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069188192 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071710134 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.074382824 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075205845 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072260643 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.075276976 seconds)
  done (took 6.978322129 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083298397 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095161608 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.083448464 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.084048359 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068327807 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069131095 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068949316 seconds)
  done (took 2.309898477 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067945959 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.107378369 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.115632579 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.118300444 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.126371795 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.116861141 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.069780753 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.101955633 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.068350884 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.110711625 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.124926312 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.120284958 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.072252736 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.081478037 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.069322293 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.118561876 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070080662 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077044823 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.114058297 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.118409659 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073158938 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100840334 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083135107 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069840558 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.117880408 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.109955478 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071638937 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070304799 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071865322 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069029858 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06919052 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092280119 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.110972057 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.075815974 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069853161 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068210726 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.108347674 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069895324 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.107683004 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077672929 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.107905198 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.071117474 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.07151147 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068887293 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070324631 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.112306749 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068891984 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.068899744 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06843441 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.112980917 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068228991 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111820438 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071222015 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074292071 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.076254639 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.075463351 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076449947 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069329113 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.112101049 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.077244376 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.070251473 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.121333063 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.117753733 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105584884 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.117610487 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075794611 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.108640918 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106163848 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066645495 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066830537 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067783319 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.119804362 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070321557 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069269011 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071975512 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074955118 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.110840533 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.120341434 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.120423513 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079476861 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06902928 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068657316 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073939279 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.120205562 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071070936 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066683169 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.067390534 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067287427 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072629882 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070464493 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.073357549 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.068262053 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.078603233 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070654528 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070579652 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.117033421 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.068329191 seconds)
  done (took 10.181892579 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.072749462 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.072143818 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.071827807 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.071596161 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.071608202 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.071303516 seconds)
  done (took 2.268294584 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091280758 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069708277 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082085651 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069673893 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.094832638 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.114733861 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.113840595 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072088682 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.086226582 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.080358821 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.113310828 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.115777028 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.116356816 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071839558 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.113830425 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.07024358 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.112749562 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071904553 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.079085766 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071524691 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.082240275 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.071710105 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072224665 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.120169797 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071974306 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.070843975 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070951888 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080374421 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.079890979 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.072017827 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071500337 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.072635255 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.078887085 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.07161638 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.114494404 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07777051 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069028885 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075522402 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072359653 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.072765589 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.117124871 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071987353 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072743774 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075553781 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.07207029 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07909554 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075562649 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073954396 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.114272478 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.074816969 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075809671 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070606661 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.078146225 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07517506 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078345043 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072045752 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075509406 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.11526003 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070794286 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078786531 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.069786318 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073049201 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071718431 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.072666451 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075058226 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.074856862 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078880444 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071952192 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072173161 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069765295 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.07511108 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069875248 seconds)
  done (took 7.635397056 seconds)
done (took 31.125878095 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.544436333 seconds)
  done (took 2.292123044 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.954114096 seconds)
  done (took 2.740303932 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.612990065 seconds)
  done (took 10.407669687 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.336262661 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.415392378 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.744737926 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132752466 seconds)
  done (took 3.454646661 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.751140702 seconds)
  done (took 2.550297819 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231231592 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.22627654 seconds)
  done (took 2.260044889 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.374985324 seconds)
  done (took 2.161657419 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.196649842 seconds)
  done (took 2.98351885 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.232313463 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.168545821 seconds)
  done (took 2.199417062 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.638537482 seconds)
  done (took 2.428414689 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.466393676 seconds)
  done (took 6.265689985 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.242302816 seconds)
  done (took 2.059090493 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230316863 seconds)
  done (took 2.017269174 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.018173413 seconds)
  done (took 3.807180236 seconds)
done (took 49.44626975 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084808997 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.088499485 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.089319419 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.084955872 seconds)
  done (took 2.110878781 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074691503 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071453675 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.078087275 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076409831 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.074258856 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.075849003 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.075698532 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072628714 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074278106 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073053198 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071624864 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.072485936 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.075492815 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.072899757 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.075585699 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076848534 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073231142 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.072699314 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075223051 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.072886284 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.075496089 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073143859 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.07099956 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072649179 seconds)
  done (took 3.566686162 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078964064 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073218669 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076809041 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072789134 seconds)
  done (took 2.102490185 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077173802 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077396268 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087890576 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.092932517 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078353632 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.079104643 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.086667801 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086742713 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067935001 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.09010149 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.070772629 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.069646824 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.069541079 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.088975834 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.086532071 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.064905953 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.066417953 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080098479 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.07914665 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.08204303 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.071289841 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068403954 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.079183489 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080005957 seconds)
  done (took 3.681140835 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082555151 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066339059 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.084613461 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.09303844 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.094906531 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.068222852 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083375878 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.095239792 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.129375293 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066235989 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072389387 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06960563 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105959373 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067073891 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.083478922 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110502819 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115436028 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072556942 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102077227 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068289518 seconds)
  done (took 3.541204278 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078571002 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071209795 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072930835 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067976472 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.079351738 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076076871 seconds)
  done (took 2.258656495 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069290522 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068724562 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067952935 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073087423 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068766382 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069209478 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.069793453 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.071017859 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.0690125 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.069707211 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.069347932 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.069850504 seconds)
  done (took 2.639556272 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.20983802 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.07009172 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070963343 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066615793 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.068705915 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067919748 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082611385 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071313139 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.086661606 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.069300301 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.069240728 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.071924954 seconds)
  done (took 2.802563084 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10487451 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111122513 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144238388 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118362823 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121030458 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099773593 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.166878375 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096767572 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.164410987 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.140010796 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120590998 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096642018 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0893998 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.072110484 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103198156 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120984956 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140539005 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075542606 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11696585 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.209488842 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135200342 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.137279601 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.150716741 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117842538 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0908865 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147877247 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097715211 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102730948 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125488551 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129440881 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123087615 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.10119608 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074176956 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.073706985 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153042699 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.107717129 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123622333 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.095897252 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107878491 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091173235 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111297399 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072143964 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.086438579 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.115247971 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088048179 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133537898 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.090782017 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118264282 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083797386 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138545016 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12380114 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1368914 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08667658 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106809323 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137634677 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11274156 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131600772 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105292428 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083556305 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119784618 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.10355357 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098681793 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107561935 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081568131 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.176766546 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08980496 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.111576168 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110186434 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093253975 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093150981 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104809739 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132477912 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123010325 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.121041106 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133693778 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09350757 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116962772 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097935027 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128399913 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104478445 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074552056 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.119218099 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128779572 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099269464 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102699337 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128344231 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092752022 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078613657 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.099690072 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118683873 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081098639 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.112218286 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080631254 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.110051322 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130867014 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096112413 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108730825 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110501289 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07598063 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.429809072 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.116886511 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079365685 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.125019268 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120181075 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164062271 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101247399 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.08121651 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107297416 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108601815 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.156926952 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113058561 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085174634 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116250986 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14521565 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100744476 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.218245925 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101566021 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.148221003 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120474125 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092435484 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079976381 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.095857276 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117832757 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113113088 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11668743 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094354971 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.088506979 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091373803 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116814963 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096333711 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084686363 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120251341 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103759533 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.078536326 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092674255 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080395908 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147127183 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.081887461 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14217345 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129488082 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079761042 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111314576 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101306871 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113290318 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.101433756 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12107854 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144598006 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117916323 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093480421 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097458289 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112170129 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.149224516 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131072483 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.263586279 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080076241 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105030298 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116402161 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101091539 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128909228 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098572259 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111866547 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10625389 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14538549 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147250453 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104856723 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104962469 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111164892 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.127434001 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07969761 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16094034 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108587605 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122893012 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08758501 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146339975 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.116598344 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0930684 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090376187 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104163372 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10778428 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111524558 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148655422 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099803218 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.075157371 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096994985 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.149455933 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079755568 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113159282 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.093826529 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.09738645 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123024751 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.09739339 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084952094 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071515193 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131442336 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.163935358 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.073142368 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118796276 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11220114 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10686018 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.125323678 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072677037 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121959569 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141896425 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122221508 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14869953 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.319770305 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11796066 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119917758 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.115963383 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10909862 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082661776 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.129694487 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13919343 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099255448 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095977529 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138204858 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123414569 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.142584671 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.120595014 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118703432 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.109279439 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110227165 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107239792 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.106274169 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150548135 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125494672 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.12934835 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089444621 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109983822 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12174727 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140330963 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084188649 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143757331 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084770708 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1196707 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.0801935 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128721298 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080552332 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113134532 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082788617 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105419015 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.072504661 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07795681 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146558395 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.117006825 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110265996 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105079086 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.143243069 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.140327773 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081394352 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111454032 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118604085 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104773449 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120435095 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112790985 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.092415413 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.26515814 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11137773 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08548942 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.08247913 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.116024732 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096935787 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127310949 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086230858 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07836096 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144265912 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106926575 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098599372 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08005776 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111169359 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.124751362 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095987818 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090471064 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118931373 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11204429 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14623729 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.095199496 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101471217 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.128577666 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08384667 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096070243 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072709383 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088978165 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079207516 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.131992561 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078984467 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120720766 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071656689 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13462127 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090917463 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.096646608 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106204698 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113196561 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132152013 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09812322 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145584306 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093209493 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123426749 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111807469 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097901174 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092733782 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107367078 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104765123 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126918052 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100478312 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128053596 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149034243 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108244006 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.150236253 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095015448 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126986913 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109802629 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126197574 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.275870772 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148148494 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138489353 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11596322 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115223817 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078349985 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098669483 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109376717 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.115193483 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.177711417 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130357409 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.075625813 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109188842 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095828385 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108577107 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106102738 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083104447 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147115955 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102602433 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.08922291 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11708901 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.095322311 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107020469 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079421732 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099458902 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104728638 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098640741 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102668799 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119867516 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132926577 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117858327 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146593669 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.101965584 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.095801431 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122819746 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115146341 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11511766 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089387742 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089803031 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143046933 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122912488 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.130313117 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.105657282 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113676331 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116322916 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105410651 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131166407 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1126865 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.131023617 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082609493 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.079092242 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.071482233 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.075121489 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.28856224 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112618312 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115597109 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101430511 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.075068821 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106221612 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109416148 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074967042 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091653761 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098413536 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098400917 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.095694336 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110725039 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115413698 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.094416025 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10844359 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103589979 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.151890587 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.105502943 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092465718 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149333081 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155437848 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091505441 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096455173 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.074628499 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082602859 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117018988 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152877438 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.156447412 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.081817345 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089861129 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.089081704 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090365553 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074483809 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.090156614 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.093435115 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109846012 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103567825 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.11684008 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110175949 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078586928 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106859903 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103269401 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095705832 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108747704 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1229926 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129866237 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.14766046 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114934379 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11071129 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079540514 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084939717 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079200211 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083047427 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105736947 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.08282076 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07946758 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14652018 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.258386884 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109000495 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112553593 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092532159 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07873167 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138568473 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.074883501 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138580618 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.074968514 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085268624 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085976133 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082469845 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097626604 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143674363 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113594474 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117620041 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111600195 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108646846 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144717431 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161720133 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084335986 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.149067782 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079379974 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079226646 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079212628 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115388 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093780061 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119488482 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145166322 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094761784 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107728328 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080696457 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149006417 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.101296707 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108121987 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091374133 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082714739 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148739999 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083375196 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.084111379 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094080907 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115218244 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.075752666 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108040958 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087576862 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082564209 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1485349 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.634760175 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09359117 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.079285646 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100096309 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147625446 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133332462 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099291703 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112841843 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.288598024 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103614262 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098864419 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111213203 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187269577 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076609189 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098042212 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.107214008 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101221169 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105242006 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.10211413 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.089105956 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.095309576 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088357029 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082589503 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110196536 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091260359 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099240645 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109218959 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08627693 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.091406167 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134569018 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.107958059 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.085059956 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092478918 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.107392614 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092865675 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105062227 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072318996 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116590237 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094559711 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119593766 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095946981 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108840054 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130332884 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092692858 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1413489 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.110537138 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126930962 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09120035 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.081765712 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130113759 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.091787429 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080951152 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1501789 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.099322339 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094538329 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107880058 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.100198022 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117666787 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121245594 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117240678 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101655497 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082632762 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105494785 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.107070575 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089257229 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.24806738 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.077797517 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079855207 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110595837 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087227151 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083940415 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11484489 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089436504 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103933081 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101670008 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122874804 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083844481 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102802612 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11137005 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093574668 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111028204 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.1042608 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131545525 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.180265444 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129133366 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132522566 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139542254 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080682761 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079870137 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072019951 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121088596 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083233949 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.092963756 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084776981 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138053637 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.085722135 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116533715 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.236366437 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083769017 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097952222 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100317553 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073191326 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087317999 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111944086 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09117056 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083989394 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12616012 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084452357 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.131431648 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115296902 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103569059 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098785126 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084375189 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118573663 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106467448 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.134693928 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099535997 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.081208816 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118095324 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106860566 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143411195 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.076372792 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083523391 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13350243 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108942806 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.301824549 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083211972 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151556128 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143807792 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101067567 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134209782 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072204533 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085946259 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092251456 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.129596329 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088542985 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114720827 seconds)
  done (took 70.370493985 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.152665883 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.144229969 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083167727 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104867952 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189604435 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.200776153 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.122037252 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097722297 seconds)
  done (took 3.077991816 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069025886 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083824609 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081672967 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.249569694 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.100383919 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.070699854 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.076529562 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.084958243 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.070039858 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06992075 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103316938 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068630322 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069678067 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.531244607 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.069217916 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.075822786 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.070260552 seconds)
  done (took 3.913782732 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.333977501 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.012374161 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.254842014 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.183701795 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.149375413 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.556231293 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077712844 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084068571 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.697127556 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372657654 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.140709414 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088761084 seconds)
  done (took 19.936404208 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076913144 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.121570266 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.121562953 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075905209 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075869285 seconds)
  done (took 2.442793429 seconds)
done (took 124.267032846 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083595525 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.174091966 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.070296756 seconds)
  done (took 2.253232145 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120743424 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.11966814 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.121030305 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.117777927 seconds)
  done (took 2.464915959 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075491572 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077268716 seconds)
  done (took 2.136787333 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.226571945 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.220001913 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.095165358 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083080837 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081375767 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.083121583 seconds)
  done (took 2.241431883 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072135626 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072276739 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074753477 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074796727 seconds)
  done (took 2.270605583 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.16883958 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067404854 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069940762 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072814991 seconds)
  done (took 2.358868924 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086249374 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.088403087 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.118399016 seconds)
  done (took 2.276121193 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083514868 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085311305 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081104107 seconds)
  done (took 2.23803094 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109944754 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097417973 seconds)
  done (took 2.190943284 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080184206 seconds)
  done (took 2.06385105 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091010879 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099588646 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.186566369 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.156151203 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.19023906 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.175880406 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079439106 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079970788 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.077099476 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076404304 seconds)
  done (took 3.191796845 seconds)
done (took 28.306761542 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085083796 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.377039384 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.363034366 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.091494353 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675283306 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359276647 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.989112931 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095361727 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105220317 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071580563 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089180965 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652457879 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.980362413 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326461942 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.964600738 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.322755448 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655742254 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072177732 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071323351 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07194297 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.971968616 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071114801 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071590623 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071972705 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.653464128 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.382077006 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072391417 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.323820865 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071305577 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075775563 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.362218477 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071465053 seconds)
  done (took 16.575600015 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076325618 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129271955 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073184317 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085135572 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071292913 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070212618 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072052919 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069653497 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113143068 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070324623 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086484546 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071182761 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.075320659 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.072952034 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.092065431 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071581215 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074438316 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072303384 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071612445 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071890239 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08987545 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069686956 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072372913 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071472379 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071923448 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084971853 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071882795 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06947325 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069226347 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073341566 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073758426 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070902643 seconds)
  done (took 4.478975191 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.128099766 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.136348431 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.076479472 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.113822025 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.121654757 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071855995 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156523407 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09580692 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.118040114 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069291785 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086538772 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069268162 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104783104 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070479508 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08972011 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069361814 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072163671 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070267991 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069458881 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070101763 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088265077 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068842193 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069870888 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070734912 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.072289296 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086861775 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07310618 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071465963 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071590996 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075515412 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076134828 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0731337 seconds)
  done (took 4.760569031 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070312503 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072355562 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.078888592 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083383896 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068953783 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071445434 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072608641 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069415816 seconds)
  done (took 2.596562273 seconds)
done (took 30.43013159 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079760097 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070443308 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.074134793 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090412907 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.077057465 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.114504101 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066272423 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077335527 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073941971 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.074562096 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.076154356 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069997081 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071897167 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066012165 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072671966 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.066883293 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.113967471 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070779501 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.111496398 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.113464412 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069113088 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072339921 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075423429 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.114985303 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.112538757 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.112127989 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07606405 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072588921 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067126475 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069628685 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.169381742 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.183100706 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075385285 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.118362769 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067020798 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068473113 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.073267319 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070838875 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.120072155 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077021657 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070233031 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075776536 seconds)
  done (took 5.61061402 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.187804227 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.194526185 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.189185535 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080464994 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.092258039 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081106052 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192630334 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.07782514 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076043636 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.190751829 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071941199 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076776279 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081238741 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.072102972 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079051976 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075151697 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081444767 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073104914 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079064449 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078730509 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.199585764 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072565692 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.084204499 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080152718 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07455335 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080306516 seconds)
  done (took 4.748047308 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073776288 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089659583 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09391806 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.15039049 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110847155 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084036773 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083995742 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.097069305 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.104284019 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.071717636 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07534553 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.098491356 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100189745 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077893718 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108172191 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087037257 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082660497 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072383376 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075957517 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103378255 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09135801 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087801861 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102027692 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089090188 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.06780847 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077958821 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075824562 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084241565 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076726098 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080592381 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072984707 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072110993 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069327588 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080970662 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.07282644 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.066693377 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090515158 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.121124544 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083626381 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107091549 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078982275 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070220419 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.097190391 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135982456 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.070292562 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07718702 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074340212 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.08280988 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.072005897 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101389013 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086645928 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068346983 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08719394 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071227332 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070542269 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085183376 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070784692 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071931353 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080811193 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074672028 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089022453 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074047066 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090387078 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068860577 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079998853 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070098876 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070334215 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067411239 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103006866 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076284661 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120423668 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.07007809 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066861882 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081143803 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080131655 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075364131 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068438181 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.090636753 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08304634 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.074115859 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081830439 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.073289444 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073434421 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104953952 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067782632 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066687679 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066456823 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070777779 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07231597 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069043667 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081581975 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067849598 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071961699 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084365343 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068339841 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069517998 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071002567 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070071969 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068279722 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079233548 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072827535 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070778995 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081070779 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.07004044 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072445489 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.086124193 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080847643 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.070183302 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.072035577 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.073014109 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072505299 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075266768 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073942966 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071964862 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075720617 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076365354 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074991619 seconds)
  done (took 11.516106343 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.205999044 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.194769694 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.06971863 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.190242773 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07718328 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.119329164 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.192241497 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.131858457 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069829498 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070472148 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068902448 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.139944541 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.135971066 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.146875326 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.116326298 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069799718 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094521526 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.145446702 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.195366489 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.192054998 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093059509 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077150902 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071524301 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072380925 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072229665 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080192777 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.089948341 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.080083477 seconds)
  done (took 5.318324663 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075990655 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084602795 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073197803 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.095446197 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08961302 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071291059 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.073062421 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.072481375 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.088370695 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07783482 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.07120422 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075319683 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074831544 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071646172 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071804543 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077523049 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077758423 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069746538 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073791415 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073793748 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080225095 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154946331 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073836203 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069536402 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.074144866 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069337858 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076610362 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078928543 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069012203 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101794414 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066974034 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075821105 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.086223568 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.07246333 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071117992 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071839713 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070247573 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070960329 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071447986 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068952701 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.06889282 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.076663421 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069683048 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.077006992 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085605124 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.079257547 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07249706 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.07330826 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073345393 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067841832 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.074390323 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.074409635 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073578486 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079535818 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074678483 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073810037 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.072442492 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099754529 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076984486 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.070339125 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.070846732 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.069052057 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072475743 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.079807228 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087356561 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072741928 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068934441 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.071088445 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.078758756 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.085276567 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.070253641 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.07656829 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067983439 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.071351327 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073662837 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073944243 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072518101 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.069489368 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070560769 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.071582558 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071662306 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070655745 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071372806 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073714308 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068694267 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069236319 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.071272722 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.072194297 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.077418563 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069940953 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073839414 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072588947 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069637862 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073544159 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.080995848 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.074375952 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.091531361 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.080458833 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071517392 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.069047349 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.086301485 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.073076659 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070415917 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074711461 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07617454 seconds)
  done (took 10.01690901 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092005144 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072522249 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.091734121 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098167713 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081388177 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075165574 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083490078 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070048843 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087812889 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.070068595 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.080114232 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069436806 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084615252 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080155642 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072804586 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.081364097 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073342112 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091798653 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085962752 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069314987 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.080335316 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083464936 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083690083 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088882791 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.08864049 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089845846 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083224831 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073480465 seconds)
  done (took 4.358117165 seconds)
done (took 43.579728081 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.088977481 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.261450887 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.085972932 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.321124365 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.361083901 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.102205753 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.308618143 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.06941963 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.285882796 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.096987932 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.413098638 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.425592724 seconds)
done (took 70.898505999 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.131760522 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.207732937 seconds)
    (2/2) benchmarking "String"...
    done (took 2.28378801 seconds)
  done (took 6.494288831 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.667198071 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.066643387 seconds)
    (3/3) benchmarking "different"...
    done (took 2.114507504 seconds)
  done (took 8.847809796 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.183089735 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.696428992 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.318143913 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.063892653 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.066424007 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.476868189 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.858239588 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.534457324 seconds)
  done (took 34.015220667 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.230967631 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.25685497 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.785348233 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.817006945 seconds)
  done (took 17.131241023 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.66890265 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.324167046 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.32382599 seconds)
    (4/4) benchmarking "different"...
    done (took 2.318541186 seconds)
  done (took 11.687540768 seconds)
done (took 90.586739883 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.061918042 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.095931719 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.082256189 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.213288053 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.104444479 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.087982681 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.069976169 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.060688893 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.060578037 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.060047431 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.490451991 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.05534778 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.066307342 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.09403763 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.068209531 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.117379682 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.150769691 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.073037849 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.105649102 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.811873309 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.444692544 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.05802017 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.058457933 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.133801805 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.191512142 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.051268211 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.539879943 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.052159107 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.663988094 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.066005498 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.064983621 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.058732809 seconds)
  done (took 213.308371574 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.051510473 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.892752054 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.9549376 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.074961053 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.401206299 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.235419392 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.204519454 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.476734469 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.051451004 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.071948769 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.209098571 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.048979281 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.269202267 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.038785044 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.047371368 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.149008904 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.212208365 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.296179956 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.04907074 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.244823042 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.060334095 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.046596256 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.000043266 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.218672855 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.076558369 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.09670608 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.079404091 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.263908501 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.245693166 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.186680319 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.056592493 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.101697014 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.284291261 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.923253211 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.072185792 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.06106226 seconds)
  done (took 179.73830289 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.239764912 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.07410518 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.116853574 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.200677829 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.810945316 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.779100056 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.054699701 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.055194177 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.055477329 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.061418536 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.056788069 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.123310038 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.659574982 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.072145161 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.055916019 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.055097763 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.709850885 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.060785106 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.056161389 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.056908714 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.120587381 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.432514288 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.19342305 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.061010229 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.06816949 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.193840753 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.070051047 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.057393155 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.193361254 seconds)
    (29/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.060495901 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.057527148 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.137055257 seconds)
    (32/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.05780923 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.192662051 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.069419939 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.138857545 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.065188634 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.538655881 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.05744537 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.059329837 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.059910434 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.120872207 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.057786591 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.14325231 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.146583245 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.056759879 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.072282458 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.133318464 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.744455026 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.060886657 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.057650021 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.057414061 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.057270164 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.058191175 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.239282558 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.056674577 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.083639143 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.656830645 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.057539481 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.05816372 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.058602312 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.059629171 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.058936873 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.06402458 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.09546411 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.861624142 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.39113766 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.446958623 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.859506213 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.06444598 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.614037219 seconds)
    (71/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.058661666 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.115187898 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.062664501 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.137849888 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.059427602 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.058695115 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.060784767 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.061175973 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.176154836 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.171270098 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.06459614 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.195812263 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.066736839 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.062141444 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.276590064 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.721662292 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.064008044 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.073123561 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.116533098 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.061298277 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.059397734 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.066508578 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.183030976 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.066653413 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.061566522 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.060235944 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.158146498 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.062165944 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.308027465 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.289996955 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.13416013 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.312301627 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.285355927 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.063457133 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.063527395 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.077812297 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.064970584 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.066184302 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.074581863 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.064009648 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.063110385 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.063494003 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.064198268 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.062993818 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.063365703 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.065385464 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.076470541 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.063093199 seconds)
  done (took 442.213779666 seconds)
done (took 839.539666915 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.749310792 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.815100633 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.654049815 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.686709088 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.659612754 seconds)
  done (took 15.56333811 seconds)
done (took 17.560493677 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.085659409 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.081991805 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.069590966 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.087681742 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.085447422 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.08475069 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.11628835 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.107740605 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.103324708 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.084731504 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.090108941 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.08393593 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.089679338 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.104143483 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.092445127 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.090497926 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.085107853 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.076951215 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.09284746 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.086754547 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.08418702 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.082112396 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.085715839 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.09029408 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.097068954 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.086343817 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.080326777 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.086013399 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.088616134 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.087499067 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.122833414 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.091871178 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.116291292 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.092771703 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.091507547 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.095059205 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.083777175 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.106946921 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.086796874 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.122329152 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.092998855 seconds)
  done (took 87.771545828 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.07314168 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.209799015 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.284018677 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.104949354 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.070939253 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.283263026 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.129677752 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.198642848 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.20167434 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.282621239 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.306635235 seconds)
  done (took 26.147008184 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.073008614 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.21186717 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.29143636 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.108804063 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.074857419 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.288738937 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.136893211 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.207686109 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.21056375 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.291907413 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.304789674 seconds)
  done (took 26.20955067 seconds)
done (took 142.124273398 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.467671439 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.103692396 seconds)
  done (took 6.573724547 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.069821908 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.08421092 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.218530112 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.070156009 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.068081788 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.070314533 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.070705477 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.069591213 seconds)
  done (took 18.723689707 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.068714099 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.069437669 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.068852 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.06845292 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.069928093 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.068364288 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.06934315 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.068866472 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.068146803 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.067759546 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.068831684 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.071299335 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.070690398 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.067579079 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.069274545 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.069888468 seconds)
  done (took 35.107532702 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.053572318 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.069409295 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.068967331 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.07036396 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.069217339 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.068601461 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.071627403 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.070615388 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.069950328 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.068930775 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.06897365 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.069114336 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.071236737 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.070597306 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.069604271 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.069466894 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.07050433 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.070880819 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.073533755 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.071418423 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.06957749 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.071423213 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.076073154 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.071373017 seconds)
  done (took 51.664881291 seconds)
done (took 114.077844168 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.272907328 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.593694493 seconds)
  done (took 8.872757226 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.074186676 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.068593084 seconds)
  done (took 6.209566609 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.071570102 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.070954744 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.072862244 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.070505215 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.06941428 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.070019344 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.071379123 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.07096312 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.071251551 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.070898437 seconds)
  done (took 22.714417006 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.070897762 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.071111818 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.072041793 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.07215069 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.071293807 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.071524884 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.072431698 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.072598171 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.07026326 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.071475592 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.071782141 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.072363479 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.071810552 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.048284739 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.066390809 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.07149736 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.074620826 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.071922922 seconds)
  done (took 39.270437593 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.073994622 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.072942068 seconds)
  done (took 6.153254327 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.07280994 seconds)
    (2/7) benchmarking "second"...
    done (took 2.072123753 seconds)
    (3/7) benchmarking "month"...
    done (took 2.071652709 seconds)
    (4/7) benchmarking "year"...
    done (took 2.072257153 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.071333186 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.072735485 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.072515675 seconds)
  done (took 16.511319256 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.073193267 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.23986345 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.286532079 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.672146352 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.073681307 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.074649026 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.921179261 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.076520911 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.076933473 seconds)
  done (took 22.500941419 seconds)
done (took 124.235550369 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.887653333 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.526231571 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.386296736 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.151832239 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.099542761 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.412513992 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.117543497 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.621326292 seconds)
done (took 45.207003696 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.187749733 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.073599166 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.108237409 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.103874462 seconds)
  done (took 23.292373549 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.072217502 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.369504444 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.091452706 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.093300834 seconds)
  done (took 23.654856809 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.450646081 seconds)
    (2/2) benchmarking "read"...
    done (took 2.428950785 seconds)
  done (took 6.890663438 seconds)
done (took 63.030624339 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.073468953 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.074556786 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.073767798 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.074488563 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.072861314 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.075125764 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.074708468 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.075556973 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.07491517 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.074654513 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.076911851 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.074900943 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.075533626 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.076771827 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.074583305 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.081335606 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.076370316 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.074820482 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.07541075 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.076311733 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.079528387 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.074434148 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.077054634 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.075475344 seconds)
  done (took 51.822833455 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.075547964 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.076130619 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.076344011 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.075365413 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.077602667 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.076089848 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.076884161 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.07618048 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.075793091 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.07645864 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.07646988 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.075868162 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.075435182 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.075459157 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.080215 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.076540229 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.074902637 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.076761322 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.07632133 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.080136912 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.075245599 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.075500176 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.080233511 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.078359383 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.079188631 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.078805169 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.077005999 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.078886675 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.079260346 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.080001072 seconds)
  done (took 64.323196187 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.077844561 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.078826333 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.078941629 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.080485482 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.078411406 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.074163941 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.078950596 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.086260182 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.081228891 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.078580731 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.078926251 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.077443168 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.083920296 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.073726611 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.066584739 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.078702692 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.08004827 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.084027816 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.079240642 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.079980258 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.081524823 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.089699965 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.08073586 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.079086199 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.079947213 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.081581234 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.084752451 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.081074992 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.081052883 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.081158998 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.081778085 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.084628369 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.078080057 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.080244128 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.079827587 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.082630386 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.085544078 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.083880263 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.086219718 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.079550109 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.080243998 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.080231605 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.080072807 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.080606318 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.081536852 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.081646638 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.080264801 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.079479008 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.078834493 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.082012817 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.080906925 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.080585586 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.083538295 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.081203571 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.082748165 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.077260874 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.082156823 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.082446403 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.082283722 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.081104977 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.08068842 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.082130982 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.082647723 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.083214701 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.081555815 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.083310535 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.083721601 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.08279822 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.082815956 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.084863727 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.082883693 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.083943971 seconds)
  done (took 151.84529902 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.078204422 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.083349665 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.083154596 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.085073762 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.08355756 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.084245465 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.082099821 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.081679962 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.079761521 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.083818451 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.083452865 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.082134931 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.083243318 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.08344008 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.085164017 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.084286919 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.085607245 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.082058721 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.081831443 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.084329401 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.083994296 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.082543279 seconds)
  done (took 47.840539467 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.084018505 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.083907983 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.083661817 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.083780066 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.082078632 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.083751314 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.083510005 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.083761999 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.083717997 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.083556641 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.085343044 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.085810734 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.082121788 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.084558383 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.085767142 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.086105138 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.081913543 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.085439773 seconds)
  done (took 39.530701993 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.086885877 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.085496403 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.085413022 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.085384146 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.086010722 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.083814744 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.082519379 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.086572681 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.085494976 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.085232208 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.084903335 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.087057203 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.086740887 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.085394574 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.083825783 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.084907359 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.086462231 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.084925064 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.087385426 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.085143479 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.08745472 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.086587159 seconds)
  done (took 47.900629922 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.08420044 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.089107047 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.085809112 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.08745246 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.087283431 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.088251521 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.08794751 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.087400316 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.08727322 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.085384853 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.086894886 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.084625026 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.087814439 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.087287972 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.086917166 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.088281578 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.085159945 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.085982859 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.086047577 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.087799729 seconds)
  done (took 43.755206582 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.087069508 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.087436208 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.087064653 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.088593664 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.086883499 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.088934963 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.088784348 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.08722754 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.087508082 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.08946144 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.08821416 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.088176413 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.086835171 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.08625374 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.089401688 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.087132104 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.088968999 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.087977127 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.08982703 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.091881019 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.091216353 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.089214819 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.088276876 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.088981197 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.08862705 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.087642293 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.078254655 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.083430463 seconds)
  done (took 60.480807058 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.088705623 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.091005521 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.07639439 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.072682067 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.067054188 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.062371158 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.088813955 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.088358361 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.088614668 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.087761472 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.089517138 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.088712658 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.088501059 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.087955493 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.089532768 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.089844316 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.087633101 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.089213967 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.088915172 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.089502239 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.088838901 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.087157724 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.0924328 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.08862922 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.088269167 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.086599081 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.088521364 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.088279621 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.088246191 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.087851114 seconds)
  done (took 64.606431739 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.108506416 seconds)
    (2/2) benchmarking "in"...
    done (took 2.108645133 seconds)
  done (took 6.237817017 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.088036319 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.08911644 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.089508936 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.08917585 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.088961824 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.087253279 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.089216406 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.086363961 seconds)
  done (took 18.731595409 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.089134019 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.093107977 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.089893873 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.088518356 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.089653548 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.097783709 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.090673707 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.092849679 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.091000209 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.091136125 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.095180983 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.094329516 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.09838813 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.092998404 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.090490233 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.092084796 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.092467097 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.092991648 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.092591565 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.09047228 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.09475438 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.089696434 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.091897587 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.090715808 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.089985421 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.094788209 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.100075816 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.092583339 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.090610671 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.08837055 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.097383095 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.090824372 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.090465723 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.092385746 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.088220891 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.08977454 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.097240831 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.092135573 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.090777637 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.090649659 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.093752043 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.092727036 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.094096361 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.097252274 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.090601816 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.090847058 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.091935082 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.09151722 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.090329941 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.09630237 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.099791853 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.092522128 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.090423389 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.089610972 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.09413919 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.09194678 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.09121414 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.0957799 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.097246806 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.098675151 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.098338042 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.112454757 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.100043018 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.091283615 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.09370951 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.101068983 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.11423235 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.093291217 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.093874663 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.091006408 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.099759556 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.090774881 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.089925334 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.091594979 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.103911331 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.099466148 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.094058853 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.091933308 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.090687398 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.094933738 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.094666102 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.09164189 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.091899614 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.09063242 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.102654012 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.11624006 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.093645196 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.09401932 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.093413773 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.092626042 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.094994005 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.095130386 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.09284792 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.090981115 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.095609822 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.095772958 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.09398044 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.093011561 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.092905371 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.101433557 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.091888152 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.09320313 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.096977304 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.073581347 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.091788502 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.093618868 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.093119733 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.093009125 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.100511521 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.092653793 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.09299383 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.09265273 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.095019274 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.096313344 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.094504168 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.095920558 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.099564954 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.101547387 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.094170653 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.097862514 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.099520052 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.095565199 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.103464622 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.116761529 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.092155644 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.096340832 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.098194436 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.10535479 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.097911621 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.094224989 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.097250862 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.093945813 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.094406897 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.095372668 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.093870009 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.095711059 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.094194909 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.095229019 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.094699983 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.093723685 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.097133535 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.095474085 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.097588176 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.095872794 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.100163724 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.094689786 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.099012321 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.102909771 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.094749871 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.094915653 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.095301633 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.096662629 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.096515125 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.094819543 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.095804116 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.094921231 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.095189508 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.095268794 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.097667478 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.096623057 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.097952809 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.095605037 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.09964181 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.097094305 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.095349588 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.095833272 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.094903392 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.099678143 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.098695743 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.097237694 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.09922325 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.0959631 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.101183851 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.095358894 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.096352779 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.095535855 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.096285072 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.095303742 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.101808168 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.107249709 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.099429935 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.106176047 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.096853204 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.104230723 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.095279128 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.097771302 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.097702352 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.101029871 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.097490028 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.097829379 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.096429033 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.10198309 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.117635735 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.107356721 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.098667863 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.098312221 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.101601038 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.101632721 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.102923421 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.097855765 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.098269653 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.099563433 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.098688659 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.09699394 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.098635088 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.101079742 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.098679507 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.100220415 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.102579544 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.097639824 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.097335008 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.098528453 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.096441739 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.100167647 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.097754552 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.097290159 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.098489606 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.097237314 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.106563082 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.100749523 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.096950305 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.099336226 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.101549614 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.098881898 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.098229933 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.100460771 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.102131854 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.098246267 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.100534636 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.106067232 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.099261072 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.099687158 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.09889594 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.097839342 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.102111301 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.097966445 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.101949363 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.105514937 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.101299725 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.099166544 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.106287622 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.099122339 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.102326925 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.099475358 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.101185985 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.099252864 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.100846075 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.099205662 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.098432382 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.107236377 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.101037184 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.101411282 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.09942004 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.101645994 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.100556381 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.102203489 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.100162741 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.10405176 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.107677074 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.106715725 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.095242826 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.10375958 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.102874947 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.101971916 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.104596686 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.101445897 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.114110269 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.109884504 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.101466088 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.09918959 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.101116583 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.103580494 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.100613431 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.100650978 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.110042574 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.101193061 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.102203239 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.104487316 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.100333122 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.101071964 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.107596495 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.102583849 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.104729139 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.103973499 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.103293308 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.102173658 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.099977121 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.104009942 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.101545378 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.103034743 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.105225211 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.101437434 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.102727662 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.100854901 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.110450609 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.10144813 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.102356874 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.108978623 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.103568114 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.102792591 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.104108216 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.101688734 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.103665084 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.103215039 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.102707443 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.104461896 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.103096372 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.105325441 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.112361365 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.107310783 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.110157804 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.104915863 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.113052715 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.10203859 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.101563103 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.10214481 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.106089937 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.111277144 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.10327974 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.102504176 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.110482492 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.102819116 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.104555339 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.10689438 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.103467363 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.102831379 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.103599925 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.106306793 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.109196751 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.107559392 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.104382009 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.105105322 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.103802815 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.103805309 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.106694267 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.105275913 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.104460622 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.106631174 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.103779531 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.104104209 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.104622851 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.104193565 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.104543418 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.103551275 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.104445707 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.112529705 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.105361608 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.106628385 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.107963841 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.104392579 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.113826599 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.105608124 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.106199469 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.106216592 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.105447533 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.107782647 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.104778276 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.104599376 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.104994914 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.104613874 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.106423164 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.116284118 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.113193347 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.109421772 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.107341148 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.106191146 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.106993294 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.11607581 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.127410041 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.106494877 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.108017291 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.109405555 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.1115071 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.108178394 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.112110657 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.110087677 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.112631474 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.10734205 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.105771469 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.109372945 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.119168799 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.106093442 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.105993411 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.105180868 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.110299178 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.109565264 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.106980123 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.107564383 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.110043599 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.108749621 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.117625071 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.106693412 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.108287079 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.107477443 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.106421491 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.107044574 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.106475894 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.108685827 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.108731299 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.106944675 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.107476655 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.109760135 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.112426412 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.10650948 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.111036661 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.116758164 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.107434642 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.107400927 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.108999903 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.106787687 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.110187362 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.10791927 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.107664914 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.11034948 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.107128651 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.10770635 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.110833938 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.116134434 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.110227358 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.108971402 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.107357459 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.112270026 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.10727353 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.10923095 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.110236804 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.117195043 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.112459713 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.1188835 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.117223889 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.108778844 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.109073555 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.114899835 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.116652672 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.109602121 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.108002726 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.108903526 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.112850994 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.111109813 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.110656507 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.109341594 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.109575345 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.114015867 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.108813883 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.108976655 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.108556892 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.10886821 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.110256384 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.111306362 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.114930417 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.109205734 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.108455085 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.10864577 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.110253135 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.111064428 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.113075718 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.109743889 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.109640248 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.112863584 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.112544046 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.113980222 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.109288136 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.109611031 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.112347666 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.109828637 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.10929844 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.109805131 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.110944463 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.109682234 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.11439046 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.117353671 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.111225895 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.112760527 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.112336295 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.115375105 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.110218791 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.108865007 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.110684044 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.109106926 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.118964539 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.111492716 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.11077431 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.112404523 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.11075545 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.11696643 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.11294628 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.115251841 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.111206666 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.111766889 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.11047592 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.115189718 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.119294006 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.115305327 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.11509517 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.118312295 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.116193008 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.114309682 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.112703379 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.110053773 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.112707739 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.113216476 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.116166702 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.115279679 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.114784676 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.111580145 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.114959643 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.113472224 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.114438496 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.111382788 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.112084787 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.115081736 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.121783025 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.120852445 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.112704822 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.114432423 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.113377362 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.116280031 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.124179409 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.112808799 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.114203295 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.112931812 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.113430337 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.114033261 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.120165753 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.122867129 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.116707225 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.114698937 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.119343362 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.129692594 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.11709872 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.125461083 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.128829417 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.10344334 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.113815341 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.115539181 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.11468625 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.113848079 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.11752908 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.114814709 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.119511334 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.113954764 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.113125991 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.122070648 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.114497309 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.115018026 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.114392809 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.114503941 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.11962723 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.114933003 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.122085775 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.114062372 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.11257311 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.114960375 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.117548835 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.113594528 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.114424699 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.113904964 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.117493931 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.114618356 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.115829962 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.123183525 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.114825424 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.117443879 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.128616097 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.126066928 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.116029899 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.114103691 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.11500678 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.120588487 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.11891697 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.11488345 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.119853477 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.122606244 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.119205532 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.122477557 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.116934755 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.117899129 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.117323147 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.115196633 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.115797439 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.128805002 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.126858316 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.116614319 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.116991801 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.122282253 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.114907595 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.122588995 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.122580608 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.116557465 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.117383076 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.117563249 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.115306547 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.11625841 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.116977097 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.120210229 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.122898378 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.11623687 seconds)
  done (took 1256.466758073 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.11680418 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.115656614 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.116176847 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.115249818 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.116960132 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.116148286 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.11618824 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.116620945 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.11575873 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.116858968 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.115850303 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.117036233 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.117418572 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.116758378 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.116708717 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.117333801 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.116903807 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.116456257 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.116450249 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.116718653 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.117264881 seconds)
  done (took 46.496690246 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.117500654 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.11686117 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.117412708 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.117350989 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.116415695 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.116939554 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.11674068 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.117107153 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.117303255 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.117637933 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.117487587 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.118020073 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.118368914 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.117828357 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.118832614 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.119129349 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.11759288 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.117344244 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.117420058 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.118279227 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.118288094 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.11768227 seconds)
  done (took 48.637517919 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.118903211 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.119777137 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.119662607 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.118612393 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.119102905 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.119033074 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.117739925 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.120744096 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.118982966 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.120860956 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.127079871 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.125427663 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.118886004 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.123434313 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.11883801 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.119116766 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.264183842 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.119636203 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.119063491 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.118286283 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.119371708 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.125896172 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.120154413 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.11872207 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.120151093 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.120020377 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.11929789 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.119078915 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.119123377 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.12241469 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.123734123 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.121012522 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.121765693 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.123553022 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.120514408 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.121700316 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.124939974 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.119972731 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.120015443 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.11999136 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.130192626 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.142923071 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.121348394 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.121298504 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.128696357 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.120527722 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.120020757 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.125032537 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.128479103 seconds)
  done (took 106.159242184 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.120564873 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.121875965 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.120903022 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.121776652 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.120544518 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.121673141 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.121054907 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.120102578 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.120870742 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.121620379 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.121404488 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.120655221 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.121368252 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.121542162 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.121197627 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.120452324 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.120370897 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.120949836 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.122143193 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.121070496 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.121875533 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.121527735 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.121761279 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.121785357 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.121716198 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.122286364 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.12254816 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.121676269 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.121876311 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.122052516 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.122105755 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.121972653 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.122128124 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.122454864 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.121487641 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.121045191 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.122035301 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.121947383 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.122815795 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.122201384 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.122782391 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.122194828 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.122506105 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.123337478 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.122917862 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.122544848 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.123707812 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.122703914 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.123280186 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.123487004 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.123053911 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.123850668 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.121962275 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.123160702 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.123499434 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.124264495 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.124101098 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.123353449 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.123126292 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.123476247 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.122580439 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.12296493 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.124365305 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.123335572 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.123541401 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.124270828 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.124359895 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.123997304 seconds)
  done (took 146.368257851 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.123968871 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.125317564 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.124636278 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.12466475 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.125084776 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.125462053 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.125488732 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.12566779 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.125023347 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.125772619 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.124819855 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.12576646 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.126639989 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.124564429 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.125155311 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.125360685 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.126160299 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.125733731 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.125574671 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.125232775 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.125720015 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.125156017 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.125588938 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.125739527 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.125786642 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.126667735 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.125439872 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.126042215 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.126442348 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.126540663 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.12718907 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.125985959 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.126264339 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.126172866 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.127719722 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.1263565 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.126323885 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.126766331 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.127278422 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.126478867 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.126582697 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.12718037 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.127448236 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.126718518 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.127318583 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.126248536 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.126899883 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.12740354 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.126723245 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.128435038 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.127482241 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.127065639 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.127499596 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.127832693 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.127433031 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.126222386 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.127485596 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.128415222 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.128137715 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.127572353 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.127712571 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.127751102 seconds)
  done (took 133.891099799 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.126405241 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.126341326 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.126933301 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.126057735 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.126812583 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.12682533 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.126705551 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.128120366 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.127473067 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.127929127 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.126974204 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.127434079 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.129241737 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.126888012 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.126807975 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.128871939 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.128488199 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.12841276 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.128552096 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.128466738 seconds)
  done (took 44.609817432 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.127767647 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.128490202 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.127217164 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.127928378 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.12856973 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.128241024 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.127572058 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.127882256 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.127222597 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.128680502 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.128265015 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.128005689 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.127997108 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.129346037 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.12915248 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.128683933 seconds)
  done (took 36.110512874 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.128656412 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.127973386 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.129591011 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.129927541 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.128403233 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.128752992 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.128756944 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.129482602 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.129013682 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.130190122 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.12929463 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.130700453 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.129518012 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.129706069 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.130076774 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.129498241 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.129824475 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.129114546 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.130070132 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.131031102 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.129994335 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.13006959 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.129132726 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.128531295 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.130450899 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.130427706 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.130051863 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.129894516 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.130246717 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.130688625 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.130042378 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.130543695 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.131143018 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.130508875 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.131284845 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.130916965 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.131508687 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.130919261 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.130156387 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.129914483 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.130182238 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.130394036 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.130267308 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.130641878 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.133653642 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.130693054 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.130985829 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.13053501 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.131959922 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.131435416 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.130843675 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.131608736 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.131284794 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.131758436 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.131724342 seconds)
  done (took 119.22514529 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.132008825 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.131068212 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.131885795 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.131744361 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.131836585 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.131387196 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.131254049 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.13150191 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.131777019 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.131488422 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.132710003 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.132593348 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.131794826 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.132100088 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.132734263 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.132358778 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.132207827 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.132560019 seconds)
  done (took 40.438226044 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.131630165 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.133121881 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.131660282 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.131309918 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.131975913 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.132772485 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.132619542 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.131323724 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.133976305 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.132259054 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.133603602 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.132534906 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.132816475 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.13383314 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.133858126 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.132374386 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.133311134 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.132783468 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.132549281 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.133679834 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.13233344 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.133630507 seconds)
  done (took 48.984764162 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.134637124 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.133766146 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.148969983 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.156172008 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.154319254 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.169334591 seconds)
  done (took 14.961031919 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.133743988 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.13527679 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.134308277 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.134062947 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134682041 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.134002722 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134978047 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134703404 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.134404438 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134322429 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135188295 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134640438 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.134912395 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.134908196 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.135744621 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133747315 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135175196 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.135052743 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135283855 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.134949505 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.134363752 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.136047235 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135934034 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.135044214 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135211318 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135406426 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.135572975 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134897215 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135653167 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135532889 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.136086919 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135793055 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.135896115 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135793923 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.136789094 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.13627355 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.136316273 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.136200844 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135926552 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135773403 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.136267768 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.136455588 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.135710812 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.135809135 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.136356979 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13620654 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135730277 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.136001806 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.136543643 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.136729035 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.136065237 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.13638392 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.136233855 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135484456 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.137117883 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.137075743 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.136457992 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.137722246 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.137340246 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.136747754 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.136586638 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.136327911 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.136282287 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135814338 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.136628753 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.137639076 seconds)
  done (took 143.022703939 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.137500387 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.136797122 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.137576591 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.136292364 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.137012144 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.137478194 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.137682842 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.137707103 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.136825039 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.137602701 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.137242421 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.137806674 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.138691088 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.138692595 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.137830748 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.136862801 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.137989194 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.137869224 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.138556603 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.137995144 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.138606825 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.138381212 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.13855058 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.138284369 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.138880209 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.140201715 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.138714224 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.138271033 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.137813705 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.139101199 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.138603728 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.138130423 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.139022382 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.138327977 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.138662105 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.138717376 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.139369008 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.139391015 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.13936337 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.138546195 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.13889113 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.139037668 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.139219182 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.138892074 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.140196993 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.139935987 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.138492477 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.139668454 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.138595735 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.139119001 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.139164831 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.140202482 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.140191013 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.140229758 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.140091005 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.139960134 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.140065473 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.13945953 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.140058807 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.13981003 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.140429058 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.140116705 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.141040262 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.140490733 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.140672634 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.140446996 seconds)
  done (took 143.232299767 seconds)
done (took 2927.686680524 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.259448774 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.155021 seconds)
  done (took 16.485760157 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.303559717 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.202754749 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.327057732 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.259034592 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.142263726 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.152196676 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.141986141 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.142358258 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.235041295 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.142843919 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.158136162 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.142087484 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.14263057 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.142782297 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.142814002 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.144038775 seconds)
  done (took 56.992243383 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.145879822 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.146162331 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.144617483 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.14311187 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.155536985 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.220366871 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.167435555 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.147926654 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.161285931 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.179528006 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.16394114 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.151352312 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.151841052 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.149425373 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.232159772 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.189423829 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.200911668 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.219138663 seconds)
  done (took 41.141635689 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.221843694 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.158292798 seconds)
  done (took 11.458987521 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.163189023 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.176116624 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.174295768 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.174215012 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.163551179 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.178185875 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.149678605 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.145288371 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.156181433 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.153488869 seconds)
  done (took 73.714079625 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.148047753 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.150905298 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.400656395 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.154440609 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.153382039 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.171135543 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.146544401 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.177551959 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.146939932 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.145763675 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.157709858 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.406244468 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.158484188 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.148605335 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.570215999 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.160064611 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.152875679 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.178161376 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.179508479 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.153342199 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.154765066 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.151049882 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.311203796 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.830267687 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.14978876 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.151521465 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.154893891 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.144453831 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.145655668 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.148089835 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.149865712 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.148781466 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.152541203 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.147745636 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.154657827 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.153287369 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.628318923 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.167300253 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.153988832 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.236189446 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.195107144 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.155298675 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.922773149 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.14960148 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.146543885 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.153665624 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.829406599 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.233827799 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.150835199 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.317558097 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.483157614 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.164130382 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.321355136 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.310691473 seconds)
  done (took 148.105842744 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.1450713 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.490749845 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.302470813 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.146292547 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.457349439 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.359114759 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.812944986 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.192410205 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.148013042 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.364945045 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.285136716 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.255344489 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.148690201 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.147206435 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.150255845 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.146905884 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.303427427 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.213473544 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.148193635 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.146539028 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.169137262 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.302153871 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.251001614 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.149607592 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.162861584 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.361118535 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.199912448 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.254995561 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.648654092 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.146079179 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.210134341 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.616898449 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.15007578 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.146685681 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.187835681 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.248545418 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.236198881 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.150673758 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.146659963 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.146957267 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.830917918 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.347717975 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.252585853 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.281347703 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.297714677 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.363688596 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.619148355 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.147578967 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.658046744 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.317155739 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.355170701 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.364411754 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.248183919 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.151942357 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.435340094 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.147246495 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.796331679 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.378718787 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.290356156 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.25358789 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.14990331 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.148806448 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.148004062 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.389623461 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.151442241 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.245746419 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.151423553 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.149631792 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.248386004 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.255496262 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.286451427 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.373856124 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.18187359 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.874165728 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.362040602 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.320045718 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.213386429 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.37623678 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.152353983 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.150747673 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.234525442 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.749938035 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.279719248 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.3977099 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.389208985 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.175719279 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.738186933 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.149856703 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.29323061 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.324521031 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.434381521 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.295376442 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.204575224 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.042514746 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.149236659 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.15048866 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.160241624 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.279351909 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.347767101 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.502940047 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.389209538 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.735954359 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.169759883 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.527233803 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.257818604 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.156613807 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.805505536 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.152301948 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.358055059 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.195412272 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.153375092 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.152596516 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.319092317 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.160492983 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.151205878 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.926547639 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.21200744 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.156621093 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.328296302 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.15394598 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.400732433 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.068880706 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.386969259 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.100541581 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.184057242 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.326329883 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.294700407 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.44840819 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.483367086 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.399918343 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.239945549 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.382313265 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.069726079 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.152343068 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.422791102 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.15442276 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.150449906 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.321479412 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.066022019 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.298676915 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.15743714 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.468810776 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.170813129 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.206292485 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.15859888 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.401194412 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.185587752 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.202093179 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.154836612 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.284459041 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.156674399 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.080344635 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.308779619 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.154959886 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.151797924 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.737404574 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.153340177 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.299373839 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.383120353 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.167029661 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.221577025 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.648488734 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.749384911 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.238992556 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.156174931 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.524028483 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.867483627 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.289503545 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.123874843 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.645098121 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.152592974 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.392638981 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.345320599 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.156408174 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.153440436 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.022656855 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.783358068 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.153830582 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.310562921 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.974615905 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.53183813 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.35945804 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.157442277 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.205403725 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.15714999 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.894253385 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.495323822 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.154282223 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.154833184 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.15445024 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.154309117 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.15511951 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.361782941 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.186100584 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.687246578 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.29188931 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.414491795 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.462296036 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.37496454 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.189660067 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.159029399 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.437520086 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.15719747 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.216785058 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.157138338 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.164910348 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.432908465 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.159827621 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.372538512 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.36431124 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.120483495 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.202296316 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.157682851 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.154655856 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.15711263 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.290781292 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.245503222 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.158624132 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.155222742 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.195955286 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.258068873 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.338097122 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.445198193 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.151430206 seconds)
  done (took 947.40567401 seconds)
done (took 1297.373300209 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.155758523 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.159771896 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.161950562 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.164586641 seconds)
  done (took 30.729593082 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.158147858 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.157838537 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.159377268 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.159351966 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.157994639 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.160008812 seconds)
  done (took 15.040815257 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.155750303 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.161792389 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.160456142 seconds)
  done (took 23.566161338 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.582856842 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.563358434 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.232569724 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.300406474 seconds)
  done (took 11.766915104 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.162502442 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.159696239 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.158765553 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.160208068 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.159184366 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.158985749 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.160443326 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.160206732 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.160447059 seconds)
  done (took 21.53500401 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.374129163 seconds)
done (took 109.097822595 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.280270293 seconds)
    (2/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.182641551 seconds)
    (3/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.159964216 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.294568988 seconds)
    (5/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.457069988 seconds)
    (6/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.508997309 seconds)
    (7/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.399414839 seconds)
    (8/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.509391184 seconds)
    (9/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.167134507 seconds)
    (10/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.223258324 seconds)
    (11/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.173086431 seconds)
    (12/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.160937176 seconds)
    (13/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.968103188 seconds)
    (14/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.872119756 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.471872507 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.181133694 seconds)
    (17/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.483674764 seconds)
    (18/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.292792584 seconds)
    (19/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.501554309 seconds)
    (20/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.447207389 seconds)
    (21/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.020282535 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.187222006 seconds)
    (23/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.531936735 seconds)
    (24/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.162547094 seconds)
    (25/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.162387496 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.254641293 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.185780623 seconds)
    (28/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.592108667 seconds)
    (29/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.292335433 seconds)
    (30/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.084114182 seconds)
    (31/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.311629337 seconds)
    (32/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.985110716 seconds)
    (33/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.481446904 seconds)
    (34/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.174138149 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.172952861 seconds)
    (36/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.239243957 seconds)
    (37/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.163407823 seconds)
    (38/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.175890007 seconds)
    (39/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.648125611 seconds)
    (40/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.165818593 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.269343704 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.49916846 seconds)
    (43/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.261232701 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.047712427 seconds)
    (45/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.580513633 seconds)
    (46/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.163742752 seconds)
    (47/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.251556445 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.393886317 seconds)
    (49/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.47752239 seconds)
    (50/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.975670422 seconds)
    (51/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.284995451 seconds)
    (52/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.292210374 seconds)
    (53/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.162923719 seconds)
    (54/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 4.229456179 seconds)
    (55/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.165834244 seconds)
    (56/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 9.57762282 seconds)
    (57/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.248768044 seconds)
    (58/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.16638885 seconds)
    (59/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.483057214 seconds)
    (60/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.627130527 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.583382985 seconds)
    (62/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.279301003 seconds)
    (63/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.410556602 seconds)
    (64/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.117759512 seconds)
    (65/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.405715492 seconds)
    (66/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.707058771 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.560205073 seconds)
    (68/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.370017394 seconds)
    (69/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.648930416 seconds)
    (70/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.926016758 seconds)
    (71/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.656358135 seconds)
    (72/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.911200527 seconds)
    (73/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.036596193 seconds)
    (74/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.244157376 seconds)
    (75/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.388043392 seconds)
    (76/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.168981026 seconds)
    (77/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.373858415 seconds)
    (78/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.886554266 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.894076936 seconds)
    (80/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.457914934 seconds)
    (81/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.43081428 seconds)
    (82/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.392166841 seconds)
    (83/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.168538171 seconds)
    (84/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.210123788 seconds)
    (85/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.484871541 seconds)
    (86/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.333001382 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.168736804 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.180759085 seconds)
    (89/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.284088444 seconds)
    (90/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.936734316 seconds)
    (91/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.372797238 seconds)
    (92/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.283321485 seconds)
    (93/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.770967503 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.201749037 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.25983793 seconds)
    (96/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.334893907 seconds)
    (97/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.383737611 seconds)
    (98/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.29419216 seconds)
    (99/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.938557823 seconds)
    (100/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.573114904 seconds)
    (101/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.310802619 seconds)
    (102/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.434454743 seconds)
    (103/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.245985264 seconds)
    (104/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.496217086 seconds)
    (105/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.292276936 seconds)
    (106/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.174910688 seconds)
    (107/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.661409699 seconds)
    (108/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.28390897 seconds)
    (109/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.198287993 seconds)
    (110/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.733670914 seconds)
    (111/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.947339511 seconds)
    (112/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.175225257 seconds)
    (113/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.367699634 seconds)
    (114/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.17309925 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.184070555 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.559256012 seconds)
    (117/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.181212608 seconds)
    (118/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.274318527 seconds)
    (119/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.177796046 seconds)
    (120/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.166152652 seconds)
    (121/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.171953354 seconds)
    (122/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.18805324 seconds)
    (123/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.230613931 seconds)
    (124/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.842808787 seconds)
    (125/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.521717608 seconds)
    (126/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.384328383 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.48706764 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.448636621 seconds)
    (129/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.291312758 seconds)
    (130/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.377576969 seconds)
    (131/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.380220484 seconds)
    (132/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.56950929 seconds)
    (133/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.293497866 seconds)
    (134/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.890362956 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.302796033 seconds)
    (136/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.510625841 seconds)
    (137/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.556650297 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.57750151 seconds)
    (139/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.170933145 seconds)
    (140/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.469551361 seconds)
    (141/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.248958148 seconds)
    (142/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.170365376 seconds)
    (143/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.183255962 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.432135818 seconds)
    (145/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.558270355 seconds)
    (146/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.431551947 seconds)
    (147/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.169465526 seconds)
    (148/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.614992538 seconds)
    (149/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.337952175 seconds)
    (150/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.18771271 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.255160733 seconds)
    (152/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.274311621 seconds)
    (153/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.383689805 seconds)
    (154/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.171348106 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 4.029324153 seconds)
    (156/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.168976565 seconds)
    (157/341) benchmarking ("sort", Int8, false)...
    done (took 5.131019594 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.569011424 seconds)
    (159/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.490015626 seconds)
    (160/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.465069817 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.301174781 seconds)
    (162/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.404263303 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.08922363 seconds)
    (164/341) benchmarking ("sort", Bool, false)...
    done (took 2.486837763 seconds)
    (165/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.175599912 seconds)
    (166/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.578820425 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.180372579 seconds)
    (168/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.867014104 seconds)
    (169/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.495022415 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.492864892 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.49156289 seconds)
    (172/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.889289159 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.407137457 seconds)
    (174/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.175753843 seconds)
    (175/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.184279518 seconds)
    (176/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.185589267 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 5.798575625 seconds)
    (178/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.571847178 seconds)
    (179/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.303752186 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.521002363 seconds)
    (181/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.175645082 seconds)
    (182/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.233514384 seconds)
    (183/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.170864672 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.987212212 seconds)
    (185/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.099700217 seconds)
    (186/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.035253134 seconds)
    (187/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.271192265 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.384526165 seconds)
    (189/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.1848123 seconds)
    (190/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.38830515 seconds)
    (191/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.309692656 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.28549682 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.10992626 seconds)
    (194/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.200335224 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.171400085 seconds)
    (196/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.194556725 seconds)
    (197/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.456963793 seconds)
    (198/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.400807474 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.312902427 seconds)
    (200/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.23136222 seconds)
    (201/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.272693511 seconds)
    (202/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.182517341 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.294629668 seconds)
    (204/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.272324374 seconds)
    (205/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.205053447 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.258704503 seconds)
    (207/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.261968622 seconds)
    (208/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.371322414 seconds)
    (209/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.477816242 seconds)
    (210/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.959006704 seconds)
    (211/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.0558279 seconds)
    (212/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.390063739 seconds)
    (213/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.305774083 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.171028848 seconds)
    (215/341) benchmarking ("map", identity, Int8, true)...
    done (took 4.029135013 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.198388192 seconds)
    (217/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.323431525 seconds)
    (218/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.170986292 seconds)
    (219/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.415631942 seconds)
    (220/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.484503708 seconds)
    (221/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.179474304 seconds)
    (222/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.328127531 seconds)
    (223/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.339486991 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.504176594 seconds)
    (225/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.307193479 seconds)
    (226/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.388220885 seconds)
    (227/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.202009223 seconds)
    (228/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.175729396 seconds)
    (229/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.282178094 seconds)
    (230/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.249130513 seconds)
    (231/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.181966283 seconds)
    (232/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.175264327 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.359313872 seconds)
    (234/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.266848408 seconds)
    (235/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.178319411 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.493819118 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.536445194 seconds)
    (238/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.155062296 seconds)
    (239/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.617114961 seconds)
    (240/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.175797372 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.886851877 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.181675681 seconds)
    (243/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 4.197293795 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.307107885 seconds)
    (245/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.251008276 seconds)
    (246/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.175754585 seconds)
    (247/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.204283028 seconds)
    (248/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.104139942 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.852018496 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.477195371 seconds)
    (251/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.174725672 seconds)
    (252/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.243202657 seconds)
    (253/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.172571508 seconds)
    (254/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.429482716 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.196917692 seconds)
    (256/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.635147791 seconds)
    (257/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.597038727 seconds)
    (258/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.194994516 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.191051906 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.255882557 seconds)
    (261/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.083564404 seconds)
    (262/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.201466479 seconds)
    (263/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.674775225 seconds)
    (264/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.416633466 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.269824313 seconds)
    (266/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.363533977 seconds)
    (267/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.267573907 seconds)
    (268/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.467740535 seconds)
    (269/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.495811014 seconds)
    (270/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.312248913 seconds)
    (271/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.475454006 seconds)
    (272/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.488927933 seconds)
    (273/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.245097779 seconds)
    (274/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.309469453 seconds)
    (275/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.182357084 seconds)
    (276/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.406345428 seconds)
    (277/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.096044429 seconds)
    (278/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.213576362 seconds)
    (279/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.582832092 seconds)
    (280/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.38687564 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.295526597 seconds)
    (282/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.273721916 seconds)
    (283/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.182625628 seconds)
    (284/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.065010774 seconds)
    (285/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.358239941 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.197469376 seconds)
    (287/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.087068931 seconds)
    (288/341) benchmarking ("sort", BigInt, false)...
    done (took 7.180145389 seconds)
    (289/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.179727709 seconds)
    (290/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.248092956 seconds)
    (291/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.876738515 seconds)
    (292/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.18841866 seconds)
    (293/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.252814695 seconds)
    (294/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.642619738 seconds)
    (295/341) benchmarking ("sort", Float64, false)...
    done (took 6.010695632 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.180505301 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.115236714 seconds)
    (298/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.737865861 seconds)
    (299/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.815247714 seconds)
    (300/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.331388078 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.283607129 seconds)
    (302/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.281146331 seconds)
    (303/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.399577062 seconds)
    (304/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.330696751 seconds)
    (305/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.559037037 seconds)
    (306/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.441582147 seconds)
    (307/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.488817324 seconds)
    (308/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.183696692 seconds)
    (309/341) benchmarking ("map", abs, BigInt, false)...
    done (took 8.745855905 seconds)
    (310/341) benchmarking ("map", identity, Float64, true)...
    done (took 4.133234642 seconds)
    (311/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.267253556 seconds)
    (312/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.262817907 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.309044448 seconds)
    (314/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.178206312 seconds)
    (315/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.511677045 seconds)
    (316/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.612665925 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.496775858 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.179698254 seconds)
    (319/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.574848927 seconds)
    (320/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.392831532 seconds)
    (321/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.177954282 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.055443455 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.468001019 seconds)
    (324/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.251201917 seconds)
    (325/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.443270296 seconds)
    (326/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.272829033 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.629363572 seconds)
    (328/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.258313957 seconds)
    (329/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.57554304 seconds)
    (330/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.026195487 seconds)
    (331/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.332064774 seconds)
    (332/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.371362191 seconds)
    (333/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.381107328 seconds)
    (334/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.452052866 seconds)
    (335/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.421218492 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.447266606 seconds)
    (337/341) benchmarking ("sort", Float32, false)...
    done (took 5.848650809 seconds)
    (338/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.250102645 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.304569343 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.208604038 seconds)
    (341/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.610753649 seconds)
  done (took 1198.845265183 seconds)
done (took 1201.278364265 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.209979498 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.182778437 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.687273791 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.195033906 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.181780364 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.185692227 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.69874815 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.21462829 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.198033097 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.698770347 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.193844959 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.182417808 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.197369069 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.216701203 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.192255725 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.196523873 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.187811494 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.208437343 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.217012415 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.188917567 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.234865912 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.188885999 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.181763883 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.22160127 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.182119757 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.198799475 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.207999182 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.235879528 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.234238462 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.186438706 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.189508873 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.542757659 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.237945268 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.188949564 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.194895502 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.19804074 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.188826039 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.197880371 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.207281754 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.199560864 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.185454177 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.194084499 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.186463663 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.188328207 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.183147357 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.182181712 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.186059042 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.308845257 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.201086637 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.524593775 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.254173578 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.208784754 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.236911841 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.187767636 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.185219501 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.188048763 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.2360392 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.192350382 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.188514871 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.521715205 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.283860058 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.199553089 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.526845379 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.248790745 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.195798492 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.195035176 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.184959287 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.208974491 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.543218495 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.743978584 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.218348707 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.205260911 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.184969904 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.18738183 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.199973256 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.699935047 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.202517783 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.767014999 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.21108201 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.200215705 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.191269814 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.188936416 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.187353164 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.202099526 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.211063974 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.186854143 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.191994337 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.1917034 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.200619365 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.543783253 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.232343346 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.69033388 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.195629436 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.211805065 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.211548455 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.766550488 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.214487303 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.211154619 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.188759905 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.544653726 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.231386142 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.212097587 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.188108545 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.198148508 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.30197264 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.21025597 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.211905812 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.185030576 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.207888339 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.193461184 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.18740082 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.201199418 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.206347324 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.221632486 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.204331265 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.187015364 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.197271588 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.19298423 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.210197434 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.196792979 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.194766065 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.198246807 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.187543012 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.239592218 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.212635369 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.20362767 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.302219309 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.19383825 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.312935636 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.202188709 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.194148089 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.188131744 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.523532189 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.213573278 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.209923812 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.194849724 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.212907671 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.209880647 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.205507316 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.191961403 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.202615414 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.18438515 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.214990792 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.189821462 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.21383069 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.241161832 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.187412849 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.195245331 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.212339034 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.223196587 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.210015438 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.192910233 seconds)
done (took 344.085343189 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.237884631 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.186774823 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.26324299 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.190075593 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.255587594 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.241094072 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.188444454 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.188678403 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.188132216 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.585379408 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.187949223 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.193533636 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.187117764 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.188695706 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.239016601 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.188776852 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.188053818 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.424774496 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.189672797 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.248505799 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.188625164 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.190980876 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.190463319 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.590141298 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.186786048 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.188175571 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.249507832 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.189907194 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.449546821 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.188216618 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.18908203 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.448022251 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.250091724 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.200447453 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.198933865 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.197155072 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.257545707 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.198587516 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.240029876 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.238261174 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.265794744 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.224246188 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.188440178 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.191610719 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.193446227 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.191093735 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.190107064 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.224480291 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.189454176 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.196086864 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.426729471 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.198283214 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.195492461 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.191119137 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.191445483 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.207030744 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.191072597 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.191436973 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.251347207 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.193361831 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.240209258 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.594660545 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.587504144 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.192410891 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.190475352 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.192945787 seconds)
  done (took 205.20038512 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.258493557 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.278584296 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.259448134 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.197478247 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.243608555 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.259348945 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.196294278 seconds)
  done (took 17.813120461 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.199547597 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.191856221 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.213940843 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.21409037 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.192739835 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.328404623 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.204594656 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.196913054 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.217389364 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.19375639 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.484431302 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.21506041 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.198870247 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.191162535 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.203691138 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.222490778 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.194519868 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.191781502 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.289890622 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.272665026 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.196955105 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.199700064 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.221789619 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.203733721 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.192635663 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.193989652 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.193823595 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.200673264 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.192533086 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.193206727 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.193428143 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.206630298 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.192818627 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.192752284 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.192706687 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.195718572 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.192834531 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.193560378 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.19429469 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.193440046 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.193502068 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.194986117 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.195716215 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.193995655 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.193429587 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.217272067 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.193887249 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.194433378 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.194381392 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.193112986 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.222276378 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.194564883 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.194152955 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.199867185 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.229305422 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.198822001 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.195444787 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.19432529 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.194754196 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.194904986 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.197305934 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.27265073 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.21753005 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.194549201 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.218110476 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.233713635 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.194454937 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.194308494 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.194260885 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.220165817 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.194066092 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.218628514 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.19559653 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.287598075 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.194046751 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.334535643 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.219337415 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.199267451 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.200096256 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.196015388 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.202650378 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.195779944 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.198851089 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.203054829 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.200175439 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.196231085 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.196556357 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.197600435 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.203600375 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.198392084 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.241814715 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.197257604 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.195751863 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.292053874 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.195036479 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.293010511 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.22126905 seconds)
  done (took 236.666789402 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.20330196 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.199364637 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.209910887 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.198229886 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.196374636 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.202466398 seconds)
  done (took 15.335327113 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.199756022 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.201489099 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.197365128 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.197637458 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.19711117 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.195381743 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.196681743 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.199547685 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.200693643 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.19629278 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.197627398 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.198218549 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.191377595 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.191348119 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.195632519 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.197508949 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.198219942 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.196112873 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.198020693 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.199598843 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.433105409 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.199099663 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.198589558 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.202252687 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.201354205 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.200397785 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.206923614 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.197225987 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.197208522 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.204534049 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.202423466 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.19807843 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.202103883 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.205314685 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.204156937 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.20320889 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.201030633 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.200078379 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.198294589 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.198895769 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.199550672 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.19907984 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.198928797 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.199388068 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.201571857 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.206576152 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.204423959 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.207128448 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.199660304 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.201574357 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.199680374 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.198879878 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.20247106 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.201139748 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.204012107 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.204641298 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.203534215 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.199706095 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.202280241 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.204256907 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.203864707 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.200724425 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.202618953 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.203277342 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.20775769 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.202251135 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.205309973 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.205386752 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.199896538 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.199988027 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.200356854 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.199094069 seconds)
  done (took 161.796731824 seconds)
done (took 638.926746284 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.254791256 seconds)
  done (took 9.3821432 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.22709149 seconds)
  done (took 9.452588033 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.563267311 seconds)
  done (took 12.695996233 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.232399873 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.24343997 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.217221707 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.209155182 seconds)
  done (took 31.04318047 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.471433154 seconds)
  done (took 9.599678779 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.214962263 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.198339847 seconds)
  done (took 16.606098699 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.323947196 seconds)
  done (took 9.454223427 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.664422315 seconds)
  done (took 9.811457538 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.209091508 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.209971526 seconds)
  done (took 16.567538255 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.200865924 seconds)
  done (took 9.329163939 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.930120761 seconds)
  done (took 10.147019069 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.213261983 seconds)
  done (took 9.361610933 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.277353632 seconds)
  done (took 9.407186973 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.158677436 seconds)
  done (took 10.287588767 seconds)
done (took 175.271631468 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.208855184 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.205155279 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.205369449 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.204081807 seconds)
  done (took 30.951535105 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.236988418 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.23684406 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.244133274 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.235645408 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.225620415 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.226255911 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.236918289 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.237268382 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.226674752 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.235067403 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.237327289 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.234658892 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.235708862 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.24658423 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.245637349 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.233986475 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.235675592 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.235695437 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.228320118 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.245816375 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.23542579 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.236961384 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.203123402 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.202398525 seconds)
  done (took 55.728585607 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.392821879 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.268857754 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.356945379 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.248762087 seconds)
  done (took 11.397684861 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.202218934 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.267393955 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.254715833 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.248932382 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.254219392 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.305718657 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.255767195 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.338378554 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.331574362 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.329309248 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.210752841 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.223350888 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.224225624 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.24907936 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.305800243 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.20334487 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.203544111 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.317448811 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.265680248 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.388651484 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.203621249 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.256796154 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.25452282 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.256282587 seconds)
  done (took 56.483753804 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.20411173 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.213175422 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.210433191 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.204601031 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.204577345 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.206137396 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.212726084 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.206499811 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.226344358 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.206969597 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.206000048 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.205258295 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.212762277 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.205738553 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.204766378 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.218292831 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.220355912 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.205879438 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.209081871 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.212905575 seconds)
  done (took 46.328942532 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.203586556 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.050175153 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.550803672 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.455536063 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.203859466 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.209039768 seconds)
  done (took 33.804325039 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.219478787 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.222887699 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.212533372 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.231374326 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.253625465 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.214146829 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.266595175 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.369346891 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.212930595 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.264483705 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.229565786 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.21353748 seconds)
  done (took 29.043805253 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.204891719 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.20716628 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.207217725 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.218346317 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.215530679 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.214086921 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.211981063 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.204345647 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.221066707 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.226008929 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.216009645 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.218121517 seconds)
  done (took 48.699318892 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.418762041 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.431152335 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.433006291 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.840812641 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.540194186 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.176060395 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.492962908 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.4198626 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.925137696 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.955108844 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.506331762 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.187874592 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.12624148 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.132469673 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.10338797 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.44931028 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20858047 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.065434929 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.472638227 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.255729899 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.210080952 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.208576623 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.209762058 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.518602467 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.537472249 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.208137083 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.418682783 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.222086143 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.206339916 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.465809551 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.856999092 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.267552663 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.409408157 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.465984148 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.560399873 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.258738864 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.312735878 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.42352188 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.257499117 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.242382366 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.217721562 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.217516723 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.752310513 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.224875587 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.480678861 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207696348 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.212948158 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.317338947 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134177222 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.552238603 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.328314718 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.206706765 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.243306525 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.639009837 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333491159 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.452789002 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216266402 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.426740626 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.274256815 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.491441153 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.328461211 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.319073562 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.424435685 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.137611153 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.645400778 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.341345467 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.214892304 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.216841914 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.911768926 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.453250324 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.291748263 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.558125618 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.983148845 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.21106973 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.214066792 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.256160717 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.302860249 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.213045108 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.512408521 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.196554729 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.1387835 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.311303123 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.610157607 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218284898 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.210939438 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.21889031 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.05958985 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.139399287 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.306517866 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.490031334 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.543743369 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.213804876 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.213760277 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.234410383 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215585512 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.158393906 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.812979701 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.286462801 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.139058493 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.777335727 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.870856743 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.184911574 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.737608983 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.262055745 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.492868064 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.369419909 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.620124485 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.421005332 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.461162932 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.744590688 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.21729375 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.771220763 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.293017884 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.290725561 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.213424628 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.77796823 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.426931966 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.54044475 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.335751201 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.214384711 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.138702371 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.225489823 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.417327896 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.865914377 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.27618427 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.214504579 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.21857773 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.214809141 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.217026124 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.322717472 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.230862113 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.516979657 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.291458461 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.215416981 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.152280746 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.220928356 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.509753136 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.915014471 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274276831 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.475938385 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.484568059 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.917029551 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.812902348 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.266610505 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.493940181 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.290868186 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.29037736 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.796847817 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.347228497 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.313316433 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.214917133 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339732779 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.222282857 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.218123828 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.650783101 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.631098926 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.643038158 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.261801742 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.215536683 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.209168805 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.427616022 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.465085837 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.313216243 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.248670386 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.220113115 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.29915421 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.442192905 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.214873949 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.140706952 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.463801093 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.45926981 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.515197289 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.627246364 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.313144462 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.289698717 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.226144612 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.429440501 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.297473222 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.886387577 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.764602735 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.437077071 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.833911676 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.186436731 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.857626194 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.572198953 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.60501393 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.232417219 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.669527617 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.435873933 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.982505872 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.253008158 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.745566793 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.144638463 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.220418797 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.552884482 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.17180165 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.539513747 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.417374511 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.234602662 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.216847888 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.215934447 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.222717319 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.173605172 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.324961746 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286257927 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.290202372 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143405061 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.900124431 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.262595549 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.220297169 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.217515942 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.614183269 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.062325799 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.171464619 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.21873835 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.294635459 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.966791372 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.770666468 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.221924527 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.22034468 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.820485625 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.223764194 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.807855562 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.22145633 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.120376128 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246847852 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.505612766 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.925366995 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.524655595 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.296613875 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292895448 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.218812395 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.220155786 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.920137465 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.227327659 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.920409023 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.513305826 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.497011853 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.673935153 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.28595803 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.428408704 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.23408399 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.219206633 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.756541043 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.246527333 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.220494258 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.423378999 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.738412918 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.580026218 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.871278891 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.302631899 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.220702122 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.496632738 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.232246824 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.849169663 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.920114746 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.232569359 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.220317111 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.472612032 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.905537401 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.222235701 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.37180783 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226907469 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.431883962 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.423406856 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.496318039 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.521900415 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.675036395 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.148306682 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225776977 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.242498565 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.464247992 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.222490931 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.255531914 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.672453113 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.325741203 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.650400572 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.511052569 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.64317422 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.863956181 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.49289085 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.288514215 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.232460418 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.882501033 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.358716703 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.156113349 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339602076 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.148161869 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.01477884 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.512424992 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.242356309 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.500427087 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.206907334 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.567731117 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.524186547 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.518809834 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.276798738 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.250537188 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.220989659 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.259390076 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.220921834 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.454706754 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.343535017 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.228984177 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.809507754 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.266171872 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.269107296 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.226763554 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.764186484 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.244400472 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.225958543 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.917856455 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.249445767 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342216223 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.295610528 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.016714414 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.898658455 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.253131474 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.181720337 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.050542095 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.500112486 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.284199939 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.685725126 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.263710266 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.628681813 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.224322775 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.436819174 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.228592212 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.829591201 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.276638688 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.495576065 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.159969475 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.436312681 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.439999233 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.248860945 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.229972842 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.150008654 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.333324283 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.125817253 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.209563878 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.227695902 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.906178266 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.662560626 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.472314673 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.69807282 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.045728895 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.227540693 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.620504283 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.637068309 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.881899496 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.265317547 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227402269 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.557542464 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.363198828 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.542617671 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.523044635 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.233469596 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.251850471 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.439057798 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.349214835 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.143303412 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.706426936 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.810561972 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.927194 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.237107476 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.429877897 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.574329001 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.551453195 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.268443483 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.299190134 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.629881911 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.498564853 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.298426604 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.151684179 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.227091235 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.621752146 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.737261518 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.324567604 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.468259285 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.544329469 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.898495918 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.886367433 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.734793277 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.682882041 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.680247195 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.624028526 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.4406143 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.591999335 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.550185092 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.81841474 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.638789035 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.440095303 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.316747608 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.504812546 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.097777045 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.938452255 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.472288302 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.232888507 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.156489154 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.434946199 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.238459583 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.755947349 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.7541838 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.477034482 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.495755419 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.70249038 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.767592788 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.463805363 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.258964858 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.194491807 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.252788665 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.248869192 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.228326206 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.707499062 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.517905937 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.240893907 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17019681 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.901222716 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.156015759 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.441918776 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.448833561 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.271152232 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.785226631 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.499772702 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.333252529 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.522206441 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.510809176 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.269615744 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156776961 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.945538864 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.178471275 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.323072833 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.655976345 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.245374886 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.234172415 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.433707133 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.158507789 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276123621 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.235092417 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.429316668 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.811824457 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.506408694 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.35799138 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.473298043 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.532081528 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.129217767 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.260929665 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.503394072 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.157187617 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.901537753 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.920017797 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.270642527 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303612579 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.230493621 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.234932739 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.50160942 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.570425773 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.328381213 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.995819043 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.2699838 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.25537715 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.564115723 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.326412098 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.234160811 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.237478013 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.758922968 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.472182725 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.232200205 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.210339182 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.445995663 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.305854541 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.426554508 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.307660042 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.745754645 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.236803808 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.153872584 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.33671467 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.186680268 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232821638 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.024906596 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.294366265 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.233317549 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.507911319 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.88871068 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.435042021 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.628402092 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.213428353 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.451680398 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.282085116 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.237100128 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.236840538 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.622278735 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.537013719 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.232537716 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.501271997 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.280784608 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.238334399 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.89279673 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.202421818 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.235010655 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.990043746 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.126269183 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.966201907 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.630074099 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.369548862 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.239883655 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.236827143 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.160227342 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.235172195 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.407422214 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.255901591 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.245100496 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.611152312 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.532655153 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.325487179 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.239516239 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.234403974 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.24080596 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.447354931 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.749223485 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.251732536 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.934797604 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.438880009 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.237760368 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.714814474 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.68373223 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.523255244 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.282504821 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.461820461 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.479615715 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.773632055 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.467891426 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.224321181 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.462118216 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.235349041 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.508523818 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.508271548 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.236698984 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.448340274 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.889547704 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.527308509 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.587441574 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.548187347 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.300296295 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.465589963 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.149519093 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.240738023 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.239990699 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.500778128 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29140347 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.237339563 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.245838671 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.796054967 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.998444261 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.70091373 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.39045018 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.540973655 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.093013727 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.990763334 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.239343965 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.161558541 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.235927033 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.262674561 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.239831401 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.154176449 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.997112994 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.959945132 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.451206051 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.534304036 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.16285123 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.442185548 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.840188996 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.164158356 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.200859349 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.235802887 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.554249499 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.165399729 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.240541855 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.191801317 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.510514338 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.005168507 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.5147749 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.239393609 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.183395553 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.243908895 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.237937996 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.238936409 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.322969014 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.239463012 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.35508737 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.501159729 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.596738571 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.346552067 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.877231077 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.00051941 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.177296673 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.281851635 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.79521245 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.809065771 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.512326146 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.369578631 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.923787433 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.184082834 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.243423348 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.255406938 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.480270182 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.242949224 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.241034861 seconds)
  done (took 2299.457147646 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.314654306 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.296860194 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.301194164 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.2547481 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.314148606 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.291204352 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.311625465 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.319719082 seconds)
  done (took 60.571274927 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.239564031 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.211663629 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.249330641 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.241810996 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.24010451 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.243912881 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.427542339 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.269723558 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.240125643 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.245535188 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.242512167 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.245325722 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.241643342 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.250806865 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.245930534 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.472317289 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.258803548 seconds)
  done (took 82.809112187 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.292901482 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.144732939 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.242901043 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.022730148 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.287422644 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.540631349 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.245127551 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.246191534 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.579272545 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.536699352 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.257168032 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.254388989 seconds)
  done (took 96.818984287 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.242746267 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.242059764 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.2426571 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.241889764 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.241978221 seconds)
  done (took 13.380453291 seconds)
done (took 2867.660054748 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.485455414 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.340791501 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.3204221 seconds)
  done (took 6.828442919 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.384853056 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.435077594 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.546963951 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.57070883 seconds)
  done (took 12.110994441 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.525512552 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.621100185 seconds)
  done (took 7.315083978 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.614439479 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.261413788 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.632929276 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.228096172 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.247123442 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.2507642 seconds)
  done (took 23.899887706 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.24440493 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.24519042 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.244034331 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.243596532 seconds)
  done (took 11.147038642 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.242080948 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.003298991 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.24519852 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.260346665 seconds)
  done (took 22.920279111 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.443928165 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.304325206 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.005813519 seconds)
  done (took 9.924386466 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.047195358 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.69831856 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.85239666 seconds)
  done (took 10.768773008 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.135208122 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.229189783 seconds)
  done (took 8.535046891 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.385432802 seconds)
  done (took 4.556184599 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.073104194 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.557310958 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.716240844 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.75280716 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.820916429 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.459542605 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.569546833 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.517182204 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.644399381 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.676690271 seconds)
  done (took 28.956493977 seconds)
done (took 164.122656905 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.666423539 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.264159978 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.452196663 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.617549294 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.48184257 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.450846815 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.543176438 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.606005095 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.290494121 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.274903644 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.615534642 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.476911434 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.488565703 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.256890431 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.494055192 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.263937375 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.477006424 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.679422113 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.298201243 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.524221922 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.551571845 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.261799325 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.457069641 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.278335928 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.478428984 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.402998507 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.8476654 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.257589998 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.448624101 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.867841806 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.403802211 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.680731721 seconds)
  done (took 181.331086775 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.222544664 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.244621536 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.247537406 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.246266612 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.700436944 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.247390274 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.248197195 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.245623862 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.514445614 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.507640093 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.246255518 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.691683609 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.246502327 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.246963406 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.24761503 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.246931358 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.6262588 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.247201932 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.247963272 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.247422935 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.24727596 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.575282993 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.264430093 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.582336166 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.614970828 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.249142439 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.248697729 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.248216903 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.247657224 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.249707152 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.249772966 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.248600543 seconds)
  done (took 220.919334844 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.248156395 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.249659807 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.247894157 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.247703832 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.248471923 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.249024659 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.247114671 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.245784912 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.115497654 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.101534369 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.248186038 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.249000139 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.245690499 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.245651149 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.248087118 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.249258507 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.249072865 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.248086557 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.249139369 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.253577299 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.254414861 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.973805676 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.248011054 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.009904353 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.246329265 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.25438752 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.249246964 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.259104904 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.254922562 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.256820316 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.258744214 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.249566093 seconds)
  done (took 233.377336357 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.49029842 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.250097127 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.249452452 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.260087305 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.251135149 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.249824458 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.249001663 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.496866987 seconds)
  done (took 22.681001024 seconds)
done (took 660.49271487 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.607196625 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.970552722 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.343231514 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.26022072 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.497958479 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.316594364 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.269397466 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.331166084 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.921486637 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.347323436 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.664542444 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.279793167 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.961585249 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.2994532 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.387886023 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.333091205 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.639248398 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.90093548 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.402529934 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.920295115 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.473984865 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.212472768 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.354185546 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.952098236 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.672531766 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.2401441 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.290770105 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.648245753 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.27994265 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.515646194 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.897782057 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.524876898 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.285217695 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.271091566 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.326809425 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.314071467 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.45520443 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.282304062 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.383104065 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.018913304 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.943114661 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.804043932 seconds)
  done (took 115.978689505 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.260487173 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.255868781 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.257669568 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.257081415 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.256036265 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.25677156 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.255402288 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.258663052 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.256357471 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.256333156 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.258050145 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.257783885 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.257078489 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.258897912 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.255503224 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.258450292 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.257015469 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.255466925 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.259629827 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.259156413 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.260217774 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.258940543 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.254702891 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.257340717 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.25717293 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.25806729 seconds)
  done (took 60.882031422 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.249519452 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.435765818 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.54879362 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.291536226 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.256208919 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.257113111 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.283578071 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.265773357 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.255321067 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.255757938 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.347717689 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.261078982 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.267452635 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.539706169 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.285715787 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.252600425 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.251605743 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.25335417 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.444874839 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.276391659 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.283974739 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.267316723 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.286621952 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.273573169 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.25845144 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.256585882 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.258071442 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.675156726 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.272982813 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.35159544 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.302233641 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.293069045 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.651667795 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.549506299 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.322437381 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.262056796 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.256474631 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.393371455 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.268487178 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.255728055 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.281895676 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.266554791 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.545294817 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.788517295 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.271173443 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.254544117 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.674892969 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.403548661 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.305917532 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.272267216 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.548901133 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.283575915 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.255630768 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.257795152 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.292965801 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.266047077 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.255630981 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.538700678 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.273889201 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.279787247 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.268491971 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.255023909 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.447455013 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.271165607 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.434796923 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.264686747 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.263734317 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.257113441 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.541656395 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.282428113 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.780493647 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.272727741 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.255162506 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.350770273 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.442441215 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.702383301 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.269433366 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.447190679 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.663954082 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.294504887 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.266343273 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.661969053 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.300115813 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.269780805 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.257851204 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.256704676 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.242065093 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.30106887 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.281039594 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.696500476 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.783082191 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.556675337 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.298071547 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.266179581 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.257558191 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.540290071 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.269525458 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.252975624 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.541083952 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.791382321 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.274701966 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.261153101 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.761242789 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.278473872 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.290482797 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.274641553 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.553170433 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.290483991 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.296344406 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.258872237 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.265490309 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.263405225 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.289553981 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.26602447 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.255900332 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.756016864 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.415864702 seconds)
  done (took 278.424946761 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.263588516 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.255170026 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.258476431 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.258022288 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.255680607 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.257444593 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.256271393 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.256510592 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.255234952 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.257273604 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.25788024 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.25603472 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.259281339 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.259249758 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.293882521 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.259939389 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.745225563 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.256339154 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.254855782 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.260043808 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.82617013 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.270259311 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.260779964 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.258317294 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.262387985 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.259532811 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.263001189 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.294476083 seconds)
  done (took 178.560983378 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.252150159 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.308711364 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.227484252 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.301934271 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.274209548 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.258327422 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.279691466 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.271707128 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.264226765 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.260836072 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.25394692 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.28569578 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.270849109 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.331056034 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.288938364 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.288979576 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.333494364 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.268935187 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.260385154 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.259898775 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.309169862 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.269603558 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.287582946 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.311743139 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.275647557 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.307361472 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.278334805 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.260807068 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.260545816 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.347993761 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.275741171 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.283310357 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.290438529 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.279078086 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.350602393 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.348495318 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.339547398 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.288463049 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.268044812 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.261460285 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.257825953 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.259481773 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.300692726 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.27375457 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.261096577 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.35857927 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.282586067 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.259641691 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.281357381 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.256285998 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.269923135 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.277282002 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.279870844 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.362086101 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.30905631 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.287299881 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.28234422 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.279154483 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.259960758 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.334860741 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.277525371 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.350460331 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.279328401 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.26031557 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.258548327 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.265293893 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.309721795 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.295343976 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.337614469 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.268095682 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.329425674 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.316416278 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.230684526 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.259713901 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.259369841 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.306907963 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.347401978 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.322543493 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.319808415 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.252016153 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.281325887 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.262691551 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.268002696 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.286625365 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.264867436 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.3467068 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.356688673 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.274630469 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.261619798 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.258208563 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.262017251 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.284456097 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.321300147 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.302791556 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.349937398 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.295819753 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.297240826 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.276430645 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.279920287 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.266028708 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.288180882 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.27008309 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.27480547 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.617916564 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.3014419 seconds)
  done (took 242.754289518 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.637106037 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.294115814 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.334254404 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.530801068 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.658612088 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.374956091 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.30050983 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.313375718 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.32066096 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.430684958 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.367969279 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.357299631 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.297366346 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.288084258 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.306806365 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.317402966 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.339411316 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.613882524 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.413616865 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.029498816 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.300286967 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.585172001 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.596277158 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.66893416 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.351956148 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.684299618 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.953798282 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.40231337 seconds)
  done (took 73.260027058 seconds)
done (took 952.031839308 seconds)
SAVING RESULT...
DONE!
