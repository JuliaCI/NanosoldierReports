cset: moving following pidspec: 6871
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.815283346 seconds)
loading group "shootout"... done (took 1.110109627 seconds)
loading group "string"... done (took 0.666296826 seconds)
loading group "linalg"... done (took 8.57476753 seconds)
loading group "parallel"... done (took 0.164568291 seconds)
loading group "find"... done (took 2.998662225 seconds)
loading group "tuple"... done (took 2.120992461 seconds)
loading group "union"... done (took 14.767799735 seconds)
loading group "dates"... done (took 1.429547798 seconds)
loading group "micro"... done (took 0.216660185 seconds)
loading group "simd"... done (took 4.822497884 seconds)
loading group "io"... done (took 1.084493232 seconds)
loading group "random"... done (took 9.44648619 seconds)
loading group "problem"... done (took 1.422998381 seconds)
loading group "array"... done (took 25.306381964 seconds)
loading group "misc"... done (took 1.871111457 seconds)
loading group "scalar"... done (took 43.429370516 seconds)
loading group "sort"... done (took 3.325752618 seconds)
loading group "sparse"... done (took 12.701166879 seconds)
loading group "collection"... done (took 18.611677078 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.443380293 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115745322 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.1633842 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114764727 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.212499159 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121700838 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.12836578 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.084956073 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.867053145 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.156466451 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115364434 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.423552921 seconds)
done (took 5.394532674 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.188151025 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.246042406 seconds)
    (2/2) benchmarking "String"...
    done (took 0.164251118 seconds)
  done (took 1.643214532 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.09228861 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063377765 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068206891 seconds)
  done (took 1.46107492 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066939098 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135639511 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067188007 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067793403 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067947779 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067249165 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067343317 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067777915 seconds)
  done (took 1.780284593 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072978599 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068519816 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066339645 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068588042 seconds)
  done (took 1.512104741 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066324873 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.121925133 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065927066 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065697731 seconds)
  done (took 1.552237998 seconds)
done (took 9.444515559 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.161991514 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.849921978 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.872670325 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.147555399 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.270298263 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.36788507 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124956882 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.206551236 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112202232 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.076288636 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.144685837 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078749945 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.476741236 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.498800805 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071786031 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.176100749 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.649550538 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087925575 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135993945 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.45790169 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074275872 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.0881871 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085359763 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071942528 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.345389329 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153935019 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.65859658 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.093394066 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069134085 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095376435 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070997715 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078589087 seconds)
  done (took 11.119646484 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.116359034 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.114581245 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069980237 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124829455 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09488924 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070721038 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07645943 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068504316 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088984674 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124826343 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.09137668 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.1233396 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067330585 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070456758 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.097298703 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197814012 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081317979 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082704429 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068643684 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082350713 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106543577 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079473743 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078976684 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078613759 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133188561 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.170050436 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097672475 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099716616 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.06688262 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.08000662 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.116395753 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125749298 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067550055 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06604678 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120794402 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096395363 seconds)
  done (took 4.795114106 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.880909262 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09726144 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.108358344 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099338142 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107398681 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114489682 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.145251284 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123241814 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.105736147 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070387012 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.178051663 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.674390208 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.217479939 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072296379 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.14518787 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.357604086 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.105417217 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070776058 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069206789 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096619029 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070886822 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.137535558 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067361972 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176234656 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.601273046 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070597121 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06981291 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096813434 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.177170536 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.145041769 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095653203 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071670529 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.564012783 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.068053292 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.066020636 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090300749 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094743301 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06756228 seconds)
    (38/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.139073683 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068589457 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079588003 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067093213 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109286799 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080894926 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.513896682 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070811782 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.605530261 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.311674751 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073676003 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072574682 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102510358 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065272792 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068626124 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.148073603 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.148758161 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067414005 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.271662919 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068862893 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069168076 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069929675 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099605957 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067877916 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.072828015 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07474109 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098261073 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.792651002 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.149330433 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097192365 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067258967 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.403970764 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073899798 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069672208 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069601768 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.09311237 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.129559268 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066569379 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06652812 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107414156 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.094100926 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088577879 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.194464302 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072304136 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068434541 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.322571285 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.184051131 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068825172 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068988323 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.48813546 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.066034676 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067844321 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069772126 seconds)
    (91/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091691656 seconds)
    (92/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.066208036 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067960139 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065889151 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065548625 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066622724 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100859499 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069188706 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.335858036 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068373871 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.49119015 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.073130279 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104290774 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120940942 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069013253 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103369003 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068571107 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066409385 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074618563 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067268083 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066208573 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065789812 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070602145 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067166609 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067867827 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069672985 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069113391 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068659594 seconds)
  done (took 23.679936662 seconds)
done (took 41.712388569 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.401640446 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079969856 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080607578 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080819623 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080294153 seconds)
  done (took 2.015270693 seconds)
done (took 3.407163181 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.252102722 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076386406 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065318998 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.202497187 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.089006969 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.175566137 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.214216861 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.160042222 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.090565435 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089895553 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.088915487 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.340432631 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.224798332 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.088810294 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.159189761 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.225023761 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.088566074 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064967298 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088399354 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.088519113 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.08861076 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064782543 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.088286423 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.088540548 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.156989971 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088165017 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064477569 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.157212505 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.087334393 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.157307509 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.0874363 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087089538 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.087238698 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.158287734 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.088279454 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.159145829 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065526272 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.087416495 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.086064189 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.0867601 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.086678898 seconds)
  done (took 6.330388586 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075728557 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083636722 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085365362 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063378211 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072674733 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08325817 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062794042 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082726291 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092592227 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08305382 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082802726 seconds)
  done (took 2.249492841 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071000033 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083863607 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084778525 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06251986 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074120058 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083953382 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063072425 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083839554 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086266136 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084375601 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084172489 seconds)
  done (took 2.189245311 seconds)
done (took 12.082283412 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.189650179 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.090976801 seconds)
  done (took 1.59019979 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.259730477 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.521681256 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.978855689 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.118773765 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.097989487 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.110770023 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.222230732 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.092697215 seconds)
  done (took 7.906079289 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.09933309 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069513332 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070587795 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.098356106 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068463349 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070994008 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068901153 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068817361 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068381324 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.070149097 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06879936 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068674527 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069925081 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069554261 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069576953 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070295751 seconds)
  done (took 2.610371621 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103994081 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070214694 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099811116 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062369708 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072384442 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063352059 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071920018 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073560177 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.07097655 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07110773 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072826704 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071228315 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072017441 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.072410888 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073705542 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073828615 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073953957 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071921633 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073887098 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074324066 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073411018 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073756482 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074136151 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072589288 seconds)
  done (took 3.228509432 seconds)
done (took 16.661485748 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174192148 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075307518 seconds)
  done (took 1.573912835 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093182145 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.094719661 seconds)
  done (took 1.529234638 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073135416 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060648103 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078208281 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070360201 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062020552 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061726711 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077446929 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062170314 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062112996 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062245592 seconds)
  done (took 2.014307515 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063805148 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068587449 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067196268 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065186557 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.06729498 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062889431 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065870922 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063448675 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069219434 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062485112 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066462338 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083248878 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065834429 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084707125 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065629081 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066264683 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067835842 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065684354 seconds)
  done (took 2.564183219 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06158409 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061822834 seconds)
  done (took 1.47128114 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064969339 seconds)
    (2/7) benchmarking "second"...
    done (took 0.06246068 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06431711 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064434195 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062309721 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061709158 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062383383 seconds)
  done (took 1.783924364 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423397476 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.184198892 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.417995139 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070109349 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077125465 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.256430827 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064675237 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069443702 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069204716 seconds)
  done (took 3.016204872 seconds)
done (took 15.308780599 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083052029 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180630773 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.112285811 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.409880507 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091883499 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068182563 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11356502 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.204980709 seconds)
done (took 2.632200208 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.277770001 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.16401109 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.313059812 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.149010902 seconds)
  done (took 2.981504141 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.392914878 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.167179431 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075732468 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067257832 seconds)
  done (took 2.065657637 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065795057 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072157486 seconds)
  done (took 1.498284507 seconds)
done (took 8.191006692 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071833738 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.091328525 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061557922 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061682757 seconds)
    (5/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.067097679 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.064229295 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064220045 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.063763559 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06333078 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064074878 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062358746 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.064789811 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064309229 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064275192 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06408127 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064157456 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064403665 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063768334 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064079768 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064314075 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064317003 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064449095 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063422802 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064048571 seconds)
  done (took 2.953088317 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079703379 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065987366 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066929452 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066777564 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067653285 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067720979 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067231978 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065965214 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067643189 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06625074 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068068786 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068076485 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065920086 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067981352 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065904027 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068128744 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067629696 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066330121 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066417895 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068776911 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067752656 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066616094 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068189742 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067393518 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.0679495 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067762234 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066044 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066562728 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067605083 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068089865 seconds)
  done (took 3.405805122 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06679906 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060408912 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060438527 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070830878 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060511447 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.06049035 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061016211 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060485952 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060896302 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061797548 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060975103 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060543018 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061286536 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060374122 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061012813 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061029772 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065769875 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079988893 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060678485 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060432551 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065416722 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060593847 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060693458 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060746431 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061322529 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060844575 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060341735 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061214004 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060633839 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061709483 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061423553 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065386561 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066408817 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060717723 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071253126 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066045542 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060744969 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.067363542 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061766804 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06074041 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060694351 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.06095042 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060653149 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060910245 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071201851 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061092198 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061713095 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061068535 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061129922 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060580554 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060796339 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062622729 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069727524 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062367832 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060592123 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061819549 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.06035631 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061251428 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060701348 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060445344 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.06063712 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064885816 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062380597 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061481754 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081136372 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062149258 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071027258 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060911077 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061389212 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065589216 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061525422 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078674603 seconds)
  done (took 5.91496029 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071495258 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072025535 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079674399 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.07062542 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0647761 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061519895 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06513876 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061481466 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070806902 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065402092 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061550267 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065059188 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071186853 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065088135 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062956497 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.071275342 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065690487 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064912365 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061910219 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065410242 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062905156 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065134654 seconds)
  done (took 2.854031345 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138788727 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066883471 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105311539 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070543511 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069343701 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07068372 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066750962 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.0670308 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066961814 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06771383 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067768476 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067245401 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069283114 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067916247 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067728361 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067582635 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06782982 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067355564 seconds)
  done (took 2.707994857 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076882451 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.06654678 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090637025 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066336676 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067019003 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066763339 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.07013112 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07056127 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066377077 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066972994 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070644122 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066891604 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.0678267 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06718305 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066380732 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067365307 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066761901 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066969589 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070938799 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070275407 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070212411 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070906233 seconds)
  done (took 2.908510755 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077723906 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065396376 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080825364 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067559196 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060638414 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060952471 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066913508 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065945838 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067121337 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065881781 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066440487 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06110023 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067923959 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066001732 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067971976 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066330529 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066212621 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06635192 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066294265 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06114944 seconds)
  done (took 2.71408635 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098330393 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063461079 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063431719 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068568169 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063755602 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074488916 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068852259 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063648565 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064055556 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086168579 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064342548 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064155752 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068699784 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067142073 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06441829 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069350401 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069085592 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069231827 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063604557 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063393647 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085331194 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063411754 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068542065 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063742527 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063374968 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063363145 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063869122 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066652026 seconds)
  done (took 3.296584107 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064905962 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064227842 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064378576 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064132779 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064012121 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064245106 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064009055 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064567355 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063887128 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064848103 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063955828 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064104165 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067276167 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063929681 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064217579 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064673231 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064375797 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064535609 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064693362 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064452668 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064471122 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065038959 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064594884 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065254341 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066411473 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064996196 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065337874 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064888226 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064750622 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06484632 seconds)
  done (took 3.330307987 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073515954 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071678685 seconds)
  done (took 1.531369585 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062167219 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079097432 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060019987 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073210077 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068896434 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06485477 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070334694 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069692034 seconds)
  done (took 1.928948106 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092355131 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.117395425 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062741756 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062868436 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.091488296 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128166388 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.101369035 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074787478 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07609127 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065455781 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062778575 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.102051703 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.06159554 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076166031 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063502257 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.07192066 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070259031 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.08061555 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07530421 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060439229 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074937189 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062957673 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060832319 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063036609 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061988779 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069689605 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078236715 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075131162 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071406449 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05987502 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081148747 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061030321 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062516586 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071266884 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.092373973 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061106481 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098434903 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061603167 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066151159 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.06079196 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073869243 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082104636 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076035914 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079325048 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062876886 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063253215 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060335699 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063272326 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065288577 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071000053 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060949448 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069254604 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060609869 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062602686 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072287129 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061899204 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066567653 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071495223 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075667434 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072411673 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.074235167 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077520389 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070921238 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.06919746 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06217068 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081115398 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062919912 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074956163 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076481973 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062435119 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074588172 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.06073984 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059943534 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060480866 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094934453 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062481372 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062063328 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06111281 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061107181 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062208766 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071171353 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065776286 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069146684 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064583985 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077095667 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.07090223 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060936842 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067083466 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078941843 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065191289 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061120115 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.0774998 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064684568 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059936078 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078021367 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070935741 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.061829997 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061094258 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063850077 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073790617 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061054075 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058892673 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068998158 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.061442027 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.087196695 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063871347 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.209525177 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062899556 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.074218089 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067011547 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063760197 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060475761 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066430147 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062312856 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.06016822 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071281883 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061434654 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076232706 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068460616 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076408433 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07736979 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.074164557 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.079521244 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062885315 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.061518541 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.081994644 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.072902856 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.064074303 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081585699 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062041541 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.077222014 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062423846 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06382723 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072747045 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061437333 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064476572 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061598703 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067381392 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063991636 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064253739 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068007197 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071022648 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074508982 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062828462 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070516744 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.06141227 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077190572 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071746905 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065923508 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064580462 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062535495 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.07369049 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068915858 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.0713444 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060677347 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061882755 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061705346 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072213966 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071444484 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063075917 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068457277 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066099514 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061781962 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061358481 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062229967 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065379673 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064419947 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061915646 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069962317 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070232769 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075427321 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068434623 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070860033 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060315541 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060542214 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062903179 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061059707 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066332386 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071166097 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077338673 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073661728 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082891736 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061412066 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071626185 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062699036 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078731007 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.07533113 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062505424 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066365143 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060235914 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062877547 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070927079 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072850166 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075164259 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076127974 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065992603 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066188075 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060730107 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076142442 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061464711 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07002038 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071068743 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065210571 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060810395 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062259 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070980984 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065583613 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.06082924 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076539263 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066045623 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059998719 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075236538 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060394924 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07107931 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060223048 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064441766 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066234582 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061752655 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069807805 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075374036 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058929732 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.060535842 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075768392 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.205280349 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064364999 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071193722 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077989481 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066773479 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070294465 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072724293 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072197375 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066598288 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071954272 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062535493 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071680907 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064509737 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073600332 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061118029 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079698798 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060014565 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076721552 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061788811 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072688112 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061594145 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071078647 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062406604 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078211642 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063345318 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062023974 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073821171 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060163313 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071024988 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060625377 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067296364 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068389311 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071564338 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063372803 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071508817 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062741992 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.070593726 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.066437974 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.069754291 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071318686 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.065789087 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.060932151 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070426392 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072357402 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070081909 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062987628 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062692551 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061891772 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071180978 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063012172 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062767611 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069997128 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066460395 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067804228 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062479131 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063067099 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062948736 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07072475 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071453486 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079880342 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070376402 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069446095 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070971519 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060846944 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077474327 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061591866 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072355235 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060129137 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067253306 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071277773 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061496177 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080529544 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062760397 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069755031 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074625002 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070523938 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065576715 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079424025 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06470215 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07037013 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069851673 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066454704 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068587153 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063417584 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070200029 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071182086 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072413063 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06197819 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069230223 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070614866 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06250111 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068319076 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06262334 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069892122 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062602429 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060273482 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066005499 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07302193 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066062537 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066693982 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061501962 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059596082 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061090849 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067022168 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065941012 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070021645 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076106667 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059351572 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061682034 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060170113 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064710981 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078230942 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070008871 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068690891 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065488209 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058998242 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.06182581 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061545331 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.207587406 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065364745 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061217025 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061447517 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072890725 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063400641 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066362502 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06170245 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062868374 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071682468 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065759723 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062361327 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068312901 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.06106139 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066942048 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060711546 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063075998 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066515404 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.06039675 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065391978 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072218134 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078258991 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.06800375 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070531152 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062182693 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069990028 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077742338 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067631752 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062488329 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071300356 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060472875 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080017314 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071292888 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070464822 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071720134 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063436051 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079540388 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067529521 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.073545345 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077403924 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06223209 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067488221 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060724477 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077035503 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065716587 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061616522 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.07066913 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069881238 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067619639 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073953925 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061957391 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06997246 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066406449 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065067497 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.0631614 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.062924971 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070728655 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077409013 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062197301 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065284711 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069627424 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070760833 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066333974 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074585873 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070421285 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062313242 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063134421 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.06524387 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062028658 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073596864 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061835882 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066161083 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066089403 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061040709 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068393776 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078147474 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071103814 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071434568 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060721173 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060687391 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079426767 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065363892 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064717289 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070172184 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071436785 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074284709 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071765821 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078493478 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061916429 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067403784 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073762447 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061781689 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061141941 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064999894 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062460477 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070549547 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070974136 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069224759 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063211938 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068301548 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075019484 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061990039 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065813107 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065765454 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061195298 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071416482 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069441836 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072580955 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061851351 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059770329 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064224527 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069653998 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068222306 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069387363 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060583418 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065975476 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.07344655 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.067663205 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.207025597 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061906824 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065282986 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071303697 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065755292 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.060805908 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066213566 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06551115 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067703383 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.07122198 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066525071 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.0607006 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078252189 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069749501 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070739146 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062784508 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063136028 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061605104 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060704011 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072650329 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060534099 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062590612 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066549918 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062717047 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079226906 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069677355 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07744549 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062002664 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065864329 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060597877 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071169097 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066119529 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061462751 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072086395 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060358583 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076807225 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.07352035 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066002431 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060516059 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066869779 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069377046 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076580396 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071216631 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070899868 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.065164345 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071815255 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062797772 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072525569 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060725099 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059904721 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071316966 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070289345 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.0737847 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060462367 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.0715782 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063046705 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069666855 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069735237 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06277287 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062741639 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062655071 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071388617 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065959847 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071247742 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066426318 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.078062044 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061871468 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07258989 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.070764368 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072599844 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075153296 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073874268 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069373039 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062021597 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069244774 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069594299 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06219696 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066343089 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064384391 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083088649 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06311486 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063116945 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076416098 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067975284 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061299255 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067765332 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06637986 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071808486 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062489635 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072097061 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065333866 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061855209 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066247061 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066482172 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060158852 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060876279 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06108325 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071379457 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065992936 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061212704 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080288064 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062590242 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.07033554 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072121697 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068138145 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062661854 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059522631 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062155659 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074297957 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076208662 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064646576 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069515911 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061364473 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070371873 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059047094 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069152631 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068369564 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.213672078 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.06192849 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062193637 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.077283673 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077706147 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066675154 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071273877 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070902411 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062885304 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083309452 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070706529 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062280432 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072459693 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063527651 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061017873 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060142499 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06259668 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073232837 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.060775544 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063479392 seconds)
  done (took 42.693631122 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098406415 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061834648 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060913378 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060808317 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068582621 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061798073 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06087501 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062216649 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062061187 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063587954 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060925274 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063859633 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067231899 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074256477 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069161391 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065005454 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060556777 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06192455 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061151105 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062189303 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067525139 seconds)
  done (took 2.867006762 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064613372 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064900427 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064804217 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064842455 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064417145 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060964103 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064724387 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061186685 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065572153 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061758186 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065443155 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061320382 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061702548 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061781235 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061793791 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062557582 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065548873 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064605235 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061417429 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06502576 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062873228 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065539641 seconds)
  done (took 2.876680609 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062611779 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061581029 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069992492 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060250587 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060162882 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063665665 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060143728 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06547442 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06639973 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06544474 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070297947 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061374398 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060228443 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066918646 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060481902 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061621367 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103207739 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.06204922 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061625807 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060518955 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063352878 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070720178 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060622915 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061170192 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065646209 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064110515 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060382969 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063261974 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061568734 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065706795 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061702791 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060207297 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070389741 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.0693633 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065678593 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065581201 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062380861 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061600755 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061141876 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060542816 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069879683 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062357351 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061105033 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06225432 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070048054 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060584141 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061232884 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07122635 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060238439 seconds)
  done (took 4.641207402 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071198005 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113268217 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067105895 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094418812 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074026595 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066712852 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066818035 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095292653 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061964812 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06228838 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074553257 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075105214 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063671357 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065165894 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068606008 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063723022 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064264742 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063931772 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067928698 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06552046 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068024962 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069135099 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073906511 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074277186 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064379327 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062648914 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063172197 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064514687 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073709824 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066706904 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064850989 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065426659 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073901437 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068573194 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063227126 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063138264 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074614588 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063729435 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06346088 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.06198433 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063300481 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064735362 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067989976 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075294077 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063827782 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068725413 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063706956 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061590055 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074426445 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063510935 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067164617 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075571903 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064908909 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063795767 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065098829 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074433885 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064281101 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062539633 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064371836 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074020111 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062558509 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064462799 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077375006 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063174538 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067033289 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075229562 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068647313 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064419013 seconds)
  done (took 6.296799453 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070601037 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095802876 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076555575 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.077672175 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07197926 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071618557 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071989443 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071721307 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071859312 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075084743 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07187968 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.133298639 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068537759 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073364102 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072516452 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071796056 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071685759 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071601275 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071767963 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072364118 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072320228 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076794929 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071944657 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076954395 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074045318 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068059584 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07160339 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071805455 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.077021551 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071526649 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073687168 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071646848 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07174636 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.078471177 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074026126 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071706225 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061833926 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071354098 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071914351 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071466256 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067862683 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076727614 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071637917 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06840611 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071524415 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071333187 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07709562 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074516113 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073225229 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07489475 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071953383 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.077126708 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071776124 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072153409 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077335923 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079447196 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077053483 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07699312 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072153075 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.077212149 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076828374 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079462528 seconds)
  done (took 6.143393337 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074434253 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067681375 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079837136 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061004981 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061080497 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071002587 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060740397 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061388012 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067896385 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067530929 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069246902 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070768282 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072697917 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069288696 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070667052 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072657908 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070481066 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070697288 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0682492 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.07094951 seconds)
  done (took 2.89768881 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076208889 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080113254 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066669232 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070607759 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066626692 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070723041 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066541617 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067044478 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067368107 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066962638 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071837424 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072211749 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067511004 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070955011 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071602701 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071092038 seconds)
  done (took 2.624825437 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064369614 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068868963 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.095174644 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062697785 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064489279 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061885343 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06252079 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.06092263 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063773226 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075501771 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062346825 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064845572 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062476199 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061590236 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06165773 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064852189 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06359305 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062135549 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.06293376 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.0935841 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070512253 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.06268129 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064918471 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061873936 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064065398 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070553579 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063310581 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064023786 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.06171873 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064520895 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064309351 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068973744 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064153843 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062262501 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061138492 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061748993 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062695899 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064599081 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064580474 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062543226 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060717203 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06723401 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062198346 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062842986 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063474133 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064648228 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063510728 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068342901 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06218569 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064082615 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062310004 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063671531 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062644368 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069534978 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064560569 seconds)
  done (took 5.088596786 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078496434 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066860275 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060941569 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060547019 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066165688 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066900802 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066774675 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066779518 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067283859 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061196338 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067362783 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066328079 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066739433 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066805747 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067168531 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066568221 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061031331 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066629267 seconds)
  done (took 2.71247009 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067368686 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066475768 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065371747 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.062757797 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062733478 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067659866 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061144595 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062872339 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06281766 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063030377 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063025011 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062657766 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062548914 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062448693 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066690114 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063132206 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062749162 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061274084 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063067961 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061110509 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067605573 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06145492 seconds)
  done (took 2.908209686 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.117687585 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085049544 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.156896616 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.08087772 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089482267 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072837072 seconds)
  done (took 2.112775628 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.09455231 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098599533 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066187425 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066278829 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071224451 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069614105 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069331674 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069504895 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073008371 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073233727 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069644248 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073667503 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072964015 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076266084 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071341838 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071198806 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069755148 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069429285 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066620113 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077110702 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070024028 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07318255 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06972246 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069435934 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069925219 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074729338 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072665714 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073034877 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069657926 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073413853 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07113197 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069679175 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073157917 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073040072 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066244684 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073785373 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070041347 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076906685 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071292413 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074732202 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066574707 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071206511 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072768481 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07277213 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07306864 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069884838 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072795152 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069534078 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069767733 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078362147 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071188857 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074532246 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07140163 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073718197 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073033118 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078269483 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073578098 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075126279 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071227559 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073745914 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074747991 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071425321 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074720531 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073890364 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071006623 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074426277 seconds)
  done (took 6.315105055 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104348087 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066797725 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069462381 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073309706 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074696882 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069546997 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069678641 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069901658 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069402797 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067439612 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10512109 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070188844 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074884205 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077754441 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069864605 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069608302 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069939705 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074961962 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068509525 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080989086 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07164695 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075124004 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07516191 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074810064 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073572724 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071444475 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069695495 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069923172 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069560033 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069518565 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072743794 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069523523 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074567899 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06660355 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074569312 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069763282 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069558565 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072583543 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069074759 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071225536 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074398022 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076740004 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069699046 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069681099 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073251283 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069534115 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069538599 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066785685 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069748613 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067399183 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073920107 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073858735 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073454315 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075038511 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069974634 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069776632 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0699086 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070414968 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069939599 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071716618 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075414066 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070072338 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078854885 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069659523 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06971362 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075055671 seconds)
  done (took 6.329706599 seconds)
done (took 131.413205213 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.237829274 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.205073447 seconds)
  done (took 1.941231958 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074823596 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.193052469 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.074602902 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074609357 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108299555 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107883512 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.104030494 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072123511 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074527297 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072046979 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.135429843 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.104463316 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072168622 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.09292387 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071825477 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073130035 seconds)
  done (took 3.02565388 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.10776117 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.211323307 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082525676 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070620723 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.152002262 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077480229 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072740667 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076878141 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076915762 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070468514 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106912033 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.08336431 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07607707 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077297513 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072867228 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076147182 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.077130696 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077369389 seconds)
  done (took 3.17870278 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103605255 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.091695822 seconds)
  done (took 1.725624247 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155758083 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106383291 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145513759 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.345617092 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137081138 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.139488461 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.1417737 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.138088843 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110664026 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.134249751 seconds)
  done (took 3.075068723 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.105680495 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.104789815 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.306790418 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102637939 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.08306805 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078048779 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075477581 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079864134 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075464376 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076708292 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121934468 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075772632 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073470121 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124014827 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099230305 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107232664 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071651817 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078650314 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080309751 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071385961 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076255323 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080497696 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.176926903 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078936587 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099810796 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075994858 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077027574 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074193787 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074605467 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078080678 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078390425 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099325172 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078190251 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083137705 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076843851 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096404875 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07191031 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098844398 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074327925 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072848357 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075700722 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078883974 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072708536 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077732243 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075522952 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077526312 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080322784 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.302338239 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075284885 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074231635 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07305246 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076034983 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076096351 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077093448 seconds)
  done (took 6.545294939 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.119138725 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.112293979 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070626134 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117207973 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109451169 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070352735 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.121838316 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104784887 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122699753 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070257727 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069422459 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069769337 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076684895 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079518619 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119856742 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.1121366 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07172276 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070385031 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.111392436 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111224625 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069288793 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.108016491 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.113470675 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110175817 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06887485 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070258433 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069100771 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069659137 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077098321 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075910079 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069383953 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078883579 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.080731002 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075684736 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06877151 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06870131 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068623275 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075849409 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07793445 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078368164 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074710736 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068369526 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068671539 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06913001 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069527623 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068124464 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077517287 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075671236 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07773683 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068952548 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069458818 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068943455 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069364172 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075421279 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074445479 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076527309 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079074206 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069271523 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069311171 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070554518 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079859851 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077609908 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076831605 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070600129 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077826168 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069220951 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078897733 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081536487 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069379179 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069772801 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069021446 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069284474 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069388596 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07525688 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074799072 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069667524 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068937146 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068558194 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076564797 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074992569 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06881306 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076801434 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068317444 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069783668 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069527572 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06908268 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.076488909 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075813932 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069258545 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068275777 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06797275 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067724439 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067473742 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075148461 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074097421 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074386568 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.215636662 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071158637 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079031979 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075834282 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070723397 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075481215 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069473473 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069583251 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070302558 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07530084 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074646188 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076849606 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069626088 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068648652 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075566421 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077922104 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06880186 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.074783291 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076739548 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.075487423 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.068954347 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078388782 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069707021 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078161643 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069459393 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077672536 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069611221 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075285202 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069571439 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068654984 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069302622 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077867564 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069840724 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069337333 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069343259 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069710507 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075233848 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080905438 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069805392 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075368982 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.0753341 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069922635 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078151405 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069360106 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078109712 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069390927 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06966313 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06839138 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080447029 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069252084 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069216891 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069100919 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077830083 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069458706 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077785337 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07493072 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068442618 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079106029 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077407784 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075026322 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078044027 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070036886 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069219331 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069188699 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072210327 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077192679 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078761652 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069768445 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069572472 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074758591 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077846716 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068875833 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075174018 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075075247 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.0755439 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069452985 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069208766 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078222306 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079950906 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075621187 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077400706 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07552999 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068723936 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074835573 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077513599 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068862454 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081128771 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068847011 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079385804 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077739523 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073939601 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077261443 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.07817873 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.0754702 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075334829 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077835372 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067618321 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067848335 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.215655455 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070108038 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069954871 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075262645 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069707103 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06987004 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079815785 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069747066 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078578349 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069190824 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075975976 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068708096 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069515032 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079808381 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069093398 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069674517 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074785577 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069555346 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075142377 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077801826 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075210583 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06933328 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069850253 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078656444 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077621907 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069723134 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069294895 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069501199 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.077119552 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.077630724 seconds)
  done (took 18.772275896 seconds)
done (took 39.806895401 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.167712603 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.114564594 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.209399592 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198534906 seconds)
  done (took 2.313931498 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100536254 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065413482 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.107873324 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.118675289 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065594742 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.103878973 seconds)
  done (took 2.135230792 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200315331 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174273448 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.242701123 seconds)
  done (took 2.184828344 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.365736694 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148870848 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.214899635 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.498556123 seconds)
  done (took 2.89004646 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.137349096 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.12821723 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077205458 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.139307247 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08452476 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062580357 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134742285 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069866359 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099547382 seconds)
  done (took 2.564881157 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13883602 seconds)
done (took 13.792140804 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.106455138 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.329454456 seconds)
    (3/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.34271157 seconds)
    (4/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.28116538 seconds)
    (5/341) benchmarking ("sort", Float64, false)...
    done (took 0.137455671 seconds)
    (6/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.31467413 seconds)
    (7/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.158887784 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.124923629 seconds)
    (9/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.254086445 seconds)
    (10/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.078647583 seconds)
    (11/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.177387471 seconds)
    (12/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.10989797 seconds)
    (13/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.297615014 seconds)
    (14/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.07983829 seconds)
    (15/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075389969 seconds)
    (16/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.317736648 seconds)
    (17/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.201371795 seconds)
    (18/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.315885521 seconds)
    (19/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.235809877 seconds)
    (20/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.224245666 seconds)
    (21/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077410679 seconds)
    (22/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.271370495 seconds)
    (23/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.094208078 seconds)
    (24/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.238448615 seconds)
    (25/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.12765497 seconds)
    (26/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076429086 seconds)
    (27/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073478226 seconds)
    (28/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.243857468 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.121406709 seconds)
    (30/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.274695846 seconds)
    (31/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066484465 seconds)
    (32/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.227456903 seconds)
    (33/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.184212988 seconds)
    (34/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.125526566 seconds)
    (35/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078185262 seconds)
    (36/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076801679 seconds)
    (37/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078402225 seconds)
    (38/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073823313 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.093620015 seconds)
    (40/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067356442 seconds)
    (41/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.066749138 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.148070501 seconds)
    (43/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07452276 seconds)
    (44/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073643322 seconds)
    (45/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.096362021 seconds)
    (46/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.204876409 seconds)
    (47/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.206239593 seconds)
    (48/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.073640601 seconds)
    (49/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.190423417 seconds)
    (50/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.145074355 seconds)
    (51/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073131138 seconds)
    (52/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.07304999 seconds)
    (53/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.065673505 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087550831 seconds)
    (55/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.254686041 seconds)
    (56/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066990297 seconds)
    (57/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.10826465 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078406815 seconds)
    (59/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.073846122 seconds)
    (60/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.204943122 seconds)
    (61/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075486061 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.181511421 seconds)
    (63/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066354816 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.080991617 seconds)
    (65/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.07339028 seconds)
    (66/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082082867 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.097279096 seconds)
    (68/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.145197472 seconds)
    (69/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.112530642 seconds)
    (70/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.231380944 seconds)
    (71/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.15723188 seconds)
    (72/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.305255377 seconds)
    (73/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.074083404 seconds)
    (74/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.160440537 seconds)
    (75/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.073654982 seconds)
    (76/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.130555628 seconds)
    (77/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.072937538 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.087016406 seconds)
    (79/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.255693678 seconds)
    (80/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.066231681 seconds)
    (81/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062807576 seconds)
    (82/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066393162 seconds)
    (83/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.158913175 seconds)
    (84/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.081471685 seconds)
    (85/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.160691572 seconds)
    (86/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07569979 seconds)
    (87/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072491109 seconds)
    (88/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.194536914 seconds)
    (89/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071930783 seconds)
    (90/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064784973 seconds)
    (91/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.148132814 seconds)
    (92/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.152285922 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084522726 seconds)
    (94/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.142737841 seconds)
    (95/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.071437767 seconds)
    (96/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065714919 seconds)
    (97/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.142309672 seconds)
    (98/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.221850838 seconds)
    (99/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064700607 seconds)
    (100/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064124787 seconds)
    (101/341) benchmarking ("sort", BigInt, false)...
    done (took 0.254113757 seconds)
    (102/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064137276 seconds)
    (103/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.16608009 seconds)
    (104/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.149798468 seconds)
    (105/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.064218812 seconds)
    (106/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.140322912 seconds)
    (107/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093201048 seconds)
    (108/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.080706632 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091000988 seconds)
    (110/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.074645877 seconds)
    (111/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.147442767 seconds)
    (112/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065259312 seconds)
    (113/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.069931542 seconds)
    (114/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064869742 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071688993 seconds)
    (116/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.064836738 seconds)
    (117/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084337536 seconds)
    (118/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065865868 seconds)
    (119/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.19370379 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.06450246 seconds)
    (121/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065156893 seconds)
    (122/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.074394736 seconds)
    (123/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.141939728 seconds)
    (124/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.076095042 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.178999843 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.063885885 seconds)
    (127/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.064311272 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.073380868 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068302688 seconds)
    (130/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.212482051 seconds)
    (131/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.190221046 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064399779 seconds)
    (133/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072346572 seconds)
    (134/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.080899534 seconds)
    (135/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064295578 seconds)
    (136/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066737713 seconds)
    (137/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.070912395 seconds)
    (138/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071914561 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.08923558 seconds)
    (140/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067287065 seconds)
    (141/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.148274979 seconds)
    (142/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.071635878 seconds)
    (143/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064189593 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085121037 seconds)
    (145/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072377739 seconds)
    (146/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.062486651 seconds)
    (147/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.064723732 seconds)
    (148/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.080746244 seconds)
    (149/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075148477 seconds)
    (150/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064682857 seconds)
    (151/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063815732 seconds)
    (152/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071722959 seconds)
    (153/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.066082537 seconds)
    (154/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.219159442 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.362982917 seconds)
    (156/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.232925609 seconds)
    (157/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.073350287 seconds)
    (158/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.06933807 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.079393375 seconds)
    (160/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.07076258 seconds)
    (161/341) benchmarking ("sort", Bool, false)...
    done (took 0.147374618 seconds)
    (162/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.06832612 seconds)
    (163/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.070297241 seconds)
    (164/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.070782507 seconds)
    (165/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119366774 seconds)
    (166/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.079959748 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.078114591 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075376133 seconds)
    (169/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.167142467 seconds)
    (170/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.068110466 seconds)
    (171/341) benchmarking ("sort", Int64, false)...
    done (took 0.069073656 seconds)
    (172/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076844218 seconds)
    (173/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.174296768 seconds)
    (174/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.088179819 seconds)
    (175/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.067777636 seconds)
    (176/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.200693452 seconds)
    (177/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.212565584 seconds)
    (178/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.069198512 seconds)
    (179/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.15964369 seconds)
    (180/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067280391 seconds)
    (181/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.084828552 seconds)
    (182/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.208389079 seconds)
    (183/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.067167661 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.067118308 seconds)
    (185/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067691735 seconds)
    (186/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.14159227 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.0665552 seconds)
    (188/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.085476949 seconds)
    (189/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094185608 seconds)
    (190/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.253905307 seconds)
    (191/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071837329 seconds)
    (192/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076067715 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.190565182 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.093819042 seconds)
    (195/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06530987 seconds)
    (196/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066624787 seconds)
    (197/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067885275 seconds)
    (198/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067879966 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.185937748 seconds)
    (200/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.073945146 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066364853 seconds)
    (202/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.071213377 seconds)
    (203/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.07098123 seconds)
    (204/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073508529 seconds)
    (205/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067604262 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147637317 seconds)
    (207/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073635977 seconds)
    (208/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066992109 seconds)
    (209/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067393376 seconds)
    (210/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.067067554 seconds)
    (211/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085787501 seconds)
    (212/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082270348 seconds)
    (213/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073838691 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089979583 seconds)
    (215/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067866818 seconds)
    (216/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064817771 seconds)
    (217/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.156497332 seconds)
    (218/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.07375711 seconds)
    (219/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06685954 seconds)
    (220/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073812624 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135335836 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065499284 seconds)
    (223/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.06648609 seconds)
    (224/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069997709 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066675003 seconds)
    (226/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070904154 seconds)
    (227/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.081611634 seconds)
    (228/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074714398 seconds)
    (229/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067458182 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115142525 seconds)
    (231/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073694005 seconds)
    (232/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066420657 seconds)
    (233/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070633785 seconds)
    (234/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066364351 seconds)
    (235/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.16217734 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068937213 seconds)
    (237/341) benchmarking ("sort", Float32, false)...
    done (took 0.138573005 seconds)
    (238/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.06664583 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086280198 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066604601 seconds)
    (241/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.162640357 seconds)
    (242/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067718052 seconds)
    (243/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067551365 seconds)
    (244/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.208698568 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076864536 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078451962 seconds)
    (247/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068095479 seconds)
    (248/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.215611515 seconds)
    (249/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066643648 seconds)
    (250/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.08007192 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066246726 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073627595 seconds)
    (253/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.154129439 seconds)
    (254/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07357373 seconds)
    (255/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070664786 seconds)
    (256/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074419055 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094969173 seconds)
    (258/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152390718 seconds)
    (259/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123394856 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.317289696 seconds)
    (261/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.06839692 seconds)
    (262/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.068348465 seconds)
    (263/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068026867 seconds)
    (264/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.066569394 seconds)
    (265/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.081627853 seconds)
    (266/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.184380794 seconds)
    (267/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095318468 seconds)
    (268/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065651062 seconds)
    (269/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.065836256 seconds)
    (270/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070987519 seconds)
    (271/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077891869 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150705798 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123121068 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13358755 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065889629 seconds)
    (276/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087154505 seconds)
    (277/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067447738 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064813565 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.09451539 seconds)
    (280/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066397327 seconds)
    (281/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066735034 seconds)
    (282/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.207611558 seconds)
    (283/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066703892 seconds)
    (284/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068841537 seconds)
    (285/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068438136 seconds)
    (286/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067053154 seconds)
    (287/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066788681 seconds)
    (288/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066425678 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151025549 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.14812992 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090152057 seconds)
    (292/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074205717 seconds)
    (293/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078179676 seconds)
    (294/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067291325 seconds)
    (295/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068097849 seconds)
    (296/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.087103476 seconds)
    (297/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066908004 seconds)
    (298/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.066636916 seconds)
    (299/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.066822168 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.199960039 seconds)
    (301/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074602107 seconds)
    (302/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089575877 seconds)
    (303/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.067048363 seconds)
    (304/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.078332687 seconds)
    (305/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066725459 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.151965454 seconds)
    (307/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085579141 seconds)
    (308/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067480207 seconds)
    (309/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066710594 seconds)
    (310/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093839113 seconds)
    (311/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069928157 seconds)
    (312/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069408885 seconds)
    (313/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.067131473 seconds)
    (314/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.069230199 seconds)
    (315/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.07081215 seconds)
    (316/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067021921 seconds)
    (317/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.212650412 seconds)
    (318/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070807204 seconds)
    (319/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066511007 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077928844 seconds)
    (321/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065338825 seconds)
    (322/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065333776 seconds)
    (323/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133027997 seconds)
    (324/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.066201486 seconds)
    (325/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066340539 seconds)
    (326/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068669635 seconds)
    (327/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065776618 seconds)
    (328/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066187524 seconds)
    (329/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068888928 seconds)
    (330/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.066370864 seconds)
    (331/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068739239 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066382178 seconds)
    (333/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.068308718 seconds)
    (334/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.070906546 seconds)
    (335/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073965674 seconds)
    (336/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071021142 seconds)
    (337/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06651707 seconds)
    (338/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067040743 seconds)
    (339/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068364937 seconds)
    (340/341) benchmarking ("sort", Int8, false)...
    done (took 0.149468454 seconds)
    (341/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146728132 seconds)
  done (took 38.935301956 seconds)
done (took 40.526578677 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.125294628 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081885025 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.08081307 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076885104 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.080219979 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.078625999 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.079649631 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.077557771 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078922501 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078653204 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.108742461 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066519624 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074966308 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081795948 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07576113 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081945805 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078880694 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081786666 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067290691 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080784652 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090232236 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078286175 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075263283 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080937042 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067078622 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075441591 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120549971 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.085377451 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071230171 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076094775 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074369332 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084821345 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074369432 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073295285 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076492983 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072735054 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076336959 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073705294 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.121122749 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072596894 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067168758 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07858207 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073723404 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074681535 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075096542 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078329149 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071648267 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080023952 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066121975 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077845058 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120325873 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07164994 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070930244 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074723922 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071956214 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075663584 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070533023 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077570114 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071508147 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078091252 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.07529646 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075000442 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066083862 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075024791 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073525689 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074126185 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.0651333 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071553018 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06642137 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066182298 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065592156 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074640681 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073280461 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071494412 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065616177 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066341814 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065470079 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078506226 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072489354 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076185629 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066780431 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072026977 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071438202 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066945851 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07160803 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078081943 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065520873 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066780124 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065431784 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080790009 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072881208 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066385918 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077962883 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071790261 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071025244 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.06617528 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065449112 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071227473 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074020004 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066061265 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.064971919 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071111876 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071187669 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075020489 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066860443 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071679133 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071316221 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065151499 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074740675 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073092341 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074862906 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079210547 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074951879 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078245814 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.06660638 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065043962 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075996701 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066460709 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071169065 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.219324376 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072015492 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074235693 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066819302 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065943191 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07159626 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072496716 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.071341667 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067342126 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066561931 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075517837 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073431234 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06544888 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066084153 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074626315 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074907072 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065503419 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065334237 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075580403 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066848523 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.07271106 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.07230146 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075058915 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.06560671 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066989449 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.065632729 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065773138 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06581383 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071638565 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071086453 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067021799 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075180795 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073118727 seconds)
done (took 13.232719253 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067371462 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108106483 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.115012283 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.11160043 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079597658 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068185419 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070856005 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085746447 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.07049172 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.091109379 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.092396173 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088764953 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.132742085 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066183101 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067324616 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068218861 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065816129 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.079301173 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.114057424 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091078109 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.103680721 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067217038 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.083375834 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.087250656 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.081178941 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084633473 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068555944 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068228481 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070211601 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08511028 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.09287017 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066876788 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.0681916 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084700095 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.08215644 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074566455 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06794044 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072790015 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070259392 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066943072 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069132296 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084465463 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072940812 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073699647 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067979445 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068132812 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067326723 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.074081468 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.084280632 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072291232 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07858 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085463946 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068673949 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067019162 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065314332 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074307499 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067324467 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067867739 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067359579 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066862926 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067616677 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069905946 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071952733 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.073297004 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070402498 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.073211459 seconds)
  done (took 6.8735738 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083260671 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092380254 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081401749 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081990085 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066413239 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067356205 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067299502 seconds)
  done (took 2.315813362 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06818005 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.106077998 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.11485873 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.114877159 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.121728186 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.112416813 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067959079 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099141878 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066666436 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.107635199 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.11835327 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.117009968 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.07045975 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078951534 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067695681 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.115667209 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068255863 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074462333 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.112167156 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.11771509 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072144076 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097580868 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081339603 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068339397 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.11372249 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.107609367 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.06985023 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067980807 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067893561 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067116302 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066899528 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089433368 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.10658372 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080223931 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067927915 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066830161 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.105017858 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068410015 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.104559373 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076821594 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.104898175 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067429365 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067965951 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067493903 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068598425 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.109723866 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068369576 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.06722091 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067463455 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.108810098 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066164078 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.107111458 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069494075 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072288535 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072324605 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071862583 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074347576 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067618928 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.108969136 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073638572 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067189876 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.118113161 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.117206868 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105148292 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.117871462 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076387448 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.10821344 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106010683 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066638688 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066782594 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067667225 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.118339781 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070471939 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.06953847 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068443499 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072203379 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.110056084 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.122070321 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.121770552 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080227672 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069907556 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067438454 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073360777 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.271029994 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072459169 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067674348 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068377368 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066962235 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072848802 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067780931 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072198473 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067362492 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074170508 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069806468 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069842036 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.114926136 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.068055229 seconds)
  done (took 10.188349487 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069436585 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069597598 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068294036 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068460261 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068752326 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06850337 seconds)
  done (took 2.211526589 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090672342 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067926478 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079224193 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067793234 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089779779 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.109757095 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.110302096 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069557073 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084024845 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078596792 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.110182683 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.112393241 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.112908581 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.06954046 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.109997457 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068922739 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.110328124 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071209561 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077983756 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070727805 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08399784 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069773245 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07031843 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116647893 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070936134 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068764681 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069212213 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078671815 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077937056 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069987659 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070338573 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071409283 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.077224588 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069810517 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.111760696 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076677014 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068205856 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073458993 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070606972 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071082349 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.113528711 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069608542 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070072273 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073037986 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069556796 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076312076 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073333234 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071497234 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.110985561 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.077487927 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07273247 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068515626 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070314481 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073140051 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07660785 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069517596 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.072796174 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.111314205 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069682803 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076540236 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067713458 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070088803 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069489837 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070254195 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072333291 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072568893 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076192492 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069637848 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069937179 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067674911 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073664621 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067805707 seconds)
  done (took 7.489234319 seconds)
done (took 30.840746076 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.540988906 seconds)
  done (took 2.302833678 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.940854322 seconds)
  done (took 2.742113894 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.116393791 seconds)
  done (took 9.92731868 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.335479298 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.418777894 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.737319986 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13266032 seconds)
  done (took 3.470091859 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.741634927 seconds)
  done (took 2.559561098 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230002871 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.220890515 seconds)
  done (took 2.271366824 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.372320817 seconds)
  done (took 2.180410856 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.186954353 seconds)
  done (took 2.99719272 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.233589079 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162917943 seconds)
  done (took 2.214472197 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.631724996 seconds)
  done (took 2.443843248 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.510611282 seconds)
  done (took 6.327683965 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.246388275 seconds)
  done (took 2.106757211 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.229338245 seconds)
  done (took 2.054158181 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.030772394 seconds)
  done (took 3.847979478 seconds)
done (took 49.264721968 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084411436 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087030238 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086254637 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081835676 seconds)
  done (took 2.130173922 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07491272 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071033431 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.073864385 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074337433 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072309698 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073533819 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073379161 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070675181 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.071849447 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.070724677 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069626279 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071136735 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073246776 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.070463795 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073337637 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074591773 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07086581 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.07072494 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073287003 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070470033 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073163396 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.07064398 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069076024 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070953729 seconds)
  done (took 3.539798783 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078715477 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072672196 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07551832 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071486937 seconds)
  done (took 2.123731272 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076976209 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07681773 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085233742 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090198027 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076261691 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.07686881 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084632752 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084191527 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066207477 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087361281 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068446511 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067452089 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06758121 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08639749 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083931128 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063104471 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063844636 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077727079 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077089359 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079745741 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069499925 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.06629985 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.076677652 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077663456 seconds)
  done (took 3.654055633 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082711124 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065884905 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081185202 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091495073 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092191942 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066056247 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079788314 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093509194 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128197085 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066412109 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072209989 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067384874 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105665309 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066369173 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081646478 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110273455 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113131737 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070851802 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099537274 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067261973 seconds)
  done (took 3.534683013 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078062189 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070527751 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.070735954 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066235281 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077290894 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073760735 seconds)
  done (took 2.275415262 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069049059 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068438529 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070669964 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.072981639 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068499639 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068466446 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067661578 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066874422 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067131168 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067456385 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067389397 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.067935329 seconds)
  done (took 2.651681476 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.209689489 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069542455 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071145918 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066740747 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.068464619 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067469098 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081120745 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.068738332 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.083870085 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067125725 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067043405 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069773183 seconds)
  done (took 2.822311323 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104131839 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110336738 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143341313 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116964229 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11639903 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096337458 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.160770708 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092960215 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161147125 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137953565 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117032069 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094928236 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087376135 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.071170912 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100870171 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119114444 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137365314 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073639924 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113781955 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.204880904 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131966381 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.13369742 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147082164 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116603997 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090442402 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147197678 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098035626 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102296146 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124512826 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125949065 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118902182 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098325471 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072491978 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071789944 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148843164 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104477839 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120813296 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093559331 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104836787 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088327033 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107334805 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070370002 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083726574 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110442504 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085273799 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130545233 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088460137 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115115394 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080923192 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.137594339 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.276592586 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134865067 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086699904 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105227649 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136868878 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11169399 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134336242 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10743259 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082842043 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119194466 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103006292 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100645375 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107954635 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080543139 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.177071444 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089325235 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112614415 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112509328 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.094545059 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095397982 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107816304 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136660698 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1257913 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.125618018 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138766772 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096132306 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121909805 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100165911 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.12968025 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105083492 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073988335 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121123468 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130056618 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09941034 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102259568 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129521799 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092593719 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077884638 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.09946981 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119261189 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080927958 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.112606136 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081090212 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.109672171 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132275866 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097283259 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111965201 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117324091 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078558455 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.31172465 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108938749 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07367091 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116938976 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113835874 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155929386 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096019859 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07728971 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100995643 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104066746 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148743941 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107475725 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080863981 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110622867 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139478076 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095292026 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.210289326 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096392196 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1410728 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112080602 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088164485 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076005683 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091026062 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113090357 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108444646 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113302531 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091421502 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.085028525 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087767007 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112193645 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092945372 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081454646 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114219921 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099710583 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075235764 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088788881 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079834422 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142058832 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078912075 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137424903 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12531663 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076912883 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106951326 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09864441 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109560956 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098477752 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117322573 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140649342 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114785598 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090234025 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.094680026 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109166117 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144477317 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127599997 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09312891 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077747398 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102265961 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.272648855 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098076909 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125363716 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095828447 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10822362 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102877681 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140933563 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144283678 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100804571 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101068717 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106919181 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123618064 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07731478 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156100125 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104491319 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119483302 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084909211 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142235175 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.11282883 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090654671 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088042453 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100717573 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104780938 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107361002 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144897409 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097133804 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073454242 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093867695 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144717814 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07724217 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111219623 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.0921603 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094148999 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119739986 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094095359 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082083242 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.06930621 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127680386 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.158386664 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070642031 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115512379 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.10860321 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103230367 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.121607402 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070618121 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120983969 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139993808 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118765207 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141951032 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14741798 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116411245 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.278068805 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.114574407 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106272151 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080531531 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125707039 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134777622 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096357922 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092951646 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135434879 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118879402 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.13658516 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.1164536 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114679283 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105763208 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108235565 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103425047 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102713946 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145096249 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122074383 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124995266 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087002302 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106965787 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118734179 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136600961 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083112091 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142820333 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084974221 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11905755 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078169797 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124024433 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078065671 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109857405 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080366795 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100532315 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.07091159 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074769268 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142371761 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113020901 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106069936 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100553708 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138076434 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136948702 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079098376 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10816053 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115796322 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101738738 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116813619 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109444877 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089591946 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096132368 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109746333 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085539237 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082236215 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.27485752 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095191119 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126434365 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085082347 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076127688 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139857678 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104887959 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095691479 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079084077 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107290285 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121662335 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093228347 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087847271 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115049181 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104871229 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141879615 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091411416 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097929264 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124431566 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08083015 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092825591 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070472463 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085917435 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076695952 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.12777119 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077401174 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116946144 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070073124 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131308587 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088467438 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094423261 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103803457 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112480689 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128652313 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095462262 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141622741 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09031926 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118789286 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108505259 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095355431 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088840109 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104136306 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100789815 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123073129 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097495416 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123157293 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144863059 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104636251 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142581746 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091618996 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122741662 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107414838 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12490686 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112500325 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147279942 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138959165 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.267896528 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113083735 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0766189 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09518959 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105383135 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111395626 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1733484 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125200735 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073377483 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105677449 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0945155 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10770965 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105328516 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082756225 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146026609 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102010216 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088740404 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113109387 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091346192 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104529338 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076500469 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096137444 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.10131207 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095315838 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099541824 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117129354 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128735179 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114181758 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143554088 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099666688 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093583718 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119296061 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111317177 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111358187 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08663287 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087301418 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138555881 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119365558 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.126475694 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101623966 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109856121 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111923372 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100998297 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125777468 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108811179 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.1278677 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081066211 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077021324 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069426275 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072818421 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123651199 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109007939 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112017707 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099258952 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.0733078 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103630336 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105373441 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071576122 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087647176 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092447467 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093534903 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.090214948 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104216383 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.109905755 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.090410933 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101982231 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098040621 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142898386 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099498122 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087067147 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139776622 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144443613 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086205141 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090574349 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070946984 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078143769 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109493108 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144303893 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145682309 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076450466 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085488257 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084107953 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084858105 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.071232405 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087274761 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088118906 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103098232 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097128013 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110741052 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102945134 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074748087 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101208532 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097515191 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090851938 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102055811 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115381851 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121454137 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.137069528 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108165985 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104475211 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075376362 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.079728741 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07511839 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079161903 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100097072 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078109419 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07543351 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138487149 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090557154 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102300467 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105767341 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085578176 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073626328 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125246803 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.348426309 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140306642 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075818207 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086530301 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.086731943 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082407304 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096217268 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141718166 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112791169 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115951149 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110422294 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106778963 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142950925 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159692276 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082211588 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146487339 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078533592 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077993873 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07839243 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116288712 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091863308 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11717379 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141628091 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092686418 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104310596 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078845831 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144623448 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097149236 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105178583 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087849846 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080142149 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143615092 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081124451 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081886112 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091803134 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112894514 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073887427 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107155955 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086877022 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081107102 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143962216 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631362385 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091645465 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076776011 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097081041 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143726751 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128379418 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095805029 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109107001 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.11936474 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100851516 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096032723 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108464093 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.18297461 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075249983 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095327707 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.265374088 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102630195 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103112839 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099277211 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086583626 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093120151 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087777604 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080115161 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107868102 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08957665 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096748462 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107848591 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083721696 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087360473 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130509825 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104127845 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082910712 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088906694 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103743432 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089223277 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100682943 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.0704369 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116188136 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093567622 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117062632 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095481389 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10741099 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127792157 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090830785 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137636716 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107472824 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123323003 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089874044 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.08063848 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125555714 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.089041492 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078730591 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145341643 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.096096261 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09133131 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104271255 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097331863 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114036586 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117204665 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112219261 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097974977 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079604565 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100369008 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103053297 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085615595 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079247174 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075143246 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077364715 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108363781 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086344342 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08375456 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115627145 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089559334 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103941906 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.26142292 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122183555 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084263795 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100896847 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110437714 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091895481 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109751903 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101021517 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.127627896 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173801642 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124865748 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128764985 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134456971 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077692379 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076365641 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069951135 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116826653 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082377212 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089564802 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081437401 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133591003 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082617429 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111533553 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.230203031 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081150588 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094109143 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097271207 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071175769 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084159867 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10916792 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088813655 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081420505 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119977666 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083830652 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128970284 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111817678 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100207338 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095928215 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081765637 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114763343 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103419169 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130174939 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095729148 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075891353 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114794707 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103670911 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138551896 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073974631 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081477494 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1298398 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104988878 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133909991 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080514411 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151074882 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143436414 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10119448 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.295218364 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072465417 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08414002 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089247454 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126549027 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084528996 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110295549 seconds)
  done (took 68.546746144 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.154494365 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143231931 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082964772 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104503516 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188345949 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199097681 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120971012 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.096877566 seconds)
  done (took 3.094542367 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069430894 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083508042 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.08117175 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.247577756 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.098262337 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068111424 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07388545 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082499911 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068715714 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067285705 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.10284984 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068230882 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.06895681 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.457057016 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067349446 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07329073 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068470052 seconds)
  done (took 3.840094531 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.333253658 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.034232103 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.242567801 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.196977982 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.146834347 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.556762319 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077227627 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083944076 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.638802467 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.369820791 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.142727876 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088413353 seconds)
  done (took 19.917293844 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077598651 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.121103958 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.120960281 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076187654 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075309768 seconds)
  done (took 2.46703467 seconds)
done (took 122.442368414 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084874069 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.173928593 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068905398 seconds)
  done (took 2.275517985 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120761368 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.118605615 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.118803054 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.116654891 seconds)
  done (took 2.486664173 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075874024 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076872328 seconds)
  done (took 2.158740928 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.222486349 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.215182609 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090782717 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083148581 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.08039279 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080934596 seconds)
  done (took 2.262110092 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072938451 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071941601 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072347065 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.072850176 seconds)
  done (took 2.291517575 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.166914503 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067375535 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070141925 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071797886 seconds)
  done (took 2.379877202 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085889529 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087641375 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117220541 seconds)
  done (took 2.298332458 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083698228 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083158884 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078691484 seconds)
  done (took 2.253441352 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109583006 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097715694 seconds)
  done (took 2.210541975 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080370895 seconds)
  done (took 2.089873251 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090568798 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098954161 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.182946288 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.150615879 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.184560845 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170562127 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077560518 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078294699 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.0742532 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07336546 seconds)
  done (took 3.185086261 seconds)
done (took 28.509053271 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.084623293 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.373241416 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360601299 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087426957 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672011947 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357761986 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.000727513 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091593743 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101687855 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069223218 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085911701 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650179769 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.994206519 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.325723724 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.979786952 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326130533 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653356411 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069704728 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068642623 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069140408 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.98719894 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06840894 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069431872 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069563882 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.65055803 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374837167 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069929834 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325373978 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068940795 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072589241 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357544251 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07016211 seconds)
  done (took 16.585943653 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076581055 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128368894 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073267697 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084662632 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070657364 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070252568 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071897301 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069878433 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112841975 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069079302 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08635403 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068794541 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072902891 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070192915 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089219607 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069302508 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071646784 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072885211 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069238372 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070065221 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08739897 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068992791 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069829196 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070237151 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069524412 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082234991 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070356509 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069293967 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069966996 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073591968 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073586346 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07035921 seconds)
  done (took 4.467166255 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.128019682 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.132473994 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073693551 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.10981903 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118877417 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07110614 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152097964 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092466622 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116095083 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069124745 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086514592 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069020372 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104779463 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070783248 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08978302 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069432181 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071755821 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070045729 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069244001 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069823698 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088241433 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069147319 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069719403 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070103973 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070215661 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083924798 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070440195 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069186639 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06930071 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072933823 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074003307 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070368935 seconds)
  done (took 4.737118163 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070800616 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.07227453 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.078588501 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081481111 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066942973 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.069622719 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070291347 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.067395415 seconds)
  done (took 2.604222372 seconds)
done (took 30.423101525 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080441978 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.068324736 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.071522087 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088096619 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.073965442 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.110866339 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.065517252 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075243699 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.07235092 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072039648 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073375445 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067646642 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.070452229 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065833568 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072434149 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.06680251 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112911033 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071164397 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.110703258 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.112886691 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069071125 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072572772 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075488855 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.111790158 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.112230438 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.111968489 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075578028 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072425637 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067364039 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069679837 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.170308116 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.182416535 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07565319 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.117666704 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066455536 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066485884 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071191112 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069529711 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113767613 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075727984 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069178688 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075623326 seconds)
  done (took 5.583903221 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.187012512 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.193523731 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.187029388 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080363904 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.092397968 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080437932 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192179182 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078137 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076280463 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.19078123 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072208496 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076547833 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078918011 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.069604504 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076493823 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072882777 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077648043 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.070399289 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076443928 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076294928 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.19082787 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069907194 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081221037 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077898268 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072082743 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078079905 seconds)
  done (took 4.72687239 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074073464 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089261006 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093151786 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.148252334 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109643733 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083848991 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.08300998 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.094110271 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101686738 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.06893128 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073201957 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095005155 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096977993 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.075580994 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106980774 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086552983 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081235403 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070284448 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075949122 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103286832 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09126613 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087308249 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.100425267 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.0887814 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.06749241 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077677231 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075714545 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084456171 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.0760099 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.08040305 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072785876 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07191444 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069348235 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080970768 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075864311 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.107485419 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090446542 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080869042 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08300425 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106919252 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078644127 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070079107 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096261202 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133873902 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068304463 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070664422 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072943554 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081197836 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069959361 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098558914 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.0851491 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068236482 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087242877 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070113737 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070266839 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085413954 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070278472 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070372098 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080134522 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074632122 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088706662 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073811502 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089757063 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068559256 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079925193 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.069974489 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.07028169 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067592659 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102793203 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076126536 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119439781 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.07012992 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06667212 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080314044 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080116255 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075116616 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068487283 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088443712 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080705502 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072122261 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079555809 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07152987 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071829971 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10402142 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067606448 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066828183 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066533749 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.07077272 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.071797051 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.068782485 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081660725 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068327175 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.07184327 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083879446 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068343402 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068897236 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070879072 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069813052 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.067756543 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078770801 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072525934 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070580086 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081227599 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069754602 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07210908 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083325229 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078532954 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068007461 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069392409 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071046553 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070856733 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073239103 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071948711 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070930246 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075653128 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076018719 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074426016 seconds)
  done (took 11.441540267 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.206767109 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.19522944 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070172891 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.190142928 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076992329 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.11970054 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.192397548 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.131402244 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.06921349 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070574993 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068582627 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.139635767 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.13579074 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.147035688 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.116649233 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069456088 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094224802 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.14554582 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.194762656 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.190331443 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092432862 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076637284 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071107528 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070266992 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070172681 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.0779018 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.084764023 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077504734 seconds)
  done (took 5.330349669 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076253886 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084099528 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073366505 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092695373 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08687371 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06925771 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071385039 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070263892 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08629953 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075363631 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068714212 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073446442 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.072434415 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069512391 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.06993681 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075954886 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075670573 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068013462 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.072835817 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073310486 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079368077 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.156102633 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073581933 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068957556 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071804436 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06917166 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076300006 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078746637 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068869429 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.102309928 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066326064 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073762431 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08344944 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.069998761 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.068788227 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069910924 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.068913836 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069386449 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069870999 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067163641 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.066998819 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074651209 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067519734 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074772571 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083343631 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077236132 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070153252 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074770095 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071582029 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065771743 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072434891 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072824197 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071475211 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077547249 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072790238 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.071938778 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070588137 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096346027 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075207446 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068636288 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068852638 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066923856 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.070581028 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076957479 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085478875 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.070522242 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067441476 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069395439 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076136791 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083050685 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068406141 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074417177 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065875527 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069032249 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071039193 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071861758 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070402791 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06694547 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068616546 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06889402 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069316722 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068741054 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.06889688 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071379698 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066767667 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067184502 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069388585 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070150533 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075360411 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.06785278 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071467137 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070580266 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067849068 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071809658 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074643777 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072005068 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088855434 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.077520852 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.069778236 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.06705985 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083711135 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070697168 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068234286 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072462832 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073219169 seconds)
  done (took 9.84718608 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091749403 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070211863 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.088631655 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095453437 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.07947573 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.074025768 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083008729 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069873805 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085393835 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068110079 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077532905 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067014397 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082742331 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077679654 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.070966116 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079662121 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071546633 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090073947 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083490456 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067072977 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078023301 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080797879 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081897115 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086803389 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086768946 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087764423 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081593422 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071807886 seconds)
  done (took 4.326057388 seconds)
done (took 43.276266459 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.116798776 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.288598686 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.117474523 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.374298813 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.165109877 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.339025669 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.335419101 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.109849298 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.212183742 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.13983518 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.439316959 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.461875324 seconds)
done (took 71.211884954 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.199458694 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.257489787 seconds)
    (2/2) benchmarking "String"...
    done (took 2.331653665 seconds)
  done (took 6.6355256 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.712088209 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.113322559 seconds)
    (3/3) benchmarking "different"...
    done (took 2.161934276 seconds)
  done (took 9.03345718 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.201141204 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.739817706 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.366272295 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.11092688 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.116839313 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.520255062 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.910674069 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.620510271 seconds)
  done (took 34.434689484 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.338240111 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.311598756 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.879009647 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.901206076 seconds)
  done (took 17.521678241 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.721048752 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.374882545 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.375655797 seconds)
    (4/4) benchmarking "different"...
    done (took 2.366997423 seconds)
  done (took 11.944493536 seconds)
done (took 92.116788886 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.116184356 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.434389292 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.120164358 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.269861505 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.205570745 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.152009549 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.120422957 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.154348231 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.117580719 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.117100321 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.547295481 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.115216583 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.116798748 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.140195463 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.127166463 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.161713443 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.221570161 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.117551062 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.11704371 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.645968723 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.63614752 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.126551909 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.112960731 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.159485492 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.338732985 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.121864264 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.767997696 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.114620564 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.723767273 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.118734407 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.104284896 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.100012416 seconds)
  done (took 215.591733676 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.095335076 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.062014915 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.110354709 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.130575371 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.469368048 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.291614109 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.24814835 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.511253543 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.099910389 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.107644253 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.304747816 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.094280931 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.339589445 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.316405623 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.089259354 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.178021439 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.274584753 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.337458439 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.089012146 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.285417393 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.097097362 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.135195158 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.093681184 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.290983689 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.12380708 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.179080253 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.106200339 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.117545743 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.278556313 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.260126739 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.096169514 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.093890806 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.219988309 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.953401591 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.121832453 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.118634608 seconds)
  done (took 181.752154375 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.263604465 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.116143277 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.156751689 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.316532797 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.844591089 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.817871402 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.096579345 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.094588531 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.094866742 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.100909022 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.093297934 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.166858119 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.427370102 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.10773862 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.091777328 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.094502086 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.314065632 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.078678723 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.082014631 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.08175869 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.146637396 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.456456757 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.218886616 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.086475192 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.097050055 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.229085297 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.091288983 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.082289397 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.219064124 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.085981174 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.164312399 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.216935647 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.089306253 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.161804163 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.086793609 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.565044609 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.075463301 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.080631297 seconds)
    (38/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.084962368 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.086358785 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.145298362 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.077826259 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.170733542 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.171747715 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.079116617 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.095521161 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.15988243 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.769588161 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.07904251 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.084987665 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.079374231 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.079925046 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.084014239 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.687007321 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.074347593 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.108204587 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.658402479 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.070107586 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.080837616 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.073631131 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.071626891 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.073319166 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.077274309 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.107418351 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.860151093 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.368239333 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.455085784 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.871642222 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.066959506 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.372674673 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.12649924 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.072685489 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.147554193 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.06720926 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.072605691 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.070394115 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.075410311 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.209451079 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.183385056 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.078824015 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.211127198 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.078327463 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.077409942 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.347929887 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.383674774 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.075905781 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.089991533 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.130914203 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.077947767 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.07308153 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.081520047 seconds)
    (91/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.20175517 seconds)
    (92/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.083819144 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.076342408 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.07617853 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.07671335 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.074787949 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.15741607 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.073227917 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.373670418 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.30811845 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.147986339 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.321890595 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.300570026 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.079770973 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.07514527 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.088727349 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.075796153 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.074847165 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.085871265 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.074767218 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.073253381 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.073940179 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.080280166 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.076016586 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.074908046 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.074171828 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.089381514 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.07528407 seconds)
  done (took 445.061520356 seconds)
done (took 846.762577995 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.771004693 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.836975697 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.668266816 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.706732586 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.679093488 seconds)
  done (took 15.668263487 seconds)
done (took 17.672141163 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.095520811 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.091276607 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.08194656 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.093724081 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.093845256 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.092089662 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.125163569 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.118440302 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.110917211 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.090021102 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.097931437 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.090095778 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.098212354 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.112784886 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.101416178 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.097718204 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.091869886 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.08564289 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.098252301 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.091506064 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.090087531 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.089265506 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.090089007 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.095354373 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.105738536 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.094276963 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.088098368 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.095545114 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.093700745 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.09561134 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.13092479 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.103456297 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.122519852 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.101252805 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.097746434 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.103352455 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.092260348 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.113168604 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.09095659 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.129377347 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.098968899 seconds)
  done (took 88.086274099 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.082113743 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.221626962 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.294835122 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.117982638 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.081830571 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.294298253 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.135702543 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.210031797 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.214117707 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.297203081 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.310602554 seconds)
  done (took 26.272126275 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.085077276 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.221685894 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.292643441 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.118682644 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.081702516 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.325089123 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.148761278 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.216967719 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.218837525 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.304783072 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.336859537 seconds)
  done (took 26.366213119 seconds)
done (took 142.73245117 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.482390274 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.111507719 seconds)
  done (took 6.60298751 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.077051752 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.094912154 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.224514386 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.081088958 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.078600338 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.081804112 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.080504777 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.078183972 seconds)
  done (took 18.805832036 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.078524109 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.076989487 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.062326487 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.067571039 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.078448032 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.078777229 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.078636638 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.072219755 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.079328187 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.079136392 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.078628381 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.078915289 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.078867732 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.082395079 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.079008714 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.080005515 seconds)
  done (took 35.242415656 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.081208002 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.078554476 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.080070177 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.080018738 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.077778635 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.076496973 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.084939665 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.079969917 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.081130202 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.080322432 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.080775105 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.08010777 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.079410813 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.078768857 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.079848084 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.079723362 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.079919147 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.080897136 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.080654481 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.081063166 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.078397283 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.083252437 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.0850721 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.080232657 seconds)
  done (took 51.939188121 seconds)
done (took 114.608064094 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.404428346 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.717305969 seconds)
  done (took 9.135738116 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.082438252 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.081879947 seconds)
  done (took 6.238183039 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.081006383 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.084355569 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.080560649 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.081740297 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.081771876 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.079738767 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.081658271 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.080681651 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.082224283 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.082195502 seconds)
  done (took 22.830266243 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.082959272 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.083528527 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.082463895 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.083436467 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.08249195 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.082909504 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.083274678 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.084103726 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.08296697 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.08337395 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.083029815 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.083319426 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.085415712 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.083355279 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.083819552 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.083158859 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.082870892 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.085135506 seconds)
  done (took 39.51584314 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.083046424 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.083409561 seconds)
  done (took 6.179982076 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.08235787 seconds)
    (2/7) benchmarking "second"...
    done (took 2.083726576 seconds)
    (3/7) benchmarking "month"...
    done (took 2.082915749 seconds)
    (4/7) benchmarking "year"...
    done (took 2.086119406 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.083351524 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.085643015 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.082838888 seconds)
  done (took 16.602868581 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.086010369 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.24995593 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.30344713 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.694967269 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.085655191 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.088571887 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.971973169 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.088302869 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.090435545 seconds)
  done (took 22.676379609 seconds)
done (took 125.192294158 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.919450892 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.088321341 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.353435837 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.156008697 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.108570764 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.425232149 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.087924784 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.639388037 seconds)
done (took 44.793691846 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.203936228 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.083541739 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.113264879 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.111766162 seconds)
  done (took 23.328804229 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.085995607 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.391184783 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.102966286 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.009805869 seconds)
  done (took 23.62183492 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.461843599 seconds)
    (2/2) benchmarking "read"...
    done (took 2.433273979 seconds)
  done (took 6.914505335 seconds)
done (took 63.088271015 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.085802226 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.084512064 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.087417302 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.085642744 seconds)
    (5/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.085869718 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 2.085790574 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.086534022 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 2.086217035 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.086088366 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.084499661 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.084404493 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.085371616 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.087983452 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.086603615 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.086115717 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.086207521 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.087619593 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.088657944 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.085538074 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.086161966 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.085612515 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.087165009 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.08504156 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.086482492 seconds)
  done (took 52.086486587 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.088829239 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.086533263 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.086986265 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.08835094 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.085622855 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.088644978 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.086754804 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.087679316 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.519787962 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.085566956 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.082337332 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.079379772 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.088362973 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.086451698 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.088880911 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.087251673 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.088929962 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.088098861 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.08734952 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.087447534 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.087397622 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.087319809 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.087915918 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.086511267 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.087669222 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.088421825 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.088122447 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.088816183 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.088336693 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.087647094 seconds)
  done (took 65.067010055 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.08892095 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.088176992 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.087672724 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.087540793 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.088766125 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.087196129 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.088153593 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.088089143 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.086460097 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.088103157 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.087880788 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.087330283 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.087681756 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.087666888 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.0886861 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.087643304 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.089115179 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.08846993 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.08781772 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.089076993 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.089918002 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.0887888 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.088396437 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.090081507 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.089076467 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.088981582 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.089180869 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.089438697 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.088581124 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.088748567 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.088222813 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.088844093 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.089663209 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.089779581 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.089966431 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.089340064 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.089555033 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.09238748 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.096991914 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.089920454 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.089332593 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.088165259 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.088654845 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.089566595 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.089533117 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.089603498 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.089938094 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.090997298 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.090527137 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.088490554 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.089559129 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.089821495 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.089859757 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.089002988 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.090410225 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.090931022 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.089301675 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.091669496 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.090316599 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.089836175 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.091402264 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.089170242 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.091156289 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.090846767 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.092241096 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.091005553 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.090252521 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.091077733 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.089909876 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.092369436 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.090410685 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.090442054 seconds)
  done (took 152.464175883 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.088602614 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.089305377 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.090279356 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.091431147 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.091131914 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.089890374 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.091659066 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.09165177 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.090095655 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.09174905 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.091401618 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.090077703 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.091437904 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.09110086 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.092285114 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.092328594 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.090522577 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.09173819 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.090418879 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.091361427 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.09127784 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.093183405 seconds)
  done (took 48.027980932 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.090721585 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.091827642 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.092202058 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.091690386 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.091800125 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.091011396 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.092177607 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.093326632 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.092297166 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.092229234 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.093514704 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.092454646 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.090736178 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.092350049 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.091555035 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.092500212 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.091586486 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.093250415 seconds)
  done (took 39.681164936 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.092400721 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.094991902 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.092420054 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.090824837 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.090697481 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.093144264 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.09261092 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.092301003 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.09123641 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.092588211 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.093204412 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.093240474 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.09308701 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.092524894 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.092407887 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.093959125 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.092734444 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.092068785 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.092511617 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.09455012 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.093952412 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.094245192 seconds)
  done (took 48.066256701 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.093815406 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.092969395 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.092722471 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.093904863 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.094940765 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.093905683 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.093432695 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.094915049 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.093013781 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.094952622 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.093015407 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.093536405 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.09376692 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.093052468 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.093252384 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.093734551 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.095640993 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.09477926 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.094492608 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.094135442 seconds)
  done (took 43.905235329 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.095918005 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.095355276 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.09639237 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.094774164 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.094129921 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.095189655 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.094610162 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.095233834 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.094852891 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.09667295 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.09390557 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.094502474 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.096150075 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.095786725 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.095955657 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.094634005 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.095945328 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.094601523 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.097030745 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.096232446 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.096576131 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.09618839 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.096821179 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.095399545 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.095539316 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.095699787 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.096141742 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.096226093 seconds)
  done (took 60.704012528 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.096414826 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.096329313 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.096961017 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.097561468 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.095993039 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.095910497 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.095687132 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.097450518 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.096279185 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.096404253 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.096441715 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.094631146 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.0968901 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.097693641 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.095824873 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.09795289 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.096842876 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.096716932 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.096822201 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.095803716 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.096500242 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.097534896 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.097863021 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.097974145 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.096958315 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.09690281 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.097557796 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.097980509 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.09866637 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.098104157 seconds)
  done (took 64.936014604 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.118045573 seconds)
    (2/2) benchmarking "in"...
    done (took 2.118746543 seconds)
  done (took 6.266792851 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.098258097 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.098071332 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.097941209 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.098882257 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.097802332 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.098451756 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.09770818 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.09919522 seconds)
  done (took 18.815911512 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.098728631 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.100407081 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.096953198 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.100782669 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.099649405 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.106023857 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.099716681 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.101148128 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.101103162 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.099455849 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.103708875 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.102566052 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.105669279 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.10448547 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.099010453 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.099329772 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.100971529 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.101658922 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.100552782 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.097548124 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.104702673 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.099158048 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.098569087 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.100316687 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.099643385 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.101810377 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.109814312 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.102866089 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.101481442 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.101033847 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.106919749 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.099493333 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.101294045 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.10051798 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.101466183 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.099552512 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.107292811 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.090362375 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.101701118 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.098987685 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.102036779 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.102486358 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.104885201 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.108676385 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.100283643 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.10020021 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.101469931 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.098764921 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.100941376 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.103874993 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.106944893 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.102684714 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.100823927 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.101502263 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.105460697 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.101296708 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.100354952 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.102570822 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.105894799 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.109592783 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.103611893 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.120503583 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.110760216 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.101279633 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.101499264 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.111555374 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.122492289 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.103861657 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.10265388 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.101632027 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.109808472 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.103043656 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.101608607 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.101125707 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.113138226 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.107984501 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.102075586 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.100592608 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.102369357 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.08982644 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.102713882 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.103451207 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.102556969 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.101484226 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.112197121 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.124411081 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.101219847 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.102713826 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.095223308 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.106349895 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.104873256 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.104500312 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.102628615 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.103041247 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.105663607 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.10796484 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.102940115 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.103046976 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.102922946 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.111522319 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.101443807 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.104647992 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.108444566 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.111292553 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.102270127 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.103450796 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.105072239 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.104444511 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.111268094 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.103950314 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.102938848 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.105001842 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.106064991 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.109193998 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.10128066 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.107617587 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.112578992 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.112521249 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.104438763 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.109122846 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.106963694 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.106438893 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.11431055 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.126807237 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.105487686 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.1081735 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.108846215 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.115694877 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.107715988 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.103740528 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.107730933 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.103641948 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.103465073 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.106467221 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.104287455 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.104427601 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.107486336 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.10551366 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.104118735 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.107054523 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.107424702 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.106586813 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.107960165 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.105371705 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.110280559 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.104492074 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.104157267 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.10518727 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.107053537 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.106336515 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.107310357 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.108550091 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.10761978 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.107269518 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.105647762 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.105847795 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.106154088 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.106415867 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.109912285 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.106193658 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.105041017 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.10779691 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.109831161 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.105445603 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.107456333 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.107109108 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.107131614 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.106044686 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.108453885 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.108261264 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.108632744 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.10690771 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.11107078 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.107270589 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.084307804 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.107248264 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.106594391 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.106452659 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.110130666 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.118909348 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.109389035 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.115475894 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.107574112 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.114148868 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.106437767 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.109186344 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.109474007 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.107155138 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.107212194 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.105743021 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.10601764 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.111236106 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.127054872 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.116781116 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.109627184 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.10773971 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.1105601 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.109950557 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.112820702 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.108175808 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.108218627 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.111010908 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.107839776 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.109023539 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.106999242 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.111788733 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.108304728 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.106428828 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.112201214 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.106979713 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.108154733 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.109402469 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.108686201 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.110534653 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.105511664 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.109047141 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.109232301 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.109190156 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.115685793 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.111839774 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.109946164 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.108434615 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.112438281 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.106915086 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.108275039 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.108857901 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.110269717 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.108191254 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.111033321 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.116660511 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.110167079 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.109739263 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.107077198 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.107423287 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.111976567 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.108851278 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.111969539 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.116377839 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.11285089 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.108165851 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.115131626 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.10782846 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.112597793 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.10810474 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.111461854 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.110104846 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.112595834 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.110932858 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.10948539 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.116731677 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.109405659 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.111897892 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.109024639 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.112131972 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.112783097 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.112054535 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.109608535 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.112597424 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.117492357 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.117908896 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.111496314 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.114908188 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.113486614 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.112781865 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.114702952 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.112163102 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.121832085 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.118621916 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.109972891 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.111130098 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.10971531 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.113721933 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.109876963 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.110612049 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.117279086 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.111454677 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.112205413 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.115597036 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.112046957 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.111230619 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.119655123 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.1124004 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.115555998 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.114485439 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.115228454 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.112020857 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.109445779 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.113875146 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.103010936 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.112881502 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.114608452 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.11306984 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.115234063 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.111772437 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.121127535 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.111587293 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.114407631 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.118412096 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.112858517 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.114655157 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.113530034 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.112837743 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.114251355 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.114456911 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.112879769 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.114356877 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.110202253 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.114915625 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.122019203 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.116189736 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.120657862 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.11572477 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.123140255 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.111570909 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.112499672 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.114689321 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.117242004 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.120596901 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.11156726 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.112847522 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.121164308 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.114232399 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.114926616 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.116290649 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.113091106 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.114347058 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.114382647 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.115165644 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.119724819 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.117167376 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.112645969 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.114585664 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.113871578 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.112626077 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.118189273 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.11585039 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.114927315 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.115243312 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.102874467 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.115961418 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.114916182 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.114033631 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.114252225 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.096947172 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.106994231 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.117304141 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.115329186 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.115305136 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.11707653 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.112314408 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.124477825 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.115473315 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.114588701 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.115889039 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.116135854 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.117560049 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.114182903 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.116617647 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.114455039 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.115139598 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.117606592 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.126239273 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.121472575 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.118312368 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.117006351 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.114153549 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.11671174 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.125193654 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.135330914 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.11267355 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.11696536 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.119892909 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.123656179 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.1194927 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.120729816 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.118709735 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.120172258 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.105521916 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.117516821 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.118208836 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.127866281 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.115887862 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.116646648 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.11651773 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.12165612 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.117244073 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.116673974 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.118318155 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.122144093 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.118562112 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.128821708 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.115038678 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.118605788 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.118778789 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.117836712 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.118123272 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.117721912 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.119373572 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.119613696 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.117527135 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.118471499 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.11946795 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.122219914 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.117914438 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.120830301 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.126892318 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.118965582 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.118253772 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.12150297 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.101985392 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.121008016 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.118342057 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.11879299 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.120574871 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.118652098 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.119634868 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.1221277 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.12771896 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.11919952 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.117528845 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.118792488 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.122648977 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.117562474 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.118900145 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.090070637 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.12775254 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.122773303 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.129448317 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.128269346 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.120385336 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.118716298 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.126270426 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.128129215 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.118929454 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.119206791 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.120015009 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.121704668 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.121940958 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.120986253 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.11948955 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.121166528 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.125222493 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.118891517 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.118751619 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.118184437 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.118830647 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.112759909 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.116952589 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.12643765 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.119430426 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.119695456 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.119658629 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.120009673 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.121095514 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.114042648 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.119999022 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.120989977 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.122992463 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.122356893 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.123478568 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.12014252 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.119502049 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.121796727 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.119520396 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.120480134 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.121174892 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.120218026 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.120100036 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.12603481 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.128187105 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.121004344 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.122697437 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.12361128 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.124421455 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.121502885 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.119742064 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.120142384 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.120643762 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.128380135 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.120426006 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.122283106 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.123731716 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.120096492 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.126457191 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.122770286 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.125106785 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.120185466 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.12229531 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.120927943 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.126367117 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.130201746 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.125732726 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.124940095 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.129701918 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.126582268 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.123506646 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.121600739 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.122774614 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.123225992 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.123380471 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.125991262 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.122455562 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.125550033 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.122621641 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.12484313 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.122810212 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.125622458 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.119923169 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.121441043 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.12630374 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.131009216 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.130677514 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.121397041 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.124603225 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.123100213 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.125920169 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.133363462 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.123647243 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.122192365 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.123017697 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.124678427 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.124875924 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.129154605 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.133012603 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.126373687 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.123722208 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.128583357 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.140042334 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.126733514 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.13195963 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.151892338 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.1248301 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.122615729 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.123421131 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.12547139 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.124856905 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.126062417 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.124572748 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.130253408 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.125512326 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.12457198 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.133135281 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.122653537 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.121704056 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.124069864 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.125801121 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.13099273 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.12522418 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.13186769 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.124747481 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.124148369 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.123839134 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.128598002 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.124281972 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.123648132 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.124321917 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.127790102 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.12490822 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.12626692 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.133714266 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.125303778 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.127530457 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.138651809 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.135961492 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.125808915 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.126261333 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.127272162 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.131209434 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.129644634 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.125373488 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.128814424 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.132928429 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.128640133 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.132914199 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.127630358 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.12704189 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.125632489 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.124543016 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.125187154 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.137384442 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.136247958 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.127119964 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.126939503 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.120722205 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.127502068 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.13226803 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.133188029 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.128387076 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.129468489 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.126796772 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.127139064 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.126732965 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.127640354 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.129322018 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.134726938 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.125990121 seconds)
  done (took 1262.338350661 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.126839103 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.125087164 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.125539466 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.127614135 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.125866544 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.125383273 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.125986053 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.128119091 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.127220821 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.12779352 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.127208059 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.126534591 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.127599066 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.127176668 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.128323963 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.127082576 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.126903549 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.126764359 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.127298768 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.128248792 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.127261073 seconds)
  done (took 46.723405435 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.125859956 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.127676724 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.126966385 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.127231765 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.128553102 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.127949394 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.126584411 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.127626436 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.126956826 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.128098203 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.128967174 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.126704899 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.128012779 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.128789873 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.129505656 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.128771009 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.127027393 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.128330231 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.127856023 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.129073497 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.128245007 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.127956917 seconds)
  done (took 48.870690008 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.128922027 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.128736367 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.12603782 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.127420957 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.128870991 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.129439848 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.12914128 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.13031733 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.128857792 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.130268656 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.135669078 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.137116986 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.127449536 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.135047002 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.129444668 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.130135242 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.275458666 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.127598018 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.129492889 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.129793678 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.129493564 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.136081067 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.12849073 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.127065516 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.120028494 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.129146647 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.128751003 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.128233244 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.115833504 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.11741079 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.131427522 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.128987642 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.130889469 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.134156769 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.129389269 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.130235738 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.134346262 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.128325765 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.129553529 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.129458495 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.138361433 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.151034347 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.129581988 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.132731723 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.124549075 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.13011553 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.129260821 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.135176412 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.137892531 seconds)
  done (took 106.581811999 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.131064692 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.129543182 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.129714296 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.129405354 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.131242521 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.131196007 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.132900336 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.13214826 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.130769371 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.130860054 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.118043499 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.130991625 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.132786842 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.131487191 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.132777956 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.131878616 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.131809223 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.133449528 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.13183375 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.131430525 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.131809906 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.132682652 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.13331361 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.132855798 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.133851025 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.115751924 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.127831177 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.133268325 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.134113429 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.131804633 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.133459245 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.132354435 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.133356622 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.133215956 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.133166597 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.13242461 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.13346935 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.131550439 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.133061432 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.133017336 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.132685156 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.131969158 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.131994422 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.133064783 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.13386041 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.134284311 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.13374984 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.134223403 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.133255783 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.133668434 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.134330201 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.134021261 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.13405671 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.133352339 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.134856264 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.133949511 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.135392043 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.132002951 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.13358433 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.136985609 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.133431699 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.134870766 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.134581377 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.136291726 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.133616322 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.135343708 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.13425623 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.134461242 seconds)
  done (took 147.067733095 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.136406641 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.136389779 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.135692568 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.136071565 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.136397986 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.134830369 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.137071508 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.134902996 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.13452507 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.135321609 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.137075744 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.135166404 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.134532302 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.135892386 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.135884974 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.137853436 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.135297271 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.134579651 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.136203565 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.13723521 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.136106594 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.135967346 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.136959856 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.1375029 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.135872294 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.136697894 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.135481503 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.136108982 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.137584701 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.136728081 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.137754918 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.136619708 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.136535907 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.136889585 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.136661519 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.138075836 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.136867308 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.135984314 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.137556849 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.13612861 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.136128137 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.138109547 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.137313582 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.137940981 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.137102865 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.137336394 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.137278144 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.137052234 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.137645135 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.138587574 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.136941493 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.137260229 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.136722086 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.138449835 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.13681529 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.135470056 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.137966058 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.13896595 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.138153769 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.13749764 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.137918761 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.138141616 seconds)
  done (took 134.544042193 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.1366134 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.135517208 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.136794439 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.135369104 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.136701947 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.137139304 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.136671636 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.136519146 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.137732268 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.136906854 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.13612932 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.136732796 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.138436493 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.136481045 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.137686449 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.139875952 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.139252449 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.135828594 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.135908365 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.13789094 seconds)
  done (took 44.808870284 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.138753024 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.137322392 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.137077135 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.138680656 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.137550054 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.137946636 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.137977158 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.136618086 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.138799156 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.13764248 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.137490808 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.138056231 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.137496379 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.138373987 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.139816251 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.138922719 seconds)
  done (took 36.277693456 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.139812341 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.138946261 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.139567784 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.138657658 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.138122956 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.139441461 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.139777201 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.137233083 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.137850347 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.138615596 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.138927666 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.137307932 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.140873056 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.138982391 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.139874177 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.13897315 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.138950838 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.137724325 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.139361273 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.139716996 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.13883413 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.126004791 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.138885795 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.140512807 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.139309288 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.13996995 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.139002926 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.140198957 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.138902396 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.138685434 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.139446478 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.140174319 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.13904477 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.139204449 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.140660309 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.140603381 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.140643652 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.14034071 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.140851649 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.139849917 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.139824165 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.142085943 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.14069985 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.140559259 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.141827775 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.140678175 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.140098558 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.142454972 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.139573867 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.141598911 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.141369006 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.143095232 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.141411502 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.142282875 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.140032894 seconds)
  done (took 119.748554689 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.141028941 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.139865044 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.141085292 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.141547664 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.140340868 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.140626151 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.140620898 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.141762535 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.1394204 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.141579936 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.141437194 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.140980211 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.140932802 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.142534943 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.142123406 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.140683922 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.141378446 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.142795046 seconds)
  done (took 40.61235389 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.142158355 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.141388033 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.141584106 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.14149057 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.141405818 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.141940797 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.142794192 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.142449104 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.142397469 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.142098027 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.142523919 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.142575001 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.142944321 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.142250683 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.142105168 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.141659668 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.132990773 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.142207136 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.14298938 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.142105177 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.143368734 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.14211394 seconds)
  done (took 49.191626594 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.143143167 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.142732584 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.15765812 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.16577532 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.162870525 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.17621286 seconds)
  done (took 15.021957485 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.144196286 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144131066 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.145181435 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144926063 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.143273695 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.143462711 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.142865476 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.143857955 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131135391 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.145030469 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.144175308 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.144278719 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144423027 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.144020918 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.142674056 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.14357705 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.144934101 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.144954089 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.143049103 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144416669 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.144912642 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.14409546 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.144048338 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.143540144 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.144943051 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.144537538 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.143267528 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.145921146 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146032882 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134865646 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.144091076 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.144977244 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.146824476 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.146436103 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.145230713 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127838639 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.146066875 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145116457 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.144036646 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.145310612 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.145419546 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145042113 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.146453131 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.144533193 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.145682569 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.14637119 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.145468799 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147868474 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.146481307 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145674394 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.146386625 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.145533262 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144299273 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.146918264 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.145796289 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.14622669 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.146178043 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.146054251 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.14729705 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146536443 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.145838372 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.145675168 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146715319 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.1471364 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.14613539 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146204589 seconds)
  done (took 143.614300058 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.145186378 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.145585589 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.147287384 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.146992723 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.145951156 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.145821723 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.146170441 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146413491 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144792522 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.14756959 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.145909672 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.14526822 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.146779081 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.148265146 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.146485078 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.147808038 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.14623953 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.146752246 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.146559257 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147175219 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147194841 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147016032 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.14592267 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.146702157 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.148750598 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.146466235 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.147349913 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.147237238 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.147440986 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.146681682 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.146790668 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148281419 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.148973317 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.147761964 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.148656262 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148612122 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135090174 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147523217 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.147995343 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.14906411 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.147390535 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147640629 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.147735637 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.14929799 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.147147847 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.147136993 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.149282242 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.149244729 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147604839 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.148019822 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.147140068 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.149283719 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146567364 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.138031316 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.147490923 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.148315959 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.148332392 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.148530439 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.14888368 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.14877592 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.149570883 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.148563012 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.14897012 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.149348141 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.135007364 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.149165085 seconds)
  done (took 143.777787572 seconds)
done (took 2941.22559117 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.245659981 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.226097924 seconds)
  done (took 16.55088795 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.312110043 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.189116786 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.335638554 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.268016743 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.15614581 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.156148629 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.126768397 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.152231057 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.246026802 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.15422972 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.20079124 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.153728677 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.154592304 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.152700873 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.154597971 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.153123718 seconds)
  done (took 57.146783749 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.156492213 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.157820453 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.154929816 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.154822512 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.162702683 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.225538018 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.175881612 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.160209016 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.168871351 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.186490884 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.170813548 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.158491422 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.161942228 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.15757131 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.240588259 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.198221742 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.210028602 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.229278485 seconds)
  done (took 41.310113788 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.232709435 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.160910067 seconds)
  done (took 11.481288692 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.172732627 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.179319249 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.169029902 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.178004715 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.16751706 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.150879012 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.192863874 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.188763921 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.170647035 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.16495449 seconds)
  done (took 73.848155747 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.155768105 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.155097107 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.406923738 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.162001408 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.161363585 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.179243006 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.153824189 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.183248618 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.154562811 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.142830163 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.165064443 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.412198202 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.162586258 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.142890695 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.57635468 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.164765857 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.160987757 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.186112004 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.182661981 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.160975047 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.161683942 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.158146739 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.316894272 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.840195264 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.157291975 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.158607082 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.162666736 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.152446901 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.152071173 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.154874373 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.156811609 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.154946919 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.159770279 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.154009562 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.160947976 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.159107035 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.641627195 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.173279559 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.162657868 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.245179765 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.197873767 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.161795233 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.929878661 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.157674697 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.154733838 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.16064982 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.836921021 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.247544769 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.157661536 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.322352052 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.48680675 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.169179651 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.299651023 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.315663356 seconds)
  done (took 148.436067941 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.151034637 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.485975471 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.308607547 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.154855579 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.463332429 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.367312425 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.818712121 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.200481152 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.159397944 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.37165435 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.29186349 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.262709492 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.155170786 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.154190501 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.153302425 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.1530197 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.309919245 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.222492514 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.156193643 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.152334745 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.177065976 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.31125498 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.260365026 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.158377971 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.169706467 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.370723118 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.203575452 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.262686418 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.656486991 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.154171006 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.215968433 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.624122083 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.155072184 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.155420235 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.196763392 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.258141416 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.243647438 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.158212307 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.154720078 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.156506164 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.838927351 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.356647394 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.260100314 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.28866246 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.303564291 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.36934346 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.629576482 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.153870864 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.666497002 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.32548095 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.362762319 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.373986479 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.255424901 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.15970121 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.600977431 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.154450387 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.80372009 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.388013586 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.299430315 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.262852931 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.159574234 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.157043728 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.154896323 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.400104413 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.159546256 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.252391787 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.159391003 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.154687663 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.255544237 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.264125128 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.294301538 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.381947206 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.191039208 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.880121582 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.380500092 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.327776388 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.222633885 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.383918654 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.161030836 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.158166714 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.243118611 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.759581819 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.286619664 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.406007186 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.400449985 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.183077672 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.745331066 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.157184273 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.301196363 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.333583639 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.45889848 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.303271631 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.209802749 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.051183698 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.156096675 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.155330281 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.221033046 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.285650521 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.349140887 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.511159498 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.397694054 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.750346822 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.176736898 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.532882776 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.270007639 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.160805299 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.812518952 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.160480722 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.365952456 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.202226248 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.160089498 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.161459371 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.325584655 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.171366396 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.159278847 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.930616547 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.219767129 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.165271478 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.33671017 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.163791225 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.408471204 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.087855896 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.397077046 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.116827683 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.188218518 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.332647198 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.306978256 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.45820003 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.494189602 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.412412862 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.251449895 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.39133254 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.063126409 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.160263732 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.429504389 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.164522189 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.15922711 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.328642827 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.078642605 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.306734247 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.163036197 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.492774832 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.182809154 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.215558017 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.163116939 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.411118219 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.195292003 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.208911534 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.166284358 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.291354569 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.164152762 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.085206108 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.317718161 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.16194417 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.15936668 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.770511099 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.162165881 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.305335815 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.391913094 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.17357464 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.218957429 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.657803816 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.759544707 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.247504726 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.186505275 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.53557302 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.873090871 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.297358031 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.139741183 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.653573289 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.159975261 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.402385304 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.357699818 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.161642937 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.161276126 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.011056286 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.79035781 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.163334539 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.317177354 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.978473006 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.537106358 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.370472364 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.169349179 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.213787321 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.165568296 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.899417137 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.506534074 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.162234711 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.162039573 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.16411467 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.163510423 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.163337615 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.371275221 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.195307237 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.712433719 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.299241735 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.421496862 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.47214445 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.385011114 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.197617934 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.16452815 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.446483 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.166620791 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.226254858 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.16776794 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.17191362 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.443724683 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.167451116 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.378823108 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.377600994 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.158507641 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.21078159 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.167861709 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.163263635 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.163637614 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.301824984 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.254126976 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.165138283 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.164262397 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.206005842 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.267143615 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.346709615 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.4634449 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.16324721 seconds)
  done (took 949.552011504 seconds)
done (took 1300.403857859 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.165092313 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.166968389 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.168388902 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.16279245 seconds)
  done (took 30.758236022 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.165640706 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.165744432 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.165801792 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.167813628 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.16515283 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.16650487 seconds)
  done (took 15.091472102 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.165447178 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.1656609 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.168101259 seconds)
  done (took 23.59286982 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.595243208 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.572338909 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.239184447 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.306035664 seconds)
  done (took 11.808845171 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.170301755 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.16603883 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.167058727 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.166245416 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.166889933 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.167796739 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.168176705 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.166411507 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.167212876 seconds)
  done (took 21.608660983 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.283807963 seconds)
done (took 109.238149897 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.198515516 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.354356025 seconds)
    (3/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.540427274 seconds)
    (4/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.531377896 seconds)
    (5/341) benchmarking ("sort", Float64, false)...
    done (took 5.920158751 seconds)
    (6/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.168306364 seconds)
    (7/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.200037479 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.572288687 seconds)
    (9/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.181637069 seconds)
    (10/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.270882256 seconds)
    (11/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.440039526 seconds)
    (12/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.405437798 seconds)
    (13/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.600152838 seconds)
    (14/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.180891716 seconds)
    (15/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.275997925 seconds)
    (16/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.974860233 seconds)
    (17/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.351681274 seconds)
    (18/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.542835475 seconds)
    (19/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.470253689 seconds)
    (20/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.465422093 seconds)
    (21/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.310940045 seconds)
    (22/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.278433027 seconds)
    (23/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.485434132 seconds)
    (24/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.265598963 seconds)
    (25/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.182404911 seconds)
    (26/341) benchmarking ("perf_sum", Bool, true)...
    done (took 3.900077458 seconds)
    (27/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.331563247 seconds)
    (28/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.556624127 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.160110678 seconds)
    (30/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.268735535 seconds)
    (31/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.373685716 seconds)
    (32/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.53011925 seconds)
    (33/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.494493855 seconds)
    (34/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.218398478 seconds)
    (35/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.197127638 seconds)
    (36/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.198613453 seconds)
    (37/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.195956686 seconds)
    (38/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.256378424 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.466254507 seconds)
    (40/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.184726942 seconds)
    (41/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 8.754678526 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.357289329 seconds)
    (43/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.190497444 seconds)
    (44/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.285772905 seconds)
    (45/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.896543204 seconds)
    (46/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.612027033 seconds)
    (47/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.2863152 seconds)
    (48/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.484824328 seconds)
    (49/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.108051385 seconds)
    (50/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.748780918 seconds)
    (51/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.271568885 seconds)
    (52/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.414633883 seconds)
    (53/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.317484415 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.373360312 seconds)
    (55/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.577570203 seconds)
    (56/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.180907391 seconds)
    (57/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.206252122 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.597655298 seconds)
    (59/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.260001838 seconds)
    (60/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.422057116 seconds)
    (61/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.904409319 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.277119823 seconds)
    (63/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.095487746 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.51988379 seconds)
    (65/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.899763114 seconds)
    (66/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.756954205 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.895538025 seconds)
    (68/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.451154434 seconds)
    (69/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.783121445 seconds)
    (70/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.141146216 seconds)
    (71/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.50789915 seconds)
    (72/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.466167701 seconds)
    (73/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.186663669 seconds)
    (74/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.468664463 seconds)
    (75/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.896588397 seconds)
    (76/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.380825221 seconds)
    (77/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.269494967 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.514265915 seconds)
    (79/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.335669459 seconds)
    (80/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.590538968 seconds)
    (81/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.320528507 seconds)
    (82/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.898461293 seconds)
    (83/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.311010899 seconds)
    (84/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.295259186 seconds)
    (85/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.387410736 seconds)
    (86/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.18910623 seconds)
    (87/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.267897774 seconds)
    (88/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.373481593 seconds)
    (89/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.203313736 seconds)
    (90/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.611990909 seconds)
    (91/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.183467306 seconds)
    (92/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.379493977 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.406195787 seconds)
    (94/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.269495407 seconds)
    (95/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.270015456 seconds)
    (96/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.60879093 seconds)
    (97/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.467130293 seconds)
    (98/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.186410199 seconds)
    (99/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.434769092 seconds)
    (100/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.318504364 seconds)
    (101/341) benchmarking ("sort", BigInt, false)...
    done (took 7.190038208 seconds)
    (102/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.187708734 seconds)
    (103/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.806602804 seconds)
    (104/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.398444629 seconds)
    (105/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.574665012 seconds)
    (106/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.348482193 seconds)
    (107/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.190560502 seconds)
    (108/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.269513247 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.902065917 seconds)
    (110/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.745743826 seconds)
    (111/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.315563904 seconds)
    (112/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.966606245 seconds)
    (113/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.264415783 seconds)
    (114/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.575676266 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.19703819 seconds)
    (116/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.430009996 seconds)
    (117/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.998131745 seconds)
    (118/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.14772056 seconds)
    (119/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.50534207 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.585041764 seconds)
    (121/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.188302094 seconds)
    (122/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.189349416 seconds)
    (123/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.35215337 seconds)
    (124/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.186757226 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.270096711 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.644347747 seconds)
    (127/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.47749059 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.48623661 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.474775913 seconds)
    (130/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.582457137 seconds)
    (131/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.52496469 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.189804781 seconds)
    (133/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.200130322 seconds)
    (134/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.394466252 seconds)
    (135/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.354941101 seconds)
    (136/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.791885707 seconds)
    (137/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.63845371 seconds)
    (138/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.203667981 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.083576145 seconds)
    (140/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.260225462 seconds)
    (141/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.187391781 seconds)
    (142/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.203595449 seconds)
    (143/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.51516329 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.191120002 seconds)
    (145/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.215717731 seconds)
    (146/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.278868686 seconds)
    (147/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.498216679 seconds)
    (148/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.579806687 seconds)
    (149/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.993672667 seconds)
    (150/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.86688004 seconds)
    (151/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.552454104 seconds)
    (152/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.281607718 seconds)
    (153/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.185524721 seconds)
    (154/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 9.015569014 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.434207971 seconds)
    (156/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.187718454 seconds)
    (157/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.50071922 seconds)
    (158/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.43789941 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.435770013 seconds)
    (160/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.893961174 seconds)
    (161/341) benchmarking ("sort", Bool, false)...
    done (took 2.498296144 seconds)
    (162/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.481602336 seconds)
    (163/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.906383531 seconds)
    (164/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.048399114 seconds)
    (165/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.340376991 seconds)
    (166/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.189776927 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.201340688 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.203806463 seconds)
    (169/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.393732861 seconds)
    (170/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.384863248 seconds)
    (171/341) benchmarking ("sort", Int64, false)...
    done (took 5.836432151 seconds)
    (172/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.201534352 seconds)
    (173/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.683024266 seconds)
    (174/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.579805631 seconds)
    (175/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.829512081 seconds)
    (176/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.610529858 seconds)
    (177/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.01010076 seconds)
    (178/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.950056673 seconds)
    (179/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.086589989 seconds)
    (180/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.320191828 seconds)
    (181/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.482780703 seconds)
    (182/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.187266268 seconds)
    (183/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.404201025 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.536039471 seconds)
    (185/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.620438465 seconds)
    (186/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.343003242 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.405319592 seconds)
    (188/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.346583899 seconds)
    (189/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.210054689 seconds)
    (190/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.30983453 seconds)
    (191/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.284245846 seconds)
    (192/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.203040263 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.312061781 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.093422985 seconds)
    (195/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.345046071 seconds)
    (196/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.310897882 seconds)
    (197/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.19073055 seconds)
    (198/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.316084592 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.135637363 seconds)
    (200/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.472675251 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.499147438 seconds)
    (202/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.32481797 seconds)
    (203/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.463933434 seconds)
    (204/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.201703573 seconds)
    (205/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.425174889 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.190875055 seconds)
    (207/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.19794589 seconds)
    (208/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.300408539 seconds)
    (209/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.317343103 seconds)
    (210/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.283483366 seconds)
    (211/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.195528171 seconds)
    (212/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.994431151 seconds)
    (213/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.213275436 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.288577593 seconds)
    (215/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.192274639 seconds)
    (216/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 3.844459548 seconds)
    (217/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.170360268 seconds)
    (218/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.606841233 seconds)
    (219/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.188113467 seconds)
    (220/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.273449666 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.320126717 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.205967212 seconds)
    (223/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.605965206 seconds)
    (224/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.247940359 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.537251947 seconds)
    (226/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.208729802 seconds)
    (227/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.504710839 seconds)
    (228/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.33994128 seconds)
    (229/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.497744594 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.326888305 seconds)
    (231/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.206311189 seconds)
    (232/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.399589719 seconds)
    (233/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.291269101 seconds)
    (234/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.307602351 seconds)
    (235/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.294036145 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.508538549 seconds)
    (237/341) benchmarking ("sort", Float32, false)...
    done (took 5.867109555 seconds)
    (238/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.473087618 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.079048597 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.599949054 seconds)
    (241/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.392627918 seconds)
    (242/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.194940095 seconds)
    (243/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 4.47240935 seconds)
    (244/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.197097511 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.48553111 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.807332888 seconds)
    (247/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.189614319 seconds)
    (248/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 8.725580391 seconds)
    (249/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.408066644 seconds)
    (250/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.88000121 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.467845143 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.208808596 seconds)
    (253/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.085351874 seconds)
    (254/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.218770743 seconds)
    (255/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.271027828 seconds)
    (256/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.204436908 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.066592312 seconds)
    (258/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.198266951 seconds)
    (259/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.194226851 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.383200396 seconds)
    (261/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.188746071 seconds)
    (262/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.40646571 seconds)
    (263/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.531962988 seconds)
    (264/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.274315744 seconds)
    (265/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.193751003 seconds)
    (266/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.363816716 seconds)
    (267/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.177842909 seconds)
    (268/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.40229242 seconds)
    (269/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.325493582 seconds)
    (270/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.578040317 seconds)
    (271/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.795171333 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.224163935 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.26466526 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.431374495 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.303588149 seconds)
    (276/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.205148999 seconds)
    (277/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.516437129 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.218068831 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.962072576 seconds)
    (280/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.6765958 seconds)
    (281/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.716894003 seconds)
    (282/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.10034873 seconds)
    (283/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.512140496 seconds)
    (284/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.275299917 seconds)
    (285/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.188700637 seconds)
    (286/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 9.688297866 seconds)
    (287/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.628878578 seconds)
    (288/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.328848519 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.192685449 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.223640157 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.626358944 seconds)
    (292/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.209851779 seconds)
    (293/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.967153852 seconds)
    (294/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.519005805 seconds)
    (295/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.200423229 seconds)
    (296/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.430593281 seconds)
    (297/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.378047686 seconds)
    (298/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.308870972 seconds)
    (299/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.277194398 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.328284286 seconds)
    (301/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.20321854 seconds)
    (302/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.20364578 seconds)
    (303/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.450175442 seconds)
    (304/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.326489244 seconds)
    (305/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.402204674 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.216976864 seconds)
    (307/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.071709789 seconds)
    (308/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.64210651 seconds)
    (309/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.27578924 seconds)
    (310/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.193460863 seconds)
    (311/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.315378066 seconds)
    (312/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.252233139 seconds)
    (313/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.193347896 seconds)
    (314/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.329528164 seconds)
    (315/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.33204137 seconds)
    (316/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.190845295 seconds)
    (317/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.223227437 seconds)
    (318/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.40235525 seconds)
    (319/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.639026613 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.090088926 seconds)
    (321/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.195520709 seconds)
    (322/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.28971155 seconds)
    (323/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.193799191 seconds)
    (324/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.352834255 seconds)
    (325/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.512980053 seconds)
    (326/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.157466154 seconds)
    (327/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.601517446 seconds)
    (328/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.416764101 seconds)
    (329/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.661883898 seconds)
    (330/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.327286709 seconds)
    (331/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.28030067 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.506751691 seconds)
    (333/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.188044354 seconds)
    (334/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.695965812 seconds)
    (335/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.206835491 seconds)
    (336/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.281987831 seconds)
    (337/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.889690353 seconds)
    (338/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.508278001 seconds)
    (339/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.124407468 seconds)
    (340/341) benchmarking ("sort", Int8, false)...
    done (took 5.126384953 seconds)
    (341/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.195685124 seconds)
  done (took 1203.521543613 seconds)
done (took 1205.955694063 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.211362117 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.199334453 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.698163638 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.211087819 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.186691624 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.204590352 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.708154356 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.229831276 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.216379443 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.710723247 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.210555905 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.19908707 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.214511694 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.23281763 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.210883215 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.213411542 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.20622961 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.224209222 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.234494453 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.205886938 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.250999426 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.206365493 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.200220452 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.25362235 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.200427997 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.213378166 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.223695471 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.251881427 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.25057785 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.202467416 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.208361986 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.55283852 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.252505767 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.204580354 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.211445631 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.214698155 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.206107755 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.215501815 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.222338046 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.215466225 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.201293854 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.210821101 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.204699379 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.203924585 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.200633776 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.200531745 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.201241111 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.325969683 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.215313244 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.537122925 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.271775761 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.22242447 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.252834193 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.20388922 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.202565755 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.204519761 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.252181308 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.206319282 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.206085709 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.537427436 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.299981481 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.2161794 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.537667328 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.268558672 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.210643406 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.210222913 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.200789993 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.220206269 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.553046992 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.754014771 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.233815924 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.222069012 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.202762974 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.204470841 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.216960593 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.709583366 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.219452105 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.780956557 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.225342922 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.216755878 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.206758977 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.203530077 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.203105203 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.219545211 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.224826814 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.201858428 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.207914785 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.208402815 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.215591942 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.554990654 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.2506394 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.702818736 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.213329457 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.226623599 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.22541278 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.781982369 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.229928096 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.225084477 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.206042458 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.555928581 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.240121015 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.225851573 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.205752636 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.215120577 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.319297364 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.226475077 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.2261139 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.203437169 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.227443324 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.212048593 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.20582418 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.218228468 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.221989063 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.238494911 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.221616153 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.205856142 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.214056022 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.209268556 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.229709941 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.204145069 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.21009985 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.216543461 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.206319105 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.256592996 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.228553481 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.220620721 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.320523903 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.211165515 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.330393764 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.221537556 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.211409874 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.206193455 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.542754551 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.253416337 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.227276314 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.213826961 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.228996278 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.228251112 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.223848017 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.20827385 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.224130883 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.211193591 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.259267487 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.206433759 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.231345823 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.254596859 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.223289407 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.213550994 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.227966341 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.241273655 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.226525977 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.210937222 seconds)
done (took 346.615683193 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.250595085 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.199898082 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.279271059 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.20264169 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.269829076 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.254912461 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.203504607 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.204085152 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.203261533 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.589459295 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.204462121 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.208031216 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.203778507 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.205662874 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.254086407 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.204255398 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.204860263 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.43932748 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.204172014 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.263500602 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.202073261 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.203601613 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.205232848 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.593623019 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.207209839 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.20366294 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.265626982 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.204106789 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.447522206 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.2042428 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.203105115 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.445023257 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.265406551 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.219796789 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.212484966 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.213701253 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.273591413 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.198613517 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.251395211 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.252521053 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.283224489 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.238112846 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.203374214 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.204393135 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.209464696 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.205705159 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.205889223 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.239626189 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.204840205 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.212671499 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.438033345 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.212536851 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.212377338 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.206001793 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.204614842 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.218044575 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.206692132 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.206528531 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.264514203 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.20782956 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.255049718 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.594428825 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.590938594 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.207109341 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.20492507 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.205700768 seconds)
  done (took 206.097492793 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.273561945 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.292471598 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.276273926 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.21558886 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.260087508 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.278559096 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.211669237 seconds)
  done (took 17.942921146 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.213878369 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.208289527 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.232025439 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.23068058 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.208361594 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.344774733 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.21916171 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.213258274 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.233697753 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.208863006 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.545964549 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.232802291 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.215950823 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.207761788 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.220658847 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.237986319 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.21003955 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.208968843 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.307078039 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.288816494 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.215073488 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.215821811 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.237016615 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.220833318 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.210737213 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.211397159 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.209174513 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.215974391 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.209161973 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.211215775 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.211025905 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.222620173 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.211172014 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.207111577 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.209154979 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.209626949 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.210795084 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.210739993 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.208762573 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.209143723 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.209141316 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.208221961 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.210252254 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.208720509 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.2094443 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.230154287 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.209228318 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.209824469 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.207401026 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.208877427 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.239679658 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.210500291 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.210101371 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.2159981 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.252513228 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.217614039 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.21047708 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.208917268 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.208780518 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.211309893 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.209988438 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.291332782 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.234327487 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.211156515 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.236322454 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.24881862 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.211385645 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.212143312 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.210832227 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.236386711 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.209927749 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.236237336 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.210550415 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.308581312 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.211189166 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.354536525 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.234959701 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.214633691 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.216818184 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.212468369 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.218811512 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.213293611 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.215885242 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.21909705 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.215279341 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.213205236 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.212119119 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.21408446 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.217714868 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.212057153 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.258465641 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.212347014 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.215021145 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.310019837 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.21273245 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.311386144 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.238666528 seconds)
  done (took 238.313380763 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.218018442 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.215857636 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.227018153 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.214471635 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.212551635 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.217228456 seconds)
  done (took 15.446980315 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.216289375 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.216870044 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.210614401 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.211090816 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.210564981 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.212524914 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.214156721 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.213608392 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.216991454 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.210689102 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.212595263 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.212598185 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.21304405 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.213170312 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.211549948 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.21190722 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.213756516 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.212192784 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.212924826 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.213222171 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.46747782 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.214196118 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.212644236 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.217824663 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.218657121 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.212455292 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.220821248 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.21300949 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.21240552 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.221602756 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.218969201 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.214982785 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.217229837 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.219681635 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.217134921 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.217442289 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.217427451 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.215163741 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.214403569 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.21535301 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.213576911 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.215042665 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.213671497 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.213905995 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.21580411 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.222746555 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.217358167 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.22162385 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.21334113 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.214717792 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.213267365 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.213514516 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.214107264 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.214692139 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.218887379 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.221902555 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.219271458 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.21450521 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.214850571 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.219624066 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.220313691 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.214268796 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.215693936 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.217805371 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.220319705 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.216772006 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.218958834 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.217364419 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.217189542 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.216892588 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.215005633 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.215055931 seconds)
  done (took 162.915240566 seconds)
done (took 642.846772337 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.245954346 seconds)
  done (took 9.38838518 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.274340666 seconds)
  done (took 9.493474216 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.519634091 seconds)
  done (took 12.659819147 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.234617857 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.237868458 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.233566481 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.219505201 seconds)
  done (took 31.081637279 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.429181452 seconds)
  done (took 9.572580706 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.228634849 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.21421304 seconds)
  done (took 16.645540653 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.241018885 seconds)
  done (took 9.385047785 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.245833758 seconds)
  done (took 9.412215298 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.223023627 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.241510024 seconds)
  done (took 16.622783181 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.307288859 seconds)
  done (took 9.451381597 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.971093131 seconds)
  done (took 10.118982029 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.225001042 seconds)
  done (took 9.384724533 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.244111369 seconds)
  done (took 9.389180012 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.125914845 seconds)
  done (took 10.254952704 seconds)
done (took 175.001933886 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.224743792 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.216264494 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.216579449 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.218264309 seconds)
  done (took 31.022562363 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.25268804 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.252553863 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.258907848 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.251157572 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.244360497 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.24420307 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.251416721 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.251949231 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.243933704 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.248860022 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.253978412 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.250620311 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.252908532 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.262376639 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.26177684 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.254714645 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.253226202 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.253539189 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.242630916 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.260767078 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.252962171 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.253801488 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.219116967 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.217214649 seconds)
  done (took 56.135636921 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.409319439 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.285361489 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.371817383 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.264017062 seconds)
  done (took 11.47649435 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.217082467 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.281326079 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.268500702 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.264952466 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.270226939 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.32299538 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.271937106 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.355026656 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.345531659 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.344207428 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.226321945 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.24174589 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.244040089 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.26715591 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.320986128 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.219463421 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.220348652 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.33337099 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.280492385 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.389661866 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.219881212 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.271780792 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.270560697 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.272945706 seconds)
  done (took 56.865007366 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.220019796 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.230172839 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.228347559 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.220792592 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.222251727 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.220358847 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.227897513 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.224270419 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.241772398 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.223425676 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.219854704 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.218777398 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.225942905 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.223069445 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.222016821 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.236481376 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.23408037 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.222276164 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.225846913 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.227300041 seconds)
  done (took 46.6643221 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.218591536 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.067138466 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.569907533 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.470369891 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.218441132 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.220454304 seconds)
  done (took 33.914779541 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.235879656 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.238784898 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.226605035 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.246115377 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.271164018 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.228454517 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.283150893 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.385801963 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.227643095 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.281334799 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.239825697 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.228827628 seconds)
  done (took 29.243252329 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.218905954 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.2237623 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.220243597 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.232063703 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.231523376 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.229278215 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.228889026 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.221890782 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.234922731 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.239073203 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.230180235 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.234016903 seconds)
  done (took 48.895829914 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.435666233 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.44840137 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.427207817 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.831412488 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.548612446 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.201496857 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.508693516 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.433786092 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.884115275 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.913767629 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.513349646 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.200532624 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.176440273 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.150467638 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.120290728 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.4678016 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.225289654 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.081885995 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.493531329 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.269182589 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.230752138 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.224841403 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228678042 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.50733119 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.548764279 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.226848628 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.43690373 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239705954 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.22630915 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.488833984 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.831803152 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.280982433 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.428497352 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.482899102 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.56543668 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.298797067 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.231139322 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.417883826 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.269726806 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.26069059 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.236960336 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.235391378 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.770500655 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.241119307 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.497504358 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226011844 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.250192439 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.218234878 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.15112795 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.546282258 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.329320148 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.223502938 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.2592673 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.656841391 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347152514 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.468579774 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.231326352 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.416654909 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.28533675 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.484884505 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.365312487 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.229831162 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437862796 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154976111 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.564936734 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.344068081 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.229309067 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.231512033 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.927405668 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.468856152 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.308385943 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.548302753 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.983748199 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.229824083 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.22952184 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.271415318 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.313457864 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.228231678 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.527437048 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.224032513 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.154595928 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.326077865 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.62710833 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.232224638 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.227565249 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.233418911 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.07397341 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.153366031 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.324334752 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.477936063 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.546636438 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.229204645 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.229658577 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.248702579 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23134176 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17365497 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.806814142 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.293987776 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.156273011 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.790922038 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.840242377 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.196762001 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.722062481 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.271413811 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.496401752 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.377678619 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.634481191 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.439053213 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.476056091 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.763271353 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.23479663 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.790048527 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.310563887 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.304823594 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.23034137 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.789471661 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.42319595 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.523770486 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.341884257 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.228805211 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.154401679 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.240616846 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.433698376 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.844063905 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.284770403 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.229566628 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.236318905 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.229662371 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.232161316 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.393925144 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.245313034 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.516933505 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.290457636 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.214381482 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.149399142 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.233821705 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.509322878 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.90240749 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.290837389 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.482982809 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.491932604 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.928850326 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.827667017 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.180647704 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.506408467 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.297486862 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.304927974 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.813984238 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.356067643 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.328255534 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.230611537 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.35836532 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.238318203 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.233834761 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.636603987 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.644553164 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.658881449 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.274615402 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.231422856 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.228689502 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.427870347 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.473582324 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.272232251 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.24937718 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.23811603 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.314131627 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.461464015 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.231336569 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.157061753 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.46965851 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.469500406 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.518223248 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.636170546 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.277228065 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.305021459 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.243287876 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.445448332 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.317013195 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.895870428 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.77910603 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.442101181 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.80858418 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.201385744 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.90048701 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.498503601 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.608560296 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.248533766 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.685995155 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.430161045 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.934373754 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.265446696 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.762638881 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.15926819 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.238293166 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.561376397 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.183321084 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.543178397 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.287237541 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249767989 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.235866022 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.235257776 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.244384403 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.132933551 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.345453532 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.305544271 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.308482536 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.164749557 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.899978944 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.278088912 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.238955466 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.233178461 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.538606637 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.003182707 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.188354732 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.232303512 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310291103 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.984818742 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.784675554 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.237614461 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.238561159 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.848367421 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.241105303 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.822939989 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.278145205 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.970537815 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250511904 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.492626364 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.930146913 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.518207938 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.309723684 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.31101586 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.235734972 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.241646735 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.937553529 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.245271186 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.935525835 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.517219694 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.510439607 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.677166136 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.290255059 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.443888448 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.251350235 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.236486187 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.708665386 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.259708462 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.235054778 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.426767971 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.757261187 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.562908023 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.873927403 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.320428061 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.237094641 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.512420693 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.242057668 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.840121634 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.930199356 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.231203969 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.241789827 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.492450036 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.923256482 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.238073719 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.20633605 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.246033692 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.448678991 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.44319553 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.508470548 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.524779855 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684029453 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.162620115 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.243157717 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.295423416 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.47862081 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.239088755 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.273022616 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684012893 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.275727474 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.664471811 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.533502835 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.614919091 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.865768343 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.499778305 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.299612526 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.251553541 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.890627131 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.357865213 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.168452463 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355970195 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.165500654 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.905100009 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.530546894 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.254323752 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.514114396 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.213946701 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.573158213 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.529775305 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.49206407 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.277688649 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.26700172 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.240985884 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.2788741 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.237593093 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.445090591 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.356171705 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.241322471 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.800210569 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.279378921 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284611953 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.24354658 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.73611541 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.260519484 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243448702 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.933044974 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.264680201 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359485113 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310029643 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.981730937 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.873713837 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.267510232 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.196744145 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.066629072 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.516882438 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.293372037 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.684697575 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272028983 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.645868109 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.239678191 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.4532327 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.243628059 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.829117938 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.285885414 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.506979979 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.190614273 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.453975434 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.43351912 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.261795334 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.239219047 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143588566 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.402145163 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.117666393 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.222197916 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.243919984 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.923937637 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.656323379 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.471372931 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.697362924 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.073470006 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.233682484 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.547158588 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.627196947 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.8746725 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272481722 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241983241 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.582469267 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.368897269 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.549712749 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.508855001 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.251803997 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.266574963 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.455597153 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.356349803 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.159772019 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.739381042 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.828490421 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.942900234 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.253644398 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.444029021 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.563560818 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.547610507 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.276270204 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.318929863 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.646851932 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.51879536 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.307415482 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.167073033 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.242799548 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.637572324 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.750306393 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.341065461 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.482467821 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.533328871 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.87748164 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.855779794 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.694807004 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.615797162 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.683151339 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.643668581 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.448420239 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.592511368 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.561812047 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.833552037 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.657142283 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.457627493 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.333319174 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.510956593 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.110745751 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.952449626 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.486355284 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.247509473 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.172121581 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.449723602 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.37646088 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.650501565 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.757208384 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.490086156 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.502397304 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.707385088 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.781910644 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.453054434 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.268087859 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.208914357 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.267229918 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.262816645 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.244671796 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.738147526 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.53186677 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255609291 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.184608817 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.915909028 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.172237427 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.456245022 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.453673792 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.282989102 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.801333278 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.506909176 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.34343436 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.540775686 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.50400772 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.279358972 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.171529265 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.974072242 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.192811863 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.290134003 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.668414719 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.261312824 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.248473578 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.449775923 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.17683626 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292403004 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.251576589 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.445830589 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.817522548 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.523459429 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.364078789 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.482182037 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.542227367 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.069275229 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.26241306 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.518603001 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.173464091 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.072667293 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.950143372 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.287325725 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.317385944 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.245982705 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.249120112 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.517140254 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.569199838 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.446954931 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.885559378 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.279052346 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.27032087 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.568549729 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.332029502 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.247361778 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.251915805 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.756587306 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.480135391 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.247736607 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.222587174 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.45966809 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.319756382 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.443538655 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.321898617 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.760198127 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.250771134 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.090239029 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.337100639 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.200373361 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.248142978 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.919450309 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.306963846 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.248333913 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.530279226 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.9003314 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.450402435 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.643479578 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.120286691 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.464837873 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.288941264 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.249468752 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.358696477 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.529812018 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.54694212 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.247272296 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.515088277 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.290989251 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.252774821 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.908651834 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.217480241 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.249694985 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.919537166 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.147056172 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.97961129 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.641721896 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.251816415 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.250370722 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.252293297 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.173484059 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.247509126 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.424896493 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.259004431 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.363920231 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.514107196 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.56484496 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.329161178 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.250126591 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.248121985 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.250713031 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.460474802 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.762663145 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.264567744 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.948959775 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.451200221 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.250110722 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.743318378 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.700702267 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.522914806 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.287436315 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.454420159 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.483121706 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.783721542 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.464390814 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.227241302 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.476018586 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.24884456 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.522755529 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.523583759 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.250718262 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.461588566 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.868449908 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.535986099 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.606761726 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.560109519 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.309591157 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.471714623 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.234402504 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.257627796 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.25296266 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.512565454 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.300455242 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.249877457 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.260425954 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.806318621 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.928670211 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.73269489 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.401118361 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.574116902 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.011280992 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.005408831 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.255390325 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.177755103 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.251475654 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.276331093 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.252996658 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.17561244 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.921592587 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.155554466 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.465256848 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.563450458 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.178273012 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.45569862 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.835149557 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.176430841 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.220200609 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.252135835 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.49530239 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.178509385 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.253315004 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.207298854 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.530764701 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.986638078 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.522179181 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.251309947 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196620075 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.256673363 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.252084793 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.251676396 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.335128708 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.24809392 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.356348451 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.514340341 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.624393314 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.350771949 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.891439791 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.987805802 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.19015373 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.295886164 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.811099892 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.820145199 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.531552103 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.378022372 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.931123521 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.197143486 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.251215583 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269320028 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.514502932 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.256777551 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255120615 seconds)
  done (took 2304.104076328 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.308941437 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.342822383 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.313210906 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.294572525 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.37231261 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.348857782 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.30969554 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.318784268 seconds)
  done (took 60.789613306 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.254004934 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.231535519 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.261644054 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.253396268 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.254635308 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.257702881 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.441689971 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.284853939 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.252932869 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.25963186 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.255247042 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.246507076 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.255075813 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.254390036 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.259678286 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.529517279 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.280119481 seconds)
  done (took 83.030634348 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.303528475 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.133743931 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.2584589 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.039525113 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.311379932 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.559009681 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.261721591 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.258880705 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.605655988 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.555124119 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.266780925 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.271228102 seconds)
  done (took 97.020955819 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.257826633 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.256035462 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.256410601 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.254958373 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.256758061 seconds)
  done (took 13.463288004 seconds)
done (took 2874.829504831 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.503459637 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.356114864 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.334783023 seconds)
  done (took 6.872605468 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.398738728 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.44644077 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.562741611 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.570211048 seconds)
  done (took 12.154330505 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.540653497 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.62238961 seconds)
  done (took 7.347955987 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.628584792 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.275101011 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.648186668 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.260627751 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.262702159 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.261528635 seconds)
  done (took 23.972862541 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.257438409 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.257864089 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.256826759 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.259319872 seconds)
  done (took 11.216596777 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.258108753 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.041688159 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.255202578 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.273040614 seconds)
  done (took 23.011920958 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.478783947 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.313496742 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.024397115 seconds)
  done (took 9.999157952 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.879832591 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.692366476 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.873138024 seconds)
  done (took 10.628883567 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.486774228 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.073822587 seconds)
  done (took 8.743708171 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.396073314 seconds)
  done (took 4.57961013 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.090733488 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.570368829 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.721973395 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.230405838 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.892791048 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.660691276 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.744589631 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.553065661 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.65226945 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.708435112 seconds)
  done (took 30.011874795 seconds)
done (took 165.779180646 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.871574173 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.292629017 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.469700804 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.655513168 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.499396593 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.472860424 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.558957173 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.656090813 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.345778346 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.359169029 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.653325689 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.500658372 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.494847613 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.283849568 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.500181762 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.283790045 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.500148946 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.729992886 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.322905668 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.537066841 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.553354366 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.286611233 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.482299827 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.303901619 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.504204114 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.418786374 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.896694628 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.286223005 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.4767409 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.913672142 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.421597774 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.693163627 seconds)
  done (took 182.413488623 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.151544402 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.263897646 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.262050403 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.263266536 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.572211549 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.263268518 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.244699733 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.262495428 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.540195293 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.495134704 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.263349775 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.524980286 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.26489718 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.262426684 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.266131924 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.263654042 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.64178224 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.190063507 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.263645077 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.264204286 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.264720136 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.402620905 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.262079647 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.417094581 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.617376461 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.267445057 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.267207612 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.264382812 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.26470917 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.263497199 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.265915817 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.262413529 seconds)
  done (took 220.532670854 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.263955103 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.264533127 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.263048778 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.264316353 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.265269966 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.267924109 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.268607804 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.264979003 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.950552655 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.946569318 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.263943823 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.265228133 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.26940591 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.264176359 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.265827699 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.267477324 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.264172354 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.267282085 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.264641401 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.26516846 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.267275105 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.04132982 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.266315242 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.070364604 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.266430547 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.266248168 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.269018864 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.266216295 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.263594813 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.265348362 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.266734185 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.264986658 seconds)
  done (took 233.64336493 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.504916727 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.267952501 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.266219069 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.281878544 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.266651303 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.265293868 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.269517868 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.512785183 seconds)
  done (took 22.827632012 seconds)
done (took 661.622329749 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.640557595 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.991015234 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.405219515 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.292722599 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.566124337 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.334373443 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.282759419 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.358088425 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.943948295 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.365803969 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.680510472 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.29597344 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.984277931 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.321306189 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.402760439 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.347814424 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.65957404 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.915571407 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.424770855 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.977654371 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.48912927 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.213250218 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.368007949 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.98229196 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.6957981 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.238504807 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.303553175 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.662433941 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.292171847 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.525968929 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.929059164 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.5514075 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.306948306 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.288778897 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.34233754 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.330529028 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.475088577 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.301408323 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.40191549 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.007011721 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.959940164 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.821997331 seconds)
  done (took 116.869253332 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.276111037 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.274036957 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.275546903 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.262231496 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.273213464 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.272617727 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.273445946 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.272963473 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.243969294 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.272564793 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.272383707 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.27709376 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.273913153 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.27293837 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.271208641 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.27386066 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.273302197 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.274447226 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.272414112 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.273513475 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.273715072 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.273467867 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.269610343 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.270009701 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.269000557 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.268180002 seconds)
  done (took 61.260081019 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.263907116 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.417567442 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.55649875 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.298906776 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.264894173 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.268149983 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.294157991 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.274599619 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.267683787 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.267748666 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.377147326 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.269807353 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.277387039 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.554183319 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.295702065 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.264810463 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.26522463 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.266486602 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.425583425 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.28306273 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.296772161 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.275461502 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.296350074 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.283207207 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.268282196 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.266380747 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.264245234 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.685994787 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.279052181 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.377589348 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.343322902 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.302041105 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.608416086 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.567228138 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.337071574 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.274007266 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.266295268 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.422946247 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.281274182 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.267537296 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.296814052 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.277160726 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.555252894 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.775225804 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.28394427 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.266080125 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.685803873 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.435030166 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.317572258 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.28140448 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.562321431 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.29847182 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.266750288 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.26870927 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.303648964 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.279498831 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.267463584 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.511977272 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.284496009 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.295817302 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.276233883 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.268794244 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.431346975 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.277086063 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.418735743 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.277572786 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.273728609 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.268765448 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.556758155 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.299795303 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.763636338 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.284809138 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.26753905 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.379898395 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.424693835 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.711307472 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.28406125 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.430851342 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.627140709 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.308951562 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.28099576 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.674832706 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.312304196 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.279961593 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.268129387 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.267931996 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.268041955 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.309477668 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.295702736 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.69383922 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.772398195 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.532813953 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.31150574 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.284077433 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.270506247 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.514191268 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.282226675 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.268959728 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.551846646 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.793425223 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.287647847 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.276268651 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.752503165 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.287405426 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.300113828 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.283422272 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.565763818 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.303185266 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.310916208 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.270535125 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.27505516 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.272752065 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.300116131 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.281927511 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.26932508 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.745467571 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.44456804 seconds)
  done (took 279.41537925 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.274907567 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.269942301 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.268499056 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.269864791 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.269366652 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.271042613 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.269315618 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.271232621 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.271339927 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.269167809 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.269098303 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.270872089 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.270773832 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.276448925 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.307244284 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.271661286 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.758621934 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.269387237 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.269973903 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.272155931 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.844614403 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.27727864 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.270350262 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.272610953 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.269435736 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.271998736 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.276914314 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.309698312 seconds)
  done (took 178.936804463 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.271427011 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.320203072 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.283690982 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.319696946 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.283940088 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.271946627 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.367387096 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.288860574 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.277845372 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.271491825 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.271376763 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.362896174 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.281899407 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.347989169 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.302535847 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.319223953 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.351556659 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.2774715 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.272252497 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.281877915 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.321499681 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.287784386 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.299582334 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.32987168 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.314131466 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.321711517 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.288180064 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.273501148 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.279794418 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.364078309 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.293501296 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.300290886 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.310453833 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.309756672 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.368223381 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.368494054 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.354077436 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.319056016 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.279118408 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.274225507 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.273565415 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.285346799 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.32140506 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.285774532 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.274780406 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.371462686 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.306033686 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.27454653 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.296466357 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.274713307 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.296751508 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.290818251 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.308200343 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.378529337 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.32481896 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.302254489 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.295976945 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.286026763 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.274702287 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.360061791 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.28617286 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.364926561 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.296146436 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.271725188 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.264803034 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.277658502 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.323736722 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.31139151 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.35528931 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.284343381 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.348526791 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.331174032 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.292665463 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.276102962 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.275156259 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.323951462 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.368699059 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.33205848 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.335747598 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.312199499 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.293394237 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.276096554 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.280699084 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.303490332 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.284192895 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.374825883 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.370434001 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.284065136 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.276073724 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.286908146 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.276668537 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.299634974 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.334572214 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.327680844 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.364551081 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.314531122 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.312501466 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.285099676 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.297394462 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.282957339 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.308365735 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.286361294 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.294308655 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.637054845 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.315623919 seconds)
  done (took 244.765547079 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.650136659 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.327771253 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.345960854 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.563637338 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.680105544 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.401251948 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.317056884 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.331755157 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.342978962 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.443844223 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.383344442 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.370578583 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.321196602 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.299817582 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.326605035 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.33684432 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.35129773 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.619006679 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.424334176 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.050614754 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.325844459 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.583869163 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.614923992 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.662506786 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.36391988 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.710318815 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.939754578 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.413480773 seconds)
  done (took 73.708892569 seconds)
done (took 957.148716033 seconds)
SAVING RESULT...
DONE!
