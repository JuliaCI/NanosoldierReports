cset: moving following pidspec: 19046
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.818897832 seconds)
loading group "shootout"... done (took 1.135470722 seconds)
loading group "string"... done (took 0.670185945 seconds)
loading group "linalg"... done (took 8.627017306 seconds)
loading group "parallel"... done (took 0.165118214 seconds)
loading group "find"... done (took 3.021016671 seconds)
loading group "tuple"... done (took 2.132815394 seconds)
loading group "union"... done (took 14.840551499 seconds)
loading group "dates"... done (took 1.449330291 seconds)
loading group "micro"... done (took 0.218276665 seconds)
loading group "simd"... done (took 4.762000663 seconds)
loading group "io"... done (took 1.079746057 seconds)
loading group "random"... done (took 9.50976906 seconds)
loading group "problem"... done (took 1.522627768 seconds)
loading group "array"... done (took 25.20586796 seconds)
loading group "misc"... done (took 1.894166186 seconds)
loading group "scalar"... done (took 43.484854334 seconds)
loading group "sort"... done (took 3.320185426 seconds)
loading group "sparse"... done (took 12.723308072 seconds)
loading group "collection"... done (took 18.434450922 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.425390668 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113850948 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.126676632 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.112543191 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.183937488 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118972745 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127626018 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.083129579 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.897156706 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.135038214 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113565471 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426388462 seconds)
done (took 5.323489026 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166028848 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.090936685 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082455856 seconds)
  done (took 1.412512112 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.070940803 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061578739 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065849512 seconds)
  done (took 1.437605833 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064276697 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135054579 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065130342 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065532955 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065169728 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064589939 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064885598 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064797148 seconds)
  done (took 1.756652055 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07183461 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066385288 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064139011 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.066106744 seconds)
  done (took 1.502488198 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065212781 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.120524121 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063541637 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063109682 seconds)
  done (took 1.550508973 seconds)
done (took 9.151692922 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138118491 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.821159962 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.771718841 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.121795252 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.245783591 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.366232007 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122139371 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.181517422 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087489395 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073881158 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119905618 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076556192 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.38480913 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.49780234 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069787485 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.17067138 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.631077771 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085660112 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134242608 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.44357372 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.07217959 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086311899 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08342212 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069963796 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.350161506 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152362324 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.666076903 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091679298 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06670953 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.093059109 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068757137 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076384422 seconds)
  done (took 10.691996141 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09328097 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.089035987 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067688502 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122847023 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093680302 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068922343 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.074170205 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066389225 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087738001 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.123209145 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088957516 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098025366 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065410687 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067883278 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072767823 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.196019462 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.079633069 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080267331 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066190541 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.080053519 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104330319 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077183468 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077029183 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076933737 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.131341492 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.16870981 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.095414816 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096965698 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.065028401 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.07775542 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114381596 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126041886 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066653657 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064008573 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119215974 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.094858408 seconds)
  done (took 4.628407256 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.884075649 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094606236 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081898953 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072871624 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104945594 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.111777422 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.119798357 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.121637203 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098308932 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067591953 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.154547319 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.676676526 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.151519051 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070851905 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119265941 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.356342927 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.06778048 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.069064811 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066959722 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069622001 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068396912 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111398483 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064610702 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.174714523 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.587326207 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069131335 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068190492 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095391002 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.0639708 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.139526528 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091490583 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068276493 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.540497671 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063936089 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062481251 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.091536467 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.195842132 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094072722 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066454234 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066763821 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077619053 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065129183 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106837316 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080182798 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.516021165 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068174982 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.583440025 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.22493261 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071664201 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07045893 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100586566 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063134917 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06616381 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.075896525 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.143820557 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065620584 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.271644835 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068536703 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066513353 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067563671 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.098007836 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065863568 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07050817 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071626228 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094695756 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.797664786 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.087781553 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094849739 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.0654932 seconds)
    (69/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.082120806 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.405328542 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074588439 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067597649 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068330716 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067472417 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.105662245 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065101788 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06506099 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109744672 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093604699 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087322958 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068236888 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065817913 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064728383 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.329989975 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.166944987 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06466079 seconds)
    (87/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.061939523 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065451526 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.475632002 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062232025 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064399445 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066532857 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.205213629 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068350943 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063490375 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064155162 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098365725 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069376237 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.337964797 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067454496 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.483420657 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.06719763 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101166846 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118986762 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066474484 seconds)
    (106/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.064309843 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099868714 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066529528 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063860507 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072313302 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06443599 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063534714 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068347741 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064166066 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06510914 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067475448 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06667922 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066388987 seconds)
  done (took 22.807938529 seconds)
done (took 40.252718906 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.311590705 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077655496 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078047906 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077942287 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077737367 seconds)
  done (took 1.907205567 seconds)
done (took 3.287897824 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.252601681 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073712485 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062976878 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.201803323 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.086797182 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.174581292 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.214090132 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.158632524 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.087106394 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086689938 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.087218404 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.220292737 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.225706255 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086975269 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.157616385 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.226200196 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.087173309 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062791688 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.087057479 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086824291 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.087060015 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062871912 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.087008722 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086825543 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.156744187 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.08737122 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062571088 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.155646005 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.085477592 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.156780928 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.085669443 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.085443928 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.085805508 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.156231449 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.085635433 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.154538061 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.180905061 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.085838187 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.085964738 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.085321145 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084880131 seconds)
  done (took 6.26339484 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075070806 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081136507 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08297084 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061091485 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070324019 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080773937 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060963622 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08082135 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090408377 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081035497 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080638265 seconds)
  done (took 2.216987891 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069794509 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081718521 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08343682 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060527807 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07187393 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08192771 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060669442 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081279741 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084148383 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082158268 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082321065 seconds)
  done (took 2.160794642 seconds)
done (took 11.947497269 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096521039 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.064170911 seconds)
  done (took 1.463658658 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.222239387 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.497229223 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.921400668 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.091621107 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070862003 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08429996 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.19659067 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065611972 seconds)
  done (took 7.643798657 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.097360909 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066770254 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070269774 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066098878 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.067005668 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.068412516 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.066750095 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067346923 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067516602 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.067626478 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066358003 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.066395054 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.06808291 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066540342 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067949685 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068308452 seconds)
  done (took 2.531895262 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101959965 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067879456 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.098116026 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060835992 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070698735 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06100195 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069564474 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071353107 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068981808 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069971733 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070645454 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069759768 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.070286638 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.070076264 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071490868 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071669205 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071767197 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069681215 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072031896 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072295439 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070762488 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071342779 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.072220633 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070380844 seconds)
  done (took 3.173835559 seconds)
done (took 16.135050312 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174579224 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074002044 seconds)
  done (took 1.560383334 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067282244 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067102257 seconds)
  done (took 1.463630332 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072721164 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059148667 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076814071 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.069078295 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059882338 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059561044 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075906926 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06049805 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060073399 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060130803 seconds)
  done (took 1.98153606 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062227185 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.067439413 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065048809 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063782574 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065624966 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060954048 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063738577 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061314648 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067443173 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060336108 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064462732 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081609121 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064460735 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081964944 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063960439 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064775578 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.066414982 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063588215 seconds)
  done (took 2.525048165 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.060784017 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.06020938 seconds)
  done (took 1.456584555 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064045372 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060652339 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062936912 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062558343 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060294632 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060198832 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060575661 seconds)
  done (took 1.75851908 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42349411 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122776326 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.343716157 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.0675251 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.075067483 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255516041 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062682202 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067916341 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067266706 seconds)
  done (took 2.858619248 seconds)
done (took 14.950976103 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.081573047 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.179899395 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085755261 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.380801407 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.090074739 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065781851 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11123195 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.180145204 seconds)
done (took 2.532123393 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.286853453 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.134418489 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.3110101 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146932331 seconds)
  done (took 2.929714683 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.332884408 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077489343 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075464295 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065067824 seconds)
  done (took 1.903151953 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064334616 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069507314 seconds)
  done (took 1.479712619 seconds)
done (took 7.954035962 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071492061 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060471705 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.089998319 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065967819 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063001726 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.062540476 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061746243 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062607565 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.060049969 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.062653613 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.062512457 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062499064 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062378451 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062876929 seconds)
    (15/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061882953 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062873709 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.062367008 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062480434 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061926196 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.060749469 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062383266 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062648353 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062096189 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062210151 seconds)
  done (took 2.904963679 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079122599 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063950276 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.065513639 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065075418 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065761306 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.065122005 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065176635 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063881099 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.06553324 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063766831 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065730145 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065792831 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063671828 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065949493 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063807482 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065562369 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.065339619 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064107566 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064010176 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.066521448 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065672271 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064481083 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.066059747 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065508749 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065781509 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06584841 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063848513 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064442128 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065733065 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065720517 seconds)
  done (took 3.327058408 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066042216 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058422566 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059264489 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068628405 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058699 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059490999 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059321989 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058217631 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058889176 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059959495 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059692816 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058863848 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.06023525 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058502287 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058939262 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059764443 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063717141 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078490284 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059271089 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059026604 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06298457 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060275495 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059652659 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058941941 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059107881 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058699695 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058777749 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059438171 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059249554 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059616958 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058965556 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063200205 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064024724 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058871497 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069561876 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063954557 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.05868532 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.06556945 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.060100671 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058794279 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058998057 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058885155 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.059063086 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058863585 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069341042 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059351817 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060327504 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059770712 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059089157 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059155594 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058714259 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.061003403 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068216087 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060340789 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.059202543 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060169653 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058727091 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059807805 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058750312 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058899145 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058748916 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062788168 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060577301 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059716062 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078967002 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060605102 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068936846 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059099302 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059397043 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062786393 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060069586 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077026967 seconds)
  done (took 5.771324725 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071026737 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070636232 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077522075 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069114821 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062965815 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.05991896 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063633644 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059894862 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069076031 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063720665 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059691054 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063294193 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069504069 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063920885 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061247252 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069013134 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064049844 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063406755 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059808716 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063959741 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06123131 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063908437 seconds)
  done (took 2.804589623 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.139561185 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064928966 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10384821 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069037414 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067607344 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068856738 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06517303 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06521784 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06553511 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065724486 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065538818 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065430858 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067819182 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065354545 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065777058 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065447349 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06528064 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065613478 seconds)
  done (took 2.662481088 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076257958 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064653951 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.088119708 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064080347 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064302068 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064084528 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067874113 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068219892 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.064368414 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064641716 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068754665 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064522048 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.064176315 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064739785 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064378346 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064904813 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064436353 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064880802 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068437159 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068363293 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068349444 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069257515 seconds)
  done (took 2.842472736 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076100757 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.061393191 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.077487804 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06341973 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057566375 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057720226 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.063166691 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.062426788 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.063936345 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062008273 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062577315 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058018701 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.063623584 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.062683431 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.064401242 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06258576 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062023701 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.062523437 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062338837 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057751201 seconds)
  done (took 3.765454607 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.068729222 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060075231 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060375984 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064698115 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060359768 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060454325 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065148144 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060576168 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060484256 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08165159 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060794074 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06047193 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075623368 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063526943 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06063176 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065107415 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065321055 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065312854 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.060785519 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060685435 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.081760365 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.060819085 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065360084 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060398903 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060440085 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.060750308 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.0607673 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.063492453 seconds)
  done (took 4.298333851 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062293653 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.060488239 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.060737702 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.060928641 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.0605327 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.060628911 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.060523265 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.060437112 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060766363 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.060950635 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.060537544 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.060577865 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063289899 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.060654323 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06061805 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.060483735 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060734129 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06120587 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060818101 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061151616 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.060856243 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060460598 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.060606532 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.060955562 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061016429 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.060702646 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061367645 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.060824905 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.060596804 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.061055461 seconds)
  done (took 4.331321695 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.070244318 seconds)
    (2/2) benchmarking "in"...
    done (took 0.067940106 seconds)
  done (took 2.646495378 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059703323 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.073753474 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.056962902 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.069242445 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.065019913 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06097868 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.065607398 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065467232 seconds)
  done (took 3.011965237 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064053017 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.086695901 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060483927 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.059517996 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.062308219 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.123881705 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.071384111 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071749243 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07275791 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.061846205 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.059858544 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.070999775 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059335893 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.072547309 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060457929 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.068748881 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066801543 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07696829 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.072185591 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.057561749 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07151126 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059985451 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.057834747 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.060019296 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.058894945 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.066490623 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.074978677 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072068585 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068094031 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057131837 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077518768 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.057733799 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059055812 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.067582122 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.062105566 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.058515359 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.094753279 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.058372348 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.062397023 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.057408462 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.070302805 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.079288753 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073018786 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.07625422 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060197498 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060600248 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058018285 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060326484 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062447833 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.067923455 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.057962017 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06602966 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.057307718 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.059274402 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.068463291 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.058633988 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.063805956 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068203276 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072587774 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.069450247 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.067815536 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.074628494 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068125157 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.06568845 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.059433753 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.078563363 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06016551 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072585744 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073997272 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.059336143 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071319031 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058152666 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.057138916 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.057965945 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.091315133 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.059602627 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.058815945 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.058287277 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.057659001 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.059285201 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.067385562 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063135965 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065444208 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061533668 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.177920313 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.06741109 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.058157982 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.064134522 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.075985368 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.061761979 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.058401304 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.074897707 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062066127 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.057821297 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.075745203 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068092861 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.059935431 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059443926 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.061875843 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.071797029 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.059304168 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057010223 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067214034 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.059956853 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.060463011 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.062764892 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06672556 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.05829611 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.068683517 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.062966998 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060106932 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.05684193 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062594599 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059332016 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.056854248 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067581568 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058426217 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072471932 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064625251 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073022063 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073032203 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068675494 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074086518 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.057941416 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056735649 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075509219 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067161921 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059508356 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076041734 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057245459 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070770216 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057288071 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059112546 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.30015124 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.058563617 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061093908 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.059074892 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063776318 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060262877 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060452217 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064406134 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067378892 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070604089 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.05961554 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067309747 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058453607 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074026778 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.068104995 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.062838191 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061312543 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.058380206 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.069759124 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.064463519 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.06775504 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.057200589 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.058496713 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063779242 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.06880081 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.067525138 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06001595 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.064908922 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.062616313 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.058692496 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.058304133 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.059325706 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.061844269 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060908706 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.058585554 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066171997 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.06656346 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.071375661 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064384055 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.067520306 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.057015005 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.057438734 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.059960843 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.057437075 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.062186413 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.067049692 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072990999 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.069273252 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.078724908 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.057920885 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.067474639 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.059171921 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.074599942 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.071394361 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.058974558 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062397299 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.057135524 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.059364377 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.06744273 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.069454475 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07165988 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073298557 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.062647695 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.062785423 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.057512628 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07280029 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.05840966 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.066534436 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.067080534 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.061918975 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.057913814 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.059208379 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.06689283 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.062459422 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.057784048 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.073152491 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.063728794 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.057551337 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.072093027 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.058155049 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.068523045 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.057289218 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.061941821 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.063294067 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.059680675 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.067627752 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073316829 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.057050014 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.058560798 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073792434 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060034128 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059651225 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.170462478 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07314806 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.062513009 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066461953 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069179945 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068129686 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063447219 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068283758 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059254028 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.067681528 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061384954 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.069774886 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058406932 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.075474945 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057055929 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073514185 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058585829 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.06928813 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058656709 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.067752245 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059017194 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075033621 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059681265 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.058979039 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.069696669 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.056734855 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067361683 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058079412 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063334396 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064852148 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067451088 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059857406 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067498599 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059595532 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.066936359 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062526374 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066087737 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067487774 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062696046 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057314704 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066777642 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06959046 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.06618393 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059217977 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059216565 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058697687 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.304631948 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060594976 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060479022 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067682738 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.063479596 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.064250544 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059661449 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.05997864 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.059989774 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067324873 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068099638 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076182479 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.066988166 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.065841796 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.067464584 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.057616636 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073580475 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.058208379 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.068110198 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.056672575 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.063270136 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.066973425 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.057867336 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076796452 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.059651057 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.065884219 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069825914 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.066440356 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.061486769 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.075254418 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.060780646 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.066983299 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.066415602 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06273522 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06508139 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.059865457 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.066739243 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.067535938 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.068931114 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.058853159 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.065972948 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067161844 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059441007 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.065012558 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.059818187 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.066506065 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.059694508 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.05731387 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.062408572 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.06948495 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.062884243 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.063261024 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.058418223 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.056724327 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.05851454 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.064386608 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.062611135 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.066570483 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073861178 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.056695357 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.05909673 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.057652131 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.061654987 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.075860896 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068045334 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.065910047 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.062549714 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.056852983 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059433468 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.059797999 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058528141 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061098473 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057091078 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057662702 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068477218 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.05959013 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.062372313 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058488814 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059051584 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.067661005 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.06216169 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058640769 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.064919236 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.057982438 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06365136 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057415872 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059621993 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.062711538 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057297943 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.061554067 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.068444167 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.074170141 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.064504189 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.066857948 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059055504 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.065733366 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073048408 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064382801 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058782985 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.067524958 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057284364 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076081151 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.067513753 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067104311 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068080829 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059531176 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075147374 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.062643628 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068439473 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073675112 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059372973 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.064557037 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.057741246 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074405927 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.062754521 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.057828144 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.065996204 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066103164 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064361325 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.069957353 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.05866977 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066050317 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063223357 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.061790139 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059750725 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059523912 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.066958903 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074014549 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.058878608 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06199906 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066162553 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066428664 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062946292 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070148384 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066437731 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059161956 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059654933 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062035815 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.29895144 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.070911304 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059432993 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.063047355 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.063188776 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058166899 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.06517174 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07425533 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.067708082 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.067689809 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.05790227 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.057397791 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.075686626 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06217274 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.061113124 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.066126352 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.067803245 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070159632 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068066726 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.074450037 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.058380969 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.063749283 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070038158 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.058892332 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.05796435 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.061533661 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.059371591 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.067106189 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.067764694 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.065951862 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059991851 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.064939007 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.071913535 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.058925669 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.063324911 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.062495937 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.058402847 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.068605277 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.066267062 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.069384285 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.058840252 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.057666953 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.061723038 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.066817551 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.065462036 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.066561801 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058898019 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.063628084 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.070858679 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.065411175 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060458218 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057111722 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060818907 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067115654 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.062151149 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057534823 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.062644639 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.061844976 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06403202 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.067497935 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.062701108 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058046332 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.074695348 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.065846093 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.066918444 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059731391 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060004833 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058552539 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057629181 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069296597 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057860707 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059485416 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.062675249 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059467882 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.075226918 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.066133922 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073483784 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.058837954 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.062499935 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058088889 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067974009 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.062694347 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058288004 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.068670919 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057448192 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073496746 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070128492 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.063113411 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.057710307 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.063170889 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.066048222 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.073047484 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.067831618 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.067237922 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.061347093 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.067768119 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.059833359 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.069153222 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.057779422 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.057001676 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.06838009 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.171090603 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.070600384 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.057885675 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.068438342 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.060261864 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.066786058 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06627773 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.05982762 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059775282 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.059824371 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.067832853 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.062828061 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.067747206 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.062672318 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.075306817 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.059442349 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.069383724 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.067395855 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.068957311 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072042418 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070068475 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.066386614 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.058533922 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06575992 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066122673 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059336552 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063002449 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.061609104 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078909502 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059616133 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059817188 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072126109 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.063946963 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.058471229 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.064067737 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.301641721 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.069373651 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060068998 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.069560395 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.062579547 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.059367452 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.062805194 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.063467104 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.057276798 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058022067 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.057875035 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068049309 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.062647801 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.058299805 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076169479 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.05942224 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.066598819 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.069031774 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.064733263 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.059629426 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.057333898 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.059193832 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.071309644 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073835777 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.0620631 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.066963649 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059303937 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.067655262 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.056967188 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.066777881 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066307433 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067054299 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057752782 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058568959 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07283426 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07404956 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.062701683 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.067875859 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067651159 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059462793 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079024259 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.067056162 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059319325 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069327306 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059938631 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057035125 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057427817 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059187924 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.069639711 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.057794378 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.059902594 seconds)
  done (took 42.184252442 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.094835753 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.05822589 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.057920675 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.05753579 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064637357 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.058709652 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.057737724 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.058417539 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.05830304 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.059968203 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.057576438 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060180885 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063694242 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.069916295 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06499836 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061059693 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.057921421 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.05858378 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.057810214 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.058316324 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.063385136 seconds)
  done (took 3.908640391 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.061705347 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.061364112 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061109543 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061499954 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06082324 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.057878115 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061770042 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.057583873 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.061814457 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.05843105 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.061958269 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.05821599 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.058303576 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058010025 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058681061 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059431888 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.061684344 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060805843 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.057938747 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061115407 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059422902 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.061582218 seconds)
  done (took 3.9097084 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.059861161 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.058357165 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.066604811 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057089843 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.056974665 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.060396208 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.056752168 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.062306311 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.061865873 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.061530603 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.066518662 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.058027483 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.057263025 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.063514626 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057174928 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.058157028 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.098497577 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.058392315 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.058306246 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.057620461 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.060684016 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.066679047 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.057427619 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.057424095 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.062379285 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.060592768 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.057344409 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.060061582 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.058305114 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.061989221 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.058427042 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.056991114 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.066665877 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.066052198 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.062408585 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06212839 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.058912228 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.05850559 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.05757166 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.057383333 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.065999989 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.058951871 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.057668688 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.0588532 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.066528763 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.057336135 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.056985179 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.066591124 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.057107997 seconds)
  done (took 5.583404152 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.067917665 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108565893 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.062920922 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.089980089 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.068950594 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.062779565 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.062968186 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091120949 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.058358609 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059478727 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.070147604 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07035044 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060075696 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.061527757 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.062798863 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.059843576 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06048511 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.059464291 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.062360002 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.059624169 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.062572969 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.064149807 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.069119111 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.069929439 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.060990342 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.059097832 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.059829009 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.061260359 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.069709147 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.063605423 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.061305393 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062847956 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.069635363 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.065366956 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.059813967 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.059876402 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.070413911 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.060684502 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.060107972 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.058530686 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.059659265 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.061201033 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.064049226 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.071012482 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.060149672 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.06557242 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.060247033 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.058358845 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.069794765 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.060112676 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.063574358 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.070485342 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.061677615 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.060872991 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.061861712 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07066015 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.060685791 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.059479451 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.060770011 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.070170325 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059180404 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.061418194 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.073550227 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.060423543 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.063288392 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.070971559 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.064658983 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.061227606 seconds)
  done (took 7.148081813 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067461785 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.091698393 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072137704 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071839836 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06748722 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.067282461 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.067457248 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.067474725 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.067521631 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070531299 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.067922428 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.101429581 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.064195279 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.069286664 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.06755661 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.0675351 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.068083324 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067449856 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.067943141 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.067682731 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.067587701 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072532853 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.067264681 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072231135 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.06975785 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.0644628 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.067374091 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.067510273 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072732582 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.067507198 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.06952978 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.067136477 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.067546497 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072100924 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.069548618 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.067500189 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.058603693 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067457968 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.067605391 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.067666971 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.064050741 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072251568 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067261997 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.064184586 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.067751387 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.067739427 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072441787 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.069820176 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.06921384 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.070677181 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.067468444 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072462413 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067389681 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.067685858 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072195657 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.074346697 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072700228 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072526181 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067993933 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072510192 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072665962 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07473913 seconds)
  done (took 6.95316641 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.070674954 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064135155 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.075568741 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.057804371 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.057494844 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066300237 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058221085 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.057685212 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063584374 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.063924268 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065541325 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072586601 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068170302 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065309569 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066421153 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06800505 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066304973 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066164951 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063860841 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066310331 seconds)
  done (took 3.932648593 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073251134 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.075738415 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.063256636 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066325103 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.062898646 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066202441 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.062324434 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063007293 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063411713 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063060902 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067334865 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067155719 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0636861 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066425331 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067309579 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066320483 seconds)
  done (took 3.667513222 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.061297208 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.065091079 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.063680659 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.058668179 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.060655348 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.058385066 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.058689141 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.05733287 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060010734 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.071313523 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.058359004 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.060970947 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.058554029 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.057916138 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058001945 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.060758897 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.05980558 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.058676389 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.058578326 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.062490429 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.066503761 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.059305431 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.060900509 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.058541118 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.060602156 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.066590313 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.059786034 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.060676428 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.058466527 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.061174061 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.060644803 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.064867146 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.060978656 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.058841955 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.057762705 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.058730592 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.059101834 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.061000958 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.061397962 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.058912022 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.05753953 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.063759048 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.059032721 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.059270834 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.060094641 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.061033009 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.060110235 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.064285322 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.059010552 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.060948546 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.058653391 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.060170224 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.059120949 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.065463862 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.060661708 seconds)
  done (took 5.943146695 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075317011 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062625393 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05698764 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05721061 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.062352036 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.063242236 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.062426939 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.062783284 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063073767 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.05727095 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063094947 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062186731 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063441214 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062637488 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.062989988 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062662849 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057118717 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.062763913 seconds)
  done (took 3.745466426 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.064447165 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063380259 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.061781231 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059152537 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.058957033 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063659749 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.057774366 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.058816338 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059862936 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.059101445 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059166193 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.058710648 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059080924 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.058667707 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062890928 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059515609 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.058963782 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.057813526 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.059659371 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.057757958 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063824528 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.05783447 seconds)
  done (took 3.937302056 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.085594932 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.081449966 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.12374546 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.077100612 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.085123636 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.068721984 seconds)
  done (took 3.140711633 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.090954754 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.094245788 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062490625 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.062292988 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066986778 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065953494 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065240902 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065625388 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068623277 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068915679 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065605169 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069135093 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068424008 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07021653 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066832952 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067031076 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06553064 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065248085 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063024358 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072747379 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065712637 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069170708 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065740442 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065273256 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065586087 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071000069 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068589271 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068777463 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065467638 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068659489 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067216091 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065561602 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068815371 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068761298 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.062696399 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068468582 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065574646 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072224101 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067455219 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070539129 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06298588 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0671658 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068927822 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068277148 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069041586 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06587352 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068840093 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065631158 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06592212 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073907601 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067770684 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070141767 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067256767 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069263211 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069141662 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073718347 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06895259 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070523348 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067187711 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069007892 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070285571 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067221027 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070171795 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068981819 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067447552 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070814236 seconds)
  done (took 7.143569706 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100745517 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062854232 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065670432 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06854955 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06999958 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065698139 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065406334 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065708667 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065533928 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.063355221 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100183897 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065930684 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070320878 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073366474 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065977646 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065806165 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065805676 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070856179 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.062977996 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073602395 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065632445 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070386617 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070224272 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070282197 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06917843 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067406328 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065516347 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065601653 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065510201 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065418834 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068555 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065832471 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070227016 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06333934 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070329903 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065662197 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065255487 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068381366 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065348903 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067328201 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070608153 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072677346 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066019749 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065609941 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06890523 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065466556 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065413894 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.063096315 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065675319 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.062981865 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069131198 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069167135 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068872177 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070562418 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066022531 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06588632 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065711493 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065849286 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066338172 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067336195 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070672032 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065832542 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073581051 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065722216 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065685178 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070523609 seconds)
  done (took 7.155854618 seconds)
done (took 148.067208578 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.195591189 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.16468542 seconds)
  done (took 2.965950579 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072163132 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.15345319 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.071472472 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.07124736 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.101626816 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.100228998 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.072338341 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069003872 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.071191739 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.068652859 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.128364513 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.072269223 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.068807174 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.068781104 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.068757833 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.068456748 seconds)
  done (took 3.956981993 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.104225243 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.178598662 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.097761744 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067079757 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.147119563 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.072849887 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.068942546 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.072691487 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.072722123 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.066869563 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.102709202 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.079659855 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.072276486 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.073196331 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.068835724 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.071619057 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.072660882 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.072819166 seconds)
  done (took 4.194928547 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099774577 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.087006675 seconds)
  done (took 2.816255892 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.149593563 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.100589438 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.139144344 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.332767155 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.128972486 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.131486377 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133823557 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.129697927 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.103527393 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.126340981 seconds)
  done (took 4.095463241 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.102816986 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.100720763 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.299381194 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.09795733 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.078480619 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.073533721 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.071416461 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07572511 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.071352281 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.072493968 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.117087603 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.071559044 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.069336284 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.119683436 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.092995452 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10232444 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.067866536 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.074409754 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.0761776 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.067423017 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.072516477 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.075926509 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.171075635 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.075077225 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100214126 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.071607497 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.073535456 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.070896989 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.070299222 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.074269969 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.075235586 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.093916455 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.074370787 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.078910445 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.072937601 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.091096782 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.068050034 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.093054305 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.070606778 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.069136854 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.070991498 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.07489631 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.068531116 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.074162639 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.071295422 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.073452566 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.075627574 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.067515946 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.071753888 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.070762467 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.06910957 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.072475191 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.072424209 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.073450106 seconds)
  done (took 7.187596691 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103672702 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.103568655 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066985996 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.108714086 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.101454465 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066915435 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.100452549 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.096822862 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.103309639 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066096534 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065521846 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.065860268 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072178017 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.074360289 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.109721594 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10334252 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067675861 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066850093 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.102994211 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.102701929 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.065753349 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.09761673 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.096250101 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.101774509 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.065113041 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066426796 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06509761 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.065828363 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.070118226 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.071212435 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.065766537 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.071335424 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.075400381 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.071256444 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.064911879 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.064607284 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065113153 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.071856952 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072669772 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.072054287 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.071216941 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065384728 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.065474895 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.065627623 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066409893 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.064708472 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071082545 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.071831299 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.071083076 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065286625 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.065611567 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.065240759 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.065715911 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.071151095 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.070621432 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.072144258 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072145862 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065684612 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06524307 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066658296 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072741634 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.072961483 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072270796 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066281635 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07313797 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.065448197 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.072901473 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077077665 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.065110614 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.065727038 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.065333936 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.065305296 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.065569657 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.070550406 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.070834513 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06611465 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.065648648 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06549218 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.073085316 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.071098807 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065143771 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.070225893 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.065308607 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.065410235 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065801247 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.065955283 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.070179589 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.071704601 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066143541 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065319966 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.065581806 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066399317 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.064990132 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.070805735 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07228523 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.072306592 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.071680705 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066061785 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.071658555 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071069216 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066567781 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071438953 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.065814022 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066080451 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06555341 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071220119 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.070599341 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.072419758 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065172144 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065272702 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.070960204 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073644252 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065383864 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070606586 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072638466 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.305322452 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066502236 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.074522279 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066153204 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.073420392 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065897418 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073569257 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066022806 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.071219456 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065909598 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.064608908 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.065372092 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.070864485 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066055374 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065739135 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065533027 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06559933 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.070855528 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074075069 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.065967037 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.070940531 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.070864219 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066103399 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.070579349 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065575067 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.071909184 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.065823201 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06582999 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.064660433 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07305006 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065776782 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.065530642 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.065444161 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07234884 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06527518 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.072972203 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.070446363 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.064895158 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074198356 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.073111904 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.071016473 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.072900914 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066283878 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.065374249 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.065164139 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067862447 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.070157075 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.071334507 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065764931 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065344192 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.070232194 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.072803924 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.065297841 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.070588295 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.070663788 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.071134949 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.065561602 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.065938224 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.073558443 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.072925562 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.070823112 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.07072994 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.071516585 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.065519716 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.070881684 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.071003979 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065403034 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077081669 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065691119 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073942592 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.071180472 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.070450092 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.071384674 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.072555998 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.073050964 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.073198997 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.075155441 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065351266 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065191629 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.070806392 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.065513004 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.065601924 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.070913086 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.065781107 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06598535 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.074981025 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065720431 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.072900448 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065134388 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.071348804 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.064747394 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.170172809 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075279556 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065490643 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.065808077 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07132216 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066127871 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.071120341 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.073595489 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.071342076 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06548941 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066211937 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072054387 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.072326567 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065904335 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06567304 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066152293 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071498865 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.070436354 seconds)
  done (took 18.866161496 seconds)
done (took 46.730386627 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.163180948 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.109789567 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.202655884 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.193157866 seconds)
  done (took 3.381183393 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.096771293 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.062437856 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.075801498 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.084866788 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.062114546 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.071355155 seconds)
  done (took 3.125176392 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.192171311 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.167554661 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.234083012 seconds)
  done (took 3.254932159 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.358568195 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.142162723 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.207464684 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.490313813 seconds)
  done (took 3.963783727 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.105308301 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.094666193 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.072871152 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.105014632 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.079944374 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.058993116 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.125609337 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.066275101 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.093840901 seconds)
  done (took 3.531681503 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.132214599 seconds)
done (took 20.073920883 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.15051971 seconds)
    (2/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.487346433 seconds)
    (3/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.102791274 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.229952883 seconds)
    (5/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067294823 seconds)
    (6/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.20194957 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.121627084 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.121585601 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.244455387 seconds)
    (10/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.184795667 seconds)
    (11/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.075426586 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.126775462 seconds)
    (13/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.251017354 seconds)
    (14/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.072622596 seconds)
    (15/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.064912891 seconds)
    (16/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.221515433 seconds)
    (17/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.071691122 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.072626977 seconds)
    (19/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.071109066 seconds)
    (20/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.181665488 seconds)
    (21/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.166964317 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074088609 seconds)
    (23/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.105406256 seconds)
    (24/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.07420889 seconds)
    (25/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.171875215 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.074705963 seconds)
    (27/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.072799008 seconds)
    (28/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.077977635 seconds)
    (29/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.11577422 seconds)
    (30/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.182473303 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.116921667 seconds)
    (32/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.147629675 seconds)
    (33/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.069633075 seconds)
    (34/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.228669099 seconds)
    (35/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.062707571 seconds)
    (36/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.210705834 seconds)
    (37/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.133556235 seconds)
    (38/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.112584165 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.071223734 seconds)
    (40/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.180829793 seconds)
    (41/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.084505023 seconds)
    (42/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.072451899 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.17012072 seconds)
    (44/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.21572195 seconds)
    (45/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.090526471 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073220371 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072873476 seconds)
    (48/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.235657964 seconds)
    (49/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.158474638 seconds)
    (50/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.19350124 seconds)
    (51/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.176086154 seconds)
    (52/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.073291125 seconds)
    (53/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.16849615 seconds)
    (54/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.195274045 seconds)
    (55/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.161302501 seconds)
    (56/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.069655339 seconds)
    (57/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.159429313 seconds)
    (58/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.070110901 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.082377627 seconds)
    (60/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.081477857 seconds)
    (61/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.169520386 seconds)
    (62/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.062283882 seconds)
    (63/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.089710792 seconds)
    (64/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.175085065 seconds)
    (65/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.064773506 seconds)
    (66/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.149681425 seconds)
    (67/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.065903524 seconds)
    (68/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.192617218 seconds)
    (69/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.074917379 seconds)
    (70/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.069279458 seconds)
    (71/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078369444 seconds)
    (72/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.06716572 seconds)
    (73/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.063023519 seconds)
    (74/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.068816755 seconds)
    (75/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.142711922 seconds)
    (76/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.165458635 seconds)
    (77/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.070680559 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.079997423 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.064178997 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.087569274 seconds)
    (81/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.315193435 seconds)
    (82/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.217809492 seconds)
    (83/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.073399384 seconds)
    (84/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065711611 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071018593 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089270548 seconds)
    (87/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.06259585 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.070591073 seconds)
    (89/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.151121849 seconds)
    (90/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.063862169 seconds)
    (91/341) benchmarking ("sort", Float64, false)...
    done (took 0.13363162 seconds)
    (92/341) benchmarking ("sort", BigInt, false)...
    done (took 0.255491501 seconds)
    (93/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.062565443 seconds)
    (94/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.159512508 seconds)
    (95/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.183247128 seconds)
    (96/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.062290271 seconds)
    (97/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.168145843 seconds)
    (98/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.072480609 seconds)
    (99/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152754539 seconds)
    (100/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.187422854 seconds)
    (101/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076404598 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.084081311 seconds)
    (103/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.062150168 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.108340359 seconds)
    (105/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.175118818 seconds)
    (106/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.15741336 seconds)
    (107/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.062887018 seconds)
    (108/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.062679487 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.070463666 seconds)
    (110/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.157212116 seconds)
    (111/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.147973329 seconds)
    (112/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.191700266 seconds)
    (113/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.071059634 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.087438203 seconds)
    (115/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.197336409 seconds)
    (116/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.060965286 seconds)
    (117/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.060590027 seconds)
    (118/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.062209167 seconds)
    (119/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.079644313 seconds)
    (120/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.064182433 seconds)
    (121/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.164546179 seconds)
    (122/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.181694065 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.138022837 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.072657236 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.065617821 seconds)
    (126/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.134035951 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.062250204 seconds)
    (128/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.061190279 seconds)
    (129/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.062653238 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.081174845 seconds)
    (131/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.193696541 seconds)
    (132/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.118643237 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.071132636 seconds)
    (134/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.139162712 seconds)
    (135/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.06307724 seconds)
    (136/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.069957045 seconds)
    (137/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.14766722 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.070487041 seconds)
    (139/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.062329364 seconds)
    (140/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.062150722 seconds)
    (141/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.190546864 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.072012642 seconds)
    (143/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.063154968 seconds)
    (144/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.078210569 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 0.141472777 seconds)
    (146/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.064621893 seconds)
    (147/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.082033269 seconds)
    (148/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.062870123 seconds)
    (149/341) benchmarking ("sort", Float32, false)...
    done (took 0.133412401 seconds)
    (150/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.062223038 seconds)
    (151/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.069630983 seconds)
    (152/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.063493657 seconds)
    (153/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.078878388 seconds)
    (154/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.079179787 seconds)
    (155/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.062551946 seconds)
    (156/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.069560533 seconds)
    (157/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072037654 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.129153166 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.062436608 seconds)
    (160/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.213813811 seconds)
    (161/341) benchmarking ("sort", Int64, false)...
    done (took 0.063889283 seconds)
    (162/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.078773761 seconds)
    (163/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.065079944 seconds)
    (164/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.066515603 seconds)
    (165/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.072846131 seconds)
    (166/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.062867651 seconds)
    (167/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.069918768 seconds)
    (168/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.080563391 seconds)
    (169/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.062388349 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.227004363 seconds)
    (171/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.137833966 seconds)
    (172/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066842225 seconds)
    (173/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.088232095 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.15069854 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.085539628 seconds)
    (176/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.076764688 seconds)
    (177/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.063377823 seconds)
    (178/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.138616066 seconds)
    (179/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.069559357 seconds)
    (180/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.062847028 seconds)
    (181/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.063612636 seconds)
    (182/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.166218456 seconds)
    (183/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.062063033 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.129313717 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.062332339 seconds)
    (186/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.079348032 seconds)
    (187/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.324175687 seconds)
    (188/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065720192 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073291723 seconds)
    (190/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.136425517 seconds)
    (191/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064814637 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.144162882 seconds)
    (193/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066275818 seconds)
    (194/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.167460593 seconds)
    (195/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06101931 seconds)
    (196/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091087945 seconds)
    (197/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.194117061 seconds)
    (198/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.174804339 seconds)
    (199/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.187474763 seconds)
    (200/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.080888738 seconds)
    (201/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.079852865 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.142367671 seconds)
    (203/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.062683541 seconds)
    (204/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06315283 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.077293685 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.062372841 seconds)
    (207/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.070217781 seconds)
    (208/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.06242403 seconds)
    (209/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.069481793 seconds)
    (210/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.062823399 seconds)
    (211/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.127930571 seconds)
    (212/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.070816935 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.060919774 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.088611266 seconds)
    (215/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.201447319 seconds)
    (216/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.062467849 seconds)
    (217/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.071102984 seconds)
    (218/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.14632014 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070688764 seconds)
    (220/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068047655 seconds)
    (221/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071733128 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.062394413 seconds)
    (223/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.069946357 seconds)
    (224/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.062800899 seconds)
    (225/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.063075552 seconds)
    (226/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.063889228 seconds)
    (227/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.06345116 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.149612156 seconds)
    (229/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.063171266 seconds)
    (230/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.140614758 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.062610236 seconds)
    (232/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.128050271 seconds)
    (233/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.064387478 seconds)
    (234/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.073937544 seconds)
    (235/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.060674298 seconds)
    (236/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.063231285 seconds)
    (237/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.06240335 seconds)
    (238/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.062533137 seconds)
    (239/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.065657691 seconds)
    (240/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.075740115 seconds)
    (241/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.062664704 seconds)
    (242/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.074312931 seconds)
    (243/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.072550459 seconds)
    (244/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.080252476 seconds)
    (245/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.062574507 seconds)
    (246/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.062323577 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.061998252 seconds)
    (248/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.070863434 seconds)
    (249/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.062162984 seconds)
    (250/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.069682929 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.082644188 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.087948759 seconds)
    (253/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.069231816 seconds)
    (254/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.071303893 seconds)
    (255/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.064330988 seconds)
    (256/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.143225894 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.086165293 seconds)
    (258/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.079561565 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.069444445 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.065418004 seconds)
    (261/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.188910791 seconds)
    (262/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.062961551 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091516511 seconds)
    (264/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.070373334 seconds)
    (265/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.063243934 seconds)
    (266/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.06543863 seconds)
    (267/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.062908227 seconds)
    (268/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061013192 seconds)
    (269/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.066081794 seconds)
    (270/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.062648691 seconds)
    (271/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.0626254 seconds)
    (272/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.07695113 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.080611105 seconds)
    (274/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.062304888 seconds)
    (275/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.062419958 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.063474052 seconds)
    (277/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.064861326 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.141767022 seconds)
    (279/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.062226495 seconds)
    (280/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.063346581 seconds)
    (281/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.065398076 seconds)
    (282/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.065405723 seconds)
    (283/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.070495362 seconds)
    (284/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.061934859 seconds)
    (285/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.069163745 seconds)
    (286/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.063029281 seconds)
    (287/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.062981939 seconds)
    (288/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.138295445 seconds)
    (289/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.060548343 seconds)
    (290/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.065620226 seconds)
    (291/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.062828952 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.081184091 seconds)
    (293/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.06253768 seconds)
    (294/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.143225412 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.087077733 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.145324236 seconds)
    (297/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.062249758 seconds)
    (298/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.167514309 seconds)
    (299/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.082792231 seconds)
    (300/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.064473692 seconds)
    (301/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.069662228 seconds)
    (302/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.066107263 seconds)
    (303/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.065569332 seconds)
    (304/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.064064308 seconds)
    (305/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.07404439 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.062416433 seconds)
    (307/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.062870622 seconds)
    (308/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.062959149 seconds)
    (309/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.061759996 seconds)
    (310/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.063479466 seconds)
    (311/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.062148961 seconds)
    (312/341) benchmarking ("sort", Int8, false)...
    done (took 0.144024283 seconds)
    (313/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.063600959 seconds)
    (314/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.063388647 seconds)
    (315/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.069931543 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.079740484 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.147911432 seconds)
    (318/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.061334904 seconds)
    (319/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.338756747 seconds)
    (320/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089873981 seconds)
    (321/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064563229 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.091751067 seconds)
    (323/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.074627197 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.074814755 seconds)
    (325/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066410728 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.063256848 seconds)
    (327/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.064589775 seconds)
    (328/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.061976985 seconds)
    (329/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.063192199 seconds)
    (330/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.064249618 seconds)
    (331/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.063068708 seconds)
    (332/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.062514251 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.062279193 seconds)
    (334/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.062921102 seconds)
    (335/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.062627688 seconds)
    (336/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.062893987 seconds)
    (337/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.06229597 seconds)
    (338/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.062416237 seconds)
    (339/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069882466 seconds)
    (340/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.062919846 seconds)
    (341/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.061795626 seconds)
  done (took 37.349230725 seconds)
done (took 40.036111195 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089232154 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.076057381 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075213256 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.071724304 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075649307 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.073450293 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.074772296 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.072581975 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.07401096 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07341771 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.073146174 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.061518564 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.069974135 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.07720889 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.070862498 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.077360458 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.074024492 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.077483239 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.062834382 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.075925453 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.088548468 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.073503076 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.070155562 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.075233064 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.062566056 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.071489568 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.084885135 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083097706 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.068757132 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.071664434 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.069373492 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080067972 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.069605569 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.068568113 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.071722768 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.067804774 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.071614027 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.069444622 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.084758955 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.067951961 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.062343227 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.073527206 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.069341084 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071023657 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.071171593 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.074255394 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.06776528 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.075365908 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.062003262 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.073299723 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.084397759 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.067217474 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.06864271 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.070891026 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.067776437 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.071807867 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068515242 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.073389233 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.066998466 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.074077872 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073323956 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.070697775 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.061999372 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.071007817 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.069407412 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.069546134 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.0608222 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.066637218 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.061934001 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.062277055 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.061564269 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.070863342 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.068563167 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.066996344 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.061307286 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.06215028 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.061175281 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.074445248 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.068124219 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07146512 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.062430069 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.067169737 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.066651691 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.062789469 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.066898295 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.073620828 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.061166955 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.062134995 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.060967362 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.076550201 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.068010148 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.061852224 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.073107427 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.06681633 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.0672103 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.062423017 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.061103012 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.066827985 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.069860031 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06225995 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.060735918 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.066827717 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.066964113 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.070787174 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.062787732 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.066890347 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.066874231 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.060695667 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.070433045 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.068884891 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.070450363 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.074848025 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.070430842 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.073732205 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.062715769 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.060962379 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.071350037 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.061978661 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.066932449 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.069682531 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.067250305 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.06978327 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.166882195 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.061384322 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.066953313 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068566467 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.062322587 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.062604013 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.062551861 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072107926 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.069627751 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061332278 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062362862 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071079795 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071346702 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.061266135 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.061599376 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071506464 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.062707897 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.067923014 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.067830534 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.070765024 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.061650275 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.062405131 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.061245347 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.061614489 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.061990461 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.067260829 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069956147 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.062565161 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.070437447 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.310550783 seconds)
done (took 13.597115172 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.064887466 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.103644251 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.075955859 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.078293814 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.074872388 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06373513 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.066365429 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.080976134 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.066096336 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086129009 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.087688186 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.083881889 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.092240643 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.061214106 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.062460397 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06326405 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.061042737 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074121931 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.078915611 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.085776836 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096965581 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.062335305 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.07780197 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.081839858 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.076031576 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.079512022 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.063882076 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.063856826 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.065600406 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.080694376 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.088285868 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.062707402 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.063771519 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.079469505 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.077524181 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.07044835 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.063708292 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.068588186 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.066093532 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06293878 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.064787168 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.079830476 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.069027363 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.069223428 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.064119795 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.063960668 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.063308459 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.069082585 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08011069 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.068070298 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074223219 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.080578053 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.064544037 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.063264199 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.061522834 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070016369 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.063739296 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064155342 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.063360602 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.06291307 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.063601486 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.065371615 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067478547 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.068341771 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.065941997 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.068519325 seconds)
  done (took 7.46130063 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.079298364 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.088363205 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.0773037 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.077997228 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.062611858 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.06393932 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.063089194 seconds)
  done (took 3.31587382 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064711593 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.070365178 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074370931 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074796028 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.083942777 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.072037244 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.063805551 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.093952795 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.062207377 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.071560794 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.07793226 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07549546 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.066054492 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.074958013 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.063709937 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.074161288 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.06375241 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.070671223 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.070105428 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075949296 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.067043595 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.092413512 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.076748065 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.063747782 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.076303445 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07063758 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.065518145 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.063496976 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.063861828 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06279648 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.062965934 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.084836174 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.06906419 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.075346867 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064115082 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.062787484 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.067142482 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.063835677 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.066894266 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072167122 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.066327982 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.062547487 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.063237219 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.063072351 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.064047533 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.067663902 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.064192474 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.063083867 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.062454368 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.069995827 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.062055185 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.068781973 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.065253021 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.067548853 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.067991145 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.067002401 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.070017378 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06326387 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.070051156 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.069150236 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06296816 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075155258 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074478484 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.066319041 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074084563 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.071574968 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.069355328 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.066718557 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.062658821 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.062407927 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.063373344 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074220844 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.065995606 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.065360884 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.064015422 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068170903 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.067040509 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.077534092 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.077394276 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.075983559 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.065518771 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.063170328 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.066924908 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.077568913 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.067691022 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06324572 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.063908116 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.062506847 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.068305437 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.063404054 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.067871517 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.063194263 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.070921465 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.065736539 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.065302815 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.070384514 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.063373652 seconds)
  done (took 9.437234725 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.066321199 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.065455367 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.064537419 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.064143392 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.064344121 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.064013682 seconds)
  done (took 3.218944801 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.086444806 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.063616638 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.074840738 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.063741705 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.085054701 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.069472803 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.069957338 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.065435219 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.079644261 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.074180682 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.069403291 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.071901572 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.071952948 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.064869123 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.0689977 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.064401046 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.06949554 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.066015835 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.072963277 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065341997 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.078978146 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.065127528 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.065538113 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.075105647 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.066342387 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.064421146 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.064587696 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.073159926 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.073174909 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.065265953 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.0647972 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.066396341 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.071826532 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.06509636 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.069531248 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.071803472 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.063043516 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.068542499 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065608326 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.066035605 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.071482447 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.065160841 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.065369238 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.068743617 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.065274085 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.071429778 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.068795617 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.066500032 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.069140757 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.068648417 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.068613899 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.063984893 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.065932436 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.068557795 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.071730892 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065405411 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.068677885 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.068925832 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.064961818 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.071862881 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.063423849 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.066318514 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.065019962 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.066208363 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.06818496 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.069042372 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.072026027 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.065007177 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06520713 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067715587 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.068756466 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.063514826 seconds)
  done (took 7.736282271 seconds)
done (took 33.937470237 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.537925042 seconds)
  done (took 3.315371619 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.862238922 seconds)
  done (took 3.676094052 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.319279684 seconds)
  done (took 11.13465042 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.336145641 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.39852851 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.720828496 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.127942628 seconds)
  done (took 4.430603272 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.738181599 seconds)
  done (took 3.553178965 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.225508001 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.214719054 seconds)
  done (took 3.262261132 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.328347375 seconds)
  done (took 5.008991316 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.153446379 seconds)
  done (took 6.457435231 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.227068295 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.156679046 seconds)
  done (took 5.702937049 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.73379994 seconds)
  done (took 6.047621705 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.461472293 seconds)
  done (took 9.781594417 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.226597568 seconds)
  done (took 5.577057794 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.224715065 seconds)
  done (took 5.435076444 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 1.958734683 seconds)
  done (took 7.267365204 seconds)
done (took 83.475764378 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.081189306 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.082601882 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.082469582 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.077622534 seconds)
  done (took 5.613023807 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071515638 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.066629532 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070193173 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.069950178 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068189735 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.068708073 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.069383682 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.066531892 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.067865486 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.067006729 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.06577352 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.066647701 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.069089714 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.066493669 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.069013076 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07024992 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.066765748 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.066725705 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.068662832 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.066500658 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.069006975 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.066612161 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.064868701 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.066610146 seconds)
  done (took 6.735602724 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.075677884 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.068727721 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.072020922 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.067858918 seconds)
  done (took 5.928039069 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.073625132 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07313611 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.081285289 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.085603007 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.072403513 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.073848599 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.079744718 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.080379955 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.062388965 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.082912608 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.064811818 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.063656268 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.063590687 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08166025 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.079334464 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.059097383 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.060241938 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.073659126 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.072602169 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.075809193 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.065387305 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.062524664 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.072740665 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.073691212 seconds)
  done (took 7.278293962 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079000628 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.062348974 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.077429796 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.087586658 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.088758088 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.062196709 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.075236078 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.088868436 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12398952 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.062906623 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.068724726 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.062185554 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.100382953 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.062327378 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.076384577 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.104848419 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.107525669 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.066160683 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.094834863 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.062489671 seconds)
  done (took 7.264122835 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073175512 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.066271305 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.067243055 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.062563949 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.073293301 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.069712469 seconds)
  done (took 5.639435609 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.065688181 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.064874603 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.066547164 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069181454 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.064729971 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.064498824 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064028025 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06239129 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.062477265 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.063675563 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.063542934 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.064108459 seconds)
  done (took 6.100060584 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.247089517 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.06587547 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.066450963 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.062523683 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.0643562 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.063433541 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.077473512 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.065377088 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.080900513 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.063734155 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.063553792 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.066336619 seconds)
  done (took 6.307351773 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100465382 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105198155 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138308875 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111339002 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111162451 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09178307 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119631321 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.195100453 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.153560616 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.131379163 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111297172 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089241428 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082339314 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.066138538 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094647481 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112328885 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130856466 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069110541 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107692771 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.157381548 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125533383 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.128250248 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141080975 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11129238 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085493098 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140634565 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09271933 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096686569 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119303127 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119658329 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114193835 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.093511968 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.068125283 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.067491292 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142983964 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.098601143 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114716791 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.089001184 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100054067 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084399042 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103073517 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.066085987 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.185970577 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.212092749 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08072772 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125342099 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08439299 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.214313058 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077131409 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.965515629 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117799514 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094038203 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081637786 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099833774 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.381884783 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107326927 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127171046 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102512551 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078641784 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.113702757 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.097859498 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095665262 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101920401 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076272273 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.168482155 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084115766 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.106450881 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106939604 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.088867882 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.089637565 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101770742 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129456733 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118493214 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.118295228 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130118092 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090209933 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115046585 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.094656802 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.123683466 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099462971 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.069375697 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.114926884 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12313343 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093451543 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096049344 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122774757 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088403822 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073564958 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.094328212 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.114004228 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076151819 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.10653337 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076395456 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.103548367 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126870957 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092489913 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106690461 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111916084 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074430464 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148022601 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104279825 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069599947 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111871428 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.316911783 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150505144 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091005794 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07295354 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095339413 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.352656414 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14494216 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102157868 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076266447 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105104131 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133016542 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090844157 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.162486621 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091194713 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133504628 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105840499 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083024777 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071500284 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.086086194 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106506773 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102017277 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106834247 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085896581 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.079435875 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083418238 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105578749 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088292812 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07643553 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108503636 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.201137963 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.070917098 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084095065 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075913957 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135433156 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.074708614 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131042818 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119749406 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.179894959 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101349347 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093693001 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104454718 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.093413333 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111625742 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133129992 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.215432552 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085229909 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.089247957 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103034757 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.137765737 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.121615987 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088126341 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.073286525 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095885959 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106997055 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093254113 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120266554 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091484285 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104474896 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.202300736 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.553216454 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138457514 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096355586 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097010946 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101932341 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.374687619 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073688725 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149286151 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099391382 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112880222 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080128292 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134549154 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.213823701 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084898914 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082998414 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09587355 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.098683664 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100825049 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136245237 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.091548776 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.06954712 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087800576 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1363113 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072969402 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104001347 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.086753204 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.088669044 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112391455 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.088090095 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077006096 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.06507092 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11982855 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149961489 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.066524175 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109829298 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.210787692 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097673303 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.114912065 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.066425154 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112590642 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132696567 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111810273 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134021521 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13997873 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110482202 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112977372 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.108469314 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100832223 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075957605 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.120027913 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.129464161 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091647056 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088195931 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.54700951 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113448579 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.131143615 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.110923522 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109578976 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.100168459 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.358553936 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098912312 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.097409284 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137390455 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115166819 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.11864246 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081784082 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100656708 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112128407 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128407008 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078248091 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139378612 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.079538194 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11220255 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.073414269 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11709704 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.179979612 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.210650877 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075220004 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094980676 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.065981542 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.070514936 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134613926 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.106892253 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099362326 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094099812 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.131328439 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130598893 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.181900404 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102891036 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10978607 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096698416 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110062814 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104500182 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085056584 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090517158 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104252085 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080874474 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.077551557 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.109438298 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089835907 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120482015 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080404547 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071677379 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134566242 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100453928 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090933608 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074938049 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103012082 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.118074581 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089223502 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083925098 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110316608 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09968496 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136095624 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.087034639 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09387695 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.431710333 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076408594 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.088580877 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.06610371 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.081836672 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.072699661 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.378608253 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073322422 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110737157 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.065772654 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124804183 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08240827 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.088814406 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097267284 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1053083 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122118924 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090937119 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134090271 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08466037 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11212062 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101776232 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089964069 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083620251 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098422654 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095884943 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.116851026 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.091762244 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115895909 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135239293 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098530988 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135709754 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087047907 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116340598 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101997197 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118687156 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10645748 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140207783 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131925481 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107960928 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106948009 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071450422 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089984635 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100164535 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105963766 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165747875 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119263829 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.06928977 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101576311 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089938071 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102754013 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100442316 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078605555 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1400155 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096938161 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.084629355 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.420969439 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.0865308 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100010193 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072698762 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091756692 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.096128192 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090036107 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.347643137 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110829185 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122402175 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108214566 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.136309197 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.095724709 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.088437777 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.11308901 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105408146 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1053932 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081526968 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08209971 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130323827 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112832493 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.227634212 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.095023406 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103629404 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105828869 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095054466 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117643205 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102024549 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.119468902 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076215899 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.072370034 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.065353505 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.06884689 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.117568953 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103583351 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106478018 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09392823 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.069059203 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098981058 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10152647 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068530609 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084954739 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089620225 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090446595 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.087094191 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101396104 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.21361118 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.08718794 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099163372 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094371698 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139683219 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.095982026 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084778025 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137779285 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143501831 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083858954 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088932808 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.068416101 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075753257 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107866614 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143964449 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.562426388 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074114378 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083737765 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.081806342 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083229909 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.068658657 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.334023277 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088897168 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100416534 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095501803 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.108209627 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099530311 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072254773 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098442188 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095029431 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088180387 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099263639 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112662579 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118124124 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.133364439 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105462541 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10190754 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072449539 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.076724193 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.071891696 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075627782 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096941702 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.075553512 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072551721 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135997356 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.087675591 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099100276 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103502818 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084234913 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071679944 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128339949 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.066102938 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129005239 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.068043962 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077944357 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079256852 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075287962 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089436997 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132722047 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104687933 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107586512 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101820614 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09994325 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134749419 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149719994 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076015089 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138097385 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072111373 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072281949 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.072536549 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108452052 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085747576 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110182499 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134928494 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08714844 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099115449 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073640459 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.242170945 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.407167161 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099167012 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082658837 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075360341 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136915518 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.330834132 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.076361102 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086009229 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106228939 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.069508463 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099708467 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080308049 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076232146 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135111808 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.626070073 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085727594 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.072102411 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090746913 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.135866056 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12055983 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090079936 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102932246 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.11279527 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094796097 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090260178 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102230045 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.176506367 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070901045 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089164668 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.098225144 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093043163 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096470496 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093471287 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.08201453 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.088580236 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.08312964 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076168889 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103284878 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085060654 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091859942 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10229466 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079353772 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.083003026 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12541721 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.099325517 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.078215456 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084017566 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.205538002 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084775621 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096139631 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.066077054 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10848971 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086771243 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111413642 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.090469607 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102662385 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121609293 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086034791 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131743559 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.102232392 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.117505399 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0837304 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.496644275 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119971207 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.188651657 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073979235 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139062946 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.346519328 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.19386563 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09956918 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.093041446 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108445495 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111771221 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106586719 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093184632 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07567759 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094916588 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.097010409 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080497684 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074625564 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.071025614 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.073162626 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102135586 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080868238 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078898076 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109076066 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085041665 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099301581 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.095264163 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116197419 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079346285 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096192664 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1044566 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087772025 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10477206 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095501636 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.122100688 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165995422 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119215258 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123383863 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128026935 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.073116493 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.071907419 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.065494962 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109907502 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075890234 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.084433277 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077338059 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127861078 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.078149652 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106028862 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.222608362 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076749185 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088850866 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091295013 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.066240083 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079326753 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102620663 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083880344 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076383725 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114042892 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079537107 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122427189 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106831996 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095447696 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.194464626 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077243406 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.317998448 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.205159086 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.124210733 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091001283 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.071953582 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10896603 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.354794526 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131987207 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.070235921 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07716984 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123634582 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098847089 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125726789 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07651139 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141548824 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136457295 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095345341 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127638902 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067998265 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079584681 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084519873 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.120067879 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080023593 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104988784 seconds)
  done (took 75.59100803 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.14451237 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.137035298 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078692921 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10000307 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.183539617 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194154929 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.115948312 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.093717643 seconds)
  done (took 5.265991358 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.065869463 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.079611882 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.077328817 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.407367098 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.09155452 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.064527407 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.069593467 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.078273948 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.064287517 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06374519 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.097397117 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06412681 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.064342927 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.464660131 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.063527961 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.068646094 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.06402229 seconds)
  done (took 6.144544768 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.323964892 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.616948523 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.211832273 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.978366308 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.139948339 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.534443548 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.073448878 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.079735387 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.665159846 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.365583208 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133859253 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.084825555 seconds)
  done (took 21.522454081 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.074220097 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.075305573 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.074750132 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07186012 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.071814089 seconds)
  done (took 4.581914689 seconds)
done (took 169.307041815 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081397922 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.166501824 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.06457155 seconds)
  done (took 4.587393777 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.079340771 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.07744605 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.076842174 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.074230603 seconds)
  done (took 4.5343063 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.071881021 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.072650864 seconds)
  done (took 4.373296996 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.215356774 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.172119255 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.086203829 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.07902398 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.075695806 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.076540561 seconds)
  done (took 4.45376802 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069133097 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.068396112 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.068415532 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.06884498 seconds)
  done (took 4.482981313 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.065688183 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.063527652 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.065614578 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.06800498 seconds)
  done (took 4.478101515 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.186532896 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.186950773 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.111170921 seconds)
  done (took 4.702020075 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08033795 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.079362049 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.074796251 seconds)
  done (took 4.44744267 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.105676977 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.092480063 seconds)
  done (took 4.412967917 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.077052721 seconds)
  done (took 4.296735961 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.086167986 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.093693476 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.132302854 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.101932599 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.133263099 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.119731063 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.072834052 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.073677403 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.069734743 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.069166451 seconds)
  done (took 5.16877541 seconds)
done (took 54.708714584 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07645824 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.176180701 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.348635534 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.083562849 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.648658397 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.345452928 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.878151723 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.086781879 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.097167121 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.064933028 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.080995988 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.627071219 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.871702133 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.134366667 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.857062617 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.134221211 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.629637586 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06533559 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.064267116 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.064783894 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.861118843 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.064500508 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.065108338 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.065228114 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.627513299 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.362471149 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.065583494 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.133564547 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.064934898 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.068783389 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.346203131 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.065644265 seconds)
  done (took 17.310579921 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067655577 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.118231314 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.069552698 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.080278442 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.067005124 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.06652649 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.067448949 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.065817681 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.108376148 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0654332 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082067702 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06444265 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.068840882 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.066129919 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.083811101 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.065067267 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.067076971 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068488266 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06479009 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.065312562 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.082710986 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.064617191 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.065149354 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.065516655 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.065237227 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.077911328 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06636605 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.064744568 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06539914 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.068591746 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.069106309 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.065724632 seconds)
  done (took 6.537878441 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.118587489 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.121338782 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.069578125 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.104885265 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.113285442 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.066878278 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.146264509 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088017837 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111187552 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.064996849 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082257309 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06463856 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.099450118 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.066009917 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08450421 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.064801373 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.067486873 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.065358301 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.064958862 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.065157814 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08339922 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.064806324 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.065398316 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.065946897 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.065392872 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079480852 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06593805 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.065010938 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065125302 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.068706474 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070243654 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.066175964 seconds)
  done (took 6.783656924 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067398045 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.068433723 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.074265083 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.076982212 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.063406492 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.065434415 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.066547789 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.063268905 seconds)
  done (took 4.787031444 seconds)
done (took 39.646153722 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.076847183 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.064985113 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.06738379 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.083653961 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.070440856 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.066680189 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.061544453 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.070980845 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.068135204 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.06788037 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.069715974 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.063522104 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.066625753 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.061449859 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.068983098 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.062650956 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.068995907 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.06651657 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.067126757 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.068625765 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.064986418 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.067761987 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.070950571 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.066474089 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.067082164 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.066946563 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.071502362 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.06857586 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.063021945 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.065321278 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.16891256 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.180830802 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.068949005 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.068623406 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.062570634 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.062713687 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.067152798 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.065024235 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.068848197 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.071397074 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.064625713 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.071322318 seconds)
  done (took 7.264688805 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189820614 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.194433503 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.186725665 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.182209069 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.207551783 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.182352641 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.191001866 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.179797146 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.183563867 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.1908148 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.174212108 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.179705083 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.181083998 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.17573203 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.179367713 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.17521535 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.180305816 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.173904769 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.179140024 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.179359404 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.190937468 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.172309349 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.074851428 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.180147835 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.173911908 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.179777628 seconds)
  done (took 8.879964812 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.069960253 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.08464436 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.08898234 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.240961488 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.105984441 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.079501715 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.078886332 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.089898789 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.097720922 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.064822099 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.068843082 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.08970319 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.092777304 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.0715471 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.102781028 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.082790109 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.07713813 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.066551583 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.071348335 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.098998988 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.087461826 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08315131 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.096789315 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.084615594 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.064078213 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.073996155 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.071536612 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.080781505 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.071942289 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.076277061 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.069260663 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.068139648 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.06549904 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.180910594 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.071436996 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.062711647 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.08607521 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076649584 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.079095906 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.103161655 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.075107249 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.066571193 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.092186176 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.130036334 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.064395722 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.066756708 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.068563654 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.076596846 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.066092281 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094668359 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.184852953 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.064279328 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.083485601 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.06638294 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.066348877 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.184886216 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.066418861 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.06663107 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.114656526 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.070750862 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.085833601 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.069360594 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.189488253 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.064128939 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.075514572 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.06597882 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.066174681 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.063084181 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.098091927 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.071845271 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.218544859 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.065549694 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06223344 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.075954745 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.075482864 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07103844 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.063981258 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.188074817 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076130266 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.068222041 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.075511222 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.067310975 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.067617418 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.099636266 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.063404979 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.062404598 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06200947 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.066270661 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.067480733 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.065364636 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.181821289 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.063800413 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.067375189 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.183481202 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.064514791 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.065089727 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.066662262 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.0656805 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.063963757 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.178946722 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.068087152 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.066106785 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.077333079 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.065491893 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.068102574 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.079292839 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.073951157 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.063840561 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.065302416 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.066621873 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.065961013 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.068588033 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.067912252 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067155574 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.071380316 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.072019997 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.070400511 seconds)
  done (took 14.185144801 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.158698006 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.148011821 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.065487007 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.143192296 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.072729493 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.068605956 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.144594027 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.084031274 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.06525078 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.066328841 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.064097002 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.092357046 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.087561275 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.095898871 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.068852528 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.065544084 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.090117324 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.097225685 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.146427039 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.141490396 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.087926316 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.072715609 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.067532487 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.066525344 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.066217022 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.073677789 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.078507632 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.072963728 seconds)
  done (took 6.827208078 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072664619 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.080162405 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.069201534 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.088417209 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.082384134 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.0649561 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.06706358 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.066344072 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.082107642 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.071165507 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.065012823 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.069239614 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.068315291 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.066140738 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.066197768 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.071243604 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.071841968 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06395099 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.068392019 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.0695683 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.075155205 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.089599384 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.068898387 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.065415615 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.067814935 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06520552 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07113563 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.073779927 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.064765841 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.094448795 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.062052804 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.069062793 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.079181233 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.06575413 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.064281002 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.065453396 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.065115086 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.064890639 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.065100886 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.062874526 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.063147998 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.070030934 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.063780895 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.070025245 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.078656819 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.072487556 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.065994926 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.070183589 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.067386889 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.061886434 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.068251563 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.068140283 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.067395887 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.073237912 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.068571801 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.067475479 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.066002947 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.198596684 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.070769303 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.064217097 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.064158877 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06312641 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.066257477 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.0725863 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.081372405 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.066720843 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.063459356 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.065447055 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.069694926 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.079166304 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.064272865 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.070010288 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.062194949 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.06538422 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.067171481 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.068355172 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.06642605 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.063393543 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.064718049 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.065205105 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.065504878 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.06446617 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.064839925 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.067464383 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.062663917 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.063467767 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.065473953 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.066186539 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.070466406 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.063735599 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.068121898 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.066615918 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.063924099 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.067574775 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.070152024 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.068049059 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.084907759 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.072963425 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.065559605 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.062580671 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.079223773 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.066525957 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.063987466 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.174082308 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.069567734 seconds)
  done (took 11.728678636 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088080754 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.066536469 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.084606163 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09113059 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.075185417 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.070043826 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.078531178 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.065876401 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.080732669 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.064053834 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.073978408 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.063218557 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.07798131 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.073922171 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.066521614 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.075209379 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.067506265 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.085460296 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.079412744 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.063414701 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.073855783 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.076800376 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.07738121 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.082800483 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.082584033 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.083305219 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.076615074 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.067638272 seconds)
  done (took 6.383917234 seconds)
done (took 59.505469021 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 9.299538225 seconds)
  (2/12) benchmarking "fasta"...
  done (took 4.45829533 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 9.308758511 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 5.609003637 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 9.353767385 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 9.415893279 seconds)
  (7/12) benchmarking "nbody"...
  done (took 5.411661966 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 9.2942046 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 10.551451749 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 9.32874738 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 5.612320493 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 7.682822831 seconds)
done (took 99.634927655 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 9.337158982 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 4.437847569 seconds)
    (2/2) benchmarking "String"...
    done (took 4.526961661 seconds)
  done (took 13.197374318 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 4.891635001 seconds)
    (2/3) benchmarking "different length"...
    done (took 4.293165679 seconds)
    (3/3) benchmarking "different"...
    done (took 4.336320018 seconds)
  done (took 17.75725063 seconds)
  (4/7) benchmarking "replace"...
  done (took 5.472684101 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 9.028263113 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 4.544144884 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 9.290316277 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 9.295793056 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 5.668299231 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 5.106712251 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 4.757937605 seconds)
  done (took 51.928513262 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 7.316734704 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 4.492604229 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.990727487 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 6.012278011 seconds)
  done (took 28.08589808 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 4.893332022 seconds)
    (2/4) benchmarking "equal"...
    done (took 4.552351973 seconds)
    (3/4) benchmarking "different length"...
    done (took 4.552876685 seconds)
    (4/4) benchmarking "different"...
    done (took 4.544490002 seconds)
  done (took 22.830095155 seconds)
done (took 152.925067463 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 9.292783681 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 9.889935323 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 9.312442711 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 4.445285262 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 9.301306742 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 9.330946429 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 9.301166759 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 9.329026967 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 9.292693526 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 9.296582345 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 8.790712509 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 9.293385954 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 9.289953609 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 9.32351839 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 9.290242667 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 9.340520625 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 9.679019497 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 9.306102085 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 9.314430625 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 9.737963066 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 7.79551878 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 9.303531227 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 9.29991204 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 4.337964389 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 10.322456531 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 9.29873812 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 9.833677055 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 9.300962494 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 4.895629746 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 9.305929401 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 9.430668358 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 9.296438639 seconds)
  done (took 288.808472698 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 9.29489328 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 6.325381772 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 6.401092572 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 9.319861663 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 6.786507889 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 5.48595925 seconds)
    (7/36) benchmarking "scal!"...
    done (took 5.440382308 seconds)
    (8/36) benchmarking "gemv"...
    done (took 6.814703271 seconds)
    (9/36) benchmarking "syr!"...
    done (took 9.306343217 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 9.317821335 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 5.542451241 seconds)
    (12/36) benchmarking "her!"...
    done (took 9.305294318 seconds)
    (13/36) benchmarking "trsv"...
    done (took 5.573518579 seconds)
    (14/36) benchmarking "dot"...
    done (took 5.247707406 seconds)
    (15/36) benchmarking "dotu"...
    done (took 5.290744289 seconds)
    (16/36) benchmarking "herk!"...
    done (took 9.322265087 seconds)
    (17/36) benchmarking "trmv"...
    done (took 5.558945328 seconds)
    (18/36) benchmarking "symv"...
    done (took 5.585518695 seconds)
    (19/36) benchmarking "dotc"...
    done (took 5.398674448 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 5.483909114 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 9.29989369 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 6.406310335 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 6.341473362 seconds)
    (24/36) benchmarking "symv!"...
    done (took 5.530107998 seconds)
    (25/36) benchmarking "symm"...
    done (took 9.318538814 seconds)
    (26/36) benchmarking "herk"...
    done (took 9.296080066 seconds)
    (27/36) benchmarking "syrk"...
    done (took 9.320195051 seconds)
    (28/36) benchmarking "trsm"...
    done (took 9.294708683 seconds)
    (29/36) benchmarking "asum"...
    done (took 5.493328836 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 5.534662924 seconds)
    (31/36) benchmarking "gemm"...
    done (took 9.316388681 seconds)
    (32/36) benchmarking "symm!"...
    done (took 9.309128329 seconds)
    (33/36) benchmarking "scal"...
    done (took 4.503280433 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 5.165835565 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 9.32123863 seconds)
    (36/36) benchmarking "trmm"...
    done (took 9.301704411 seconds)
  done (took 263.797087942 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 4.467277852 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 4.315935152 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 4.354986768 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.421236446 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.99425175 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 8.977460654 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 4.305119253 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 4.296111784 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 4.296536721 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 4.303585023 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 4.301186826 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 4.36667445 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 24.702664004 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 4.32063212 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 4.300623983 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 4.299209764 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 24.570260174 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 4.299584419 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 4.296192799 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 4.306367485 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 4.364997518 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 4.669846807 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 4.419597926 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 4.29762503 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 4.310311932 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.431660528 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 4.305268574 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 4.298632783 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 4.418815488 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 4.307761625 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 4.374136528 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.420045492 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 4.307348243 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 4.380196491 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 4.302042524 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 4.297717891 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 6.768009369 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 4.298978362 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 4.30509646 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 4.306020701 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 4.358598576 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 4.295509719 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 7.366951883 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 4.393705028 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 4.299376271 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 4.311383237 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 5.38681557 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.970477833 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 4.300378785 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 4.298294566 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 4.294797703 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 4.303100596 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 4.299910486 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 25.363592014 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 4.301009757 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 4.324635504 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 12.857292791 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.300578019 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 4.306097639 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 4.299283138 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 4.29984206 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 4.300413827 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 4.307357727 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 4.336946377 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 7.026659416 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 24.389545292 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 4.689163973 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 7.054332837 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.298982056 seconds)
    (69/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 4.298623512 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 14.35050866 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.356370081 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 4.300243852 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 4.37821111 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 4.298216257 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 4.298914181 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 4.298964954 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 4.298020651 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 6.356132979 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 6.340911977 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 4.306069394 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.423647513 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 4.300609817 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 4.300746103 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 24.481623387 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 24.607385025 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 4.300512212 seconds)
    (87/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 4.302019536 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 4.31345605 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 4.352046762 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 4.300395255 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 4.302529305 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 4.307110828 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 6.351338201 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 4.300898153 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 4.307798018 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 4.299558356 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 7.351418147 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 4.300906643 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 24.390359319 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 4.518775053 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 4.372285832 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 4.542125161 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 7.492841636 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 4.302412296 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 4.302415933 seconds)
    (106/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 4.299349512 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 4.322790001 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 4.302513201 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 4.300518938 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 4.310133866 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 4.300986818 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 4.308102102 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 4.30223901 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 4.305875005 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 4.302319035 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 4.304047832 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 4.323585458 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 4.302447495 seconds)
  done (took 708.195351672 seconds)
done (took 1269.546459309 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 4.945778598 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 5.103714588 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 4.909907354 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 4.941346563 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 4.91291227 seconds)
  done (took 29.049605332 seconds)
done (took 33.285880302 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 4.323114392 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 4.31899011 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 4.312868064 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 4.326853179 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 4.322937185 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 4.321870775 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 4.353940509 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 4.344594401 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 4.341086278 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 4.319405474 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 4.328700534 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 4.324612949 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 4.324760357 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 4.340463861 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 4.330449659 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 4.330041781 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 4.441587756 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 4.319062916 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 4.335560696 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 4.324224315 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 4.322913962 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.320879552 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 4.321995337 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 4.327864103 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 4.332993909 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 4.323637834 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 4.317546175 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 4.326972823 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 4.321430603 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 4.326065552 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 4.366973951 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 4.330646935 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 4.360956589 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 4.332498061 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 4.328376981 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 4.336460332 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 4.321280204 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 4.348782512 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 4.324954351 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 4.36118847 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 4.336646833 seconds)
  done (took 181.922615042 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 4.312579083 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 4.443827287 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 4.528547976 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 4.34394696 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.311352262 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 4.520993232 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 4.366940867 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 4.436586631 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 4.438784764 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 4.531841199 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 4.532743874 seconds)
  done (took 53.012442196 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 4.317156655 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 4.447954344 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 4.52106758 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 4.346862914 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.326737069 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 4.525529478 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 4.374910148 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 4.447352536 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 4.45338306 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 4.532250061 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 4.537206038 seconds)
  done (took 53.083143352 seconds)
done (took 292.259463499 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 4.686375351 seconds)
    (2/2) benchmarking "11899"...
    done (took 4.33252141 seconds)
  done (took 13.260715933 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 4.29973083 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 4.331525887 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.456097949 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 4.309031406 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 4.307919102 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 4.308385999 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 4.314344912 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 4.312313311 seconds)
  done (took 38.88429996 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 4.30825347 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 4.308401064 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 4.307630203 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 4.318429129 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 4.30725203 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 4.834734158 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 4.733454193 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 4.724488951 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 4.72338531 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 4.724093262 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 4.73055216 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 4.730043101 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 4.630680325 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 4.726174503 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 4.724701544 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 4.729758082 seconds)
  done (took 77.811337051 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 4.726302811 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 4.723275648 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 4.73258597 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 4.726153822 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 4.726659257 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 4.727686807 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 4.726463282 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 4.726046309 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 4.724032096 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 4.730497427 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 4.726943204 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 4.726699387 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 4.72684816 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 4.731896296 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 4.726151556 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 4.73431398 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 4.725689664 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 4.727102205 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 4.728112891 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 4.621441344 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 4.723669877 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 4.731612902 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 4.632259924 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 4.728885516 seconds)
  done (took 117.925804446 seconds)
done (took 252.13409748 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 5.967864086 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 6.612162907 seconds)
  done (took 17.241074479 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 4.734015915 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.721646807 seconds)
  done (took 14.094032758 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 4.617786297 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 4.728825068 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 4.741007455 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 4.721043334 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 4.722070116 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 4.721262082 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 4.721887729 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 4.725412958 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 4.738188746 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 4.718066277 seconds)
  done (took 51.817019375 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 4.716411992 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 4.613277116 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 4.717562757 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 4.719449383 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 4.714606534 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 4.720858399 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 4.72034716 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 4.714581704 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 4.719090451 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 4.713444684 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 4.723577625 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 4.714375576 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 4.718381042 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 4.711723679 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 4.713055891 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 4.711825196 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 4.714129566 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 4.713356858 seconds)
  done (took 89.342773395 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 4.712847204 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 4.715614619 seconds)
  done (took 14.077483719 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 4.71399097 seconds)
    (2/7) benchmarking "second"...
    done (took 4.720166529 seconds)
    (3/7) benchmarking "month"...
    done (took 4.712701341 seconds)
    (4/7) benchmarking "year"...
    done (took 4.713576199 seconds)
    (5/7) benchmarking "hour"...
    done (took 4.712862057 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 4.604580836 seconds)
    (7/7) benchmarking "minute"...
    done (took 4.608016905 seconds)
  done (took 37.33090745 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 4.71671381 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 4.865193172 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 4.916208544 seconds)
    (4/9) benchmarking "Date"...
    done (took 5.322528991 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 4.723551362 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 4.725639068 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 5.392587702 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 4.719010887 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 4.716415183 seconds)
  done (took 48.747794909 seconds)
done (took 277.315014011 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 7.468689176 seconds)
  (2/8) benchmarking "printfd"...
  done (took 9.71958051 seconds)
  (3/8) benchmarking "parseint"...
  done (took 5.923200981 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 9.792682402 seconds)
  (5/8) benchmarking "pisum"...
  done (took 9.783481213 seconds)
  (6/8) benchmarking "fib"...
  done (took 5.055795046 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 9.720711424 seconds)
  (8/8) benchmarking "mandel"...
  done (took 6.262692484 seconds)
done (took 68.38075524 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 9.748388069 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 9.708304063 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 9.735001963 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 9.741129095 seconds)
  done (took 33.727177423 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 9.710934413 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.99747252 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 9.729235864 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 6.679463913 seconds)
  done (took 36.784557221 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 5.084908843 seconds)
    (2/2) benchmarking "read"...
    done (took 5.057644704 seconds)
  done (took 14.797651661 seconds)
done (took 99.714840424 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.71106015 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 4.711033742 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 4.719717465 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 4.709882434 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 4.710185174 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 4.716314578 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 4.708892611 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 4.714238693 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 4.720324788 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 4.616145007 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 4.715991645 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.709831565 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.711868729 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.709777522 seconds)
    (15/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 4.712250647 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.718606428 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 4.706341987 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.710041677 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 4.713688411 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 4.713087315 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.71111917 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.711510122 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 4.710546589 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 4.71907232 seconds)
  done (took 117.671286912 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 4.712146707 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 4.712987618 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 4.709659022 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 4.710890615 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 4.716295733 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 4.712224507 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 4.712719886 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 4.707975255 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 4.712094593 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 4.717282879 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.716511037 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 4.711387129 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 4.709726614 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 4.712496109 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.710775061 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 4.722619984 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 4.713766693 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.711198448 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.711630331 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 4.712398644 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 4.608718678 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.713175737 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 4.711245344 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 4.716940004 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 4.712616361 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 4.608064929 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 4.713620557 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 4.715812801 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 4.711683688 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 4.711997169 seconds)
  done (took 145.830044831 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 4.711623333 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 4.711995112 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 4.717280676 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 4.714298557 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 4.817425825 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 4.729843275 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 4.712209792 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 4.608711866 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 4.70842472 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 4.713029226 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 4.713543772 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 4.713731086 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 4.718421949 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 4.71735789 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 4.71167837 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 4.719828112 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 4.712814245 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 4.718063858 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 4.724855713 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 4.717959258 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 4.714658199 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 4.71869934 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 4.719266865 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 4.714713274 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 4.717800231 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 4.715260089 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 4.722176896 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 4.725424145 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 4.721599586 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 4.612801727 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 4.713958053 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 4.727447374 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 4.715721898 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 4.715761197 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 4.715646687 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 4.611536548 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 4.718869979 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 4.719933014 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 4.729413227 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 4.715842549 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 4.718580198 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 4.715215111 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 4.722028924 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 4.720702432 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 4.726425796 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 4.722563849 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 4.721702154 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 4.61937105 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 4.611534683 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 4.721165738 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 4.720235427 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 4.723136744 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 4.617316253 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 4.722123929 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 4.721440733 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 4.71617477 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 4.723939781 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 4.731837896 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 4.719618403 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 4.718112359 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 4.722986226 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 4.717087132 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 4.723541829 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 4.726153626 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 4.720620172 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 4.720488095 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 4.718662664 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 4.724359091 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 4.721945811 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 4.739407787 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 4.720667379 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 4.615032621 seconds)
  done (took 343.820061883 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 4.724253672 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 4.723280409 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 4.719304117 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 4.722648162 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.724962266 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 4.723618057 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 4.720850044 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.720143458 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.723137276 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 4.727696999 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.721924966 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 4.717888381 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.723863397 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 4.725220682 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 4.724156667 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 4.615109552 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 4.728769213 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 4.730185464 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 4.724950594 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 4.727425209 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 4.728136982 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 4.718740645 seconds)
  done (took 108.482538168 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.724293311 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 4.724238057 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 4.618975247 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 4.723001717 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 4.7347919 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 4.72484978 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 4.721473221 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.34896123 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.870129676 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.557421116 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.55895857 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.561495109 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.554137018 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.555845479 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.553243447 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.555700628 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.4515179 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.560216498 seconds)
  done (took 98.764262823 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 5.55774247 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 5.559085467 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 5.553965934 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 5.561186861 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 5.563928768 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.555819797 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.558334961 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.555175959 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 5.556433858 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 5.559904713 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.560745604 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.450555071 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 5.559109156 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.55865911 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.565544761 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.453538928 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.560156421 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.767518983 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.551604763 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.557634032 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.556643405 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.552978704 seconds)
  done (took 127.767769727 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.5593653 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 5.454187591 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.562806702 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.558767231 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 5.560408212 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 5.560364933 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 5.554919914 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 5.560905653 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 5.559139949 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 5.558598301 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.557599263 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 5.558304046 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 5.553931231 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.564179661 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 5.557974833 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.559062256 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.566196341 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.560078595 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.561979505 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.562025094 seconds)
  done (took 116.583179477 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.454163495 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.559128425 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.56527326 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.463374183 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.560893106 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.560262398 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.565184607 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.564735281 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.561829759 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.458094024 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.55987258 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.558110244 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.560260892 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.455533224 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.565543079 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.576559918 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.45695187 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.55644882 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.456031084 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.56283766 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.556411442 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.558942647 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.564544574 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.55789243 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.568323426 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.558417126 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.468423714 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.567387395 seconds)
  done (took 160.513226689 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.560346709 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.560577073 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 5.559845239 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 5.557333145 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 5.567705419 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 5.566607833 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.569100195 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.557731071 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.562844396 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.560298127 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 5.562104145 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.558648204 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.455443608 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 5.557256848 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.561064226 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 5.560616556 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.562415251 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.568981573 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.561370334 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.557422652 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.562633388 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.564601262 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.562267051 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.56629013 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.558341046 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 5.560348279 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.562503666 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.559423499 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.569495696 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.562538425 seconds)
  done (took 172.254760101 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 5.578537938 seconds)
    (2/2) benchmarking "in"...
    done (took 5.5834826 seconds)
  done (took 16.660189616 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 5.570061087 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.562395961 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 5.560483791 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.560445705 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.560482704 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.568667763 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.563996998 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.562752591 seconds)
  done (took 49.90236993 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 5.560920373 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 5.564016594 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 5.459234241 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 5.4549734 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 5.573528307 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.573390586 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 5.563476024 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 5.571527475 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.568930039 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 5.562670272 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 5.566332931 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 5.568644275 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 5.57365831 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 5.572905729 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 5.561592645 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 5.56002726 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 5.564556395 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.77222266 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 5.568107598 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 5.564621963 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 5.563579709 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 5.665185315 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 5.563471826 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 5.561071573 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 5.5679172 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 5.569432199 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 5.56914563 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 5.460346589 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.582309863 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 5.564082192 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 5.562721923 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 5.564133583 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 5.565169744 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.566155986 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 5.560822786 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 5.560502699 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 5.573001423 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 5.565068139 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 5.5703848 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 5.58212489 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 5.56735004 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.563790777 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 5.568687845 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 5.574347023 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 5.562776347 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 5.563850557 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 5.565191769 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 5.560573476 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 5.466403534 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 5.568951781 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 5.58147319 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 5.564706896 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 5.564894311 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 5.563705566 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 5.56646569 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 5.569282951 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 5.57151229 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 5.570627158 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.572952941 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 5.471285884 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 5.461217733 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 5.593108064 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 5.576077788 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 5.567013817 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 5.561254383 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 5.572310519 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 5.489804048 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 5.67093798 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.566644486 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 5.564519389 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.572398305 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 5.571803629 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 5.571572437 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 5.563183654 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.578013491 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 5.571415092 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 5.568528883 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 5.570352341 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 5.570888697 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 5.566941229 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.567762744 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 5.567946826 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 5.571516471 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 5.569964222 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 5.471435727 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 5.596988075 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 5.565061137 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 5.565779243 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 5.564932233 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 5.564275026 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 5.463513474 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 5.77747736 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 5.570741633 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 5.463859181 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 5.56517553 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 5.567550126 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 5.565163579 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 5.565314373 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 5.562671821 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 5.571807282 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 5.567147938 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 5.566688618 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 5.56898153 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 5.576660003 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 5.571905985 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 5.56736735 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 5.567968518 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 5.567998005 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 5.581327965 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 5.567545613 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 5.565555549 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 5.568773754 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 5.568059089 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 5.46599361 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 5.571690127 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 5.576784212 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 5.57629355 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.579427743 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 5.581479939 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 5.573420387 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 5.572241092 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.569182552 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.576829847 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 5.587439745 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 5.56463197 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 5.571325382 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 5.578895995 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 5.476746073 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 5.575944655 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 5.564399229 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.573204426 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 5.565214985 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 5.463013671 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 5.562868479 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 5.570618423 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 5.567136906 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 5.575501632 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 5.576179775 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 5.574018233 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 5.567768255 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 5.468857894 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 5.572396535 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.568924538 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 5.569672894 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 5.574256196 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 5.568490002 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.569655507 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.573894584 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 5.57549524 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 5.580274961 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 5.469796023 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.581460205 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 5.574195869 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 5.567180676 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 5.565542529 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 5.573730658 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 5.564620388 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 5.569765366 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.570111613 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 5.575590322 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 5.568701462 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 5.566064123 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 5.568142483 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 5.568475739 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 5.568982244 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 5.570315265 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 5.569413144 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 5.563758282 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 5.573306357 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 5.571023287 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.579821578 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 5.568882429 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 5.574448799 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 5.568046304 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 5.573903435 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 5.463328458 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 5.464407896 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 5.569761354 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 5.578168968 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 5.58901233 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 5.583346988 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.579585052 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 5.574103943 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 5.576762304 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 5.567150561 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 5.571452152 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 5.578261825 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 5.579577527 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 5.562708005 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 5.565236187 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 5.566122531 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 5.58012906 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 5.594142117 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.582768092 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.574242458 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 5.460876298 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 5.57669248 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 5.573416309 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 5.575538833 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 5.569325259 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 5.573194918 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 5.573291222 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 5.575707662 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 5.57383511 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 5.563804624 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 5.571712724 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 5.571335872 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 5.573026776 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 5.473315171 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 5.566976859 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 5.569831173 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 5.571769424 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 5.573720336 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 5.578552801 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 5.562651421 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 5.570462163 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 5.572466978 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 5.574544568 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 5.585095247 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.575604608 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 5.576804687 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 5.57477205 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.572374394 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 5.568151149 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 5.576647112 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 5.569577452 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 5.576556252 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 5.576827875 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 5.581632696 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.576891071 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 5.566730911 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 5.568593442 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 5.568879538 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 5.569630104 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 5.580823549 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 5.47041013 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 5.576264847 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 5.586474476 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 5.573249386 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 5.570255535 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 5.573600738 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 5.572420181 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 5.576186005 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 5.570433995 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.574853888 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 5.580916026 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 5.583156199 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 5.482743649 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 5.56826788 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 5.575360629 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 5.577811478 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 5.569674875 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 5.575054766 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 5.576305258 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 5.574070449 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 5.579547023 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 5.575453185 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.575100853 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 5.577072493 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 5.578829771 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 5.570989949 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 5.570719857 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 5.575532421 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 5.471513438 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 5.573572902 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 5.567198667 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 5.581964122 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 5.589456967 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 5.578923675 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 5.569858144 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 5.568210903 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 5.568715771 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 5.584046692 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 5.56778025 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 5.580535577 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 5.575188814 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 5.570524319 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 5.472015389 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 5.579102574 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 5.577924845 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 5.580504592 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.569513 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 5.577326463 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.578218683 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 5.568919866 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 5.571183565 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 5.570072788 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.469303349 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 5.579790868 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 5.579653294 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 5.589705518 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 5.584615848 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 5.577768076 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 5.571697501 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 5.592719215 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 5.587353939 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 5.572171465 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.578780372 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.576186649 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 5.580853214 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 5.574250991 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 5.569270928 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 5.575659638 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 5.572427218 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 5.579224043 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 5.576797372 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 5.573775086 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 5.57492755 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 5.588344068 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 5.576201442 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 5.583028222 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 5.57786649 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.58759901 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 5.466494787 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 5.572350774 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 5.574162618 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 5.574855307 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 5.586821395 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 5.575350923 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 5.571867671 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.580464073 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 5.58086541 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 5.571520276 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 5.579486201 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 5.463830997 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 5.57483881 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 5.574950809 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 5.57750285 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 5.601834528 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 5.573721858 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 5.57548446 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 5.573858764 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 5.586468658 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 5.583339472 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.579803581 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.570808042 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 5.576235777 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 5.57357881 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 5.573120232 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 5.468650958 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 5.574343006 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 5.573136992 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 5.570709777 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 5.578345718 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 5.585387564 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.592836506 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 5.571480839 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 5.573193529 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 5.487091307 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 5.572626783 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.579523218 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 5.571871517 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 5.572150694 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 5.567844962 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 5.579461458 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.576206239 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 5.580347638 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 5.56720604 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 5.573843806 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 5.573229237 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 5.572465813 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 5.480940606 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 5.580152122 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 5.57593786 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 5.575925642 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 5.472961229 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 5.577410845 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 5.582879718 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 5.599355206 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 5.572795027 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 5.580399358 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 5.575354735 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 5.580022825 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 5.581200038 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.474074417 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.577597657 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 5.608477951 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 5.47010317 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 5.574234876 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 5.575436745 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.585828513 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 5.573317252 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 5.572812608 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 5.576457797 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.472910778 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 5.57604666 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 5.575669164 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.573793487 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 5.575745974 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 5.575407513 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 5.585787034 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 5.574854033 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 5.57299714 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 5.579591589 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 5.57118987 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 5.573764729 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 5.577406987 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 5.584720913 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 5.470238187 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 5.574527027 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 5.469635311 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 5.569807519 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 5.57968356 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 5.581425143 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 5.591273438 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.58532616 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 5.577873496 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 5.578980918 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 5.586924878 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 5.573991239 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.576555216 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 5.580246257 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 5.577476417 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 5.57561242 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 5.575942727 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 5.58977623 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 5.581125182 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 5.588780424 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.581152547 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 5.585088064 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 5.579488636 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 5.578970852 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 5.573592801 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 5.574822822 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.575380069 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.585963395 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 5.375115627 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 5.589554643 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.587763306 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 5.575431067 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 5.582762253 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 5.586571808 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 5.590336415 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 5.576221446 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 5.579061489 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 5.477547001 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 5.474955415 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.584592095 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 5.586409219 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 5.576193491 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 5.576215873 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 5.588158538 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 5.575707958 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 5.580151824 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 5.578359071 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 5.575993605 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.573514471 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 5.587947171 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.58193046 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 5.476549283 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 5.68139578 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 5.574124981 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 5.58604622 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 5.577588989 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 5.578190257 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 5.575863429 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 5.5789021 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 5.578648316 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 5.579037299 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 5.580597618 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 5.575824522 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 5.575499951 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 5.59141639 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 5.57587687 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 5.581424359 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 5.593350824 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 5.578618672 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 5.582068455 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 5.58132346 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 5.593972448 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 5.57697086 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 5.473706592 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 5.584512424 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 5.482678973 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 5.577479045 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 5.581984692 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 5.580061821 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 5.579773315 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.585831229 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 5.576762455 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 5.582846376 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 5.583920973 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 5.579276907 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 5.583833837 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 5.588304209 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.586031264 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 5.581457457 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 5.577325018 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 5.483116465 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 5.582110259 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 5.59039175 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 5.588052073 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 5.485681978 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 5.482508703 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.582891957 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 5.595948775 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 5.578346665 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 5.473736947 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 5.580724156 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 5.584446202 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 5.582511048 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.580747282 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 5.583097587 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 5.578859739 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.583116654 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 5.578936235 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.58901319 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 5.578721642 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 5.474889065 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 5.589785996 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.588119966 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 5.592383228 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 5.582965528 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 5.582855133 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 5.582648588 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 5.586438027 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 5.597571768 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 5.580446318 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 5.581118591 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 5.579411138 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.481250575 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 5.586709602 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 5.583078068 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.590809124 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 5.584856998 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 5.579397124 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 5.588017255 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.510251489 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.485445716 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 5.590950988 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.61698948 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 5.5792795 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 5.579638102 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 5.474430726 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 5.58280714 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 5.580818506 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 5.585191043 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 5.580454667 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.592889603 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 5.597161143 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 5.582659517 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.5939629 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 5.580722735 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 5.583193699 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 5.585676204 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 5.585791972 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 5.485090558 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 5.579450672 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 5.486220799 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 5.591008984 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 5.593861208 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 5.591073284 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 5.583642551 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 5.583327769 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 5.59329606 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 5.581363059 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.587945264 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 5.582285089 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 5.582525736 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 5.488375395 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 5.588162294 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 5.58176478 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 5.598922482 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 5.595945298 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 5.583265043 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 5.59017963 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 5.587810451 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 5.588653755 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 5.592226286 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 5.585186872 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 5.589411591 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 5.5023623 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 5.584683429 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 5.589488378 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 5.587843177 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 5.582087593 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 5.585062312 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 5.580583118 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 5.481375492 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 5.496440769 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.596008455 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 5.585884256 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 5.590453923 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.590363009 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 5.584642757 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 5.591229395 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 5.591912744 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 5.587710272 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 5.588866705 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 5.585275692 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 5.581217465 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 5.583387467 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 5.591289986 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 5.587211092 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 5.605379629 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 5.583882064 seconds)
  done (took 3324.197673519 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.586733955 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.58605089 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.590626591 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.587660422 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.586540497 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.587223384 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.591487224 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.599248761 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.479458472 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.587269227 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.585807269 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.588608568 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.589257613 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.58649551 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.590735671 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.584930485 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.584590584 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.60447247 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.480374236 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.58576883 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.587079376 seconds)
  done (took 122.66974337 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 5.583058037 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 5.587478562 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.583889802 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.590293816 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.593313905 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 5.586607106 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.59458476 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.590875461 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.586969725 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.478960735 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.583753893 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.585482136 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 5.591570952 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.478977394 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.483196844 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.585057717 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.586671764 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.595243733 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 5.59088621 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.589107524 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.593727943 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.483971247 seconds)
  done (took 128.043344698 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 5.587740045 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 5.587323911 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 5.593110266 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 5.593047326 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 5.588941197 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 5.602838981 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 5.588242013 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 5.592813061 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 5.590597778 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 5.591640724 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 5.594121621 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 5.598237401 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 5.383227729 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 5.593059878 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 5.589581516 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 5.59648237 seconds)
    (17/49) benchmarking "13786"...
    done (took 5.746820084 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 5.588011242 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 5.598865578 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 5.590069875 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 5.589072539 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 5.599083876 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 5.589690885 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 5.590012991 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 5.595662718 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 5.587823443 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 5.491563654 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 5.607024669 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 5.588811362 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 5.595985562 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 5.595754644 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 5.590684455 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 5.593796997 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 5.591079739 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 5.591885479 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 5.589156483 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 5.59684781 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 5.594694269 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 5.587054442 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 5.592412208 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 5.605934852 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 5.619689562 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 5.600699935 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 5.588071569 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 5.601567564 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 5.590888881 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 5.597797182 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 5.597041364 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 5.608868436 seconds)
  done (took 279.488470303 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 5.597028446 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 5.59306335 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 5.588859276 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 5.58926706 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.593737441 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 5.594609992 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.597884559 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 5.59221232 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 5.594300179 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 5.596681664 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 5.593724612 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.591451028 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.588696659 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 5.591635201 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 5.591599401 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 5.594436864 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 5.593724544 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 5.603639065 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 5.595800792 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 5.599231791 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 5.592754398 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 5.591981277 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 5.593899754 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 5.592888786 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 5.490067923 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 5.594551972 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.601240275 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 5.592734847 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 5.59961986 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.595563898 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 5.598865095 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 5.59293159 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 5.597822777 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 5.589275914 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.495937912 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.601156236 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 5.598004441 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 5.590250628 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 5.592190925 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 5.594088889 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 5.601194686 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 5.602552544 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 5.59554223 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 5.59949224 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.591671092 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 5.596232168 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 5.599455609 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.593543218 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 5.596195647 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 5.592153089 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 5.581002025 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.493128711 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 5.602866697 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 5.594892629 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 5.595085688 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 5.595936573 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 5.596865219 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 5.594950049 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 5.592863436 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 5.595192741 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.592734711 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.596410017 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 5.494777076 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.603620932 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 5.594919914 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 5.596175306 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.59512754 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.490261996 seconds)
  done (took 385.483761738 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.597751044 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 5.597378449 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.602557047 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.59766449 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.601287858 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.599562634 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.595712392 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.603764893 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.597123886 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.594730854 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.608415369 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.598904581 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 5.65872737 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.596470382 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.601779267 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.60347424 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.592869739 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.600057851 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.596425589 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.600403558 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.596497423 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.605982261 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.597175236 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.497185383 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.600648953 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.600561368 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.607122743 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.598375238 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.493078349 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.597411296 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.604467964 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.388737518 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.599766356 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.599471401 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.600617718 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.601787482 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.59972292 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.609929724 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.606351802 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.596999892 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.608487916 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.495095248 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.606427819 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.59770482 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.599834387 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.600714967 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.601500203 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.595191013 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.606297839 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.600323845 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.594002745 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.605625482 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.596476259 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.598290751 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.598147285 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.49258146 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.493843822 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.600814525 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.597460488 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.60934977 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.497022502 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.595107545 seconds)
  done (took 351.864917751 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.491141382 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.709889604 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 5.598912971 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 5.390483046 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.600327404 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.490307768 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.595100916 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 5.59951076 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.599091033 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 5.601549945 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.594460184 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.597289702 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.605584028 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.596738243 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.493475886 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.594749672 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.60079851 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.604227071 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.601155741 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.498837313 seconds)
  done (took 116.994788553 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 5.607865444 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.599617797 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 5.598924752 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.594865705 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 5.495235056 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 5.598849824 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 5.598208971 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.605529997 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.59720324 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.601004159 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 5.607290098 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.491056657 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.600464517 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.593248395 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 5.592795013 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.596487639 seconds)
  done (took 94.918360651 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 5.595090659 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 5.603922725 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 5.492073877 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 5.599334998 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 5.595151587 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 5.599404592 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 5.604446213 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 5.598457836 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 5.602869809 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 5.599210664 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 5.601420046 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 5.603253876 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 5.6018852 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 5.505267383 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 5.597647122 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.597302373 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 5.595818577 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 5.600881739 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 5.598516885 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 5.608459406 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 5.599790302 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 5.59829977 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 5.598874343 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 5.605162962 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 5.597684838 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 5.596621132 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.598067698 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 5.597851617 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 5.498535395 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 5.596147961 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 5.604377154 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 5.493514745 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 5.598103362 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 5.601557086 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 5.608364126 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 5.599730475 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 5.592086825 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 5.597576603 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 5.600201295 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 5.59904082 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 5.49491294 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 5.603422779 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 5.601415095 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 5.601850942 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 5.503776653 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 5.604579669 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 5.601003039 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.611427557 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 5.598734116 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 5.603440732 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 5.596172735 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 5.600849813 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 5.599568291 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 5.603049927 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 5.602804597 seconds)
  done (took 312.944111365 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.603562132 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 5.606107443 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 5.595983188 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 5.599589858 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.599934042 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 5.601046043 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 5.599443471 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 5.603356478 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.598029512 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 5.598933288 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.502411808 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 5.604387851 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.605742841 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.598597804 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.601658546 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.60205432 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.600242962 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.615619514 seconds)
  done (took 106.277229275 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.602199707 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.60629944 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 5.504432791 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.601828877 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 5.607131056 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.601671176 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.604654574 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 5.597802987 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.610709314 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.605468879 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.605040407 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.597190038 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.599914793 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.605835049 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.602851302 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.494827919 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 5.60130932 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.601523388 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.609217259 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.598414921 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.599616145 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.599263275 seconds)
  done (took 128.590667602 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 5.607665403 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 5.602809424 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 5.617915499 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 5.628867776 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 5.620596409 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 5.644352417 seconds)
  done (took 39.259923676 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.600251959 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.602073227 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.607081573 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 5.604394738 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.601832219 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.613726643 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.496094923 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.600977523 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.599821234 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.60408827 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.601695448 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.601480147 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.603198104 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.601394145 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.604675092 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.620817945 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.603972191 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.603770843 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.600423145 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.604328088 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.601800372 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.6028142 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.604815809 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.611040303 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.604704681 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.60547693 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.60874111 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.602933562 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.605849708 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.605059319 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.604196339 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.603606396 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.601441766 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.604390359 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.603252827 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.604083933 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.606717848 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.507465479 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.603208858 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.604032767 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.602814504 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.602904235 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.605593789 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.601455274 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.501471505 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.602586219 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.603846615 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.613629986 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.497842801 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.607322553 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.610116802 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.606551682 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.61469991 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.604772767 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.610217337 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.601516582 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.614614649 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.604141267 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.610256305 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.608992382 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.603430835 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.616784275 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.607548808 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.605285518 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.60220585 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.60679789 seconds)
  done (took 375.078032849 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.603509428 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.607871297 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.613375419 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.606659294 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.608953787 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.60785652 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.615402425 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.612240896 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.607443354 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.608064058 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.602124216 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.606083136 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.50247244 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.613574184 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.605766511 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.60618084 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.606073996 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.604237156 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 5.609861681 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.607039142 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.605742476 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.610253037 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.607225302 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.607556416 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.622222891 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.604373397 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.611484812 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.606177509 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.608739084 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.607784708 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.610402077 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.604022655 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.604304594 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.60378834 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.509898617 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.503562121 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.606787206 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.607746678 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.609727468 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.609130683 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.605887711 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.607006484 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.605436836 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.604634016 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.608696467 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.615197477 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.609182469 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.604542199 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.613525722 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.606970605 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.608946492 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.607556697 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.609806127 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.60462458 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.612912706 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.60675891 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.507489684 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.605184647 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.612563654 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.608401529 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.614958333 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.605070441 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.507978909 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.6091772 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.604488509 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.613413253 seconds)
  done (took 375.183963475 seconds)
done (took 7603.895676139 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 10.627303252 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 10.732325311 seconds)
  done (took 26.924019602 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 5.766672794 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 10.608270055 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 5.797824154 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 5.722487475 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 10.614634885 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 10.51685018 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 5.614049335 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 5.610084824 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 5.701193084 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 5.611589305 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 10.541063382 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 5.607954952 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 5.62143214 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 5.613971899 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 5.624714547 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 5.60990158 seconds)
  done (took 115.555499573 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 5.611976662 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 5.613151594 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 5.602051642 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 5.617478829 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 5.620432991 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 5.684923911 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 5.639141949 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.613500948 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 5.625927271 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 5.641797722 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 5.63191337 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.619811826 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.619532359 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 5.618785469 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 5.697197908 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 5.655878072 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 5.675550846 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 5.686853112 seconds)
  done (took 107.016727263 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 5.698053138 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 10.634792496 seconds)
  done (took 21.882652624 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 10.639920784 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 10.62222931 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 10.631845229 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 10.621873194 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 10.63487055 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 10.624013978 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 10.633314149 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 10.6281057 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 10.644350921 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 10.637148034 seconds)
  done (took 111.885796712 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 5.614713238 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 5.512606824 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 5.869964659 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 5.62344631 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 5.6206987 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.635254794 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 5.617903307 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 5.642041233 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 5.620563122 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 10.617228316 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.621729571 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 5.766251346 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 5.629851703 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 5.612762484 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 6.038762626 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 5.621286277 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 5.629193984 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 5.641766199 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 5.647249064 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 5.633157603 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 5.625277151 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.620383954 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 5.781401557 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 6.312965392 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 10.620480577 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 5.522529325 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 5.621743617 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 5.612619031 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 5.609961955 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 5.613301574 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.61410783 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 10.614338381 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.619027342 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 10.61012652 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 5.624841201 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 5.616754395 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 6.100857511 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 5.631723613 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 5.620538298 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.698580657 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 5.673166919 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 5.629638763 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 10.345605564 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.614588085 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 5.615245618 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 5.61745763 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 6.308913039 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 5.708529786 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 5.614985662 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 5.798861857 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 6.921558871 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 5.629544531 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 5.793474018 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 5.754047249 seconds)
  done (took 338.379596152 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 10.612249356 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 6.942029399 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 5.763400012 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 10.613704812 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 5.873733572 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 5.819753672 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 10.493252684 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.66702418 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 10.61636099 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 5.818610838 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 5.870639853 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.713794024 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 10.617848484 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 10.720757392 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 10.610029228 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 10.617665585 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 5.769576125 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.682378325 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 10.611895765 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 10.612763899 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.531298927 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.816112989 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 5.636422877 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 10.61265221 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.532857251 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 5.81663452 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 5.73676928 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 5.712026299 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 8.374392978 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 10.612053909 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 5.675532729 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 10.621959569 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 10.612771905 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 10.61061901 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 5.76903944 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.712482073 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.695025773 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 10.612058236 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 10.618599939 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 10.60963561 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 6.251663152 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 5.814124006 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.705240515 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 5.734146341 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 5.864380409 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 5.830546762 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.285680471 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 10.606150981 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 6.24240256 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 5.785403854 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 5.80519091 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 5.715266849 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 5.743484222 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 10.614071499 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 9.589805272 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 10.616518005 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 10.609752754 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 5.727058991 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.834066749 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 5.728031627 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 10.615423272 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 10.614851003 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 10.616962364 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 5.841085152 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 10.617507944 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.697971477 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 10.623704372 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 10.612652685 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.707533452 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.720105145 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 5.838676028 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 5.834719973 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.641649852 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.931996397 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.966388723 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.710207133 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.677792488 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 5.832899287 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 10.621198424 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 10.575759491 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.701489535 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.376408035 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 5.86485503 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 5.840207381 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 5.813429676 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.642402286 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 6.220642198 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 10.621005318 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 5.79909475 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 5.798004858 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 5.815675828 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 5.7544105 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 5.858619413 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 8.613603798 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 10.614320037 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 10.622955357 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.832451753 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 5.729964816 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 10.401260081 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 6.953801605 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 6.287028588 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 7.031477148 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 5.647335996 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 5.955897583 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.743535562 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 10.62522147 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 6.259243102 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 10.612464137 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 5.814406758 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 5.651603374 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 10.615162486 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 10.620813428 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 5.802379387 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 6.435181658 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 10.617140836 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 9.30240139 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 5.673755104 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 10.618045604 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.718421823 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 10.724019735 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 5.852964305 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 10.61739418 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.85104713 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 9.144589918 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.650226899 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 5.771244073 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 5.859810613 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 10.07848091 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 5.846248308 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.850659163 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.732393539 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 5.82390067 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 9.87248108 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 10.626464198 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 5.876662347 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 10.625019463 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 10.615330616 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 5.773223104 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 10.619702784 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.758224824 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 10.617542926 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 5.85571364 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.644291926 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.746341169 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 10.620989754 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 5.858034473 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 5.64834036 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.665830833 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 10.626439953 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 5.74401856 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 10.516515836 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 6.43160515 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 5.669358323 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 10.620568901 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 10.613910529 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 8.951433438 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 10.618009315 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 5.777737139 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 5.843701885 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.639296258 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 5.687195006 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.139140495 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 10.615140554 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.607136314 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.63991508 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 7.192885739 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 10.616442222 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 5.863636922 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 10.113516066 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 9.74064363 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 10.622196568 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 5.735843369 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 5.790878296 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 10.620717755 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 10.510179446 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 6.462754207 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 10.237088363 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 10.615703848 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 5.766401402 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 8.975158805 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 10.351894126 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 5.813024612 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 10.622504412 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.640128754 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 10.621544128 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.708388457 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 6.940752995 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 10.51646893 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 10.617178756 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 10.616588035 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 10.617502953 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 10.626484842 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 5.818719079 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 5.644728809 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 7.060792387 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 5.748798026 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 5.873089032 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 5.92526906 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 5.830711913 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.663229837 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 10.619862696 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 5.827271417 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 10.621319192 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 5.692396304 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 10.624818981 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.637840559 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 5.846281307 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 10.620534302 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 5.814102638 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 5.751372949 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 6.643199271 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.67421231 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 10.621428346 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 10.620652412 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 10.547780528 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 5.762961148 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.706131363 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 10.623017962 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 10.618566262 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 5.735561323 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 5.739431918 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 5.798979564 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 10.31110444 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.657858302 seconds)
  done (took 1738.041647962 seconds)
done (took 2465.223977298 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 10.617614512 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 10.620875789 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 10.621179349 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 10.622225181 seconds)
  done (took 48.03691955 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 5.621394075 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 5.620066091 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 5.620341747 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 5.630663455 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 5.622369406 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 5.616481673 seconds)
  done (took 39.287576216 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 10.621648352 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 10.516599364 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 10.62151446 seconds)
  done (took 37.313436773 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 5.953515195 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 6.031426424 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 5.691620481 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 5.767840743 seconds)
  done (took 28.998987217 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 5.626418689 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 5.626928039 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 5.622872727 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 5.62189953 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 5.626767506 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 5.621781996 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 5.633923513 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 5.621546411 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 5.622557594 seconds)
  done (took 56.188144727 seconds)
  (6/6) benchmarking "26942"...
  done (took 7.755909475 seconds)
done (took 223.133217768 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 10.983523453 seconds)
    (2/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 6.11000817 seconds)
    (3/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 5.751151158 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 6.738286324 seconds)
    (5/341) benchmarking ("perf_sum", Float32, false)...
    done (took 5.711970973 seconds)
    (6/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 10.615754807 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 5.856695885 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 10.735774977 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 6.18142351 seconds)
    (10/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 6.820796633 seconds)
    (11/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 10.638987766 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 5.80396136 seconds)
    (13/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 11.13930007 seconds)
    (14/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 10.980321667 seconds)
    (15/341) benchmarking ("perf_sum", Float32, true)...
    done (took 5.816255842 seconds)
    (16/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 5.898017783 seconds)
    (17/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 5.533122826 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 5.637326373 seconds)
    (19/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 10.804037286 seconds)
    (20/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 6.985827018 seconds)
    (21/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 5.999171903 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 5.636158333 seconds)
    (23/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 6.296669796 seconds)
    (24/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 10.63606046 seconds)
    (25/341) benchmarking ("map", abs, Int8, false)...
    done (took 5.769216408 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 5.640306861 seconds)
    (27/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 5.899904686 seconds)
    (28/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 5.633968321 seconds)
    (29/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 5.754453943 seconds)
    (30/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 5.80691987 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 6.822158496 seconds)
    (32/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 6.551240647 seconds)
    (33/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 5.645037448 seconds)
    (34/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 10.622916383 seconds)
    (35/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 10.83122866 seconds)
    (36/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 5.99690918 seconds)
    (37/341) benchmarking ("map", identity, Int8, false)...
    done (took 5.603775096 seconds)
    (38/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 5.766889483 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 5.635544357 seconds)
    (40/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 5.71413697 seconds)
    (41/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 5.960595678 seconds)
    (42/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 5.642777032 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 5.721184793 seconds)
    (44/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 10.631934735 seconds)
    (45/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 5.674719063 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 5.711604627 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 5.86147822 seconds)
    (48/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 5.945838977 seconds)
    (49/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 5.671644418 seconds)
    (50/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 5.869902282 seconds)
    (51/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 5.844341105 seconds)
    (52/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 10.626349325 seconds)
    (53/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 7.098780848 seconds)
    (54/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 7.26752645 seconds)
    (55/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 5.740108763 seconds)
    (56/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 5.783065977 seconds)
    (57/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 5.627582037 seconds)
    (58/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 5.831299588 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 6.021767095 seconds)
    (60/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 6.0049092 seconds)
    (61/341) benchmarking ("map", identity, Float64, false)...
    done (took 5.720443576 seconds)
    (62/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 5.858041293 seconds)
    (63/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 10.857608988 seconds)
    (64/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 5.745110032 seconds)
    (65/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 6.396654157 seconds)
    (66/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 6.119243282 seconds)
    (67/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 5.672261603 seconds)
    (68/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 5.954502758 seconds)
    (69/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 10.631044285 seconds)
    (70/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 5.833595792 seconds)
    (71/341) benchmarking ("perf_countequals", "Int8")...
    done (took 5.867351769 seconds)
    (72/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 5.711122427 seconds)
    (73/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 10.525291043 seconds)
    (74/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 5.809891749 seconds)
    (75/341) benchmarking ("collect", "all", Float32, false)...
    done (took 5.714666422 seconds)
    (76/341) benchmarking ("map", identity, BigInt, true)...
    done (took 6.087985901 seconds)
    (77/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 5.735820172 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 5.959971515 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 6.237647476 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 5.982087602 seconds)
    (81/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 5.806573832 seconds)
    (82/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 6.401908788 seconds)
    (83/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 5.744773039 seconds)
    (84/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 10.631288136 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 7.389320501 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 6.523672406 seconds)
    (87/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 5.768243768 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 5.633047532 seconds)
    (89/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 7.073416233 seconds)
    (90/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 6.040256509 seconds)
    (91/341) benchmarking ("sort", Float64, false)...
    done (took 9.314452387 seconds)
    (92/341) benchmarking ("sort", BigInt, false)...
    done (took 10.636432723 seconds)
    (93/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 10.629896796 seconds)
    (94/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 5.786918575 seconds)
    (95/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 10.629771597 seconds)
    (96/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 7.649157758 seconds)
    (97/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 10.639079237 seconds)
    (98/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 6.031115746 seconds)
    (99/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 10.524853166 seconds)
    (100/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 10.522094586 seconds)
    (101/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 5.637199587 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 5.950884711 seconds)
    (103/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 6.021753865 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 5.750554804 seconds)
    (105/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 5.847487794 seconds)
    (106/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 5.804231145 seconds)
    (107/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 5.966947326 seconds)
    (108/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 5.850881433 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 5.646629018 seconds)
    (110/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 5.784036481 seconds)
    (111/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 6.527582648 seconds)
    (112/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 6.03423252 seconds)
    (113/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 10.936034621 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 6.635746141 seconds)
    (115/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 5.957203653 seconds)
    (116/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 5.71620372 seconds)
    (117/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 5.711873128 seconds)
    (118/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 5.895895159 seconds)
    (119/341) benchmarking ("collect", "all", Int8, false)...
    done (took 5.705703046 seconds)
    (120/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 6.605054063 seconds)
    (121/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 10.633694555 seconds)
    (122/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 10.630497092 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 5.762948422 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 5.918924959 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 5.896098292 seconds)
    (126/341) benchmarking ("map", identity, Bool, true)...
    done (took 5.762372055 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 5.87915991 seconds)
    (128/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 5.717417023 seconds)
    (129/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 5.886355008 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 6.782035649 seconds)
    (131/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 5.909254926 seconds)
    (132/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 10.628564718 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 5.582564957 seconds)
    (134/341) benchmarking ("map", abs, Float32, true)...
    done (took 5.805758843 seconds)
    (135/341) benchmarking ("map", identity, Float64, true)...
    done (took 5.918783288 seconds)
    (136/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 5.72658903 seconds)
    (137/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 10.632651618 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 5.725328221 seconds)
    (139/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 5.782576083 seconds)
    (140/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 6.047458202 seconds)
    (141/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 5.736930439 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 5.884607706 seconds)
    (143/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 5.93338649 seconds)
    (144/341) benchmarking ("perf_countequals", "Bool")...
    done (took 5.874556715 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 5.852605059 seconds)
    (146/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 6.717704297 seconds)
    (147/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 6.840863244 seconds)
    (148/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 5.72926817 seconds)
    (149/341) benchmarking ("sort", Float32, false)...
    done (took 9.188369243 seconds)
    (150/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 6.00896171 seconds)
    (151/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 5.919793851 seconds)
    (152/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 10.628125071 seconds)
    (153/341) benchmarking ("map", identity, Float32, false)...
    done (took 5.719237295 seconds)
    (154/341) benchmarking ("map", identity, Int64, false)...
    done (took 5.533850449 seconds)
    (155/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 6.025525073 seconds)
    (156/341) benchmarking ("perf_sum", Int64, true)...
    done (took 5.648000031 seconds)
    (157/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 5.54919155 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 5.72359319 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 6.022906625 seconds)
    (160/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 12.074212933 seconds)
    (161/341) benchmarking ("sort", Int64, false)...
    done (took 9.409135469 seconds)
    (162/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 6.63251883 seconds)
    (163/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 6.513198204 seconds)
    (164/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 5.842370774 seconds)
    (165/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 11.697472035 seconds)
    (166/341) benchmarking ("map", abs, Float32, false)...
    done (took 5.860585837 seconds)
    (167/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 5.661644696 seconds)
    (168/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 5.852774568 seconds)
    (169/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 5.920579171 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 10.737940431 seconds)
    (171/341) benchmarking ("map", abs, Float64, true)...
    done (took 5.948642437 seconds)
    (172/341) benchmarking ("perf_sum", Float64, true)...
    done (took 5.728368349 seconds)
    (173/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 10.629140317 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 6.598197759 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 6.546643309 seconds)
    (176/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 6.484711047 seconds)
    (177/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 10.636119248 seconds)
    (178/341) benchmarking ("map", abs, Int64, true)...
    done (took 5.909590002 seconds)
    (179/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 5.751353374 seconds)
    (180/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 5.959184965 seconds)
    (181/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 10.621442141 seconds)
    (182/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 9.610295076 seconds)
    (183/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 5.847383706 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 5.733391248 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 6.017564544 seconds)
    (186/341) benchmarking ("collect", "all", Bool, true)...
    done (took 5.762764976 seconds)
    (187/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 6.000587733 seconds)
    (188/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 5.825915544 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 5.650189476 seconds)
    (190/341) benchmarking ("map", abs, Bool, true)...
    done (took 5.764504121 seconds)
    (191/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 5.973107621 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 10.740610856 seconds)
    (193/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 11.206285199 seconds)
    (194/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 6.164881558 seconds)
    (195/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 5.788749008 seconds)
    (196/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 10.630089783 seconds)
    (197/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 6.037717655 seconds)
    (198/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 10.637942086 seconds)
    (199/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 10.632860736 seconds)
    (200/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 6.1072756 seconds)
    (201/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 6.528294179 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 10.642958498 seconds)
    (203/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 11.032898663 seconds)
    (204/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 10.742149401 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 5.956399273 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 5.833645599 seconds)
    (207/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 5.718459424 seconds)
    (208/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 5.688587344 seconds)
    (209/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 5.771561687 seconds)
    (210/341) benchmarking ("map", identity, Int8, true)...
    done (took 5.788017794 seconds)
    (211/341) benchmarking ("sort", BigFloat, false)...
    done (took 10.649675446 seconds)
    (212/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 5.747779525 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 5.645554817 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 10.63048739 seconds)
    (215/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 8.103520262 seconds)
    (216/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 10.632000141 seconds)
    (217/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 5.686605425 seconds)
    (218/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 10.740909865 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 5.803630704 seconds)
    (220/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 5.648131857 seconds)
    (221/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 5.633711155 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 5.889416539 seconds)
    (223/341) benchmarking ("perf_sum", Bool, false)...
    done (took 5.649473652 seconds)
    (224/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 5.823067782 seconds)
    (225/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 5.962208753 seconds)
    (226/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 11.46578001 seconds)
    (227/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 6.472690632 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 5.770591123 seconds)
    (229/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 10.690679062 seconds)
    (230/341) benchmarking ("map", abs, BigInt, true)...
    done (took 10.829613836 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 6.06223237 seconds)
    (232/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 5.76110041 seconds)
    (233/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 6.965384042 seconds)
    (234/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 5.804639096 seconds)
    (235/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 5.637898979 seconds)
    (236/341) benchmarking ("map", abs, Int8, true)...
    done (took 5.793945211 seconds)
    (237/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 5.836465413 seconds)
    (238/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 5.999175212 seconds)
    (239/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 5.99846259 seconds)
    (240/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 6.230255227 seconds)
    (241/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 6.415709724 seconds)
    (242/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 6.232398764 seconds)
    (243/341) benchmarking ("perf_countequals", "Float64")...
    done (took 6.021054304 seconds)
    (244/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 6.250871056 seconds)
    (245/341) benchmarking ("map", abs, Int64, false)...
    done (took 5.648178381 seconds)
    (246/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 5.959830519 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 5.870076069 seconds)
    (248/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 5.64711549 seconds)
    (249/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 7.090023709 seconds)
    (250/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 5.655601283 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 7.089954538 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 6.353382705 seconds)
    (253/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 5.754310499 seconds)
    (254/341) benchmarking ("perf_sum", Int8, false)...
    done (took 5.646057157 seconds)
    (255/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 6.449243933 seconds)
    (256/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 10.543554109 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 6.570819868 seconds)
    (258/341) benchmarking ("collect", "all", Float64, false)...
    done (took 5.753548865 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 5.651923802 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 5.713325758 seconds)
    (261/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 7.029194681 seconds)
    (262/341) benchmarking ("map", identity, Bool, false)...
    done (took 5.723311713 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 6.359313344 seconds)
    (264/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 5.657901008 seconds)
    (265/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 6.053004575 seconds)
    (266/341) benchmarking ("collect", "all", Int8, true)...
    done (took 5.790836459 seconds)
    (267/341) benchmarking ("map", identity, BigInt, false)...
    done (took 5.871213465 seconds)
    (268/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 6.046093958 seconds)
    (269/341) benchmarking ("collect", "all", Float64, true)...
    done (took 5.809887944 seconds)
    (270/341) benchmarking ("map", abs, Bool, false)...
    done (took 5.720842839 seconds)
    (271/341) benchmarking ("map", abs, Float64, false)...
    done (took 5.744043973 seconds)
    (272/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 6.482302616 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 6.663749447 seconds)
    (274/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 5.735890685 seconds)
    (275/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 10.646578706 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 10.680030572 seconds)
    (277/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 8.287623997 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 5.673063661 seconds)
    (279/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 5.750702161 seconds)
    (280/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 10.580200629 seconds)
    (281/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 5.593081662 seconds)
    (282/341) benchmarking ("perf_sum", Float64, false)...
    done (took 5.718526871 seconds)
    (283/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 5.54675584 seconds)
    (284/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 5.744741666 seconds)
    (285/341) benchmarking ("perf_sum", Int8, true)...
    done (took 5.64890357 seconds)
    (286/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 5.858832247 seconds)
    (287/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 5.835191902 seconds)
    (288/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 5.779733714 seconds)
    (289/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 5.650127793 seconds)
    (290/341) benchmarking ("collect", "all", Float32, true)...
    done (took 5.833191739 seconds)
    (291/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 6.34852593 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 6.652335165 seconds)
    (293/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 5.793185001 seconds)
    (294/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 5.660569308 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 6.414482915 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 10.653325524 seconds)
    (297/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 5.858446756 seconds)
    (298/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 5.854809257 seconds)
    (299/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 5.660390924 seconds)
    (300/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 10.633982838 seconds)
    (301/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 5.727898566 seconds)
    (302/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 5.695483485 seconds)
    (303/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 5.886624621 seconds)
    (304/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 10.6381089 seconds)
    (305/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 6.409248942 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 5.896078681 seconds)
    (307/341) benchmarking ("map", identity, Float32, true)...
    done (took 5.841718087 seconds)
    (308/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 6.032889127 seconds)
    (309/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 5.638189207 seconds)
    (310/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 7.077523005 seconds)
    (311/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 5.786247977 seconds)
    (312/341) benchmarking ("sort", Int8, false)...
    done (took 8.560192073 seconds)
    (313/341) benchmarking ("map", abs, BigInt, false)...
    done (took 12.080383776 seconds)
    (314/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 6.10081957 seconds)
    (315/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 5.656621618 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 6.56409601 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 10.642554177 seconds)
    (318/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 5.722360166 seconds)
    (319/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 6.245332058 seconds)
    (320/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 5.663566368 seconds)
    (321/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 10.990004046 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 6.845140265 seconds)
    (323/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 6.464615264 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 7.533759933 seconds)
    (325/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 5.685401903 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 6.037059563 seconds)
    (327/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 11.42633713 seconds)
    (328/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 5.83359436 seconds)
    (329/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 5.974848638 seconds)
    (330/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 12.048512348 seconds)
    (331/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 10.774460641 seconds)
    (332/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 7.754532727 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 5.948089747 seconds)
    (334/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 5.856953093 seconds)
    (335/341) benchmarking ("map", identity, Int64, true)...
    done (took 5.935541527 seconds)
    (336/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 6.153084402 seconds)
    (337/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 10.649218565 seconds)
    (338/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 6.374620086 seconds)
    (339/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 5.720318718 seconds)
    (340/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 6.040902214 seconds)
    (341/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 5.935128605 seconds)
  done (took 2371.722982071 seconds)
done (took 2377.363075028 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 5.665298364 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 5.542337732 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 6.156721709 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 5.656638827 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 5.544390715 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 5.649424968 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 6.162453464 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 5.570697387 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 5.663104147 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 6.162483669 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 5.44957892 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 5.647958836 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 5.667465035 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 5.481514832 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 5.657650119 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 5.55384827 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 5.548217021 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 5.563993234 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 5.574961977 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 5.657520636 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 5.801071557 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 5.443843964 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 5.656023516 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 5.7081754 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 5.646759072 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 5.659636106 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 5.669281496 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 5.799844617 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 5.799766658 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 5.648451402 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 5.656062842 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 6.010116326 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 5.600487439 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 5.552974733 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 5.655967669 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 5.454915237 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 5.550635932 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 5.671438336 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 5.664171459 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 5.65600468 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 5.646309177 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 5.656736887 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 5.650541123 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 5.445044458 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 5.547406586 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 5.54318172 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 5.543796064 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 5.66834551 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 5.559445263 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 5.881938845 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 5.712590094 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 5.665325258 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 5.808425355 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 5.551380239 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 5.652344603 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 5.663508049 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 5.80266175 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 5.655297523 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 5.656681659 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 5.984553457 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 5.851842981 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 5.660625471 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 5.886598099 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 5.720394718 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 5.662748368 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 5.56575619 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 5.545000467 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 5.668205766 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 6.001434847 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 6.097441989 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 5.681727382 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 5.566293426 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 5.550304845 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 5.650001198 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 5.558615501 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 5.953461129 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 5.675468254 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 6.230143354 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 5.569872099 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 5.663846772 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 5.651947896 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 5.650895684 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 5.652507493 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 5.560363768 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 5.666630192 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 5.647021104 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 5.563668673 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 5.556968945 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 5.452672279 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 5.896547682 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 5.492224882 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 6.150595925 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 5.554668097 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 5.667552329 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 5.665129522 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 6.2288403 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 5.680393512 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 5.676759367 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 5.653060152 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 6.009268877 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 5.592617528 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 5.669626547 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 5.659835126 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 5.661496215 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 5.764430967 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 5.668216353 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 5.670624554 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 5.649185613 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 5.468797477 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 5.657004878 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 5.651895719 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 5.566460474 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 5.669355958 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 5.579834073 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 5.667255543 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 5.650665153 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 5.55518823 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 5.656001236 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 5.666413827 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 5.561520341 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 5.554213703 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 5.660527734 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 5.545959373 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 5.703552279 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 5.667385354 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 5.667014212 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 5.763697326 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 5.448374334 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 5.776912322 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 5.670999123 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 5.659630116 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 5.649802807 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 5.988184581 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 5.701782534 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 5.670347268 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 5.657445061 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 5.571036588 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 5.562818885 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 5.670335375 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 5.654214699 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 5.570833071 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 5.549552487 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 5.60901241 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 5.647276652 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 5.675601579 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 5.705154949 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 5.56137181 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 5.653047666 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 5.670608587 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 5.691618558 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 5.671963778 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 5.663474929 seconds)
done (took 868.196346462 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 5.697758227 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 10.646451493 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 5.723652409 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 5.651444641 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 5.714560556 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 5.596787463 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 5.647957088 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 5.654063427 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 5.646094377 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 5.954628495 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 5.64878792 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 5.653200682 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 10.64934274 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 5.546612323 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 5.594344464 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 5.652253189 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 5.654397106 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 5.887062649 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 5.648321472 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 5.718565736 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 10.646692688 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 5.543153152 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 5.647734292 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.091894269 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 10.646257376 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 10.654412261 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 5.71281731 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 5.64922352 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 5.892272224 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 10.650384681 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 10.648889123 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 5.916586077 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 5.715294253 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 5.667831359 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 5.657064734 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 5.655935928 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 5.717765134 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 5.658859024 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 5.706680352 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 5.696608532 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 5.726132347 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.68059479 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 10.651878029 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 10.648568365 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 5.547101694 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 5.64858017 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 5.855902923 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.685194325 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 10.650511721 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 5.653933998 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 5.989358447 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 5.656254857 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 5.660068438 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 5.54704638 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 5.655857272 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 5.680850209 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 5.654083472 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 5.650357035 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 5.600929235 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 5.963624031 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 5.700148595 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 5.946820866 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 5.951072342 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 5.651272678 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 10.65620493 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 5.654768083 seconds)
  done (took 436.709943084 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 5.718058442 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 5.740754144 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 5.717494705 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 5.551834192 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 5.597566513 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 5.72705479 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 5.661318516 seconds)
  done (took 45.295024549 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 5.660538573 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 5.651190286 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 5.684793224 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 5.674208977 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 5.651053496 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 5.79298035 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 5.666178405 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 5.657013194 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 5.687905772 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 5.650728292 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 5.990558211 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 5.573010496 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 5.657311625 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 10.645278122 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 5.663912539 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 5.680262957 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 5.654496702 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 5.665325512 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 5.748840519 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 5.729461744 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 5.656196555 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 5.656986157 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 5.681510972 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 5.668273865 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 5.548353015 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 5.652353441 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 5.651414774 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 5.659710484 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 5.657799149 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 5.651743636 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 5.651186814 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 5.664411765 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 5.651898204 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 10.650289956 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 5.547844389 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 5.651305249 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 5.656221251 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 5.549487068 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 5.658549901 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 10.651823718 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 5.650997264 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 5.651608499 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 5.652511098 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 5.65220098 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 5.660935863 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 5.68712328 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 5.652062655 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 5.652593656 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 5.658231498 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 5.654166252 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 5.679568174 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 5.548963102 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 5.652441653 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 5.658576464 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 5.694655315 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 5.654613101 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 5.654720399 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 5.651508498 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 5.665286601 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 5.649786475 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 5.657718712 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 5.736768083 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 5.676381257 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 5.652193366 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 5.678065316 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 5.693619028 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 5.653136901 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 5.653492838 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 5.654660337 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 5.685010719 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 5.652607636 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 5.67757674 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 5.549966502 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 5.756749264 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 5.652988386 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 5.79734201 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 5.681631132 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 5.657442209 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 5.655989771 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 10.652918486 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 5.672076636 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 5.65400074 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 5.657184563 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 5.661724768 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 5.660105634 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 5.65506108 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 5.658837812 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 5.660739576 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 5.662197532 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 5.659918351 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 5.70225995 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 5.655799757 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 5.654786422 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 5.750764474 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 5.656181099 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 5.75247567 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 5.576545732 seconds)
  done (took 575.09715743 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 5.65989092 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 5.656144602 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 5.674657413 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 5.55355838 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 5.655380904 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 5.561637576 seconds)
  done (took 39.24314442 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 5.668260598 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 5.658531076 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 5.653727613 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 5.65523065 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 5.656050929 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 5.654565603 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 5.67023317 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 5.668071151 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 5.670064523 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 5.654341443 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 5.655895848 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 5.65723517 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 5.653817829 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 5.660579338 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 5.657163602 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 5.65612002 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 5.662940957 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 5.655538648 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 5.656318144 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 5.65624485 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.910841459 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 5.657177117 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 5.656026557 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 5.660042145 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 5.665934873 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 5.656047253 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 5.664322427 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 5.662221459 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 5.65593222 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 5.66789375 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 5.665865652 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 5.553344361 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 5.660125656 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 5.671631962 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 5.661253817 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 5.661161472 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 5.556641196 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 5.667544758 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 5.67085822 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 5.661891559 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 5.658257398 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 5.656706017 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 5.657197977 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 5.659789753 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 5.665549488 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 5.665370483 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 5.666636877 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 5.667563828 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 5.667805422 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 5.66350628 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 5.658026594 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 5.658248048 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 5.657682556 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 5.66612527 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 5.767365483 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 5.665108233 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 5.666511277 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 5.664506432 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 5.657245267 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 5.673090024 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 5.663235493 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 5.665699008 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 5.659597369 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 5.665001807 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 5.664839957 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 5.665631844 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 5.661188717 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 5.662817273 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 5.65847358 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 5.553632405 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 5.671337159 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 5.657779131 seconds)
  done (took 414.267716671 seconds)
done (took 1516.190109618 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 10.709599506 seconds)
  done (took 16.302208288 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 10.741496383 seconds)
  done (took 16.311016945 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 13.907770215 seconds)
  done (took 19.500954526 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 10.684538769 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 10.659652348 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 10.675201429 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 10.661659758 seconds)
  done (took 48.29446637 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 10.862156189 seconds)
  done (took 16.462415373 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 10.675728654 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 10.655804914 seconds)
  done (took 26.991912694 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 10.821736183 seconds)
  done (took 16.408888112 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 10.988941851 seconds)
  done (took 16.61768902 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 10.56354143 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 10.663074025 seconds)
  done (took 26.836611982 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 10.765448614 seconds)
  done (took 16.355887389 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 11.467826277 seconds)
  done (took 17.136253659 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 10.663709167 seconds)
  done (took 16.275841178 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 10.671712254 seconds)
  done (took 16.264608278 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 11.517706781 seconds)
  done (took 17.006287891 seconds)
done (took 292.359603202 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 10.66813348 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 10.657641817 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 10.670245955 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 10.657115354 seconds)
  done (took 48.244237654 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 5.708145629 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 5.698048885 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 5.696726463 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 5.692795969 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 5.685333866 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 5.686012623 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 5.702043577 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 5.69642941 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 5.691577317 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 5.694043614 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 5.708315077 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 5.6866965 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 5.697425225 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 5.698309769 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 5.700964979 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 5.696920047 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 5.692989336 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 5.696234338 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 5.686577327 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 5.698235851 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 5.697455834 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 5.697647068 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 5.661427097 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 5.663950931 seconds)
  done (took 142.231500338 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 5.84040736 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 5.725463698 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 5.815724632 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 5.707835749 seconds)
  done (took 28.688817606 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 5.670476281 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 5.727034145 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 5.713024061 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 5.705640057 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 5.719471185 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 5.771214574 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 5.716440906 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 5.791193157 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 5.79566945 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 5.79076119 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 5.678689762 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 5.679929339 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 5.691617647 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 5.706908384 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 5.768830307 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 5.662185871 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 5.66180487 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 5.769967136 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 5.619734555 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 5.817868205 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 5.662695749 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 5.713269852 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 5.712608703 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 5.719792404 seconds)
  done (took 142.864890539 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 5.665683676 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 5.673605503 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 5.673822258 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 5.669023184 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 5.6577716 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 5.669221796 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 5.67014744 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 5.663200139 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 5.700331505 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 5.666960499 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 5.664466282 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 5.552987937 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 5.66487425 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 5.666901218 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 5.663802638 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 5.675679282 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 5.678041837 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 5.663856873 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 5.66612275 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 5.678488975 seconds)
  done (took 118.878151091 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 10.558033738 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 8.509278154 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 6.008992423 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 5.913150776 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 10.660656567 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 10.666405691 seconds)
  done (took 57.91213545 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 5.67611443 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 5.581581368 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 5.670973682 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 5.688160337 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 5.710809756 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 5.673465914 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 5.726155256 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 5.832501388 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 5.67406124 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 5.732462682 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 5.692002439 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 5.567245487 seconds)
  done (took 73.823152371 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 10.662825896 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 10.662085466 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 10.662878816 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 5.674727342 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 5.679544687 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 5.672252208 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 5.680291584 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 10.663053242 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 5.678453732 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 5.684854164 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 5.672949726 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 5.677834585 seconds)
  done (took 93.56412692 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.875832477 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.893856544 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.879297757 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.133511523 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.003739997 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.64724911 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.940223674 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 8.980318227 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 7.323676839 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.360735228 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.978055118 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.649177915 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.619679185 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.593640261 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.541965983 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.90504106 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.667633029 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.463957074 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.918556774 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.710073757 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.67146927 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 5.669020145 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.679392812 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.957410704 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.987730827 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.677681292 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.881906897 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.680019469 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.664929795 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.891962383 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.211304451 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 5.724395849 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 5.868358893 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 5.931882552 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.011215956 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 10.720330456 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.668192319 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 8.75827019 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.730268296 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.699391085 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.675622979 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 5.676667625 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 10.309579874 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 5.780861839 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 5.939597139 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.673503842 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 10.674451839 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.671029825 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.593895528 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.896409037 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.774379424 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.587810113 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.597559314 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.936695269 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 5.787726977 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.905008032 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.670549195 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 8.747958844 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.739262998 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.829015004 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 10.777801901 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.6685863 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.879417718 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.607215183 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.98593847 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.786911524 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 5.6733493 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.680461587 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 8.378205558 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.905292805 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.752505432 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.798254767 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.376711537 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 5.666035016 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.668728315 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 8.556306961 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.768224054 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 10.662054506 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 6.880224208 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.646692815 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.593112717 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.765960601 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.961458841 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.683291947 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.672122749 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.6724781 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.473376156 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.593842585 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 5.665519647 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.83496079 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.987480342 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 5.674655348 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.670254913 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 5.68928486 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.678637663 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.599566431 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.108438679 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.738099022 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.590428543 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.229167544 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.221230733 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.643164404 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.190239362 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.723664385 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 5.945061198 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.582061426 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 5.969553761 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.802668433 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.910298869 seconds)
    (110/608) benchmarking "5d"...
    done (took 7.091678733 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.682372239 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 8.11014359 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.748046155 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 5.641379017 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.668808432 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 8.148377806 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 8.758307631 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.783434806 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.677778218 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.669465303 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.595604606 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 5.681994919 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.878838052 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.223368554 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.734024451 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.668612392 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 5.680139734 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.66978865 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.678561849 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.706932707 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.68383544 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.956142879 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 5.739807121 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 5.673922374 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.589639176 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 5.685836489 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.955837752 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 10.03348898 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 5.731304328 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.930561654 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 9.042361103 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.250957876 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 8.240653072 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.63173222 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 5.938983568 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.745301124 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 5.743961863 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 7.379795234 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.702356935 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 5.77562631 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.503215279 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 5.819391744 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.683355296 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.67858144 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 9.846830843 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.093964032 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.066036239 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.71561452 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.670422005 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.643309342 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 8.752618319 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.915614277 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.565122576 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.691697797 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.674641198 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.75457276 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.897297924 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 10.671072126 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.602840985 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 5.925107977 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.915379816 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.96528966 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.877789574 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.695288119 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 5.849150467 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.680328261 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.883320398 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.654778502 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 8.331794121 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.161758275 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.894723775 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 9.147083396 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.533057106 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.239183412 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.855909055 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.051331986 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.694403435 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 6.123539633 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 8.757771673 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.279036611 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 10.706542048 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 8.018641867 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.602980338 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 5.675847081 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.023385374 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.631324198 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.989186228 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 10.835955592 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.507625006 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 4.42268006 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 4.423312889 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.430085676 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.312285865 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.528292433 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.49118808 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.494682101 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.350562968 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.991339732 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 4.468684611 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 4.423850638 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.422800442 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.662392631 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.182080303 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.379110689 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.422167825 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.498992613 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.123599239 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 4.979767316 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 4.428836916 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.428548738 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 7.037410768 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.429117072 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 8.326680021 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 9.435148578 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.142751434 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.452720823 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.602622752 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.098671259 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.718588168 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.497393625 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.499859244 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.430816918 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.539038246 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 7.126070694 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.434773036 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 7.125716212 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.708141468 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 7.809487665 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 4.981631464 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.482663743 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.56312847 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 4.44717398 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 4.432424278 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.900386737 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 4.451257339 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.428323617 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.629036359 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 4.944014015 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.661986709 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 8.486176757 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.51173863 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.42729548 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.704394928 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.436100176 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 8.97683229 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 5.109319394 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.419720221 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.43349092 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.653088926 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 5.111152627 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.429325715 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 8.319514141 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.439627222 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.642437211 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.63044135 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.698148974 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.742167799 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.879825723 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.35305853 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.432668425 seconds)
    (271/608) benchmarking "4d"...
    done (took 5.454561093 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.669269343 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.426512683 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.464509962 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.729398348 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.428652909 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 4.860328182 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 4.715668165 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.724467645 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.881871523 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 4.712854256 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 4.491251665 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 4.442026549 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 5.070559647 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.561400842 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.467729956 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.546291191 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 6.35917991 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.138088166 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 4.72300718 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 4.445653142 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.698645711 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.405535064 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.763795174 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.720472277 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.611340896 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.447822906 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.476472012 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.372630409 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.531876169 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.431418097 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.511258607 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.55001039 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.432809793 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.878990985 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.471988013 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.474868575 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.432218574 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.904265216 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.449735911 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.432719668 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.006228806 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.456836591 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.551037046 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.500323823 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.155077459 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.007636453 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.536208939 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.256736421 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.029046903 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.700073642 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.483902478 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.892744298 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.470522847 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 4.840385332 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.430799888 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.641204809 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.43415008 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.891851005 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.4802804 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.705427463 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.38685958 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 4.640854645 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.632292546 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 5.458769032 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.442356936 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.356449274 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.528869632 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 5.303960724 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.401003427 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.433409811 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.061750541 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.795465306 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.542754002 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.834982544 seconds)
    (346/608) benchmarking "3d"...
    done (took 5.25099804 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 4.440246857 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.672349057 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.836013837 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.931971633 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.468078862 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.435940538 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.678443606 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.560513494 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.749781799 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 5.628342192 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.442450899 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.469866145 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.643740662 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.558211632 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.350490562 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 4.910962714 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.980850255 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 7.133366078 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 4.44942257 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 4.642301145 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.674955335 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.618822462 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.482271048 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.501628646 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 4.839685205 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.700316072 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.499400714 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.360274573 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.434336339 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.831487743 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.758057058 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 4.530003465 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.67113664 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 4.872396021 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 8.777608296 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 8.99375587 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 8.86609832 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.797968147 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 5.723799181 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.772861085 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.648595082 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.808842572 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.691010655 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.999572623 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 4.843008141 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.649287836 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.529892811 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.708146597 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.308388357 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 7.144522423 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.680111203 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 4.438391199 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.361067757 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 4.651428124 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 9.500089574 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 8.627232503 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.866388478 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.677319051 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.611620822 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.79529741 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.914454136 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.523444973 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.469412425 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.36703029 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 4.461325297 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.458940813 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.435148274 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 4.912923566 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.72038159 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.447821401 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.361797595 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 5.120580561 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.365250217 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.646249499 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.531168448 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 4.474869911 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.963673486 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.622230459 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 4.536231167 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.741669139 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.575252232 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.483570906 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.362542561 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.163515354 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 6.382849785 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.442400761 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 4.860196825 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.451768413 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 4.444592465 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.637566185 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.364257587 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.481542638 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.439959758 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.643248264 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.969624144 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.712326607 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.559139807 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.682850669 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.741368166 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.226307273 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.457174067 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 4.709128976 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.368954137 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.018300722 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.115583534 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.484396337 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.506356435 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.436778242 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.444711362 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 4.706706414 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.686641711 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 9.561746474 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.001132154 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.473707575 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 4.466788308 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.690194505 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.527288843 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 4.441151994 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.441382452 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 8.894644606 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 4.675447555 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.439632063 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.418247271 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.649589311 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.525245428 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 9.637846772 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.512859902 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 4.953958372 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.441691485 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.233366186 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.539834955 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.393599422 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.381123193 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.131037051 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.504265258 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.438310854 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.715819879 seconds)
    (484/608) benchmarking "6d"...
    done (took 6.077465878 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.641342759 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.838408581 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 5.313057683 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.547018718 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.481443972 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 4.443476221 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 9.492519598 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 4.724789801 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 4.741491426 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.441434958 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.715308672 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.48183701 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.450594109 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.051854267 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.402963653 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 9.437548089 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.180459445 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 5.335040657 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 7.173210027 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.837373544 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 9.554375299 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.50692369 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.444399753 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 6.366462166 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.44839832 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.446179051 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.440854444 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 9.473339802 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.723596298 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.668579851 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.532303814 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.442025113 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 4.447074738 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.443129211 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.652819345 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.955549469 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.459120915 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 7.152782813 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.648912713 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.452611341 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 4.922358665 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 5.010825353 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.612749386 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 4.482785079 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.542817279 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.684049785 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.917725233 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.550604112 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.425927277 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.773119852 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 4.426904359 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.719985551 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 4.717044357 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 4.450188509 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 4.654600472 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.002490707 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 4.733127646 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.697278839 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.750791054 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.509223004 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.538041478 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 5.349285085 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.448342498 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.367939278 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.73065135 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.49767165 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.443199968 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.451770607 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 8.933492983 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.11620574 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.929997776 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.599916917 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.67852918 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.262069734 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 7.199394763 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 4.449083721 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 6.364646273 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.441378746 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 4.467791725 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 4.448213222 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.368787828 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.181205256 seconds)
    (567/608) benchmarking "2d"...
    done (took 5.162237847 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.66349763 seconds)
    (569/608) benchmarking "7d"...
    done (took 4.755178894 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.369671163 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.650111082 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.011557315 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 6.365382084 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.407211495 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.415610446 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.7123125 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.370000731 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.457500414 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.370857287 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.641001114 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.121233627 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.712896681 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.443575639 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.370627718 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.4482882 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 9.552787409 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 9.452650398 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.536113016 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 4.445539453 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.562673841 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.727931961 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.735748588 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 4.547841674 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.047337078 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.085698872 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.390754129 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 4.487945324 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.046902863 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 5.013803137 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.637700707 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.57115433 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.096604739 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.396851656 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.362633779 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.464307163 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 5.62475956 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.455340475 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.343194852 seconds)
  done (took 3876.736164337 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 9.449075462 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 9.534151098 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 9.517630795 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 9.529870823 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 9.532271143 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 9.494977989 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 9.490646485 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 9.52400111 seconds)
  done (took 80.459890517 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 9.445760223 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.708536635 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 4.493234931 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 9.450668351 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 9.453564119 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 4.453465138 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 4.634191185 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.480326504 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 9.539830788 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.003569176 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 9.869509086 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 4.868383998 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 9.858147902 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 10.247583042 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 4.885082888 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 5.184946959 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 9.901423052 seconds)
  done (took 126.890041915 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 9.89846785 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 13.562289058 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 9.875184568 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 12.320133861 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 9.921806643 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 9.991887933 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 9.76682046 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 9.873098348 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 10.007115468 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.168779941 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 9.874097479 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 9.882422871 seconds)
  done (took 129.987922229 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 4.868548077 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 4.86915562 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 4.864713743 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 4.869995986 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 4.878823296 seconds)
  done (took 29.153365885 seconds)
done (took 4955.097795313 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 5.283276317 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 4.957155325 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 4.94192737 seconds)
  done (took 14.69831553 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 5.011403305 seconds)
    (2/4) benchmarking "Float32"...
    done (took 5.059112246 seconds)
    (3/4) benchmarking "Float64"...
    done (took 5.174234803 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 5.255500892 seconds)
  done (took 25.308634957 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 5.158849541 seconds)
    (2/2) benchmarking "Float64"...
    done (took 5.240107938 seconds)
  done (took 15.205183836 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 5.290150479 seconds)
  (6/15) benchmarking "18129"...
  done (took 9.78464888 seconds)
  (7/15) benchmarking "20517"...
  done (took 5.26416101 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 9.867446152 seconds)
    (2/3) benchmarking "Float64"...
    done (took 9.872103661 seconds)
    (3/3) benchmarking "Float16"...
    done (took 9.874337995 seconds)
  done (took 34.420432078 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 4.872799509 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 4.871164024 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 4.868718481 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 4.877857484 seconds)
  done (took 24.298232541 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 9.870499141 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 6.659094202 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 9.87184164 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 4.892013351 seconds)
  done (took 36.095087554 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 5.089996686 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.91929378 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 5.642956426 seconds)
  done (took 21.460404192 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 5.390908402 seconds)
    (2/3) benchmarking "Int"...
    done (took 5.313828184 seconds)
    (3/3) benchmarking "Float64"...
    done (took 5.485872007 seconds)
  done (took 20.992252269 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 6.017238951 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 5.705519665 seconds)
  done (took 16.521950118 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 5.015040468 seconds)
  done (took 9.828333962 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 5.695337407 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 5.180912412 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 5.338961825 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 5.370924065 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 5.450901438 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 5.081001608 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 5.197880945 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 5.150733304 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 5.304040936 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 5.162625972 seconds)
  done (took 57.745577948 seconds)
done (took 306.996452878 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.269569374 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 10.230352603 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 9.949526091 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.086543108 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 9.94654891 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 9.946196119 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 10.132206584 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.17052335 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.906923576 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.895351482 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.193272227 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 9.94613229 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 10.096367947 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 10.216776528 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 10.083959085 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 10.11013332 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 9.940974821 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.289557538 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.692789076 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.840246541 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 10.146261397 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.880591491 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.032264515 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.89346433 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 9.843527486 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 9.893761155 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.360219556 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 10.223664021 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.837578048 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.367919222 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 9.896749825 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.981440714 seconds)
  done (took 266.103294139 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 9.839099589 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 9.874880462 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 9.871068593 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 9.872248268 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 8.282912811 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 9.874283248 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 9.879182911 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 9.877374965 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 8.150712467 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 8.12629914 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 9.876242699 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 8.159344492 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 9.875782832 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 9.880363714 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 9.879046102 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 9.774425853 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 8.253120843 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 9.869999006 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 9.876064905 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 9.877754354 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 9.878889339 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 8.03813118 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 9.874679999 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 8.044568109 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 8.248851571 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 9.877319826 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 9.87614661 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 9.875535476 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 9.875712655 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 9.878005369 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 9.875741424 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 9.872998603 seconds)
  done (took 306.995096406 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 9.78720195 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 9.885117248 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 9.873729413 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 9.882414636 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 9.668819463 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 9.875750902 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 9.878260206 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 9.882998096 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 9.535552 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 9.538761664 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 9.878783888 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 9.87556115 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 9.879105148 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 9.88238211 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 9.878520205 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 9.772526356 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 9.871733021 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 9.830085687 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 9.872936234 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 9.876660466 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 9.984832639 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 9.663416679 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 9.87276416 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 9.672401951 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 9.877648337 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 9.872771893 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 9.87089163 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 9.867248575 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 9.769132518 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 9.875217172 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 9.773806968 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 9.875953522 seconds)
  done (took 319.214624452 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 5.108526089 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 4.878540926 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 4.877812828 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 5.780503119 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 4.876925981 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 4.882507887 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 5.782203884 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 5.11220835 seconds)
  done (took 46.115366011 seconds)
done (took 943.244805689 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 6.283886191 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 5.656161052 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 5.015015218 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 4.902123369 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 6.171986242 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 4.945266374 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 4.896225247 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 4.964026825 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 5.536513341 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 4.971252155 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 5.286110546 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 4.912362572 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 5.593373521 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 4.925140934 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 5.021408057 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 4.961445901 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 5.24577354 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 5.508678598 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 5.038240239 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 5.47524224 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 4.993574005 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 5.821099606 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 4.978672872 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 5.583785914 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 5.290716508 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 5.833112893 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 5.914011673 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 5.247866671 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 4.900312184 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 5.125770177 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 6.663065172 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 6.22863798 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 4.908660265 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 4.898271665 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 4.957419475 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 4.942708626 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 6.114514706 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 4.90735846 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 5.009640886 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 5.611088214 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 5.585103188 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 5.422016924 seconds)
  done (took 229.062232231 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 4.990477274 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 4.990000056 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 4.993349292 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 5.002006272 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 4.99881305 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 4.988462303 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 4.988915616 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 4.99290036 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 4.98971572 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 4.991140623 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 4.990393022 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 4.994895477 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 4.991124358 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 5.01086835 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 4.988499645 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 4.999243558 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 4.992030589 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 4.995593259 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 4.989150964 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 4.885664069 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 4.990844095 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 4.999638098 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 4.874133947 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 4.986242247 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 4.991371331 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 4.991527541 seconds)
  done (took 134.420410341 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 4.888591499 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 5.032115934 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 5.167236176 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 4.914238651 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 4.880672911 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 4.885548738 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 4.906490884 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 4.894941446 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 4.886899071 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 4.886029629 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 5.001948333 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 4.88717075 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 4.89947862 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 5.168095196 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.913405851 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 4.887413263 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 4.882358344 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 4.883593617 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 5.051221341 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.900295845 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 4.917006082 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 4.888060237 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 4.907406314 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 4.898568176 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 4.891240974 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.891145877 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 4.885213633 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 5.291756562 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.897576783 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 4.997589088 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 4.933563673 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 4.918009139 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 5.130000807 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 5.172212264 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 4.949929186 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 4.89072465 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 4.882792315 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 5.045532624 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 4.894876 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 4.883972416 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 4.912006696 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.685662657 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 5.171764151 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 5.399378751 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.900399239 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 4.886016064 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 5.288026816 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 5.048075857 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 4.928463602 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 4.801367098 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 5.168534812 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.914502019 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 4.884607358 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 4.887497006 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 4.825117275 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 4.902695677 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 4.879769914 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 5.029838466 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 4.793612835 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 4.811808585 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 4.892992314 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 4.890312731 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.04883946 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.892288607 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 5.037479171 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 4.893119751 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 4.88253924 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.882634276 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 5.174513432 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.914547015 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 5.380139818 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 5.004885883 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 4.886015082 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 5.003104754 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 5.046229807 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 5.321543982 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.896581579 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.053324735 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 5.355905886 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 4.922332111 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 4.797154037 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 5.276207888 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 5.035230462 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 4.89617306 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 4.885244087 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 4.891699729 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 4.883870114 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 4.926267011 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 4.91132558 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 5.318262493 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.392374628 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 5.149009306 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 4.924519564 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 4.898953567 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.887207308 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 5.130320642 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 4.895305602 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 4.883588587 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 5.171840007 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.516289153 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 4.903358596 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 4.886484689 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 5.369586792 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.902001048 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 4.810742114 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 4.898785229 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 5.170652642 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.912923817 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 4.925641057 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 4.883734904 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 4.899400784 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.885537846 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 4.913004369 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 4.894058346 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 4.779719539 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 5.363438194 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 5.054476275 seconds)
  done (took 587.423589046 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 9.891466545 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 9.881365624 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 9.890203833 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 9.884862809 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 9.883675826 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 4.882549746 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 9.883896619 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 9.781768323 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 4.885704545 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 9.787136334 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 9.881058537 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 9.887913597 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 9.883820272 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 9.784550637 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.927597545 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 4.884238248 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 6.15041582 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 9.882987919 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 9.780739176 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 9.887631717 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 6.326248255 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 9.893389323 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 9.889361646 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 9.892058973 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 9.879996171 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 9.888475635 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 9.890349765 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 9.926268437 seconds)
  done (took 253.907642691 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 4.781870175 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 4.837048092 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 4.903459024 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 4.826485058 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 4.898975738 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 4.887468149 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 4.905369053 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 4.902301082 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 4.896574813 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 4.885237916 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 4.883880704 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 4.918996738 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 4.890188776 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 4.855534025 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 4.924221567 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 4.810908901 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 4.863544335 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 4.89622113 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 4.887949162 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 4.889944124 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 4.932475999 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 4.701631545 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 4.91343211 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 4.837689864 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 4.904890455 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 4.933675373 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 4.910564273 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 4.888381263 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 4.889826817 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 4.978881781 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 4.913955975 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 4.916281101 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 4.926415869 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 4.906074855 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 4.986210537 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 4.979849248 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 4.971102849 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 4.915441606 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 4.794661301 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 4.894535223 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 4.780635147 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 4.892576729 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 4.936110552 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 4.902707317 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 4.790746384 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 4.971869336 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 4.697976724 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 4.887259426 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 4.915958345 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 4.886335453 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 4.898028024 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 4.910156021 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 4.92038988 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.884915991 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 4.937818022 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 4.813273536 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 4.909872314 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 5.009809373 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 4.892438587 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 4.960837054 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 4.905596844 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 4.979819008 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 4.910578494 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 4.90169783 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 4.889344303 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 4.891728725 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 4.936272334 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 4.932495086 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 4.847590758 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 4.898453176 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 4.759557632 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 4.94545065 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 4.913483973 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 4.897282428 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 4.887004294 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 4.942831327 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 4.876783898 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 4.944491808 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 4.953459051 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 4.928582635 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 4.797394491 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 4.89537441 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 4.893238712 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 4.918906388 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 4.900160276 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 4.977172318 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 4.989055934 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 4.895724654 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 4.90285987 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 4.891233722 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 4.890040719 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 4.910108666 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 4.948918612 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 4.928928954 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 4.975013798 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 4.923101157 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 4.934652595 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 4.906150431 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 4.90676583 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 4.901152389 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.927071961 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 4.794399407 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 4.906145488 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 5.32763339 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 4.927312289 seconds)
  done (took 519.569581575 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 5.254604887 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 4.942040574 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 4.956163362 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 5.175138371 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 5.175082356 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 5.801120599 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 4.943268406 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 4.953202662 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 4.746412113 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 5.059901108 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 5.00389455 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 4.8813087 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 4.932613968 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 4.811306227 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 4.941411339 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 4.84697982 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 4.8638803 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 5.242229302 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 5.043195618 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 6.630922033 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.931854852 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 5.200471853 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 5.219848555 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 5.170383499 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 4.977724914 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 5.249918561 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 5.554170797 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 5.029227976 seconds)
  done (took 148.363545872 seconds)
done (took 1877.554292836 seconds)
SAVING RESULT...
DONE!
