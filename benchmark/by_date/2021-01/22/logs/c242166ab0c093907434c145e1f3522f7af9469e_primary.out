cset: moving following pidspec: 15306
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.818766057 seconds)
loading group "shootout"... done (took 1.183732587 seconds)
loading group "string"... done (took 0.670383667 seconds)
loading group "linalg"... done (took 8.657582535 seconds)
loading group "parallel"... done (took 0.166713947 seconds)
loading group "find"... done (took 2.948035349 seconds)
loading group "tuple"... done (took 2.114172698 seconds)
loading group "union"... done (took 14.909914496 seconds)
loading group "dates"... done (took 1.487999224 seconds)
loading group "micro"... done (took 0.220656954 seconds)
loading group "simd"... done (took 4.831621667 seconds)
loading group "io"... done (took 1.170387056 seconds)
loading group "random"... done (took 9.539561974 seconds)
loading group "problem"... done (took 1.464712585 seconds)
loading group "array"... done (took 24.993774874 seconds)
loading group "misc"... done (took 1.788695913 seconds)
loading group "scalar"... done (took 42.883250603 seconds)
loading group "sort"... done (took 3.282543667 seconds)
loading group "sparse"... done (took 12.515101627 seconds)
loading group "collection"... done (took 18.441227153 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.434856387 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113395342 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.158899471 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.112662606 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.206970672 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.11947758 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.128300224 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08413244 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.827846707 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.152848165 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.11437478 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.414933731 seconds)
done (took 5.230698697 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.182685311 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.243867531 seconds)
    (2/2) benchmarking "String"...
    done (took 0.160529447 seconds)
  done (took 1.528221018 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.088784502 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.059339349 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066691407 seconds)
  done (took 1.340667613 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064927567 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133290908 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065986635 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066206024 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066583563 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.065951757 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065974278 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.06586752 seconds)
  done (took 1.66136196 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073533477 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066681476 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065241232 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.06708114 seconds)
  done (took 1.398406301 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065100269 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119316528 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064633971 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064535826 seconds)
  done (took 1.437074194 seconds)
done (took 8.75240449 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.15768318 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.831180857 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.849793474 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.141224532 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.263292155 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.325137205 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122964668 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.201988138 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.109120929 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075072619 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.141345653 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077427427 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.468724586 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.456066361 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071148441 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175839792 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.63333274 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089173667 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.130425438 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.391840701 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.077665253 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086921706 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.083518006 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.070833764 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.281946185 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154848152 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.65877158 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.093502796 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068289939 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.18811195 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070169538 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077252626 seconds)
  done (took 10.785126162 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.111321654 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110294769 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068576887 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123088938 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093566059 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.069310749 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07491809 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067165224 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.08739421 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122774339 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.0894742 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.11896448 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066310886 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068999693 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.093959252 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.193384663 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082103235 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082578747 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067334737 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.080823434 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.103843473 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077633581 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077193474 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076985688 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.128929887 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.168767501 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096071416 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098097262 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.065580015 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078132878 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114355773 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.124952836 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.0664432 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064839414 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.1213556 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.094534262 seconds)
  done (took 4.588420087 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.984062732 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095632049 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.104856295 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099010291 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105159961 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112542405 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.142292351 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120340692 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.09767822 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069058923 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.176278258 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.656831351 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.189844539 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071122515 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.142472094 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.35179942 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.055600318 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.095496947 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068956096 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067552751 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.093785951 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069240383 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.13435014 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065598976 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173325944 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.587927704 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069614508 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.172127696 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099810546 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065910384 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140053868 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093459904 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070167627 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.558951089 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.069795212 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064506744 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088702059 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093384319 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066573732 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067404577 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.0779831 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066210244 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107560421 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078506977 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.524288722 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069337256 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.606678468 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.307969773 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072285538 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071403517 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101160037 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06427134 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067728902 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.98268683 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.142752565 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066512624 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.274806457 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06831486 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067720409 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068900369 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.097601136 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066906892 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068453361 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072663679 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.095169298 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.856831567 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.147682587 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096944413 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067764423 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.399523777 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075063042 seconds)
    (71/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.066643347 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068901518 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068871402 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.090984182 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.127732424 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066212267 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066368384 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.105897667 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093337874 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087957359 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.189026931 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068281038 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067194081 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.318013057 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.129048163 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067090811 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068013888 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.484410898 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064744955 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066434984 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068457389 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.08959 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066937199 seconds)
    (94/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.106896727 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064430337 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065243929 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09847398 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067856657 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.345164202 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.066630648 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.457307466 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068891168 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10259708 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118529987 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067966851 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099312803 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070195351 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06577454 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073600485 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066066453 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064809237 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070144991 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.06579325 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066943525 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.068759408 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068053843 seconds)
    (117/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.064953123 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066999371 seconds)
  done (took 23.111593536 seconds)
done (took 40.597342341 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.38822147 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077460288 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077754353 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077885966 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077662255 seconds)
  done (took 1.88318378 seconds)
done (took 3.162474335 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.353294077 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.074406169 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064013222 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.197625923 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.086004592 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.171771076 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.209196344 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.15577096 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.086753805 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086263695 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086108911 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.212662009 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.220754054 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086426176 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.156282987 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.221145718 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086544686 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064316845 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086185737 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086470476 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.089114463 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064095144 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086482185 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.08672087 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155525292 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086224276 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064322973 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.155402212 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.086229256 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.155881058 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.085926927 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.086004482 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.085920884 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.156113648 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.086481796 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.154562057 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063691982 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.086252115 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.086187421 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.086345344 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.086331638 seconds)
  done (took 6.114079504 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075108447 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082602409 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083913201 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062233489 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071519072 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081992134 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061984947 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081706746 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087735214 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082455451 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082214874 seconds)
  done (took 2.116154486 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070042228 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082591397 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08360058 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061718336 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072697694 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08278154 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064815658 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082324259 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085025321 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083130852 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083188752 seconds)
  done (took 2.066035091 seconds)
done (took 11.499177838 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.186561777 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.088349616 seconds)
  done (took 1.475398228 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.255769123 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.504666172 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.634941174 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.116157395 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.096134584 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.109216432 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.217063494 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.091896258 seconds)
  done (took 7.412612046 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.125201548 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069512316 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069125413 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067112301 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067446944 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067462967 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067437448 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068863769 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.067916889 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066938118 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068351424 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067090873 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067624219 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068799862 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069404243 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069243299 seconds)
  done (took 2.468990376 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.102698867 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069088443 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.098994555 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061567183 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071341761 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.061661219 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070429514 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072130425 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.069731164 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069518623 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.071496049 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.06951753 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.070561908 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.070895891 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072054429 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072098709 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071744512 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070272275 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072708435 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073482717 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072106535 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07241327 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073321114 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070864296 seconds)
  done (took 3.084513426 seconds)
done (took 15.656387653 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172002171 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073972932 seconds)
  done (took 1.460698142 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.090207352 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091311312 seconds)
  done (took 1.411203325 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.070872248 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059875715 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075432182 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068287832 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.060712034 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060352305 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074512961 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.060976281 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060825038 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060705822 seconds)
  done (took 1.885180836 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061914717 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066838539 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065015528 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063731164 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065385339 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.061622148 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063848012 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061731279 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067070972 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060627579 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064577943 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081922868 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.06393257 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081972614 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063886004 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064537267 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065933075 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064218865 seconds)
  done (took 2.420063156 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.060314832 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060909061 seconds)
  done (took 1.359679645 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063332174 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060930486 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062869489 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063014132 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061010844 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060694009 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061527181 seconds)
  done (took 1.666480476 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.415632398 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.184956291 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.411564807 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068493337 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.075355324 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.253624071 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064036246 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068220002 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068033579 seconds)
  done (took 2.88704593 seconds)
done (took 14.331882735 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.081579537 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.179584043 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.109761585 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.410999518 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.090665693 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06677433 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.111867189 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.199423015 seconds)
done (took 2.506762191 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.25719777 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.153364913 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.306208607 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146882028 seconds)
  done (took 2.850764155 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.388434624 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.16583697 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074533144 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066268768 seconds)
  done (took 1.94359594 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064738208 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070422785 seconds)
  done (took 1.383525544 seconds)
done (took 7.694413756 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069687735 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.094748419 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.06044309 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.0610742 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.062424454 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062807701 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.062724512 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061670462 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062855032 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.060944775 seconds)
    (11/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.062096933 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.062619706 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.062898896 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063640099 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062592787 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062698843 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062950965 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.062642581 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062463117 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062838584 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06303418 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062111677 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062926594 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.060952152 seconds)
  done (took 2.810996053 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.078279424 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.064942279 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.065758023 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065788048 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066215098 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066369717 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066075147 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065238453 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065896733 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064679435 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066805934 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.066595349 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064835989 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.066630786 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065259869 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.066578532 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066372119 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065419083 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065204625 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.066815947 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066440283 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065556136 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06709356 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06659446 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067338538 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066887553 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065229179 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065773754 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066530421 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067099891 seconds)
  done (took 3.256572375 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.065962631 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059097857 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059573351 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069502637 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059406439 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059833265 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059956 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059195812 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059879699 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060512545 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060125108 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059564029 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060307161 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059390896 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059454213 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060096664 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064760364 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079053223 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059772676 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059411917 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064515904 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.05982583 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059845693 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059657753 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060355724 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059661949 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059719971 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060037312 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059725343 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060527006 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059709877 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064474911 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065562992 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059599198 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070379716 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065649342 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059743123 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066812099 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.060802163 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059901914 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059619141 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059707987 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.05957674 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.059393086 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070446005 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059734421 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.06062015 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060355795 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.063261285 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.05963283 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.05958519 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.061278354 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.065523884 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060901207 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.05932199 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060769439 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059844953 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060091996 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.05970942 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059466002 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059741468 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064212469 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060933001 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060087175 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079919032 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061002865 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070315672 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059930671 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.06014749 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064178995 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060419831 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078397399 seconds)
  done (took 5.730176909 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069654433 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069926988 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078211853 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069432393 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062922355 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060620511 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063621884 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060667564 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069375997 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063704221 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060303395 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.0633675 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069712542 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.0637475 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061345557 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069383623 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063704867 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063057863 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060529759 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06443975 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061691332 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063682492 seconds)
  done (took 2.709796057 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136028493 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065567328 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103803809 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069563199 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068302304 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068993926 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066035713 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065957861 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065892379 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066344178 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06724881 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066022702 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067825983 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066673203 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06654076 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066284336 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065830618 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066200134 seconds)
  done (took 2.573716241 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.075530831 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065207435 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.088210075 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065327276 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065726927 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06501381 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068238465 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069007241 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065274678 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065686573 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068868999 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064993424 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066071854 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066929401 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065216683 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065591755 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065212872 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065580144 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06883082 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068668545 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068895698 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06917752 seconds)
  done (took 2.764464632 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076224679 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064116922 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.079490181 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066170123 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059496975 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059834516 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065914638 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.064874763 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065522083 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064186138 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064829997 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059959549 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066306053 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065224957 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067122575 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065213088 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064994665 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064820984 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064484887 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06034923 seconds)
  done (took 2.577065609 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.094879267 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062274573 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062048326 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066644479 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062654992 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062463819 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066842364 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072796882 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062409012 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084181732 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062869573 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062960867 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067283431 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065409899 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06259675 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067328249 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.067402445 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067389663 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062954672 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062699527 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08420163 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.062483321 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06682626 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062181441 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062767832 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062034737 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062258656 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065123427 seconds)
  done (took 3.142913932 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064391087 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063147706 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063479904 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063498206 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063514675 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063543538 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063421153 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066297605 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063456623 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063371896 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063495183 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063010183 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06317002 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063236906 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063877453 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063482418 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063447204 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063624045 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064137796 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063677665 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063597773 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063279594 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063715951 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063853734 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064391957 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063815954 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064387106 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064523738 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064054223 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064256257 seconds)
  done (took 3.191603154 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072032356 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070566485 seconds)
  done (took 1.417624251 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060650778 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076675842 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059368167 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072277477 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06755284 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065130404 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068933644 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068856392 seconds)
  done (took 1.809341462 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.090219252 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.11528734 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061398326 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.061967655 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.089037781 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126733818 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.099191767 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073786643 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075400977 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06408186 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.06135439 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099463935 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060365127 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074543497 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062160761 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070717758 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068731341 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079225295 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074475088 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059732604 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073859448 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061842662 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059909298 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061773865 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061057624 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068370378 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076867854 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074343825 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069864149 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059247607 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079924784 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059886199 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061182591 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070091345 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.088898745 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059857229 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09709154 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060980187 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064620594 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059586606 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072798602 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081248696 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075137199 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078225895 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061516117 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062194525 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059582439 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061707176 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064403734 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069780976 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060125584 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068618401 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059626789 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.06148394 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07148858 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060807323 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064976303 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070241437 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07460272 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071075953 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.073032522 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076291089 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069555912 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067259602 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060667375 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080191085 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061523276 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074041486 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07558576 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061135454 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073454725 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059712895 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058982846 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060077788 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094057675 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061861163 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061476912 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060560295 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060679299 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061771358 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07071318 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065206784 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068253479 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06335494 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076686362 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070214805 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.06041437 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.06648552 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078619975 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064789348 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060680066 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.07696595 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064453853 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059687645 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.077719678 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070627746 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06155582 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.060960644 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064447867 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073723219 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060833713 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058889366 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069669348 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.061574515 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.21623588 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065649492 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07056484 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061356968 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.0716555 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065359985 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062317006 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059289225 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065521033 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06128619 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058859661 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070040583 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.06051746 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074382943 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067378244 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.075602465 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075593764 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071131345 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076540856 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059957062 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059040537 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.081385017 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069796221 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061302821 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.077855402 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.059591779 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071043537 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.059603001 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06098898 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070490355 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059110436 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061691701 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06035912 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064490777 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061437954 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.0615806 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066559788 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068929911 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07233667 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061021749 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069399566 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060322015 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076044422 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07068942 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065145306 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063083596 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060761749 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072376356 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067322039 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070061214 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059936881 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.06101414 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060629127 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071738464 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070266983 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061694378 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066630482 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065228284 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060755199 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060500668 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061046996 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064375396 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063409114 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.06091959 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068899718 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069467886 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074159386 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066809929 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.06985935 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059345534 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060169754 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061893363 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.05982877 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06538515 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.06990137 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07590465 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072365383 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.08195717 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060551079 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070522171 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061344273 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077126115 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.07404025 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.06133192 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064478277 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059353763 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061384521 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069985932 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072011269 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074078413 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075886363 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065801179 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065419315 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059868807 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075825658 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.06070243 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06974374 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070135375 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.064267937 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060470186 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061717327 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069984656 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065589534 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060032452 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076211235 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065137078 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059354003 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075071923 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060165912 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071536351 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.059597517 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064398242 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065877507 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061478573 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070040235 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.208260451 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.06050479 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062160445 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076962198 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062494932 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062188791 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069523227 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076442651 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06581647 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069373103 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071695517 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070972121 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065471349 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070863368 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061032893 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070160061 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062767256 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072456463 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059973964 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078057435 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059003093 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07578411 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060688199 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071789444 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060961412 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070389432 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061159602 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077345435 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061943852 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060896557 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072286369 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059407944 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070173504 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059636092 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065694089 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067127373 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070437518 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061517908 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070232578 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.06173696 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.06948983 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.065259031 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068558444 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.070069737 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.065103866 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059891239 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.069418123 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071584249 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068927361 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061444741 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061444586 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060833624 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070602342 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062042025 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061404186 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069155855 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06567172 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066965862 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061819547 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061942753 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061944453 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.0694807 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070388192 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078229065 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072870485 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069107724 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069929165 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059771171 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076369117 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060538655 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.068309755 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059463709 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.065466686 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069818311 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060399212 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079074253 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061518599 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06935891 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072662817 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069582658 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064597859 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.0784575 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06328177 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069517285 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068827707 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065158728 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067888746 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062094372 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069441361 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070875536 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071476215 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06169868 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068859023 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070211358 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06170225 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06732598 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062101498 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.06941296 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062138484 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059677309 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065428859 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072152306 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065579854 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066057647 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.06048609 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059347272 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060816775 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065994766 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065094847 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069397982 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075516208 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058777181 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060687805 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059507449 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063955187 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078066092 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069678333 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.204585932 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066375425 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060233202 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062184317 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062529837 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061148044 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063524061 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059908163 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060030281 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071490801 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061922262 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065305423 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060325582 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061164373 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070684253 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064185136 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060512714 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067311836 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059938946 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065953175 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059233643 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061274585 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06515259 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059390406 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064843285 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071310553 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077086246 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067462024 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069669394 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061237061 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068825276 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076187966 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066384689 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061222108 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.06996124 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059787113 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078715078 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069845897 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069360807 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070282035 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061073864 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.07727691 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065245156 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070815155 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07624976 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06121477 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065984043 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059804302 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076397741 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065253081 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060106538 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068581876 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068585287 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066756199 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072128384 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060919815 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068580149 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065021259 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.064318655 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061809601 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061538105 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.06964451 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076927284 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061081392 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06405183 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.068602922 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.069118778 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06513387 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073036187 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068647412 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0612782 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.062174086 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.06425158 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061005891 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072468615 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060774204 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065433351 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065765249 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059990069 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067533204 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077132868 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070486379 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070535012 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060424421 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.05989305 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078185774 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064779299 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063498206 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069315324 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070561159 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072956216 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07006612 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077601165 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061251024 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06704078 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073501418 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06150203 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060619428 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06504008 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062200314 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070278439 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071048557 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068796604 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062757184 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068122678 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077635643 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061369998 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065471522 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.064188553 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.060515496 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070969323 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068726768 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.069405523 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060936227 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059645502 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063881598 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069481224 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.201887539 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071078101 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062112195 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066705733 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074135169 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068843767 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063213529 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059702318 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063539027 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.069982416 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.064174197 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059898962 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065425909 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064633992 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066208335 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070072705 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065480209 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.059876732 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.077313201 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068475545 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069788114 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.061981364 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061825636 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060691994 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059609401 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071617869 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.059662236 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.061420149 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065281166 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.061803024 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.077899691 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069003583 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076435883 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061238417 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065237553 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059840719 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070005136 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065381744 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060368057 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071575707 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059569259 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075815035 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072241694 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064869785 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059970622 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066416395 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069064134 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075981379 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070762913 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.06990694 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.063602242 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070381246 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062155813 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071713373 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059920474 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059542752 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070940171 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06958291 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072935551 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059885871 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070714373 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062004908 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069277731 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068963394 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061945338 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061979681 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06190012 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070432995 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.06530669 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070156041 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065417723 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077582554 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061063629 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071631228 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.070009832 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071462742 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07462825 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072729233 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068813519 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060807561 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068302308 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068513591 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061306371 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065666542 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063483947 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081893356 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062117 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061618354 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074640545 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.066232608 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060635773 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.06625568 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065794759 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07145203 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062033223 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071385192 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.064605403 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061279479 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065735402 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065845315 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059650752 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060321684 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060543299 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070633964 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065519024 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060444028 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079179708 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.061569797 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069892375 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071947734 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066996642 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.061648478 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059351115 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060984523 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.207920467 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077107347 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064733562 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070460999 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061760442 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070232404 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059348074 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069723937 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06854074 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069158595 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059444614 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060011008 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075796331 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076192284 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065678574 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.06994061 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069934138 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061551039 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081488709 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069659019 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060846441 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071340011 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062318343 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059499639 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059335865 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062049344 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072380519 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059521398 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062418113 seconds)
  done (took 41.950676786 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.09686335 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060555029 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059850315 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062671976 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067210677 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060551623 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.0597529 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060630567 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.060585617 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062198276 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059794672 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059784133 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065383775 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071810897 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067478254 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063350299 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060042463 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061077659 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060191261 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060762234 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065482246 seconds)
  done (took 2.720638488 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062949589 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.063343854 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063492687 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063828785 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062770699 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059750801 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063536031 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060000831 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063989865 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06047039 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064035173 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060075541 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060521369 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.06018031 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060343533 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061439012 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064064686 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063168917 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.060010795 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063663005 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061297076 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063458159 seconds)
  done (took 2.728351569 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061251465 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.060368424 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069694903 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059358746 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059016389 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06228192 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059164621 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064853751 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064521089 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064698168 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069186445 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060196814 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059086025 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066128251 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.05930366 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.06119211 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.100898728 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060626336 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061291896 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059693114 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062313361 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070167178 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059259165 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059728806 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064495973 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062581454 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059359561 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062206239 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060265145 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064811293 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06045134 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059253467 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069362438 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068604047 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06440965 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064583917 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061081718 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060555988 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059697782 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059448985 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068496208 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061077961 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059600543 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060761239 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.06901493 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059904773 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059181886 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069320642 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059033082 seconds)
  done (took 4.466259131 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069563965 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.111275865 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.065630161 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092638292 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.072016153 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.065085107 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065577882 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093278659 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060414443 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061454227 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072405118 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072871698 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061967209 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063467408 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067093425 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062140762 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062940556 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061496536 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064217616 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061802652 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064602902 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066774064 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071649096 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.072155738 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063019761 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061342519 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061688133 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063330675 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071899828 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064837354 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063273215 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064179901 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072078663 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067316141 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06183976 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061677005 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072583822 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062413289 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062046226 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060992033 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061958736 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.06349084 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066920163 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.07327336 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062255681 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067343654 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06253674 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060309712 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.07218093 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062084834 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065413038 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072926441 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063418213 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064908357 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063482421 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071992673 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062121466 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061039724 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062891307 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071872914 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060579306 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062902292 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072775219 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061499094 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064886569 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072684663 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067462198 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062774375 seconds)
  done (took 6.064279959 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068108922 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.094103525 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074756733 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075047532 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070060608 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069752576 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069632166 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069918056 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069775478 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073068391 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06999065 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.129359557 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066837063 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071292217 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07012356 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069696768 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069664899 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069896754 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070241487 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070068442 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069978701 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074337287 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069829909 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074486256 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071920301 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066364279 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069660688 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069709184 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074589379 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069933922 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.072044924 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069715994 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069743754 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074633767 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.072117717 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069775989 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06071853 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069783526 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070053773 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070044925 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066736094 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075046662 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06962496 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066923517 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070144632 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069953109 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074532716 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.072285575 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071484104 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073054266 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070135303 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074712465 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070334175 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070141869 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074672684 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076418359 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075229425 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074997474 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069966414 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075531608 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075073176 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076757907 seconds)
  done (took 5.900064873 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071576867 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065281162 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077623581 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060069287 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059388827 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068939534 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059610542 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.05957896 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065327481 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065332474 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066953517 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068486213 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070295649 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066983786 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06842331 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070356329 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069095992 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068555862 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065368996 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068666975 seconds)
  done (took 2.739843995 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074520864 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077917422 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.065269234 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068668096 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065206264 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068683505 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064897976 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065447216 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0659375 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065120228 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069449523 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069271494 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065368339 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068722602 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.069484383 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068577202 seconds)
  done (took 2.478946882 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062512806 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066362356 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.091928194 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061045925 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062520835 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060040619 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060700617 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059493193 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062191032 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073625696 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060299953 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062638261 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061006691 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059672976 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060139721 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062642491 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061531652 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060318957 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060799139 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.090586352 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068502087 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.061148505 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062885366 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060237644 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062364253 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068945558 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061949612 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062277697 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060443112 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062963182 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062629274 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.067206546 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062513966 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060876505 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062680457 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060474884 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060912843 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062920412 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062946289 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060899242 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059772192 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062435608 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060736643 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061014483 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061991299 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062907321 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062190953 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.066768765 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061005686 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.063129459 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061128026 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062384806 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061239963 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067714631 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062865369 seconds)
  done (took 4.880236605 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07688175 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065002308 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060019926 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059168269 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064461614 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065454776 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064998561 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064867996 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065078411 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059146919 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065490556 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064487622 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065372555 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06487249 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06546183 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064740223 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058980545 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065047502 seconds)
  done (took 2.567867891 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065334899 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064621441 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063690119 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061153097 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061460728 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065593657 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060089655 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06100502 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060966212 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06126463 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061604316 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060939646 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060968613 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060968925 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064861016 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060988517 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061116802 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059624126 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062138345 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059625319 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.0650384 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059509066 seconds)
  done (took 2.755301731 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.114567871 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082890909 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.152836813 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078912843 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.087474498 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070957328 seconds)
  done (took 1.981450331 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.092215052 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095979908 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064453322 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064713405 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068745102 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067471392 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067229734 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067582909 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070165263 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070795534 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067416884 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070613933 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070418507 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072501426 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069163489 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068932805 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067824705 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06746412 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064992099 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074089172 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067770162 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070663841 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067910764 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067235497 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067554652 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072494202 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070557181 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071039263 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06771341 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070586575 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06884535 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067530169 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071228939 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070866807 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064724781 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07069541 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067649958 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074457916 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069476134 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072801779 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064840353 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069548084 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070733961 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070855312 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070739186 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068083962 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07065776 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068108076 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068134402 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07615518 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069597359 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072679719 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06958991 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071251105 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070927927 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075752164 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071462404 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072612687 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069408358 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071374265 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07299586 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069884141 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073187077 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07170948 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069510928 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073329447 seconds)
  done (took 6.058045335 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102065133 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065484089 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070711409 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070941335 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072178445 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067647893 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067996641 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067904 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067978082 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065377866 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101961629 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067999057 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072651688 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072662238 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067580364 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067973989 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067837081 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072469249 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065330316 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075582241 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067742858 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072575139 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072452697 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072385223 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071204285 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069374215 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068002277 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067779849 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067886629 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067663103 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070617025 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067927083 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072642182 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065468757 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072425083 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0678167 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06752683 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070752355 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067806743 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069472459 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07271383 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074744384 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068098015 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067619474 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071193782 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068058488 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068087503 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065724536 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068010687 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065359867 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071615736 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07155536 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071304405 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072389249 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068160876 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068412488 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068118229 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068520307 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068778479 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069546035 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072690473 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067908848 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076002518 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068463825 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067910021 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07289739 seconds)
  done (took 6.073025985 seconds)
done (took 126.593607319 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.20479458 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.172468747 seconds)
  done (took 1.761020129 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.07338298 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.181447526 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07296856 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072692365 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.102821666 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.10207916 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.100672684 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070731038 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072915872 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070960506 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.129983792 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.102046377 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070623605 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070588987 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.090254126 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071086279 seconds)
  done (took 2.856977598 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.10641841 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.206065279 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.081088032 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.069307234 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.14921376 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075104802 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071146786 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075066666 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075002209 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068982521 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.105080763 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081682648 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074560347 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.075735348 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070966525 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074082546 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075015781 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074956377 seconds)
  done (took 3.020823484 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.100679851 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089264111 seconds)
  done (took 1.604066728 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.150616993 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102669578 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.140374429 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.335007469 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130263373 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.133340998 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.136508019 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.131509046 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.106494822 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.128297224 seconds)
  done (took 2.900164952 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103515436 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102344952 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.301202122 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100209129 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080849417 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075947168 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073522857 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077965522 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073750791 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075232889 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119368992 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073912367 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071570442 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121646098 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.095218858 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104547392 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.070327395 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076515753 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078930246 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070140917 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074446664 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.07813747 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.386012097 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076925936 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.096876496 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073567156 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075158614 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073098687 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.073094405 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076486026 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077213695 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.095615649 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.07668443 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08136863 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074631972 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.093517939 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071025712 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.095726344 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073191052 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071550467 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073568337 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076902109 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070800066 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076167378 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077039663 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076012845 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079203242 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069946753 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074197015 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073237057 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071782569 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074841467 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074104553 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075356819 seconds)
  done (took 6.303930434 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.117453849 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.107587734 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069179696 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.115152163 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.107230092 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068905988 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.120269834 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103040229 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.119761884 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069842459 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069510707 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069647707 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076386634 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079369088 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115689751 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109870952 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070239908 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069293628 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.109177363 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.109304035 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06772465 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.105882319 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.112105587 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108523705 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067406818 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068559542 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067515197 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068189328 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07519509 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.073929091 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067757786 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076552371 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.077673494 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07362437 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067260563 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.0674561 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067368218 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073896957 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07644121 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076410589 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.073358114 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067161317 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067292995 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068148569 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068574339 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067197658 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075745035 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073844199 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075937717 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067727928 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068523923 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068104099 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068488718 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07378201 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072981146 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074339021 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077104766 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067774948 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06774399 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069295827 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077544162 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075403112 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074796794 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068813832 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.0757203 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068073441 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076759322 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.079585474 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067665241 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067963146 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06785752 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067729649 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068219024 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073707543 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.073388784 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068648284 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068200999 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067727321 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075242288 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073771013 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.0679868 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075582891 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067583922 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067792367 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068594044 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068446791 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075687034 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.074325131 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068084459 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067255664 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067680037 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067646229 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067010234 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074913682 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073643469 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.203451424 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076474344 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068739648 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076532613 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073809458 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068297012 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073650111 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067781309 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068314751 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068346364 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073261539 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072768905 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074864293 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067876542 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067404783 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073001243 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075914122 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067928811 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.073112658 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075163035 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.074096512 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067270802 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075910863 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.0679473 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075551821 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067967069 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075300795 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068229387 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07340528 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068115587 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.067363068 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068111947 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.0763064 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068409283 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067856882 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068269512 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067759478 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073757637 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079246502 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068678895 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073649044 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073637409 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.0683028 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076214882 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068048607 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076083126 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068155705 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068362125 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067300484 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078047959 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067852549 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06770138 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068157675 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078163294 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06789572 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07552167 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073226539 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067418307 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076302833 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075540623 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.073233136 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075682231 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068628373 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068158002 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067741999 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067816679 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07516615 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076402639 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068588413 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067858916 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073203826 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075721452 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067802308 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.073174784 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072893869 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.073494766 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068089615 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06770671 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076565819 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078054517 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.073391527 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.076146932 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074344549 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067851724 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073547639 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076390529 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068036628 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080148895 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068282309 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077188347 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076453109 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072446214 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075544117 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076431263 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074575273 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075398191 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.208556535 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06828487 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068184766 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.073312127 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067559521 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067711621 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.073150443 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068608896 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068163659 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076531394 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068130694 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075894704 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.067341591 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073433301 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067277518 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068520333 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078272651 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067981233 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068368362 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073277169 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068089207 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.073275283 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075372007 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073111293 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068021832 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067977111 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076326051 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075390395 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067955742 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067461355 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067956904 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075363638 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075368478 seconds)
  done (took 18.283761111 seconds)
done (took 38.151265899 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.164077253 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.111290104 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.21538633 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.19824042 seconds)
  done (took 2.197872042 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097732661 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.064412886 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.104514545 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.113895153 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.064529622 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.100631849 seconds)
  done (took 1.999001141 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.192052521 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.168763941 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.233236323 seconds)
  done (took 2.042177485 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.361640925 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.144260196 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.209625545 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.495255247 seconds)
  done (took 2.762190795 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.133991057 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.123398269 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075154433 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.133950242 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.081373997 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.06100421 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.126978686 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068187078 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.095077891 seconds)
  done (took 2.411424811 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.133885425 seconds)
done (took 12.992747553 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.327610754 seconds)
    (2/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.306661219 seconds)
    (3/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.307963985 seconds)
    (4/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.324905562 seconds)
    (5/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.104446789 seconds)
    (6/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.075451475 seconds)
    (7/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.308082732 seconds)
    (8/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.104989515 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.172609152 seconds)
    (10/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.229659125 seconds)
    (11/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.27813833 seconds)
    (12/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.346445669 seconds)
    (13/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.237057147 seconds)
    (14/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.272921408 seconds)
    (15/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.309654893 seconds)
    (16/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.173016004 seconds)
    (17/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.299420045 seconds)
    (18/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.273005477 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151186564 seconds)
    (20/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.084411457 seconds)
    (21/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.237790375 seconds)
    (22/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066764075 seconds)
    (23/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.106528138 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122306384 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.123057494 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.09187997 seconds)
    (27/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074576293 seconds)
    (28/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078552988 seconds)
    (29/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.146914874 seconds)
    (30/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.225572689 seconds)
    (31/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.243058333 seconds)
    (32/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076856922 seconds)
    (33/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.237662295 seconds)
    (34/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077291846 seconds)
    (35/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073941632 seconds)
    (36/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.074282698 seconds)
    (37/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.214784524 seconds)
    (38/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.157353283 seconds)
    (39/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.196965968 seconds)
    (40/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.190413653 seconds)
    (41/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074659366 seconds)
    (42/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076146721 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.143791453 seconds)
    (44/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.166059914 seconds)
    (45/341) benchmarking ("sort", Float32, false)...
    done (took 0.136454674 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077359931 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077361481 seconds)
    (48/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074028696 seconds)
    (49/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.072428371 seconds)
    (50/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064769918 seconds)
    (51/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.146681943 seconds)
    (52/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065273793 seconds)
    (53/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073821143 seconds)
    (54/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.230177655 seconds)
    (55/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.125207104 seconds)
    (56/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072937055 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.084295386 seconds)
    (58/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077335736 seconds)
    (59/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.347619502 seconds)
    (60/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070222177 seconds)
    (61/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.221775553 seconds)
    (62/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.09530931 seconds)
    (63/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075532857 seconds)
    (64/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.155348604 seconds)
    (65/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.072618413 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.097423607 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.091901616 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.080995494 seconds)
    (69/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.150866824 seconds)
    (70/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.135819485 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.086809668 seconds)
    (72/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.065630198 seconds)
    (73/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.065489402 seconds)
    (74/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071766366 seconds)
    (75/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.161871063 seconds)
    (76/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.090156455 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13226554 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06700501 seconds)
    (79/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.161916966 seconds)
    (80/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.065754136 seconds)
    (81/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065394805 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064917899 seconds)
    (83/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.208008133 seconds)
    (84/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.08198322 seconds)
    (85/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065616322 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072799632 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073004619 seconds)
    (88/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.232406752 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.184174273 seconds)
    (90/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.289790959 seconds)
    (91/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.22222582 seconds)
    (92/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.188628588 seconds)
    (93/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.072548092 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.215658909 seconds)
    (95/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075562432 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089417513 seconds)
    (97/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.087193746 seconds)
    (98/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.217011858 seconds)
    (99/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.077186993 seconds)
    (100/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.084525893 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.099959112 seconds)
    (102/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.143309949 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092908019 seconds)
    (104/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065491988 seconds)
    (105/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.072924304 seconds)
    (106/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.071332134 seconds)
    (107/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079340603 seconds)
    (108/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.072812127 seconds)
    (109/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065060171 seconds)
    (110/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.19954198 seconds)
    (111/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.074531619 seconds)
    (112/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064673889 seconds)
    (113/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069110259 seconds)
    (114/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072275613 seconds)
    (115/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.08262874 seconds)
    (116/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.08961271 seconds)
    (117/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.145430951 seconds)
    (118/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073295601 seconds)
    (119/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.143351965 seconds)
    (120/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.163295775 seconds)
    (121/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.073796626 seconds)
    (122/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073644669 seconds)
    (123/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064469177 seconds)
    (124/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.06630851 seconds)
    (125/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072036637 seconds)
    (126/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074996705 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069241531 seconds)
    (128/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.075830665 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.066157222 seconds)
    (130/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.064847147 seconds)
    (131/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.210350125 seconds)
    (132/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073361499 seconds)
    (133/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074267253 seconds)
    (134/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065500234 seconds)
    (135/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152862924 seconds)
    (136/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.197463506 seconds)
    (137/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.065142704 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.079586191 seconds)
    (139/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.063855841 seconds)
    (140/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.146479093 seconds)
    (141/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065505351 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.202456469 seconds)
    (143/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074242833 seconds)
    (144/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081817352 seconds)
    (145/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.064349391 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119107927 seconds)
    (147/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.321750921 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066887418 seconds)
    (149/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066718377 seconds)
    (150/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.227918712 seconds)
    (151/341) benchmarking ("sort", Float64, false)...
    done (took 0.139329655 seconds)
    (152/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074192982 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116427968 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075902792 seconds)
    (155/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.068575486 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.0935219 seconds)
    (157/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089528099 seconds)
    (158/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.197668954 seconds)
    (159/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146303794 seconds)
    (160/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.074148565 seconds)
    (161/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.084373373 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065115874 seconds)
    (163/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074507563 seconds)
    (164/341) benchmarking ("sort", Bool, false)...
    done (took 0.140353247 seconds)
    (165/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.076920929 seconds)
    (166/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.084714628 seconds)
    (167/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065467031 seconds)
    (168/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.072709723 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086491475 seconds)
    (170/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.067261846 seconds)
    (171/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072597047 seconds)
    (172/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073968798 seconds)
    (173/341) benchmarking ("sort", Int64, false)...
    done (took 0.066366814 seconds)
    (174/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.163999502 seconds)
    (175/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084962056 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.06516821 seconds)
    (177/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.072369425 seconds)
    (178/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157690831 seconds)
    (179/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066823676 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064567662 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083309381 seconds)
    (182/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068277429 seconds)
    (183/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.069597138 seconds)
    (184/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.198605754 seconds)
    (185/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.205007984 seconds)
    (186/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065337461 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074656001 seconds)
    (188/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066404122 seconds)
    (189/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069621486 seconds)
    (190/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.145151256 seconds)
    (191/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.141312363 seconds)
    (192/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064127002 seconds)
    (193/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.065626838 seconds)
    (194/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072126705 seconds)
    (195/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065237718 seconds)
    (196/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.06525309 seconds)
    (197/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065818506 seconds)
    (198/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.079093225 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065299534 seconds)
    (200/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067147229 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.144957197 seconds)
    (202/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065853387 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.182350323 seconds)
    (204/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.168554114 seconds)
    (205/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065028478 seconds)
    (206/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.076694103 seconds)
    (207/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.217358801 seconds)
    (208/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.076394348 seconds)
    (209/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.198321277 seconds)
    (210/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066772879 seconds)
    (211/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065767188 seconds)
    (212/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063566222 seconds)
    (213/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066527128 seconds)
    (214/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.065484308 seconds)
    (215/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065171532 seconds)
    (216/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.065610554 seconds)
    (217/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.077599864 seconds)
    (218/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069500665 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109290066 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072753726 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065009328 seconds)
    (222/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07209842 seconds)
    (223/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076272354 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085267352 seconds)
    (225/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.065976537 seconds)
    (226/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.069746263 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.249557309 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067330012 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092480671 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084189812 seconds)
    (231/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065288736 seconds)
    (232/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068037462 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121326549 seconds)
    (234/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.162563284 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076667651 seconds)
    (236/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.071898417 seconds)
    (237/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082201312 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075132354 seconds)
    (239/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.065229888 seconds)
    (240/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.067057439 seconds)
    (241/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072157262 seconds)
    (242/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.150865389 seconds)
    (243/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.065384741 seconds)
    (244/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065213159 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065056521 seconds)
    (246/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.063977974 seconds)
    (247/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069243996 seconds)
    (248/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072776009 seconds)
    (249/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065447473 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071782984 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.068680189 seconds)
    (252/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.226451562 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065341367 seconds)
    (254/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153182525 seconds)
    (255/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093521142 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084121988 seconds)
    (257/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.065277991 seconds)
    (258/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.149880014 seconds)
    (259/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.149963727 seconds)
    (260/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065630354 seconds)
    (261/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.063484234 seconds)
    (262/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084948695 seconds)
    (263/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.065992168 seconds)
    (264/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131701278 seconds)
    (265/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065613298 seconds)
    (266/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.179303178 seconds)
    (267/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065080854 seconds)
    (268/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066100629 seconds)
    (269/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066936592 seconds)
    (270/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.064505013 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064665865 seconds)
    (272/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.06923912 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063361362 seconds)
    (274/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065848675 seconds)
    (275/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065076107 seconds)
    (276/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.064676471 seconds)
    (277/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065520808 seconds)
    (278/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066417291 seconds)
    (279/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072250637 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090108203 seconds)
    (281/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067230908 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084441867 seconds)
    (283/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.062971869 seconds)
    (284/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069414264 seconds)
    (285/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066159173 seconds)
    (286/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.06494484 seconds)
    (287/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067285811 seconds)
    (288/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.066234648 seconds)
    (289/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.065186805 seconds)
    (290/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.139764475 seconds)
    (291/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066301684 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148631037 seconds)
    (293/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065330859 seconds)
    (294/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.065178594 seconds)
    (295/341) benchmarking ("sort", BigInt, false)...
    done (took 0.260207056 seconds)
    (296/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066003022 seconds)
    (297/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.161874196 seconds)
    (298/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.065521304 seconds)
    (299/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.06558898 seconds)
    (300/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.065106748 seconds)
    (301/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.064809893 seconds)
    (302/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065375643 seconds)
    (303/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.065238828 seconds)
    (304/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.078515197 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.18466739 seconds)
    (306/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.065308882 seconds)
    (307/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072614272 seconds)
    (308/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069646882 seconds)
    (309/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064363689 seconds)
    (310/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.064963906 seconds)
    (311/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.065187094 seconds)
    (312/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.06514817 seconds)
    (313/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065202845 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088801966 seconds)
    (315/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.072253802 seconds)
    (316/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065441969 seconds)
    (317/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093056846 seconds)
    (318/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066065424 seconds)
    (319/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065144497 seconds)
    (320/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.066875575 seconds)
    (321/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067968204 seconds)
    (322/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.144922843 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076110207 seconds)
    (324/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.083565731 seconds)
    (325/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069247574 seconds)
    (326/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069569329 seconds)
    (327/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065225855 seconds)
    (328/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.063495336 seconds)
    (329/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.064795299 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.06514195 seconds)
    (331/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.065660127 seconds)
    (332/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067726639 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090367477 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064737208 seconds)
    (335/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065418877 seconds)
    (336/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066590416 seconds)
    (337/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.065446282 seconds)
    (338/341) benchmarking ("sort", Int8, false)...
    done (took 0.147254605 seconds)
    (339/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.065399555 seconds)
    (340/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071800422 seconds)
    (341/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065875019 seconds)
  done (took 38.442133551 seconds)
done (took 39.914170739 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.120375247 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.07813712 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077253053 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073864639 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.07718282 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075429234 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077138395 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074982995 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076399611 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076078896 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.104187543 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064004643 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072258356 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078953749 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073268648 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079402694 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078784335 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079233815 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065356048 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078233092 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.088137922 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076295952 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072921432 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078006204 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065370772 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073820833 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.116670076 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083257177 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.06955726 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074163759 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072738709 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080056322 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072460898 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070797759 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073843993 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070537074 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073716756 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.07158301 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.116367176 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070292276 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065139562 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.075755511 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072173133 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072324906 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073298832 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075837254 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070122598 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077308301 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064342495 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075528706 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.116101453 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069080241 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068688744 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072929003 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069681954 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073622716 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068714381 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075718679 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069596591 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075875296 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073674687 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072755459 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064312528 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073063401 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071926024 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072138855 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063307999 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069315086 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064669955 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064542561 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063677147 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072818777 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070846366 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069767111 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064112208 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064484707 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064026363 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076412335 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070538916 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073984173 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064797423 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069914556 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069641463 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065208021 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069724375 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075751129 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064137354 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065095944 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063792955 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078743056 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071189335 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064858182 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076223305 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070058122 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069519736 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064739647 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064147905 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.06953631 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072517722 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064569051 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063418904 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069920119 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069672391 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073568104 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065346321 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070260262 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.06988068 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063572483 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073219644 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071754346 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072939646 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077560716 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073004945 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076228891 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064668498 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063105624 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073794882 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.203674511 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070376803 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072915272 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069850193 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073137106 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064892993 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063974114 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069623385 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070843082 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065446541 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.065235959 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.065180725 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073804866 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071800903 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06382103 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064298946 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073009138 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073111514 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063854629 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063654134 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073331472 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064588071 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070220555 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070437239 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072836125 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064074135 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06507407 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063737906 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.064144996 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063647141 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.069897797 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069552105 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.065059523 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.073127801 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070594647 seconds)
done (took 12.704736291 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.0654946 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.104898816 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.11132677 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.107933168 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077378099 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.066070746 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068665458 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08263643 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.068647797 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088259393 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.090123652 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086202866 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.126653433 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063976944 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06538932 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065968921 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063565432 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076458206 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.110146637 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088326413 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099454691 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064956165 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080173479 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.087005688 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078152623 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082727173 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066125266 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065938668 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067868538 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082651636 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090380383 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065003772 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066325401 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081498075 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.079736672 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.072370448 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065565574 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070646464 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065857585 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064870243 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066924358 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082017599 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070836966 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071271152 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066185588 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066341947 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065346776 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071378387 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081572896 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070211536 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076169012 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082929001 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066738031 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065450836 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063602343 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071616846 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065512857 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066263917 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066002783 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065377595 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.066031398 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068431657 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070029605 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070946281 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068652354 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071152901 seconds)
  done (took 6.532843351 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.081069602 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.090603389 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.079473622 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079785754 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065186392 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065827239 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.066055711 seconds)
  done (took 2.120299731 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066488219 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.103096371 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111247218 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111326128 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.118095413 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.108293661 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066090921 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096501628 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064717053 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.104088279 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.117806185 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.112271906 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068609955 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077495839 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065928783 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.111957349 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066135606 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072753698 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.107197021 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.113183653 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.06929396 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096226146 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078877027 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066430556 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.109781494 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.104077574 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067782392 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066230266 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067728276 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065370314 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065233713 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.087144567 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.103506414 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.071492998 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066473629 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06486413 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.101787751 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066634246 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.10117751 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074307247 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.101226714 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067575684 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067803221 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065800101 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066635153 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.105675453 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066699087 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065606515 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065251274 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.104641057 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064683235 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.104059057 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.068059472 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070489444 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.07272703 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071579124 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073011338 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066184534 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.105531301 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075411397 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067671892 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.114703757 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.113978893 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.102159777 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.114015046 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074259967 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.105297965 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.102699983 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065532758 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065182236 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066348139 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.114917695 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.068640967 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.067741777 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070703753 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072632848 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.106344607 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.117933881 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.117884818 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078556477 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068100147 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065768136 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.213185012 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.117949686 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070543015 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065515864 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066392819 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064924307 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.070550957 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067635023 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.070262163 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065543457 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075729486 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.06788013 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.067812721 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.110682984 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06576033 seconds)
  done (took 9.778368602 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067497439 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067823634 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066900949 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066877604 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066769351 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066681526 seconds)
  done (took 2.014715454 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087871494 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065746291 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077675761 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066014233 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.08986682 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.106260068 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.106895722 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067876833 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081790075 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076182783 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.106166511 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.108936036 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.108676724 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067618474 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.106861251 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066980739 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.106583858 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068875269 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.075740048 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067834161 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.078506667 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.06807614 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067938477 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.112286908 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068553566 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066936603 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067471542 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.076359442 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.075940228 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068368469 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067894459 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.07343741 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074470105 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067907304 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.108012381 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074606183 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066076186 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.071516196 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068490649 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069037775 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.108955862 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06777633 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.068372059 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071167204 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067683371 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074240933 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070920515 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069297432 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.107273572 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070893055 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07087192 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066539154 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068762374 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071142392 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074602872 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068057038 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070843629 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.10732043 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067450338 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074335958 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066255332 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068609674 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067707727 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068415353 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.070637281 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070878071 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.074275418 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068089105 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067964405 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066361415 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070873023 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066127395 seconds)
  done (took 7.138293837 seconds)
done (took 29.158094286 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.541412656 seconds)
  done (took 2.119158897 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.90701062 seconds)
  done (took 2.523157131 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.308182656 seconds)
  done (took 9.930632321 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.328233473 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.401341877 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.732520521 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.130411433 seconds)
  done (took 3.243451079 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.741811896 seconds)
  done (took 2.369246705 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.232127191 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.224455249 seconds)
  done (took 2.090134372 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.367371959 seconds)
  done (took 1.984044973 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.185514173 seconds)
  done (took 2.805479475 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.224212912 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161121114 seconds)
  done (took 2.016785529 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.625511677 seconds)
  done (took 2.247488048 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.407305307 seconds)
  done (took 6.037531424 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237217772 seconds)
  done (took 1.900934768 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.226229311 seconds)
  done (took 1.852344587 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 1.956488173 seconds)
  done (took 3.576970669 seconds)
done (took 46.327044233 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.083657281 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.085474171 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.085199579 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.08034327 seconds)
  done (took 1.936103157 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.073692358 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069608439 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.072516672 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.072969464 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07047414 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072074372 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.072313697 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069072198 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.070410029 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069501614 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.068388599 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069364711 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.071810791 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069293711 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.071900401 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073152889 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.069692258 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.069426509 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.071548882 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069391033 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071705288 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.069445048 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067641402 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069125084 seconds)
  done (took 3.317809078 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.077846078 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071449654 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.074840856 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070429037 seconds)
  done (took 1.927199092 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.075979449 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.075652752 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083906445 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.088297676 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075345093 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076027699 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08302311 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.082618977 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.065064947 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085734505 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06739283 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.066611063 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.066660068 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.084344885 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081909988 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061864196 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06277451 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076675261 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.075861871 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078736937 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06848763 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065039123 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075353231 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076183493 seconds)
  done (took 3.431517973 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080774411 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064883588 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079696 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.089890521 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090835364 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.065036305 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078103436 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.091830766 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126145736 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.065100756 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071486675 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067766166 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102856309 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.065315675 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081768663 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108704779 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111031415 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069009368 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.097261865 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.06507668 seconds)
  done (took 3.311833406 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076969208 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06891554 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.06976955 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06533888 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075732658 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.072005208 seconds)
  done (took 2.068999124 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.067617959 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067918932 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.066534165 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.071702159 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.067630036 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067359798 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.066759746 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065813873 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065651557 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.066264898 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.06658224 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066860184 seconds)
  done (took 2.440125884 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.205093405 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.068406047 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.069863624 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066066142 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.067802498 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.066590748 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080204815 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067825347 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082697387 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06609425 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066296859 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068584059 seconds)
  done (took 2.609788004 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102087728 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107530557 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140094826 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113493607 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113966056 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093433747 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.156053669 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.091495593 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.156948033 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134612538 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113897729 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092197585 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085521777 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068967083 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097435348 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114443684 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134472999 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071977503 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110653629 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.198545689 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126530212 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.128806784 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142514915 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113970421 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087676693 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142614885 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095149602 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098967082 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121257451 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122206683 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115623529 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.09648153 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.071151594 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070096371 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145554085 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101586289 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117506568 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.091564729 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102995686 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087247288 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105280348 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069363722 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.082883756 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.108606819 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083130574 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127589872 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.086732225 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111422107 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079311149 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.279669869 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119895593 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130984556 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084433389 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102796941 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132368037 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107941487 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128558706 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10412115 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081141546 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.1156616 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100072755 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09722009 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103694205 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078506446 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.171248726 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086495038 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109082835 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108033254 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091586084 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092544732 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104593045 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132296145 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121818108 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.121855345 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133765967 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093847086 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117407141 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097030411 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126910174 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101956489 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072218461 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.118151139 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126329755 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096188061 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099308947 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125451569 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090995643 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07718228 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.097460256 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.116512223 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079861139 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.109034677 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078653993 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.107088347 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12928508 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094414672 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108642799 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113968289 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076701038 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.297467564 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106544253 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072586546 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114472593 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110542797 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150668509 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092561925 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076061592 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097900101 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100395942 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.147679553 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103135825 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078413305 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106582565 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134419342 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092787613 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.204378392 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093621721 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135634971 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110867062 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085574362 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074002159 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089311421 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109434727 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105456538 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109473205 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088371464 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.082825325 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085825805 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1085956 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090836092 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07939335 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111365904 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.097375257 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073416204 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086788849 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075664685 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137809661 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076888405 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133115432 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122905239 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.075875095 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104849833 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096422492 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10722301 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.096453158 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114927169 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136946631 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.111784812 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088162238 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091971212 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105607702 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140366917 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.122447951 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089824456 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.227288922 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098902599 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110018478 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095600617 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120797662 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093207248 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105573585 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09997564 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136089419 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138597746 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096756985 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09882036 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1031965 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.118734822 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075270371 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151113848 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100477696 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115310433 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082442218 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136597613 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.110047687 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087735006 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086346972 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099200318 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.102407772 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10501249 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140417454 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094917198 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072288917 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090742231 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140579705 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075448085 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107931105 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090162925 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092243682 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11632239 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.091461917 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080251434 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067954505 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123015124 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.154172118 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069427806 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112789173 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.105949334 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101174098 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.118040666 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069133977 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116149378 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135926546 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117677066 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136127217 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.293229099 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112774635 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115623165 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110550257 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103584046 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078504079 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122032471 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.130581529 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09322399 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090029656 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129824929 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115917414 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.131720251 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.111465264 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110358502 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101902619 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104910475 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099890923 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099710597 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140073803 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11864268 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.122542362 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085054813 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103814407 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115327043 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131918471 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081232951 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137868122 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.082154267 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11572426 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07758094 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120439295 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076766529 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.107763912 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079913259 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099021788 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069164446 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073415571 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1387037 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110276531 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103389504 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098714297 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.13532123 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133970417 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078410318 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105837248 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113181178 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099256926 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112169762 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106386133 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087535735 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.245225648 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107640452 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083678365 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.080453832 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11107668 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09099669 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123384754 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082733002 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074041667 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13490153 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101673073 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092251189 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076642988 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103518339 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.11954246 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091066053 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085603731 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111141282 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104967249 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136852411 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.089135454 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096150608 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120124122 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078565413 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090164056 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.06869072 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083887571 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.075412002 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.123741819 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075005002 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113083102 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068255899 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127732738 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084600278 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092258265 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100561315 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105900307 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125437885 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093579637 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137199829 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087527838 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115457858 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105724381 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092723272 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086957371 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10161 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099044415 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.120033401 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095347854 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120303865 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140085159 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102387077 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139436012 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089865103 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119298853 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104715934 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119876531 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.259138316 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141328925 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133998618 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109243868 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109325015 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074511165 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092319179 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102567981 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107999465 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166875983 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120351221 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071581271 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102176071 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09257486 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104040906 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102036983 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080761494 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140778815 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098191997 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086869206 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109215 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.088372846 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101974307 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074962108 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094023089 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.098756809 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093057707 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097014797 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11308779 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12490195 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111128273 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139653211 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.098078573 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090923806 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115852549 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108467537 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107545277 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084835206 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084798389 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133764197 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115699425 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.123936064 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.099086303 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107679871 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109475158 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098460113 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121998661 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105825468 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.123024733 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078692378 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.07466101 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067336568 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071590395 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119542072 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104972108 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107600256 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095699878 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.071303861 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100622596 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103248505 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070756477 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086889453 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091755835 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093056064 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.088989589 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099398953 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.107382297 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088002064 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098864022 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094623145 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135609228 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.095993523 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083247999 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134250738 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137960282 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082693139 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087497313 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069871864 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076521386 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105765237 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138910211 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139289629 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074517291 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083253788 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.081052883 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081995114 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.069621383 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.083368251 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.085535901 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099935601 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09481737 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.106530433 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100025942 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072733005 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097812674 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093715184 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088123978 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098620636 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111129359 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116150367 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.131215325 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10511629 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100604767 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07347735 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.076501062 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073604202 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076754473 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09777749 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076685869 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073408242 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132623397 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.348074317 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106168673 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110563598 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0903935 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077648083 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133838937 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.07383463 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134367484 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.073449691 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08313801 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.084258297 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080269582 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093405651 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135135364 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108565135 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1109559 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10627127 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103872746 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137715046 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154703215 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079651579 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142630685 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076423799 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075503719 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076116452 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10968211 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088948109 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113680306 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137604034 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090010056 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101327557 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076740362 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139664518 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.095680603 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102617043 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085754011 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078674522 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139812525 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079144373 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.079144749 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08901208 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109364408 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072286417 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103112391 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083509103 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079551261 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139372938 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.629385157 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089337965 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075410937 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094722881 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.140606865 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124693915 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093826629 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107122008 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.27174742 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09703007 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092682489 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10509769 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.181705933 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074181182 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092075253 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100867991 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096199257 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099821889 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096306657 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085034717 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090868663 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086188979 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078567196 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105464478 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087322409 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094174573 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104528219 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081517113 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085235104 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127444846 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.102184001 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080464939 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086455796 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101599939 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087274911 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098115947 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068874034 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110952068 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090111157 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114011525 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092876738 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105214454 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124448228 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088475788 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133170233 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.103119963 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119456989 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08646752 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077540431 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121086244 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.085827492 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076538778 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139647969 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092188115 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.089564712 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101656762 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095032258 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110820421 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113659821 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109801975 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096316111 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077952728 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098382267 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.100476748 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083746623 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077229935 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.228809368 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.07612667 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104297961 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083715641 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082086132 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112307669 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086673034 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100949096 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.098632111 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11887675 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082245123 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099240456 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108293505 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090044334 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107005472 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098620605 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.124802868 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168366387 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121341999 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125900663 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130958017 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.075827715 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074635403 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068425705 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113566616 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078516445 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087305689 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080609578 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130493595 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081109068 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1086506 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.23061344 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079147709 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091843413 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094115782 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069412507 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082507567 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105235904 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085802653 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07892241 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114932158 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081558743 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123937149 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108325947 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096869508 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092411621 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079444982 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110382585 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.100612434 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126928191 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093150621 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077444555 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111767936 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101802759 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135259586 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.072592107 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080118567 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127077191 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101555883 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.279975574 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078585964 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143176996 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138915712 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097702956 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130667466 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07084708 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082136885 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087150896 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124003658 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082523522 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10750296 seconds)
  done (took 66.487302353 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.148897055 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139135156 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.081327281 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.102913811 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.18645086 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197916515 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.119558287 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.095947906 seconds)
  done (took 2.892857756 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.067951637 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081953426 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.080164758 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.241517862 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.095601316 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.067034751 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071806065 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080582323 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.067082192 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.066534275 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100982326 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066837165 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.067932264 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.51371546 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065829815 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071726739 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.06736212 seconds)
  done (took 3.673698307 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.324077569 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.658858591 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.26845244 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.983747543 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.144108201 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.537606479 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075746963 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082267178 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.65110201 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.370758279 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.136173132 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087204542 seconds)
  done (took 19.136692932 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076613164 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.11958155 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.119464558 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075692024 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075359525 seconds)
  done (took 2.337163458 seconds)
done (took 117.215885312 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083478627 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172306761 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068330988 seconds)
  done (took 2.088451257 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.11768163 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.116981314 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.116128114 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.114321816 seconds)
  done (took 2.284848196 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.074711055 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076521012 seconds)
  done (took 1.969887511 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.219497021 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.213284513 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089778887 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.081507805 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.079225756 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079395889 seconds)
  done (took 2.068168713 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.070907139 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.07112301 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.071113361 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071568744 seconds)
  done (took 2.096521928 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.166098066 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.066663461 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068792223 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071427097 seconds)
  done (took 2.18726095 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085226156 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086268918 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114677771 seconds)
  done (took 2.105137594 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.082645883 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082444329 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077388185 seconds)
  done (took 2.063443094 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.107343697 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.096094143 seconds)
  done (took 2.020060915 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.07963704 seconds)
  done (took 1.900650563 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.089361351 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.097395073 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.177271202 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.146990945 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.180348577 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.166303476 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076175255 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.077047616 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073357817 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07285421 seconds)
  done (took 2.974563124 seconds)
done (took 26.180987946 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.083836851 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.18939507 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.350920161 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086778208 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.652358163 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.348388078 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.901326351 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090815299 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.10061645 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068071109 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08505105 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.630938468 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.897309185 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.139365861 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.883585042 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.138063465 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.633303591 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068556482 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067675757 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068120426 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.886579645 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068050484 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068786081 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069151862 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.631533814 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.369907281 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07130304 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.139777061 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070179706 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074196809 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355112755 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071714597 seconds)
  done (took 15.157885408 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075482386 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12706743 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072000923 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.083465768 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.069563636 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069161979 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070852242 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.068884922 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111692387 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068238145 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08558817 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067995093 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07194866 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069490299 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087413883 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068227899 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070448305 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069358842 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068387544 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068975183 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086486526 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068074733 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068817403 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068887704 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068586854 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08102206 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069207243 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068163485 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068355772 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07208916 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073042825 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069620805 seconds)
  done (took 4.243214711 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127000525 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.130479132 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072453561 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.108755543 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.117140243 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070006649 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151143833 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091436552 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115144354 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068497761 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085432651 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068130903 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.103793048 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069512262 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088898605 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068607374 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071095313 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068915824 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068179722 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068866705 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087279748 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068118136 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068626856 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069162697 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069223008 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083212992 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069318389 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068356938 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068301638 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072072313 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074081606 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0697752 seconds)
  done (took 4.517941667 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069501819 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.07095583 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.077579953 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.079964114 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066356366 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068698836 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069575334 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066677364 seconds)
  done (took 2.409082147 seconds)
done (took 28.166931138 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.07919267 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067368167 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070392521 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087244946 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.073796671 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.108741468 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064985667 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075079377 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071708147 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071897696 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072695991 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067215488 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069816235 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064871488 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073340318 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067687534 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.115382186 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071502996 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.113681275 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.11581713 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069860953 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073169067 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076255684 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.11454953 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.113959379 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.114730406 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076645073 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073856716 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068151615 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069753873 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.167563789 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.180166383 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07400245 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.114424954 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065896476 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065541742 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070153476 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068143751 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.111791818 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074968061 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068096016 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074786023 seconds)
  done (took 5.396267596 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.184149469 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.192028291 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.184440128 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079686634 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091558373 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079751644 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192581602 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076888836 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077158658 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.194808211 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073678277 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07834043 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.08056555 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.071541381 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.07827243 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074201174 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079890855 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072075086 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.078080664 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077550175 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.192397247 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069071616 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079958997 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077125455 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071628685 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.07668601 seconds)
  done (took 4.548226607 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.072402307 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.0884908 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.092395299 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.146777592 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108594542 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082916437 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082409425 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.093974948 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101284683 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068061932 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07213766 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094490949 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099166468 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.074649428 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106474384 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085559079 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080114344 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069447546 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074291896 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102629245 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090481878 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086236801 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.100453863 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087772583 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.06689848 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077222746 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074731767 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083309589 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075045175 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079490565 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071361537 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071166508 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068470914 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079594928 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.07178486 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.066016674 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089966341 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.120006684 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082561613 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.105935152 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078084332 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069461034 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.097048027 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134675259 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069371014 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072309051 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073883372 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082389874 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071418352 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099701056 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08660939 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069396791 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088653742 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071024622 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070899267 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08509635 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069525697 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069445608 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079282318 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074078021 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088752605 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074652557 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091648502 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069398426 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080710445 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071138533 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070974188 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068197184 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103965249 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075445559 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119214892 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068642483 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066953056 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080384994 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.079029407 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07424493 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067705814 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087303544 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.0799664 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071350578 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.07896786 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070431687 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071216977 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104122135 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066622786 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066176222 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065724664 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069737642 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.071095723 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.068178625 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080466657 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067163775 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070960621 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083080257 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067608416 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068101137 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069672876 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06853131 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.067480326 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077997292 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071666513 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069390444 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080188848 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069066402 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070994718 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082601164 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077259904 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067121957 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068599212 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069969205 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070691778 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07431645 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073132082 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071801001 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076850111 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076167784 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073508257 seconds)
  done (took 11.207441415 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.200613409 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.190337749 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068549117 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.186079596 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076122132 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.116397927 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.188562161 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.128827441 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.068426973 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.069277387 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067594068 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.136131771 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.132344755 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.141828614 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.11370822 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068939556 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094832196 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.146135035 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.194368264 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.187696099 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092057312 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077280847 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072285471 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071405529 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071127629 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078971855 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.087358328 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078519083 seconds)
  done (took 5.100024002 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.074049009 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.083216823 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073064399 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094252273 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.087378617 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06991846 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072224543 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071454735 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087301498 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076485402 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070018451 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074531069 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073510193 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070530981 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070700157 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076676145 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076500179 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069010364 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073902239 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074323834 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080727176 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.156925513 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07457229 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.07053915 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.075262019 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070315159 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076716203 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078852937 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069126021 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100729888 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065265231 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072570397 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082622585 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.069310593 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.068953934 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069099189 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069614037 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.06953569 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069837497 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068039718 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067826132 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075749129 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068723859 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075457502 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084320863 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078483498 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071060044 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.070414643 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070938001 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065130717 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071524584 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.071738966 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070729585 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076637416 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071718337 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070760505 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069723042 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.095390411 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074096748 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067735289 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067886897 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066200468 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069908996 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07573902 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084591839 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069706233 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066539447 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.068088384 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075381702 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082691323 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067519682 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073400527 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065414338 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.068266428 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070685999 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071228708 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069715244 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.066497887 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068284525 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068311922 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068921437 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067994518 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068197174 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070793009 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065876127 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066675635 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068810657 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069284321 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07370258 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.067487188 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.07072477 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069967982 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066900869 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070826774 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07396136 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071026188 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088102503 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076306973 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068833682 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066127251 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082824839 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070079563 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067556262 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071305277 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072485034 seconds)
  done (took 9.636449331 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.090850863 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06925429 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087799066 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.094563717 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078199017 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.073099698 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.082112377 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069368369 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08482147 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067273549 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076984072 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066048523 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082006449 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077609492 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069914587 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.07903582 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070901764 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08869449 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.082755604 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.0668115 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077513136 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080164129 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080540966 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086172367 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086164306 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087019552 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080693357 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070708102 seconds)
  done (took 4.119650005 seconds)
done (took 41.83935152 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.941385775 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.089673951 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.925306088 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.16942411 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.972796994 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.100727699 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.036802903 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.918916218 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.95238256 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.939042137 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.233242152 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.302508825 seconds)
done (took 68.505459685 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.938467889 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.063531434 seconds)
    (2/2) benchmarking "String"...
    done (took 2.136453538 seconds)
  done (took 6.060171525 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.513740553 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.918421806 seconds)
    (3/3) benchmarking "different"...
    done (took 1.968470903 seconds)
  done (took 8.259823329 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.017658773 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.547632961 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.179812456 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.917538775 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.922788443 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.329489315 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.70115882 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.377807145 seconds)
  done (took 32.83734642 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.903425545 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.115726621 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.552705413 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.584876333 seconds)
  done (took 16.053621697 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.528213108 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.180572409 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.179775118 seconds)
    (4/4) benchmarking "different"...
    done (took 2.170678216 seconds)
  done (took 10.967569835 seconds)
done (took 86.066877354 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.920777417 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.390956827 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.939125253 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.072038235 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.976465794 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.943161594 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.923417751 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.960956501 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.921592402 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.922907092 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.310662823 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.920001026 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.91954519 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.952011248 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.925703531 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.945750336 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.208834005 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.928989887 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.968325971 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.147484181 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.315196051 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.92584556 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.934057979 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.096176194 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 8.027414549 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.978624239 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.420858621 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.921604178 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.614841414 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.93268756 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.929631568 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.926455823 seconds)
  done (took 210.083721893 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.921346841 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.923072504 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.988545033 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.927685429 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.401467903 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.117472028 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.058461251 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.444720082 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.92897669 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.952025057 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.114010325 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.922365064 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.136764469 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.859358714 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.917156713 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.943707732 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.12939987 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.132650502 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.920463453 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.112183552 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.935024159 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.913366489 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.867916188 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.084453284 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.968015653 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.991205302 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.935761369 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.946855042 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.111887668 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.113119081 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.958696194 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.958565922 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.128763215 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.786845905 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.945996605 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.931923364 seconds)
  done (took 175.294162644 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.102544004 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.929709229 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.981454049 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.044578235 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.616831799 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.600087375 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.926224771 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.921456214 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.921699638 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.927440587 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.923909734 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.989431663 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.129730557 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.953979471 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.919643618 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.919123895 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.746070516 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.923391855 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.922131025 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.921296751 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.92027763 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.982813387 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.295472104 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.044573937 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.924531821 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.932085147 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.043294594 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.93162937 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.920961842 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.042977819 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.924783741 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.99827393 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.043575337 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.9314063 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.002278231 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.928130198 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.376609633 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.920682352 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.920517843 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.922438846 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.979421822 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.921457822 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.978466132 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.011643675 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.920497637 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.935491393 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.118784557 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.599609823 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.924474963 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.921776601 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.921432532 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.921596535 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.922764686 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.092433814 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.923692827 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.946959792 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.435937014 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.92333807 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.922192545 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.922840854 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.921991479 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.922342944 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.928285612 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.959895868 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.636203076 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.479729384 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.346698156 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.647935386 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.924233367 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.794451618 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.979793894 seconds)
    (71/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.922317918 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.923749501 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.000549758 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.922180491 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.92241171 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.92175879 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.922804006 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.967907378 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.962968787 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.923756489 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.044678951 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.92656285 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.92287595 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.97490442 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.73606802 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.075261091 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.936721647 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.985034171 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.901882951 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.924689824 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.937615933 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.031385963 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.926479755 seconds)
    (94/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.924999077 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.92564759 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.924517499 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.049434968 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.929930161 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.97231624 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.152363517 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.999609692 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.176710706 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.118742709 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.932822319 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.925434588 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.942876033 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.92730285 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.925372313 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.937524635 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.926247722 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.925320354 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.927274443 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.926451378 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.926188123 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.928258516 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.939874697 seconds)
    (117/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.926173398 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.926130831 seconds)
  done (took 425.725226312 seconds)
done (took 815.097422395 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.598981039 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.673343524 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.510837239 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.542017805 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.515322431 seconds)
  done (took 14.709839752 seconds)
done (took 16.571871486 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.947482058 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.943329203 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.931597637 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.948179652 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.9477499 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.946700138 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.977367944 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.970163863 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.965793573 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.945989422 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.953659774 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.94782546 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.95145874 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.967190594 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.959249323 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.953662854 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.947562008 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.939095223 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.954793447 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.948561284 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.947226304 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.94455402 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.948678673 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.954017961 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.961036666 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.950205859 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.942335143 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.949985808 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.950517873 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.95103205 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.985490415 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.955033531 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.979494506 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.957543239 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.95627637 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.96007116 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.946760584 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.971363413 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.949513132 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.985734473 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.956987824 seconds)
  done (took 82.020580697 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.937662289 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.069301026 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.14819173 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.967238362 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.934762622 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.149091829 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.991818012 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.075275039 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.06707542 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.174617811 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.181157778 seconds)
  done (took 24.570860544 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.936482957 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.06956329 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.148697284 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.971163703 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.960138893 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.15145365 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.999115228 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.072361756 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.070739049 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.159727767 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.160715995 seconds)
  done (took 24.578252392 seconds)
done (took 133.032785524 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.32273025 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.963301143 seconds)
  done (took 6.158116265 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.93289918 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.950947854 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.084386261 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.932855138 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.938860075 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.934384668 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.93386655 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.938632262 seconds)
  done (took 17.518525151 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.931988093 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.93233458 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.932452696 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.932316956 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.933156992 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.933012777 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.932936229 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.932776643 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.933417101 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.932256346 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.933959331 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.933261279 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.932583436 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.932613529 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.933618226 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.93246442 seconds)
  done (took 32.79790757 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.932973519 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.932290403 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.932572877 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.932493599 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.933049682 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.932486975 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.934707016 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.933163971 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.932731129 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.932746165 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.933525825 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.933140115 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.93368291 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.933069289 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.933496723 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.933024464 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.933607668 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.934037031 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.934580211 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.933464758 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.93366966 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.932959722 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.93916045 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.933253288 seconds)
  done (took 48.277981495 seconds)
done (took 106.625652218 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.093582829 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.400531361 seconds)
  done (took 8.368122555 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.936640807 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.93284417 seconds)
  done (took 5.795691993 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.933321209 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.933655557 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.933821006 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.934162494 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.934263299 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.932979925 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.934188086 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.933572866 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.934159943 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.933770311 seconds)
  done (took 21.212433218 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.934198821 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.933804416 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.933572361 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.934000757 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.932984204 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.934646863 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.933729267 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.934568076 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.934119423 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.934871979 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.932359887 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.93303788 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.933073738 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.934939474 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.927899813 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.921886575 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.923913147 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.925245153 seconds)
  done (took 36.647260275 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.999999796 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.074503881 seconds)
  done (took 5.940535478 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.07319378 seconds)
    (2/7) benchmarking "second"...
    done (took 2.073924617 seconds)
    (3/7) benchmarking "month"...
    done (took 2.07501644 seconds)
    (4/7) benchmarking "year"...
    done (took 2.074755906 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.073800945 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.073923923 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.074734328 seconds)
  done (took 16.52897021 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.07575503 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.246955155 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.284742082 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.664644984 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.076372555 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.077530749 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.96256059 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.078390482 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.078252134 seconds)
  done (took 22.556516484 seconds)
done (took 118.91782132 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.924371834 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.56249101 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.358976963 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.148848385 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.147666103 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.412285667 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.115191557 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.615709783 seconds)
done (took 45.290509999 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.135760229 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.069460778 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.104186317 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.091077476 seconds)
  done (took 23.268409496 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.063258859 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.402661652 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.083477424 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.064782209 seconds)
  done (took 23.624613275 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.439294292 seconds)
    (2/2) benchmarking "read"...
    done (took 2.415592654 seconds)
  done (took 6.85386189 seconds)
done (took 62.885156221 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.058302068 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.059575057 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.04759158 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.056960495 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 2.061301786 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.05916186 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.060088593 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.062135137 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.061626975 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.058244151 seconds)
    (11/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.061695281 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.059913353 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.062587576 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.060643526 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.058498906 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.061054695 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.058327833 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.059769449 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.058000016 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.059648029 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.057177936 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.054628447 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.058589683 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.05751204 seconds)
  done (took 51.401471153 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.054641734 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.054960033 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.055418422 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.056959203 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.056600146 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.058887673 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.049696916 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.048087786 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.054497597 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.049546863 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.053682441 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.052407817 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.049034572 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.0497927 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.050123776 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.050762807 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.053496238 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.05324166 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.051588075 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.051314782 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.050714287 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.050351771 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.048506952 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.047060854 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.048207219 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.048669179 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.048613145 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.047479794 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.048616849 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.047980613 seconds)
  done (took 63.525501289 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.046864475 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.047346979 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.049079924 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.048285222 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.048049675 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.050104665 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.047598878 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.048086614 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.047433922 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.048745339 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.052231741 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.048378078 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.047511106 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.048330602 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.049358286 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.048472851 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.050068692 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.049588057 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.049060353 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.054176549 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.049066919 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.049284257 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.049350386 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.049071503 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.049764273 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.04952412 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.050750061 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.048554381 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.048933969 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.05414377 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.049642445 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.049680563 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.050223003 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.04932199 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.052034196 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.04757004 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.04141747 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.05348684 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.058672408 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.054842858 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.050395983 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.04896584 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.048509798 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.049507298 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.048733617 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.048981867 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.0490227 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.048304649 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.048956106 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.051018817 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.041088241 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.042189442 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.041516128 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.041543526 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.042932655 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.04045286 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.042022537 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.040379231 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.043804604 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.038447632 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.039797567 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.039602983 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.039696972 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.042047799 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.036197209 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.039087964 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.038688182 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.038323485 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.038271537 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.038691414 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.03725909 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.038103393 seconds)
  done (took 149.336266161 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.041977235 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.035836319 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.035720275 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.036951209 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.035610144 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.040546309 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.034941926 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034974884 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035745556 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.03552288 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.035604559 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.03528051 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.035407277 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.034633781 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.034823869 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.037801223 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.034489507 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.035812515 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.035169073 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.033393065 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.036283232 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.034603229 seconds)
  done (took 46.760639203 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.034549971 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.033224152 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.036226416 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.03359522 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.033564877 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.033670811 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.033463569 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.037138663 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.032627859 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.032850084 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.033029949 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.033008617 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.033383691 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.031650883 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.031189661 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.033126042 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.032299116 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.032223681 seconds)
  done (took 38.565843378 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.033403577 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.032319759 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.032303589 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.033290226 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.032228188 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.03233903 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.031341784 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.037338167 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.030276681 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.031969575 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.032086016 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.031486036 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.036329102 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.030040897 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.0304549 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.031331127 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.031554483 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.031485903 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.030555531 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.031544697 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.031160535 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.030217445 seconds)
  done (took 46.668224458 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.029916415 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.03009224 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.031518966 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.030257086 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.034081238 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.028752349 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.029892241 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.030012303 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.029771865 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.030014667 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.028608928 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.028292357 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.029493639 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.029794717 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.031149727 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.029736648 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.029719503 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.030504231 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.028549192 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.032769683 seconds)
  done (took 42.566853331 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.029718771 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.028590809 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.029790661 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.03159339 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.028371814 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.029071668 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.029979844 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.029001726 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.03002525 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.028000713 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.029089622 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.028808864 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.029416637 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.029236898 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.028894799 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.029177978 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.029051433 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.030088076 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.036072288 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.029437913 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.029581141 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.029108431 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.027922983 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.030975138 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.029107017 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.02948209 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.028351904 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.028928921 seconds)
  done (took 58.787410979 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.027539846 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.028796051 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.028415668 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.027973657 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.029959551 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.027243991 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.028737893 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.028719808 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.032918191 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.028614039 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.028888817 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.029217437 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.028945637 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.022047702 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.026566926 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.027828381 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.028571841 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.029079939 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.028795685 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.027710357 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.029287746 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.027950994 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.027780236 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.030328802 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.02584034 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.024233862 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.027837372 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.026727854 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.028052097 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.02736098 seconds)
  done (took 62.802227519 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.04787954 seconds)
    (2/2) benchmarking "in"...
    done (took 2.046452877 seconds)
  done (took 6.027343078 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.026693755 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.028644869 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.027364071 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.027743152 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.028890933 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.027396974 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.026956123 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.027292878 seconds)
  done (took 18.186292311 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.029272342 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.030898923 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.028602613 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.027836024 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.028178756 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.038278974 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.029781231 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.030206364 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.030194077 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.027885953 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.03895716 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.030628802 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.034746905 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.034447872 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.026659789 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.029866968 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.029178827 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.030513863 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.029275151 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.027429998 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.03161895 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.028089223 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.027397468 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.028068014 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.027115744 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.031762312 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.036843216 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.03068721 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.03054519 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.02750989 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.038541769 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.027060243 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.028858926 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.030203948 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.029049237 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.028610904 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.036267613 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.029458875 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.028524499 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.031166804 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.029952277 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.030203035 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.033005855 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.037080748 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.034009886 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.027804231 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.027604145 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.030279842 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.028187456 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.033017138 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.034490249 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.030445095 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.027188585 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.028477625 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.032164446 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.029382193 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.030472957 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.031426555 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.036336313 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.040807391 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.031772027 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.049064225 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.038983496 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.030436973 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.030525074 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.039089501 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.049802697 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.03131459 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.031889 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.033087228 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.0375907 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.029428329 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.029695254 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.029584076 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.046768316 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.035765969 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.029010742 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.030339606 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.030653146 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.031392909 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.032528352 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.030288737 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.032186545 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.030667094 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.045721735 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.053532768 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.031490395 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.031149917 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.034109775 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.039631981 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.032743444 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.03443831 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.03076578 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.030264294 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.035136626 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.033894869 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.032741426 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.032485754 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.034816136 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.041195189 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.03340397 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.031963643 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.035249468 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.043993587 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.029583682 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.034358267 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.034161712 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.032794641 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.044597426 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.03422518 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.028642206 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.032446094 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.034283661 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.041770111 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.032128656 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.036590222 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.039553542 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.041184386 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.035035508 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.037587569 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.037578878 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.037005725 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.041837318 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.054134048 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.032690519 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.037176533 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.039102543 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.044725831 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.037070492 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.033406142 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.036956315 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.033137184 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.032448508 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.036178542 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.032731941 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.033746131 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.033632463 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.033704819 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.034102515 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.034111556 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.037474452 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.03715332 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.036161759 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.0340554 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.039197493 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.036066321 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.037846543 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.042104753 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.035662895 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.035611654 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.035064078 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.036656902 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.035771403 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.037870827 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.032682688 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.036160587 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.035477277 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.035748585 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.037884914 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.035475173 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.035083182 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.034358379 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.038020381 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.03363974 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.035014126 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.034950146 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.035163628 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.036185204 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.037416007 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.036252133 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.037738292 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.036226454 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.040011781 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.033452757 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.036125499 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.036028762 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.034431874 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.036138274 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.039605141 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.046622932 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.039236481 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.044671738 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.036151415 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.043711831 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.034814743 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.038424014 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.03682667 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.042245697 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.0363238 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.035444804 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.037303853 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.038832106 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.059048669 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.046961756 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.038729309 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.037119888 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.041105503 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.039210062 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.042064804 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.037197054 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.038099421 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.040421564 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.037551761 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.036178989 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.036146892 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.041257292 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.024767628 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.037655821 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.04176745 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.037426061 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.024933499 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.038219255 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.038219574 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.039638984 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.038001333 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.037729848 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.037110557 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.03677589 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.046311372 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.040777682 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.039609631 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.037856858 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.039545238 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.037686202 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.037549927 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.039776175 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.046863544 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.036879233 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.038699148 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.045940811 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.040497115 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.03864509 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.03971745 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.037979118 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.040533799 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.038905343 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.042855837 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.046582092 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.042293713 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.039852254 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.044860533 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.037509369 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.042951705 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.040379445 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.040467705 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.039932988 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.043322568 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.039914278 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.038863939 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.046183694 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.03991795 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.04157829 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.038250898 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.042594379 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.040875112 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.041775897 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.041016171 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.043907362 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.047113227 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.045988782 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.041225446 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.044176778 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.044135226 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.041266869 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.043268937 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.041399818 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.054113132 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.049776787 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.039974125 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.041644437 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.041589804 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.04415858 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.039681648 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.04122838 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.047435972 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.040607002 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.042041444 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.045560267 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.040870811 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.041867688 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.04825598 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.046532136 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.044894422 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.043539289 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.042384316 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.044153555 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.040112676 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.045069378 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.042088309 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.044372145 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.044015478 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.041770656 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.031628745 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.040620672 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.051160712 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.040377131 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.043546309 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.05015686 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.04650232 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.043097251 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.045163174 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.0417921 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.042575267 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.042769089 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.041843389 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.043222408 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.041259859 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.04774777 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.051244996 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.045437088 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.05021309 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.044128018 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.051439893 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.042940533 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.042005262 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.043437864 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.04586328 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.04975307 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.044306142 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.041804919 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.051773224 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.043857009 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.043645163 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.046274725 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.041685738 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.043194101 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.043352163 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.045047408 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.049262654 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.054699896 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.043494518 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.044311098 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.042714426 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.043124665 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.046853813 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.045713913 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.044500507 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.045651768 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.043816282 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.043318616 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.022094095 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.042657892 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.043800567 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.042613516 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.044110652 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.054406642 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.04427464 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.045509095 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.048684878 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.044596002 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.053534076 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.044781825 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.046508555 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.045680368 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.043894619 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.048369582 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.044547695 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.043355207 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.044512313 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.043784623 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.046613478 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.056335326 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.051556729 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.048557706 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.047823527 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.046478496 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.047654288 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.056169313 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.065958814 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.045846404 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.048089134 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.038788029 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.051647803 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.049238149 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.049682579 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.04922366 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.052103692 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.047829486 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.046087111 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.048392653 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.057946346 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.048410476 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.045619326 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.045522853 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.051961204 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.048484011 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.046310643 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.046336234 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.050347761 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.048610359 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.05691992 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.045615266 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.048632712 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.047338999 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.047218798 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.049271624 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.045942986 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.048794452 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.049270707 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.047433453 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.046509195 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.049197036 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.05138285 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.047512414 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.050706114 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.055555403 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.047004388 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.048911784 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.050466554 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.048603038 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.050805376 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.048171879 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.047399357 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.050533721 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.047127438 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.04849548 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.052964804 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.055396137 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.049502874 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.049780685 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.048760581 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.053240554 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.047667194 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.048523443 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.049957136 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.057932305 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.053643539 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.059551896 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.055382222 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.048643767 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.050202 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.055706821 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.055627403 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.04845499 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.048648523 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.049393932 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.051621896 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.051850724 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.05030582 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.049223634 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.049983503 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.054470644 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.049575686 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.045242924 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.050366082 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.048734817 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.051323413 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.052675977 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.053211806 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.050413722 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.049500901 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.048260474 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.050586972 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.051410789 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.0524077 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.049767007 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.049881406 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.052908575 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.053467742 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.051983939 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.04878966 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.049421012 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.055214796 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.0499459 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.050153259 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.048786381 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.051305247 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.049959666 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.053867341 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.058012722 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.049835054 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.052653075 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.052449949 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.055739715 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.049358519 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.051877182 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.051111433 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.027928576 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.058279112 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.049687772 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.051479342 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.050650726 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.04995871 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.056512953 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.053831209 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.05622994 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.051293941 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.051506245 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.050318695 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.055918946 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.059589299 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.055612696 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.054467461 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.057332687 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.057000052 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.054619915 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.050356197 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.050888002 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.053282713 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.053413134 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.056689179 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.054575462 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.055452338 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.052213332 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.055027174 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.051941563 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.054477256 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.052575619 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.053003871 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.055456655 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.060881109 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.062084318 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.052719938 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.055212858 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.055164728 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.055895486 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.06332678 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.052648217 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.05275283 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.053522874 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.053799735 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.053735053 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.059507756 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.060452238 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.059164997 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.052788304 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.057641681 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.069773408 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.053883371 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.065103512 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.082382902 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.054268211 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.055264674 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.055606294 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.054733405 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.052482781 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.056048657 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.05380221 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.061551997 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.053610429 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.053629202 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.061695756 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.054921676 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.054244542 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.053616588 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.054504853 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.058910241 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.055910976 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.061398976 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.053894591 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.054429164 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.055149087 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.056668016 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.054441102 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.054890001 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.055132784 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.056756372 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.054158896 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.05459147 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.063981529 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.057232963 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.055957004 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.068626227 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.064996446 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.05598906 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.05502342 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.055226982 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.061313951 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.059024257 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.05414068 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.058059667 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.060608773 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.058599906 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.0612154 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.057577479 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.055935215 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.056746246 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.054186479 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.055723815 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.067850511 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.065458139 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.056622186 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.056839899 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.061551696 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.05685567 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.062718693 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.064081239 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.056833796 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.05882384 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.056911463 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.05519219 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.05567674 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.056758713 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.059477871 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.063552905 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.057391425 seconds)
  done (took 1220.394695216 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.056764351 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.056444568 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.05491562 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.056862914 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.056876655 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.058089048 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.05688419 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.056876841 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.055655607 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.056413008 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.055821517 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.056147391 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.057884286 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.056218485 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.056773951 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.056742601 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.057755342 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.058132555 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.057736255 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.05629261 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.046605087 seconds)
  done (took 45.168032221 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.056778874 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.044681995 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.0590562 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.057662316 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.059489708 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.056962799 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.056764662 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.055966338 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.057224104 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.058083452 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.056994774 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.053569349 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.057503377 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.056515957 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.058248515 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.057396822 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.056387832 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.059999792 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.05613033 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.057468813 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.057600547 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.057230866 seconds)
  done (took 47.235323566 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.057758233 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.058691901 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.059891604 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.057508283 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.058682417 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.058668513 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.056135189 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.061586362 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.058225028 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.060246177 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.064736292 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.064966905 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.059129669 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.062175107 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.057279941 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.059856389 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.204283406 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.060195479 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.060598787 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.058761748 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.059650719 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.066799039 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.05913887 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.060824839 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.057727442 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.05965842 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.058678034 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.05935063 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.062194221 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.060831214 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.064907464 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.059114041 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.060861297 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.064380283 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.060303038 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.061440394 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.063327534 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.062331901 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.058324538 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.060115071 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.069588027 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.082118671 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.059486094 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.06063883 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.068308951 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.059471887 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.060298529 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.065238616 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.067579197 seconds)
  done (took 103.141140748 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.06096283 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.060079087 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.060785003 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.060362103 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.060922359 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.060525134 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.060807591 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.059906879 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.060735034 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.060969429 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.0602919 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.060745465 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.065180577 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.059616063 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.062740403 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.060534524 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.060348895 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.061085932 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.060940336 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.062800443 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.061619353 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.061020777 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.061254213 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.061500563 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.060319879 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.060229693 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.060502896 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.060619986 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.062250545 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.061616299 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.060463301 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.062398066 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.062711117 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.062941834 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.062502945 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.057571128 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.05147073 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.061526936 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.062203545 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.062963613 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.053482495 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.06182263 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.062279173 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.062241437 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.063405056 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.063758654 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.06234209 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.063315023 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.063747174 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.063506404 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.062635832 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.06485111 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.063630939 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.063869625 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.063396104 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.063914741 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.063177592 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.063492036 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.063544155 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.065157824 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.063722193 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.06317288 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.063194824 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.063195102 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.064142321 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.063586425 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.063375256 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.064276229 seconds)
  done (took 142.196778366 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.063882675 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.064469441 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.064660264 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.065190785 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.063308729 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.065028646 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.064859067 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.065847855 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.065084356 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.064954599 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.06460845 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.065154942 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.065033815 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.063989332 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.064279424 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.064984032 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.065548382 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.065363646 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.064980585 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.065283885 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.065314708 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.066108592 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.066876539 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.065903693 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.066600652 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.06319816 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.064885349 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.065754887 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.065468492 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.065889379 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.066437907 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.065489689 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.06589854 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.066585604 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.066297145 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.066896729 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.066385566 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.06678399 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.066295205 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.065906058 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.065931062 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.066488283 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.067037598 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.066045517 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.066445874 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.066305618 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.066406125 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.066947951 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.066528753 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.065317159 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.065414783 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.066729594 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.06769385 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.066753539 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.06727822 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.065831698 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.067195138 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.068444662 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.067541733 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.067148218 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.067583364 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.066497502 seconds)
  done (took 130.077712779 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.065653311 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.065824331 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.067281382 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.067005314 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.067256095 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.065923782 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.066229067 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.067171107 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.066126504 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.066111837 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.067718464 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.068669881 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.068517576 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.066830179 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.067451596 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.068699116 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.066850828 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.06778674 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.06728255 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.068144741 seconds)
  done (took 43.338296464 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.067830556 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.067553197 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.067603023 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.037880467 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.067253004 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.067030983 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.067715389 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.066535272 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067434691 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.066884795 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.068671547 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.069703217 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.068119647 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.067930724 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.06807851 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.068445749 seconds)
  done (took 35.052130848 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.06856994 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.068947291 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.069399539 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.069799516 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.069452924 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.068126908 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.069453826 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.07004331 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.067026112 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.069142183 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.068314294 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.069683514 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.068229672 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.069820917 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.068885346 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.068243601 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.069539148 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.070135079 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.0694916 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.068665948 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.069086681 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.067662868 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.069431728 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.069451376 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.069984504 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.070590373 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.068957472 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.069242024 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.070576455 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.069285845 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.069995683 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.071366404 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.07070263 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.07021579 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.071005949 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.058953757 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.070640836 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.069912802 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.070001568 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.070679594 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.069749779 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.070440156 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.069857742 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.071061309 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.07376822 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.071662074 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.071424834 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.071517513 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.069602927 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.07145921 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.069964635 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.07196674 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.070798791 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.070881216 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.070096714 seconds)
  done (took 115.831496552 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.070898428 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.072082796 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.071558539 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.071272731 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.071858588 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.070439733 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.07227154 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.071915187 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.071958634 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.072228943 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.071010375 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.072626604 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.071883974 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.071207876 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.072293429 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.072531795 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.072154297 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.073156518 seconds)
  done (took 39.293849759 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.072268057 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.071955073 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.070846551 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.072004987 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.072471919 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.073535787 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.072635806 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.071325506 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.072604992 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.071492391 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.07225478 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.072946173 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.072052049 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.072070987 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.072111759 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.073029953 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.072899805 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.072655662 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.072356352 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.072559954 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.072400819 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.073665084 seconds)
  done (took 47.592538227 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.073163501 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.074845699 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.087538377 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.093168411 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.092545798 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.10630045 seconds)
  done (took 14.528444276 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.072270804 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074220592 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.073744871 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.07297286 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.074073682 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.073847546 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074844777 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.073792448 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.074299851 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.073796681 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.073728395 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.075218365 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.07302348 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.075117622 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.074072695 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.072146007 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.074597637 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074718363 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.074439671 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.074515679 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.074011561 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.074853972 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.073505936 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.075014935 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.073993537 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.075077184 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074576528 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.074686517 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.074152427 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075586657 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.074134289 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.074362884 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.07373964 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.075263238 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.073669705 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.07547912 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074945266 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074611893 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.074673111 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.07512852 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.074832107 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.075191788 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074673231 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.075484178 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.074939552 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.073670558 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.074987559 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.075976348 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.075183143 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.076257184 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075715245 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074806809 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.074969166 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.077126198 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.076257662 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.07636849 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.07634524 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.076899107 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.075769894 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076247279 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.075157647 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.075993648 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076522718 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.077462151 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.075836351 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.077065935 seconds)
  done (took 138.945622038 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.077033758 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.076608328 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.075851571 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.077178825 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076565321 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.077834116 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.076917171 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076760142 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.076921307 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.076845034 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078126517 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.077503898 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.077496838 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.077031813 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.077438367 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.077430353 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.076785256 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.077879753 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.076742222 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.07761345 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.076870077 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.077562133 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.077328768 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.076499612 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.077798735 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.077369692 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.077990468 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.07788485 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.077718805 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.078305448 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.076905385 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.077047018 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.077379467 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.076527936 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.076796988 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.077932391 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.078253385 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.079097076 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.080884911 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.078878158 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.078674017 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.078549111 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.078558067 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.079810622 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.078373275 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.079069896 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.07888847 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.079281111 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.079426262 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078079261 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.078729261 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.079556484 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.079427207 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.078203618 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078506697 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.078956371 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.078516309 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.078612166 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.07983354 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078993026 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.078492369 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078380421 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.080093719 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.07861307 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.079617901 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.078932105 seconds)
  done (took 139.155503538 seconds)
done (took 2848.572766175 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.193331045 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.183978091 seconds)
  done (took 16.384576131 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.24477994 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.115441383 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.264061962 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.195415394 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.088074007 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.090324502 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.079620087 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.084677125 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.175942568 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.084289895 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.129353417 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.082109328 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.083240924 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.085564225 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.085840401 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.084465234 seconds)
  done (took 55.982666482 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.084179075 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.0867557 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.086118075 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.08409094 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.097017116 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.162402395 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.104961103 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.086309827 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.099699697 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.117962152 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.100610487 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.089437136 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.091978635 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.089114941 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.171655205 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.1274119 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.13969207 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.156395894 seconds)
  done (took 39.987286995 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.165819666 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.092297651 seconds)
  done (took 11.277810987 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.117346484 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.098402515 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.087821086 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.109924481 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.089823527 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.093866647 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.105472268 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.113321276 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.113375003 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.117780519 seconds)
  done (took 73.068437672 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.092430212 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.077170095 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.344712606 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.096824657 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.09797333 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.112003655 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.087550419 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.116193732 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.088521266 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.089585296 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.093317607 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.353811466 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.093748931 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.087756728 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.511120852 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.097283153 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.093177959 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.116982856 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.116160865 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.09095269 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.093703996 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.092990825 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.252189099 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.80495024 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.08769856 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.089178318 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.09296862 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.083069428 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.086232847 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.08795005 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.090367747 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.087129076 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.091712887 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.093364185 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.090930661 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.090695192 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.576597164 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.107980783 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.093275179 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.180915952 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.131250275 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.092729255 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.877566827 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.088570552 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.088055785 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.092338122 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.766443629 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.167500087 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.086527873 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.246737906 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.417326483 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.100917627 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.246828633 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.272037732 seconds)
  done (took 144.81200118 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.085856668 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.40872697 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.239473323 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.088445563 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.395473755 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.298801814 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.720811384 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.13333359 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.086874426 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.303823914 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.22399945 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.193918779 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.091284227 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.084912279 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.086246598 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.085151605 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.241605052 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.15357178 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.09147767 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.087385433 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.107720959 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.244871973 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.188639688 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.088467375 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.09948826 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.309317231 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.132048356 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.194118352 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.587811194 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.086950087 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.148993221 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.553525418 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.087518051 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.083526744 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.126589421 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.187088659 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.175037667 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.087619968 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.088369148 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.087767061 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.775031475 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.287805743 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.193039423 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.219750554 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.232342509 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.29701285 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.562687227 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.086948108 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.599975715 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.258233358 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.296191639 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.308797498 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.184557305 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.085948434 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.50996811 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.087517922 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.738595626 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.31503088 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.231134286 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.193668536 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.092148636 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.090049496 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.086135086 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.331285886 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.086873852 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.186015157 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.091348264 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.088347016 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.187070977 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.196675978 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.227098864 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.309490406 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.119206385 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.819843565 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.30291412 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.259950697 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.150127674 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.316968143 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.091375973 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.084710932 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.176772412 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.687264 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.218632524 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.336504821 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.327268815 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.112493269 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.675962622 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.089969214 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.238504399 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.263992062 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.370755187 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.237280336 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.143819334 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.981771824 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.089206508 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.090575773 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.175563725 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.212916815 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.284444761 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.445423214 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.33468901 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.670394284 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.108612122 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.46551047 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.197930335 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.093193723 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.744827242 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.090562394 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.299823697 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.133624967 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.090260203 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.090442629 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.258105159 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.10847911 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.090826782 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.876954687 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.14984775 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.094433093 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.265538308 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.092299566 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.338772605 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.996117804 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.327971502 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.0609307 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.119282376 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.266281543 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.23557953 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.387016868 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.422057348 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.33839765 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.178350727 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.324209437 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.992649692 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.093216487 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.362898532 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.092646953 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.094798684 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.262041205 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.006768277 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.240254984 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.095101943 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.413087668 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.109109741 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.144726774 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.096929592 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.336203362 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.123971757 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.140460895 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.093761653 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.222985902 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.094988236 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.025393475 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.250187312 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.093104936 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.091592472 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.673876127 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.094476917 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.239792219 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.323208047 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.106125825 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.160134763 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.585378516 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.689206602 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.181569949 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.116318158 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.462912318 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.804623493 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.227037544 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.072105941 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.553567973 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.092633542 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.335308845 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.288420553 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.096984447 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.093226659 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.952892237 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.727123743 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.095053832 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.250582541 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.57120164 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.485166904 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.301550584 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.097146341 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.14274698 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.09696085 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.833131667 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.437308893 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.092990292 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.09076816 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.094257743 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.092984639 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.096082584 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.305352469 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.123583562 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.628101626 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.23244878 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.354751206 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.399193949 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.316201223 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.12798864 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.095412918 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.37866845 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.095125952 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.158452524 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.095716307 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.100677295 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.375462159 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.096072597 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.310052621 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.306908407 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.069153159 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.141492612 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.094800705 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.071329571 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.093934096 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.232206605 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.187908372 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.09675654 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.097523331 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.138274945 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.200521661 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.278436352 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.381022964 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.09030069 seconds)
  done (took 934.587601583 seconds)
done (took 1278.104917833 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.097953564 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.096517181 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.096981964 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.094729564 seconds)
  done (took 30.402612924 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.098765928 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.099357639 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.099498248 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.099575196 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.098521072 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.10029579 seconds)
  done (took 14.62334879 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.096625496 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.096951758 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.099416327 seconds)
  done (took 23.320204636 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.529379824 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.501490668 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.171635878 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.241044205 seconds)
  done (took 11.470255937 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.102950988 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.098468107 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.097075752 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.100199623 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.10025638 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.099448764 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.09979162 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.101638319 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.100932281 seconds)
  done (took 20.93667239 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.195641401 seconds)
done (took 106.967871471 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.105453816 seconds)
    (2/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 3.393289003 seconds)
    (3/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.292157278 seconds)
    (4/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.486724567 seconds)
    (5/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.858697703 seconds)
    (6/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.313023734 seconds)
    (7/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.259554117 seconds)
    (8/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.217197395 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.23228392 seconds)
    (10/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.09634758 seconds)
    (11/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.23824353 seconds)
    (12/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.101490871 seconds)
    (13/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.195582755 seconds)
    (14/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.367992645 seconds)
    (15/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.098052964 seconds)
    (16/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.386472924 seconds)
    (17/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.864810644 seconds)
    (18/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.296840332 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.121736455 seconds)
    (20/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.307348477 seconds)
    (21/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.459044794 seconds)
    (22/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.228302541 seconds)
    (23/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.965434555 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.467124536 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.662658769 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.436613863 seconds)
    (27/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.116021336 seconds)
    (28/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.798610755 seconds)
    (29/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.216424637 seconds)
    (30/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.498307661 seconds)
    (31/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.394105375 seconds)
    (32/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.112150944 seconds)
    (33/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.183754231 seconds)
    (34/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.116302294 seconds)
    (35/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.110149984 seconds)
    (36/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.959098372 seconds)
    (37/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.590955996 seconds)
    (38/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.097931585 seconds)
    (39/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.435240116 seconds)
    (40/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.645436071 seconds)
    (41/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.10126238 seconds)
    (42/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.108144687 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.202034534 seconds)
    (44/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.56042848 seconds)
    (45/341) benchmarking ("sort", Float32, false)...
    done (took 5.744861047 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.186716829 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.32729884 seconds)
    (48/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.109824074 seconds)
    (49/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.289386167 seconds)
    (50/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.438737994 seconds)
    (51/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.491399195 seconds)
    (52/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.997603853 seconds)
    (53/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.206458406 seconds)
    (54/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.442243435 seconds)
    (55/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.102850182 seconds)
    (56/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.171612324 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.518633796 seconds)
    (58/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.100473283 seconds)
    (59/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.528492498 seconds)
    (60/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.167895351 seconds)
    (61/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.661493907 seconds)
    (62/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.204937037 seconds)
    (63/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 3.838540165 seconds)
    (64/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.018394062 seconds)
    (65/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.398951307 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.810633113 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.489597685 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.340099889 seconds)
    (69/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.101574129 seconds)
    (70/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.14431005 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.491754119 seconds)
    (72/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.204351471 seconds)
    (73/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.336378492 seconds)
    (74/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.11419495 seconds)
    (75/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.22101115 seconds)
    (76/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.112842984 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.233996804 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.815715329 seconds)
    (79/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.319458611 seconds)
    (80/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.106355838 seconds)
    (81/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.412687859 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.491924357 seconds)
    (83/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.1047576 seconds)
    (84/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.706022335 seconds)
    (85/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.467286593 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.119765026 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.114934801 seconds)
    (88/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.214611788 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.171957059 seconds)
    (90/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.376887415 seconds)
    (91/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.10442935 seconds)
    (92/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.09924596 seconds)
    (93/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.323753161 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.29512734 seconds)
    (95/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.105983497 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.315607677 seconds)
    (97/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.421555996 seconds)
    (98/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.881487798 seconds)
    (99/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.20049826 seconds)
    (100/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.472337503 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.181842958 seconds)
    (102/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.569843867 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.961457187 seconds)
    (104/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.105777634 seconds)
    (105/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.196591684 seconds)
    (106/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.202352984 seconds)
    (107/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.950544402 seconds)
    (108/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.182598583 seconds)
    (109/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.415777805 seconds)
    (110/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.415275389 seconds)
    (111/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.270353049 seconds)
    (112/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 3.048068547 seconds)
    (113/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.61402682 seconds)
    (114/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.127272691 seconds)
    (115/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.817416338 seconds)
    (116/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.127855663 seconds)
    (117/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.280487421 seconds)
    (118/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.13268012 seconds)
    (119/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.4022644 seconds)
    (120/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.263529747 seconds)
    (121/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.078504477 seconds)
    (122/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.250077987 seconds)
    (123/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.233386872 seconds)
    (124/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.135596662 seconds)
    (125/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.197474411 seconds)
    (126/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.407003977 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.403293159 seconds)
    (128/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.118846728 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.157099164 seconds)
    (130/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 3.921501766 seconds)
    (131/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.117442039 seconds)
    (132/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.128896627 seconds)
    (133/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.140354673 seconds)
    (134/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.320205358 seconds)
    (135/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.081490444 seconds)
    (136/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.253810919 seconds)
    (137/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.119350859 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.48971964 seconds)
    (139/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.257018486 seconds)
    (140/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.213123997 seconds)
    (141/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.233527792 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.041623395 seconds)
    (143/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.137035069 seconds)
    (144/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.620744679 seconds)
    (145/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.256244112 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.253599446 seconds)
    (147/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.321183779 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.413452984 seconds)
    (149/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.119070011 seconds)
    (150/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.164741977 seconds)
    (151/341) benchmarking ("sort", Float64, false)...
    done (took 5.839404778 seconds)
    (152/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.207543928 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.255678517 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.36071944 seconds)
    (155/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.361708956 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.841754177 seconds)
    (157/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.141863223 seconds)
    (158/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.491843919 seconds)
    (159/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.148366579 seconds)
    (160/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.198120476 seconds)
    (161/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.228758581 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.456179431 seconds)
    (163/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.364300479 seconds)
    (164/341) benchmarking ("sort", Bool, false)...
    done (took 2.338892835 seconds)
    (165/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.721946674 seconds)
    (166/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.514241452 seconds)
    (167/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.437555023 seconds)
    (168/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.522748579 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.416537725 seconds)
    (170/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.046154542 seconds)
    (171/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.146309626 seconds)
    (172/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.135359678 seconds)
    (173/341) benchmarking ("sort", Int64, false)...
    done (took 5.755837385 seconds)
    (174/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.249763542 seconds)
    (175/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.135846686 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.362455965 seconds)
    (177/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.426091053 seconds)
    (178/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.013214853 seconds)
    (179/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.799186697 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.480670682 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.261412674 seconds)
    (182/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.185729359 seconds)
    (183/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.406449651 seconds)
    (184/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.900234804 seconds)
    (185/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.120053471 seconds)
    (186/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.503596773 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.141145354 seconds)
    (188/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.141481962 seconds)
    (189/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.492865278 seconds)
    (190/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.246319338 seconds)
    (191/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.227719983 seconds)
    (192/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.269168149 seconds)
    (193/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.86554679 seconds)
    (194/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.368660954 seconds)
    (195/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.543321692 seconds)
    (196/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.241038716 seconds)
    (197/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.121325279 seconds)
    (198/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 5.025065992 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.364420417 seconds)
    (200/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.519579799 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.119909166 seconds)
    (202/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.538080138 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.963698892 seconds)
    (204/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.71863701 seconds)
    (205/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.329093206 seconds)
    (206/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.284327217 seconds)
    (207/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.43990119 seconds)
    (208/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.128961609 seconds)
    (209/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.539560585 seconds)
    (210/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.168922738 seconds)
    (211/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.980167503 seconds)
    (212/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.138144215 seconds)
    (213/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.122692059 seconds)
    (214/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.697514825 seconds)
    (215/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.898773556 seconds)
    (216/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.340113667 seconds)
    (217/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.122021007 seconds)
    (218/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.280246885 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.251913978 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.270141805 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.436239782 seconds)
    (222/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.141619183 seconds)
    (223/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.900393564 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.189142717 seconds)
    (225/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.543474907 seconds)
    (226/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.209964275 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.248334011 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.494210739 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.944895126 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.039757412 seconds)
    (231/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.588565626 seconds)
    (232/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.185968805 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.126700125 seconds)
    (234/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.282563545 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.753338264 seconds)
    (236/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.125701681 seconds)
    (237/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.328948538 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.424903741 seconds)
    (239/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.517957505 seconds)
    (240/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.263931843 seconds)
    (241/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.144531709 seconds)
    (242/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.125158635 seconds)
    (243/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.392170917 seconds)
    (244/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.513431866 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.424499632 seconds)
    (246/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.236011222 seconds)
    (247/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.203443303 seconds)
    (248/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.136043667 seconds)
    (249/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.258620534 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.146906054 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.212649267 seconds)
    (252/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.468548948 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.212208352 seconds)
    (254/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.125122626 seconds)
    (255/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.011715852 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.141978214 seconds)
    (257/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.129076423 seconds)
    (258/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.183132728 seconds)
    (259/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.152355693 seconds)
    (260/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.390658625 seconds)
    (261/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.206253698 seconds)
    (262/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.181392708 seconds)
    (263/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.330766905 seconds)
    (264/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.233470836 seconds)
    (265/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.434862272 seconds)
    (266/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.34795944 seconds)
    (267/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.289282223 seconds)
    (268/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.545622136 seconds)
    (269/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.259002524 seconds)
    (270/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.389761336 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.277601872 seconds)
    (272/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.259611063 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.140340685 seconds)
    (274/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.363401693 seconds)
    (275/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.353542377 seconds)
    (276/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.128303196 seconds)
    (277/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.561670766 seconds)
    (278/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.124197933 seconds)
    (279/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.141385214 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.056607988 seconds)
    (281/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.146975106 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.370850677 seconds)
    (283/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.23575194 seconds)
    (284/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.141751166 seconds)
    (285/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.558705231 seconds)
    (286/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.422856023 seconds)
    (287/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.84089564 seconds)
    (288/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.131204481 seconds)
    (289/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 9.81895005 seconds)
    (290/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.387241647 seconds)
    (291/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.129483949 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.220307012 seconds)
    (293/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.771023795 seconds)
    (294/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.123913688 seconds)
    (295/341) benchmarking ("sort", BigInt, false)...
    done (took 7.163771751 seconds)
    (296/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.128359498 seconds)
    (297/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.386706064 seconds)
    (298/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.248570753 seconds)
    (299/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.315861614 seconds)
    (300/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.453761486 seconds)
    (301/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.259399883 seconds)
    (302/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.841843121 seconds)
    (303/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.277445639 seconds)
    (304/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.00551258 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.260148697 seconds)
    (306/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.442827916 seconds)
    (307/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.140685286 seconds)
    (308/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.336417762 seconds)
    (309/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.384057064 seconds)
    (310/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.299824062 seconds)
    (311/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.127236176 seconds)
    (312/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.463107943 seconds)
    (313/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.259988239 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.01804874 seconds)
    (315/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.155014052 seconds)
    (316/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.281891764 seconds)
    (317/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.171812979 seconds)
    (318/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.124698349 seconds)
    (319/341) benchmarking ("map", abs, Int64, true)...
    done (took 3.840515604 seconds)
    (320/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.156888843 seconds)
    (321/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.200584021 seconds)
    (322/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.126648395 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.984383818 seconds)
    (324/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.25996515 seconds)
    (325/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.375404533 seconds)
    (326/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.214126109 seconds)
    (327/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.44416226 seconds)
    (328/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.206393731 seconds)
    (329/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.258400874 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.465337539 seconds)
    (331/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.446931954 seconds)
    (332/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.214481567 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.065523013 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.369828302 seconds)
    (335/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.224982179 seconds)
    (336/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.129520164 seconds)
    (337/341) benchmarking ("map", abs, Bool, false)...
    done (took 3.530733872 seconds)
    (338/341) benchmarking ("sort", Int8, false)...
    done (took 5.091305281 seconds)
    (339/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.429621455 seconds)
    (340/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.130063387 seconds)
    (341/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.375430415 seconds)
  done (took 1180.975997747 seconds)
done (took 1183.082037065 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.157291124 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.130271825 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.635421819 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.141039085 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.131689288 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.134827943 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.645543903 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.159191281 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.148280526 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.645058887 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.139918521 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.133831851 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.148755173 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.167281722 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.143054738 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.146254247 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.137422352 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.158213901 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.167139122 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.139699313 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.185585697 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.1391161 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.132136018 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.184329354 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.122467084 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.148194129 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.158585943 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.154658178 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.184103226 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.136207803 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.137437553 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.485918734 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.185064805 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.136854065 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.148025824 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.14783336 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.140217042 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.151607989 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.156758515 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.149376558 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.133524958 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.144251523 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.127292913 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.134403714 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.133725307 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.133805436 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.134158376 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.260636353 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.14835662 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.470519398 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.18954985 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.159460634 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.184396469 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.138268059 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.136288741 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.125599669 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.186563575 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.140148396 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.138241148 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.472834988 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.229047391 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.148313465 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.466433306 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.198880553 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.144545981 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.143139341 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.134691088 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.158944565 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.488452215 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.688740424 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.164721721 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.155231145 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.137570738 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.137060014 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.148742167 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.646426199 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.147534762 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.716499443 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.158272402 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.149703543 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.141558156 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.137444271 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.136770506 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.15329708 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.159566205 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.136584286 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.142650332 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.141962829 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.1509504 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.486734313 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.181912221 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.637489138 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.142634945 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.162118809 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.159095709 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.714861607 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.160287723 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.157970292 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.138245107 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.487945015 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.178670311 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.163172681 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.138058986 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.148609406 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.254512873 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.160339287 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.163632806 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.136583341 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.160088482 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.142539806 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.139199727 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.150413635 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.158129341 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.172374739 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.155284363 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.138777183 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.146880148 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.143638059 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.159922041 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.146153364 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.145384937 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.149951843 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.137690134 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.189720299 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.162417509 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.153506113 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.253348592 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.146374741 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.264775194 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.152930059 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.148099807 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.138409184 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.475694764 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.184755587 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.161136708 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.145756142 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.161774794 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.161261951 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.155575408 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.140512117 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.153506771 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.143397235 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.18811703 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.138467153 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.162638501 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.191142577 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.153552536 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.144492881 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.163402557 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.174653223 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.161189743 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.144516745 seconds)
done (took 336.349474024 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.184869474 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.138041428 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.216458391 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.13741479 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.206195112 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.191882891 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.138335731 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.139909572 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.140311229 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.519273792 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.139508207 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.146544186 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.138352512 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.139580998 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.189169833 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.139115555 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.139077393 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.371352794 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.14085613 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.200185882 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.137959681 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.140012819 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.140450521 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.528464457 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.136492842 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.139037338 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.200160816 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.139910971 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.378836935 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.139282947 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.139587976 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.386140934 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.199752069 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.15207643 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.147300914 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.149812864 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.208171278 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.148612233 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.188246004 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.188610584 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.214512319 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.175208727 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.139618986 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.139806438 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.144301203 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.139537632 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.141932346 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.174480672 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.139310865 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.144382077 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.371075932 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.147225334 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.145386263 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.142089607 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.139855523 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.155740766 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.140009487 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.142197806 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.200889744 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.14419174 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.187137091 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.528055908 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.522007529 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.141080087 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.141000965 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.141006443 seconds)
  done (took 201.753699188 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.208963897 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.228771882 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.20951301 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.144837435 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.195566358 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.20037414 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.14603035 seconds)
  done (took 17.400409468 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.148367719 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.141738457 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.165731392 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.166765173 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.142456721 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.281419549 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.154108226 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.149353946 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.166326748 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.145621182 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.43450394 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.165457104 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.145500431 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.139707255 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.15281115 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.171200348 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.145267697 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.143382853 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.241017931 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.221116854 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.148014734 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.149209436 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.171227497 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.152637622 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.14178681 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.14663495 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.143912311 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.147794428 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.144648252 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.14202345 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.143388135 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.157871646 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.13506987 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.14152133 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.143196028 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.144877289 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.142666283 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.143805163 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.142206711 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.142332851 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.143034187 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.14059983 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.142023748 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.142687522 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.142560605 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.164744985 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.141719542 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.140603032 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.142630066 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.143154055 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.172350581 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.143025693 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.142725123 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.148269189 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.178296565 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.151541736 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.142711882 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.142661984 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.144762755 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.144286801 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.144559322 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.22264217 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.168351198 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.143969118 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.168932113 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.182584498 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.143165966 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.145371635 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.144351613 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.169232777 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.146966367 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.166289651 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.145848239 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.237156544 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.144231565 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.281345046 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.168230794 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.150417814 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.149060847 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.14648893 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.15176114 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.146070406 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.148688621 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.151814763 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.151365056 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.145948659 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.146684546 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.148460982 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.153554923 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.146892247 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.189898507 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.141769945 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.148018406 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.243008052 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.14555652 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.244612828 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.169023269 seconds)
  done (took 231.711799718 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.152748046 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.145533118 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.160125583 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.147119997 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.146156798 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.151341457 seconds)
  done (took 14.974463605 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.150163911 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.150455348 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.147360923 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.146147462 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.147020666 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.14667616 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.146677285 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.148339623 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.151613217 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.147701814 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.147348503 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.149366643 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.147341071 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.148777204 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.148049368 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.147841844 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.145192619 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.146586375 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.147974903 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.147530205 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.37622004 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.148240174 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.148051385 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.14978366 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.152693235 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.147514501 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.156558063 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.148587123 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.145925554 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.155331411 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.149959068 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.148546044 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.154854205 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.155393771 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.154173044 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.15231157 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.153458654 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.151500719 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.149286996 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.14979094 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.149175442 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.15006844 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.150519155 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.15148588 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.151910908 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.159079319 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.155590597 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.158902908 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.148564479 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.151754036 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.151379899 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.148789653 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.148704964 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.15225177 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.155457481 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.157416357 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.157217974 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.149994785 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.151002391 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.153412176 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.153533522 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.149843184 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.154257985 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.153228333 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.157191154 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.152920673 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.154124169 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.153652625 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.15152005 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.150814428 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.150767788 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.150527093 seconds)
  done (took 158.165626138 seconds)
done (took 626.065623615 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.207599292 seconds)
  done (took 9.283884208 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.264760504 seconds)
  done (took 9.439817874 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.482389612 seconds)
  done (took 12.56658134 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.201420893 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.164471815 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.166813704 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.154432065 seconds)
  done (took 30.779025821 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.420512056 seconds)
  done (took 9.498894851 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.16641157 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.14529534 seconds)
  done (took 16.456917248 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.358187939 seconds)
  done (took 9.437147556 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.255831871 seconds)
  done (took 9.358502159 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.164186026 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.159083874 seconds)
  done (took 16.419636401 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.151332854 seconds)
  done (took 9.22925137 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.906129857 seconds)
  done (took 10.06785855 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.165574429 seconds)
  done (took 9.260780644 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.177477282 seconds)
  done (took 9.257486605 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.087449 seconds)
  done (took 10.165940684 seconds)
done (took 173.29436705 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.161554448 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.14559149 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.149409498 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.145863456 seconds)
  done (took 30.679870588 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.188312066 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.189038288 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.197830756 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.186043347 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.179729169 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.17754411 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.187058817 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.187832449 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.178631642 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.184562911 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.187729 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.185162223 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.189721451 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.196985139 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.196880719 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.187480736 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.187951543 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.188873428 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.177958208 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.194762285 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.184466433 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.18614263 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.153967678 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.153197366 seconds)
  done (took 54.507357814 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.344094756 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.220408957 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.307325977 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.200562346 seconds)
  done (took 11.150304915 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.153030591 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.216107446 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.205507189 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.19745762 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.203844155 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.255565651 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.204592863 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.288379214 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.282560018 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.281294194 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.162515096 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.174349875 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.178131599 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.199244346 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.257177413 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.154226139 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.154302237 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.269804139 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.216850753 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.411966972 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.154572442 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.209927296 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.205538317 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.207920778 seconds)
  done (took 55.324960911 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.155616065 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.164139829 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.163409364 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.15780181 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.157111324 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.156473671 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.168786628 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.157087347 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.179287055 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.15994622 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.158202135 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.1583074 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.163370643 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.157521205 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.159263103 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.172360034 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.173379303 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.161291463 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.161607799 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.165929994 seconds)
  done (took 45.332909081 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.155830825 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.003956791 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.505922746 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.408626477 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.15670024 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.154577842 seconds)
  done (took 33.469043581 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.17271496 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.17625443 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.161650812 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.184177813 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.203314578 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.159975611 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.218396117 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.323160054 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.167194494 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.216096476 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.17365452 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.155982961 seconds)
  done (took 28.397446143 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.159998311 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.158718793 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.158724143 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.171174364 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.168051962 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.165392924 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.165293474 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.158314246 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.172185079 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.180797499 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.169339681 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.17295774 seconds)
  done (took 48.084389532 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.375056263 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.385466982 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.384308883 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.786536329 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.473053285 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.136597657 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.445932956 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.372701597 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.897059919 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.915310438 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.448278988 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.135363583 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.103863681 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.08633987 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.078558662 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.402816931 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.16035368 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.018873218 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.418379891 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.201841582 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.160592495 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.161448839 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.159568387 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.448936766 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.486715043 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.160651711 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.372773303 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149879309 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.15914442 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422950827 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.769829354 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.212437899 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.363264203 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.41890552 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.502837117 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.269598469 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.16161979 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.368850035 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.202957048 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.197967984 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.170776661 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.173579843 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.705460962 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.174690841 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.434379502 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162719224 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.22384233 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.163929469 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08418346 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.415543862 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.270217515 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.161599162 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.198309021 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.595442383 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.282294873 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.405706473 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.16712368 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.371652351 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218926608 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.359574668 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.315990483 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.160872712 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.375570503 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08777911 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.511268762 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278622319 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.166891371 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.168632027 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.861487576 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.405180366 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.243810928 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.420966292 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.909645548 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.163648676 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.167022053 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.209741851 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.258236501 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.159846842 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.454664161 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.141508966 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.085919007 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.249749502 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.56411766 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166884514 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.161406164 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.170910402 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.009618062 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.090163001 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.281756983 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.36381247 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.47985879 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.164219893 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.165698899 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.184839873 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166777949 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.114951989 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.752635565 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.224922639 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.089624456 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.728199742 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.823625849 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.125276437 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.653384108 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.203116392 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.437396914 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.309068088 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.566332674 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.371602721 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.410905316 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.717670865 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167161899 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.780377645 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.245220208 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.240815533 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.162099102 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.726308094 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.379770882 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.401801998 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.271835399 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.164432226 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.090024727 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.175942186 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.369846973 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.784675483 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.217192782 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.160615282 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.168206143 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.16516944 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.168721594 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.328297005 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180252601 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.452003437 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.236014172 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.164069082 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.103341216 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.167533934 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.442766718 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.849526678 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217979966 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.427441936 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.435836687 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.865787846 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.760783541 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.11178593 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.434011629 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.220843113 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.238815499 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.749555277 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.294623577 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.252562651 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.16800669 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.288591734 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.169633234 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.168842938 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.590476877 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.575738462 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.595593992 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.210154836 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.16616543 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.156351766 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.37762936 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.407208284 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.208895695 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.185238411 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.169385411 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.251934266 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.393767677 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.16717543 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.092770277 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.410968697 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.408252951 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.461874367 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.575843826 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.208683824 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.239457765 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.177799275 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.381524715 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.249587897 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.843189877 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.713539657 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.381570788 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.770152703 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.131546633 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.809598319 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.373769388 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.546294959 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.187171932 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.61557311 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.377558483 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.878303857 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.197427643 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.695658681 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.092627061 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175812084 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.509029264 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.12569715 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.484109005 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.229759073 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18202652 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.171187053 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.169434959 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177597783 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.068495967 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.272141254 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.237913795 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242388474 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.095035234 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.842118557 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.207077298 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.173619129 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.16967221 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.473073823 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.965917156 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.120319282 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.168850853 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247193105 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.914957108 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.72160652 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.170376169 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.172788783 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.781435065 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.177554719 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.759357404 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.251683824 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.911771024 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193156053 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.37510326 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.863800568 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.460271662 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.243907777 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245480555 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.168369241 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177054138 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.870356015 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.18109043 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.871847296 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.451625558 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.446315584 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.609291267 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.228772661 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.382287842 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.184447404 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.171602562 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.643594774 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.192265876 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173313408 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.374149268 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.682313333 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.445472582 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.81043788 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.244628208 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.174163487 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.439955267 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.172299919 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.78694767 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.857056891 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.172430481 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.172199567 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.423663955 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.85545013 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.174143102 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.14913091 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17746852 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.383652593 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.37497661 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.444471413 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.471671097 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.619567422 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.098349179 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.17769054 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.206476597 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.416445825 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.171748926 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.209458115 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.618440211 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.230226596 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.596604769 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.457336595 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.504251853 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.804789143 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.439599188 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.236871486 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.183014317 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.825183163 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.293694931 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.104367677 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.289305251 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.099035493 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.925999045 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.459906259 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.188724265 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.43944291 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151312427 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.510903666 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.468942837 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.376942782 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.212432913 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.199344185 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.172037642 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.209317814 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.172338501 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.400058342 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.288636356 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.178139472 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.749376937 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.211830826 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218714846 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.177889541 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.652957886 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.190468082 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178104258 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.869659363 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.196824067 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292167278 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245219277 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.926116914 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.835625749 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.197283508 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.123719352 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.825363496 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.444091411 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.228555433 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.623895134 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214645812 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.579620787 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.172874138 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.38712096 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.177669481 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.784438068 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218155305 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.444509481 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.131648837 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.382176494 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.386354593 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.203561823 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.179833944 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.103365106 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.281951959 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.042554486 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.157505129 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.178575061 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.857879471 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.5668581 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.417521804 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.599135785 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.994607438 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.177674475 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.511698704 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.567241864 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.824309544 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205705518 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17609167 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.437109249 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.298340069 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.432107391 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.460410197 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.182272187 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.203228476 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.388622732 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30069794 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.095035642 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.656579222 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.756129783 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.876728438 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.187417606 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.378429968 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.4492406 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.495618311 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207835211 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.248906507 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.58057095 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.442890231 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.243694345 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.101351436 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.178718803 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.576109593 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.695211911 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.271674023 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.415700288 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.505541657 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.759964637 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.852163626 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.636659928 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.562728193 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.615204004 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.580289015 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.405488742 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.542800849 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.504676149 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.059781091 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.589206102 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.38979746 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.27555378 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.453970739 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.045545139 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.885476458 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.422328736 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.182436235 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.106510162 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.385427765 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.188230491 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.621132699 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.753467872 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.425066724 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.381011717 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.643155152 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.716274103 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.39641242 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.200789306 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.142633717 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.202280279 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.198593677 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.178993432 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.661515179 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.470272201 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.192862181 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119174759 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.847828371 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.106113318 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.392008397 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.398283902 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.213591808 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.735635423 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.38243302 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.27484303 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.470033811 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.461487373 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.212471356 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105011368 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.922498639 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.125605014 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.246733518 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.603246233 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.194403212 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.185204853 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.384666929 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.110329089 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226853122 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.185445792 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.390108638 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.763299849 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.448975801 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303378327 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.4261423 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.483763626 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.034817446 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.199704124 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.45368203 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.107484263 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.828921911 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.876635567 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.221537082 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251828978 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.18106097 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.183981745 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.453315767 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.447475118 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.272275698 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.920471185 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.211099718 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.206504889 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.44751176 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.267124445 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.184375165 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.187776662 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.692507601 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.413458071 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.182165348 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.186499987 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.394459679 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264806082 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.379256958 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.255968344 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.695489394 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.186799159 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.002957914 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275402785 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.129298106 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.189646655 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.924788659 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.24045932 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.182636494 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.456106151 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.819573234 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.382682773 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.580394968 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.143501978 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.40677898 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.224304914 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.185877804 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.193862852 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.568487062 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.488947719 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.183227336 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.456369277 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.229501808 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.189450781 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.846913044 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.151756166 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.182701693 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.871056931 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.0634942 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.903341149 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.578554312 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.247535077 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.183509809 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.187385563 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.110145402 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.182692754 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.346934788 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.163903255 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.188541609 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.55668372 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.455109862 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.268118685 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.191232988 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.185939008 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.19245948 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.39887633 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.698711984 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204171565 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.884457838 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.389792068 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.194354174 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.667783614 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.632220017 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.482480998 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.220442747 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.414480689 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.4322383 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.731817134 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.417563849 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.160816393 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.410711212 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.188862251 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.456425785 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.460536516 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.187592368 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.400099223 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.814385045 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.46890947 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.543316442 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.506486017 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.251941232 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.412370332 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.080411135 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.194697059 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.190298842 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.444534328 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.238444699 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.185278663 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.196033448 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.743385383 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.882202156 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.654713821 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342995119 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.459303221 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.967388497 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.938243742 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.191243167 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.11345884 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.18846953 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.208793087 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.190246541 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.114555594 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.889193269 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.957181991 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.400522039 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.499607632 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.114743089 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.392008814 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.772009924 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.110622071 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.156686156 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.224179904 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.431455092 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.116608201 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.192074552 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.143752942 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.418080294 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.928421125 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.455812669 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.188206118 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.132702061 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.189991707 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.187708994 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.189518346 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.272627634 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.190250408 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303860639 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.454323212 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.514337733 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.289723362 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.828580616 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.868031752 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.124854938 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227366652 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.805586533 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.759056913 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.424617446 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.312755546 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.927106405 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.131435532 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.193772511 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20588241 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.448912388 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.191238983 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.192180555 seconds)
  done (took 2264.539349099 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.281026555 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.398903335 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.272793092 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.250281552 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.350690304 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.220515137 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.255547696 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.243109407 seconds)
  done (took 60.387539453 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.189954737 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.150691599 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.19447587 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.194624569 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.186988266 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.192090127 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.379761808 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.218054338 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.190180134 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.198178058 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.192323821 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.195530648 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.189560275 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.195579508 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.192331356 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.428257988 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.209486782 seconds)
  done (took 81.85005885 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.24808488 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.989179938 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.190507011 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.958984355 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.238475564 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.495825504 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.191441203 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.195956562 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.468349915 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.489020062 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.213320209 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.205725438 seconds)
  done (took 96.001378658 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.191890645 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.192038992 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.194269419 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.193740538 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.193515144 seconds)
  done (took 13.083210073 seconds)
done (took 2824.936837563 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.435848667 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.289199824 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.270980801 seconds)
  done (took 6.677061901 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.335274921 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.38508069 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.496421223 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.504601205 seconds)
  done (took 11.843631957 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.478408412 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.566515218 seconds)
  done (took 7.161440406 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.566012452 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.20977758 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.581528517 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.197890322 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.193471977 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.197279822 seconds)
  done (took 23.706638094 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.191278271 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.192798619 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.194140681 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.193604377 seconds)
  done (took 10.890776577 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.193820408 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.930613193 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.192764225 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.205068038 seconds)
  done (took 22.640049432 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.38055671 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.254601172 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.958803984 seconds)
  done (took 9.713092321 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.816748943 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.65109293 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.800696848 seconds)
  done (took 10.386662402 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.083630304 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.180388785 seconds)
  done (took 8.381510291 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.339472855 seconds)
  done (took 4.456153886 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.017185944 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.508335099 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.66764439 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.713247571 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.779802118 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.412044925 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.518840309 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.465224616 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.591710498 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.638146577 seconds)
  done (took 28.431683055 seconds)
done (took 161.193862758 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.634661472 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.216661341 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.407279147 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.572106622 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.428351061 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.409468151 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.493221423 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.562418916 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.248524573 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.228532845 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.563657885 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.430652403 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.43796514 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.22020805 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.438877552 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.218157356 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.439977003 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.653669893 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.250051713 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.492446405 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.496477708 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.215622654 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.410524029 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.236982228 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.441935523 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.363179365 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.820146096 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.215779832 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.40335485 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.833403649 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.351264663 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.63752613 seconds)
  done (took 179.89280209 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.073861483 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.190729381 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.19463538 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.192315779 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.567562058 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.194578224 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.195750863 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.193109404 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.471529098 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.445391368 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.194452432 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.56214374 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.200108786 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.193092758 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.195319885 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.194597333 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.600645113 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.131872062 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.193202662 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.193208038 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.193719454 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.425729977 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.194413167 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.46573032 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.564796899 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.197536592 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.195532034 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.193587042 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.195411715 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.19402069 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.194513936 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.19415218 seconds)
  done (took 218.709773837 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.19605505 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.197172842 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.195336739 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.195297053 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.194503729 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.195974847 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.197440725 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.196836517 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.084343514 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.071048664 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.197107643 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.199927219 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.200158804 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.196900329 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.206203016 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.195143545 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.20402997 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.196373581 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.196333846 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.200883032 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.20381716 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.930811157 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.198884712 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.974858224 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.197710337 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.204716317 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.197275118 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.21118764 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.210569762 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.212443481 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.209801991 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.197540231 seconds)
  done (took 231.792481963 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.440878277 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.203839613 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.20245858 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.204839658 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.200050631 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.20105432 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.19335528 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.44693582 seconds)
  done (took 22.234813226 seconds)
done (took 654.758921073 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.584084676 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.939495262 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.332403225 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.220920207 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.514252139 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.271588773 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.220618923 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.289922073 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.873824185 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.295673208 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.641310659 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.22513767 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.942485549 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.249020261 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.33583028 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.282817153 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.590352264 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.878933955 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.351387184 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.897177984 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.420472056 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.16566491 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.30522449 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.910828335 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.653064153 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.185054182 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.244525681 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.594154012 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.222183452 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.460052375 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.919796869 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.503199349 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.234089412 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.214785347 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.280289982 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.259972907 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.418305522 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.228722424 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.334359212 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.962286606 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.891846009 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.756077861 seconds)
  done (took 114.228598583 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.210075947 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.206537668 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.208476999 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.208576589 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.209926886 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.208568537 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.207966905 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.210475248 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.208693122 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.209623913 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.209923927 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.208926399 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.209234055 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.210208671 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.211004156 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.210832679 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.209488475 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.210428639 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.208381051 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.209451031 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.207816204 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.208595229 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.204279596 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.212129328 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.206866998 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.209529783 seconds)
  done (took 59.574550978 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.204363458 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.358722427 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.496933316 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.232277906 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.206510908 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.209287361 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.233114828 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.208244834 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.208430473 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.20683928 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.317751133 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.211018723 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.218463563 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.495205626 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.231747416 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.204613144 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.207049452 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.207309961 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.366748902 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.223853157 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.237893317 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.209800478 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.237989859 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.218125285 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.20899392 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.208062544 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.212491243 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.632463071 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.215867823 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.319394102 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.251276429 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.238088004 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.542296294 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.503488962 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.273028438 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.215116057 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.206559969 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.363049601 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.216418216 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.206668586 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.234738859 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.214957769 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.497218113 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.714237042 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.221082086 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.206964536 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.630263084 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.372891306 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.252490006 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.219201355 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.503681552 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.237328224 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.201672201 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.207359431 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.244943855 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.214674258 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.210462151 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.452436907 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.224082919 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.237229016 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.216629533 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.210213958 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.381557409 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.216392175 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.361639436 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.21725539 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.215895379 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.211766215 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.502991601 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.235897046 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.70774507 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.220937288 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.208578997 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.321457159 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.365657443 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.654496483 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.220393647 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.378460204 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.560420318 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.243121451 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.21559378 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.616363438 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.248210616 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.217008872 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.209558301 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.20926705 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.207716808 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.250368877 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.237470542 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.628359063 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.717741528 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.467565703 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.244703566 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.222028473 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.21011549 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.452011226 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.218036471 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.210069191 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.496260621 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.733631466 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.222452373 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.218603117 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.695984852 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.22608854 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.240250672 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.216510648 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.509676043 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.238998513 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.250699347 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.210686775 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.219043458 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.215219121 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.241140775 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.217101213 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.211740152 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.692528962 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.382107932 seconds)
  done (took 272.268819261 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.215517358 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.205025862 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.209708403 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.206401047 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.211056563 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.213354343 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.210480653 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.209538793 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.213256851 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.211216712 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.210882148 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.211136217 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.213025901 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.214865466 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.258790035 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.214345776 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.703875979 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.212871926 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.212376811 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.209979664 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.783056202 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.218802856 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.214449528 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.209377282 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.213204773 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.214406976 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.215413849 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.257353278 seconds)
  done (took 177.236556831 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.213156585 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.260959605 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.220023484 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.259687186 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.218074326 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.212625408 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.23626597 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.224081151 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.218285746 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.210744519 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.214770716 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.242049469 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.21699696 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.286151423 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.236942892 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.244147348 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.288504178 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.216781634 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.214193713 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.213808407 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.25959776 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.224964989 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.240913033 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.267655426 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.222741008 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.261512974 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.223923607 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.214049866 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.213092995 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.304086717 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.231236234 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.241718768 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.243931449 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.232118509 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.306313151 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.303862374 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.289443267 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.238765958 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.219864916 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.215075433 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.215324374 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.21940488 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.261703097 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.220974562 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.215592488 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.309506015 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.229164976 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.214213576 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.234506311 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.21351545 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.224769883 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.23069721 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.247240879 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.314266233 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.258242286 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.239566185 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.234614641 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.233680945 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.215299245 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.288151389 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.224840999 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.305637288 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.231981017 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.22085617 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.217634996 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.217886507 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.263201154 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.242031812 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.289633131 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.219159235 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.287501504 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.264714292 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.222761619 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.216102638 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.217235481 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.264605975 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.296368088 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.266794309 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.269448935 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.243610017 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.227351885 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.215920259 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.221723327 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.243346849 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.222584454 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.303207112 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.305152922 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.218990194 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.217750767 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.218294909 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.219839269 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.24306215 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.272681448 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.249835898 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.303780747 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.246508962 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.251063371 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.224459194 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.229587119 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.223393511 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.247615346 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.221942916 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.229663184 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.551675263 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.251754245 seconds)
  done (took 237.907266013 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.592477501 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.260078081 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.288528392 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.492955119 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.604507517 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.318456202 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.252047071 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.275890314 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.276078798 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.382645098 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.321288296 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.309603835 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.248296135 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.2394037 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.264793057 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.274939547 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.294214957 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.56864556 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.358273386 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.121763626 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.451769478 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.541635652 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.547663193 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.631934616 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.306224398 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.654791955 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.889965015 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.350139537 seconds)
  done (took 72.263583607 seconds)
done (took 935.597522782 seconds)
SAVING RESULT...
DONE!
