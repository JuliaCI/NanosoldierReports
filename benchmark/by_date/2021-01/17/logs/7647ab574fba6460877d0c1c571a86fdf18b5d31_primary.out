cset: moving following pidspec: 10814
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.798645172 seconds)
loading group "shootout"... done (took 1.142297967 seconds)
loading group "string"... done (took 0.67344227 seconds)
loading group "linalg"... done (took 8.66762725 seconds)
loading group "parallel"... done (took 0.165766615 seconds)
loading group "find"... done (took 3.077462641 seconds)
loading group "tuple"... done (took 2.149206166 seconds)
loading group "union"... done (took 14.985692021 seconds)
loading group "dates"... done (took 1.440682917 seconds)
loading group "micro"... done (took 0.217688967 seconds)
loading group "simd"... done (took 4.929173429 seconds)
loading group "io"... done (took 1.110467759 seconds)
loading group "random"... done (took 9.699594953 seconds)
loading group "problem"... done (took 1.52155819 seconds)
loading group "array"... done (took 25.3998991 seconds)
loading group "misc"... done (took 1.904827579 seconds)
loading group "scalar"... done (took 43.875525287 seconds)
loading group "sort"... done (took 3.362185447 seconds)
loading group "sparse"... done (took 12.850329715 seconds)
loading group "collection"... done (took 18.978084871 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.445688308 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.117831841 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.167200077 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.117165895 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.215843391 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.12359162 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130765823 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087029585 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.881728763 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.157016845 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.118218908 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.431895343 seconds)
done (took 5.454685549 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.189019091 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.247863581 seconds)
    (2/2) benchmarking "String"...
    done (took 0.168896466 seconds)
  done (took 1.657295242 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.092558556 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064564749 seconds)
    (3/3) benchmarking "different"...
    done (took 0.070203762 seconds)
  done (took 1.470295026 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067746319 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13545189 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068135385 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.069208842 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.069458698 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.069019272 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068835553 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.06872567 seconds)
  done (took 1.792485266 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072631934 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069092576 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.068119658 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.070473564 seconds)
  done (took 1.522732138 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066652586 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122433871 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067147584 seconds)
    (4/4) benchmarking "different"...
    done (took 0.067266184 seconds)
  done (took 1.562428942 seconds)
done (took 9.522072407 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.162971095 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.868908965 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.867605021 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.14932524 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.274094566 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.370664463 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.125892159 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.208097309 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.114267079 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.078326515 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149204379 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.082019728 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.483993198 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.511227656 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.074066344 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.1740078 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.650320749 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087750005 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136461159 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.463356484 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074121345 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089989639 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08735525 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072153492 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.338778089 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154938374 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667998447 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096005386 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.07012223 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096373776 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070637985 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078908874 seconds)
  done (took 11.196342008 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.11673367 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.118262081 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.071856022 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.127480565 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095310731 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.073357691 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07824967 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.070481721 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091822551 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128159186 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091272133 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.125239899 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.07002251 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.07209822 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.100131104 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200377331 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081722772 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083127069 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.07043755 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.084091753 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.109239773 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07929367 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07954681 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.079604244 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.136104597 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.170176022 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098101357 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.100452763 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068797341 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.08246988 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118399649 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126625664 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068054002 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06781642 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.123650587 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096814115 seconds)
  done (took 4.859896994 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.886892932 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097690884 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.111637319 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.102598265 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.1105001 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114491959 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.146403452 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.124416936 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.112068152 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071533477 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.179754025 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.679547075 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.240938673 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072487213 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.145892714 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361041367 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.096714196 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071457674 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06959615 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096952422 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070964226 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.137916764 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067297352 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176907007 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.608806375 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072927808 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072433612 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098735573 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.181167304 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.148590557 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.098611751 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073939011 seconds)
    (32/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.144196045 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.571854421 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067936887 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.067566624 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.091884528 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.096176922 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069448567 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070499775 seconds)
    (40/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.06668671 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081891818 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068604721 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111550855 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083351886 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.524137401 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.073368132 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.61430139 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.319321264 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07664628 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074660897 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104731588 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067055836 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070743974 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.938871354 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.148771232 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.069342779 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.277523798 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068603233 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069137487 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071296071 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102569275 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.073141249 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071504055 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075993142 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099268893 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.872654959 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.149814247 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099859308 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070001052 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.405312455 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073904326 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070974145 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071892094 seconds)
    (74/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.066977005 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.132735228 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.094488559 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067615564 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068247117 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110852271 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096733884 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.219208174 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.073787407 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071717955 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069401059 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.324778013 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.168054751 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068674785 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070489372 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.496237853 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.06614251 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069537864 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071706238 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.094360775 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069801616 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.066859978 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.06791394 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102632029 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071733977 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.337405937 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070384426 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.504050803 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.072922134 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.107306845 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121300942 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069290085 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.106906467 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.071367851 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.068582562 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.077342359 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06892304 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.067855299 seconds)
    (112/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.067985296 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.072784521 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.068764254 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069596066 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072054159 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071613821 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.071202095 seconds)
  done (took 23.824874183 seconds)
done (took 42.009449104 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.4068537 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.08289461 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.083291435 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.083199195 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.082811709 seconds)
  done (took 2.038919489 seconds)
done (took 3.441541054 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.254617439 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.078742977 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.067088926 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.21041461 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.092436199 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.180507494 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.21636026 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.160707584 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.091386679 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.092265198 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.091413235 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.22757551 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.352670787 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.092858421 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.163885118 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.233938872 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.092902715 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066594064 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.092049125 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.092344078 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.092171597 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066780405 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.091918365 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.09187565 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162028196 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.092241428 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06700165 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.161761644 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091012428 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.162029834 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091285022 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.090545566 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.090159422 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.16155717 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.091020443 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.160023519 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066523887 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.090510424 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.089976858 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.088773904 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.088443052 seconds)
  done (took 6.48079202 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075844937 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083949734 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087150017 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.065140517 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074363045 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085058638 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064814365 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084919424 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.094676846 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085474617 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085139104 seconds)
  done (took 2.27158559 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071074206 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083872259 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087173377 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064481452 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075584799 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085945768 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064385829 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085469449 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088744019 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086694981 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086390564 seconds)
  done (took 2.213178357 seconds)
done (took 12.288151106 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190635294 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.091086167 seconds)
  done (took 1.596145175 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.268141855 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.532833225 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.975949187 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.11963761 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.099017961 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.112082667 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.224148263 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.093356427 seconds)
  done (took 7.935747545 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.10127208 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069924201 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.101276989 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072571054 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072418115 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.071153387 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.070249822 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070900251 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.070720931 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070558123 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.071265219 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.070354445 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.070236428 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.070548216 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.072299673 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071729314 seconds)
  done (took 2.636580009 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105233365 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.072310659 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.102850341 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064285629 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074836784 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.065191584 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.073541017 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075504459 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072984453 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073267722 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.075216532 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073186957 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.074719203 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.074447852 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075932891 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075889722 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075922614 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.073980813 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.076130171 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.077132997 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.075631709 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.076283251 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.076215303 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.074535282 seconds)
  done (took 3.286509892 seconds)
done (took 16.78784568 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175959756 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.078017581 seconds)
  done (took 1.581923926 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.09438382 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.09522523 seconds)
  done (took 1.536246827 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073778152 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062594471 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080614625 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072743272 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063614882 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063449772 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079707172 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06381234 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063877519 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.0638955 seconds)
  done (took 2.038394761 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063665569 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069515216 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.069057085 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.067131845 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069652308 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064929758 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067802257 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065253282 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071642169 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063863305 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068048643 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.086599706 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.068368765 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.087233165 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067606334 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068180873 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069905843 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067468398 seconds)
  done (took 2.603950343 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062120842 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063509097 seconds)
  done (took 1.48064882 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064962012 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063800498 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066596884 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066494294 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063941019 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063362457 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064052683 seconds)
  done (took 1.800966732 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.432107583 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.188995892 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.428747523 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.072121015 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.080017885 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.262759859 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.066877876 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.071469492 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.071782523 seconds)
  done (took 3.067294422 seconds)
done (took 15.469793629 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083310831 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.183928479 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.116425619 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.421025882 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094667882 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069891227 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.115363384 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.205909697 seconds)
done (took 2.664219291 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.283337682 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.181243001 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.320536023 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.154453339 seconds)
  done (took 3.016630085 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.393981285 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.172846167 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078072764 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.069985011 seconds)
  done (took 2.083147004 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065975305 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072191616 seconds)
  done (took 1.504306513 seconds)
done (took 8.262717089 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072141874 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.0622609 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.099148479 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065406355 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06631731 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.065658744 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065404575 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.06601319 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063369022 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.065941004 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.066187481 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066750782 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06605434 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066150251 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066504171 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.064182837 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065795235 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066087924 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063940277 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066247201 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06627235 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065250746 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066110937 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065353979 seconds)
  done (took 3.00077933 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079882228 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066518723 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.069033553 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.069509912 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069713408 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.06919821 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.069124105 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068297194 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069651309 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.068042972 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069960721 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.070276075 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067961991 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.070130431 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068377899 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.070154213 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069956532 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068580583 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068147334 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070445412 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069396997 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068654247 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069981799 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06922897 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.07008799 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069726711 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.068037594 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068648904 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069893536 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.070409073 seconds)
  done (took 3.473345537 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067034866 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061457602 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062235799 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072616253 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061947165 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062544377 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062823021 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061846573 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062682424 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063843093 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063101295 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.06205659 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062988796 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062285025 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062358018 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062926402 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.068124421 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.082771588 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062757065 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062245977 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.067225568 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062626373 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062555303 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062365678 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063088668 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062127969 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062035074 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.063282801 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062418213 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063082003 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062413461 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.067117742 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.068397323 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062571434 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.073274189 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067941039 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062744864 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.069586838 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063564658 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.062326864 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062965546 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062251803 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.06268832 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062913124 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.073562166 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062934542 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063782852 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062997191 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062384669 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062515457 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062327844 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06421343 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.071705357 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063959823 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06203637 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063678308 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062116503 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063096304 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062998478 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.06217656 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062362785 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066703958 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064279486 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063065338 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.083066447 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.064240417 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.073529268 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.06241083 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063673053 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.066812559 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.063484738 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.08107659 seconds)
  done (took 6.053500896 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07168556 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07261588 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081844406 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072642775 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066781518 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063230448 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066773509 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063472247 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073695496 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067439375 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063319486 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067080033 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073394992 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068081275 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065109647 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.073358438 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067343235 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066983431 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063903758 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06799879 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064915043 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067206978 seconds)
  done (took 2.903626645 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.140312707 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069178559 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108847904 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.072935764 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071800837 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.073171868 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069555106 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069056633 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069595099 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069912409 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06993922 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069357089 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072020624 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06968954 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070154684 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069527562 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069604199 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069513584 seconds)
  done (took 2.756087804 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077099984 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067094289 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.092520159 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068395602 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06860745 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068549588 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072236259 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072748667 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.068379169 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.070781307 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.074182039 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06853536 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.068748146 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069383214 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068454874 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06908348 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068282656 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06875675 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072699564 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072770689 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.072753594 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072985804 seconds)
  done (took 2.95723665 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078025757 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067140404 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.083829537 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069131339 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062365064 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062810119 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.069218432 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.068700031 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.069126568 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.067802253 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067986142 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062827522 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.070052459 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068397349 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.070477775 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068311759 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067752906 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068086949 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067341235 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062837996 seconds)
  done (took 2.758651398 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.099086187 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063370411 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065201287 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070508213 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065337303 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.07635971 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071197362 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065750179 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065929886 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.088478333 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065858874 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065592887 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071650678 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069838862 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065929087 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071435787 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071486427 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071174198 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065590443 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065319345 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087732775 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06560509 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070408418 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06492885 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065019723 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065594395 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065261583 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.068857717 seconds)
  done (took 3.354448339 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065174558 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064303949 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065787557 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.066090189 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065989714 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065718881 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065874799 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066037435 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065981729 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065889276 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065744533 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.0657638 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069108147 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.066129442 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066022312 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.066214615 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066261742 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066393231 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066453531 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066408154 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.066681959 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066694256 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.066394054 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066925511 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066986471 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.066754907 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066855018 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067579881 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066016569 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066360605 seconds)
  done (took 3.385535994 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073959212 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073473468 seconds)
  done (took 1.540313748 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063887984 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079038097 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061583865 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074781911 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071502101 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066795446 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072346719 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071688753 seconds)
  done (took 1.949120314 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.093354189 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.118344742 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.06411621 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064366716 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.094879702 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131076519 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.105053221 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076530207 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079145848 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.067121079 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064707458 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.105182622 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063598449 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.078162958 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065515273 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072919978 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071763586 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082340161 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077649043 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062322328 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.077333572 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064794201 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062376975 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065002142 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063528487 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071284826 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080068377 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07723798 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073159924 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061988314 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083510517 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062730573 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064013037 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072951632 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.095185866 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063193802 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.10131595 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063220203 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068331076 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062392371 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075943868 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084876759 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.078182514 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081739433 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064777846 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064950656 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062327567 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065172232 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066989099 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072882698 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062506467 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071320178 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062308665 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064346248 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.074057205 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.064049665 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068256866 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.073500475 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077737911 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.074678593 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.076480077 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079416674 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072913475 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071056189 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063918782 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083746699 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064733244 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.077267727 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079288813 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064427258 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077344359 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062588794 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061805159 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062453998 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097487924 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06443509 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063883087 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062660599 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062927348 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064231724 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073207394 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068162525 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071000736 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066354384 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079680885 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.073149526 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063129028 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069601683 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081470066 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.067499441 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063304035 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079904037 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.067171304 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062046218 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.081192928 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072878225 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063867431 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063223152 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06585799 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075835628 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062941384 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060565998 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071458731 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06379004 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.0907914 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066054149 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.212837852 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.064432387 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.075681841 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.068808195 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.066027056 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.062647962 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.068576654 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.064487981 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.062347395 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073593982 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.063365589 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078471515 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.070142873 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.078851352 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07860422 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.074669265 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.079846954 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062896491 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.06158182 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.081875047 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.073068475 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.064555806 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081571894 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062475928 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.077003398 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062170324 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.064299374 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072809432 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061814055 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06486394 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062827473 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068086268 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064435562 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064598102 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.069417376 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.072359236 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.076003547 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064668473 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072467902 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062756099 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078911634 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073546739 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067868683 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06639665 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063624005 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075804384 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.07042904 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073554218 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062966319 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063577718 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06341604 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07428369 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073563056 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065372522 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.071017136 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.068195232 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063831396 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063203408 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064328046 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.067699036 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066565792 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064032563 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071523269 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072492383 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077907828 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070434001 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072823463 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062233797 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062612771 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064984954 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062424005 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067938013 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.073255023 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079414337 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075764315 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084900347 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063181405 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073607201 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064961377 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.081255138 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.077242019 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064456262 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068013138 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061985993 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064675007 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072979071 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075061551 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077335672 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078433531 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067876039 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.068330353 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061954106 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078092608 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063074968 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071614062 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072798256 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067388862 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062781807 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064200721 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072468697 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067811874 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062857461 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079081241 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068453819 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061791953 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076787511 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062252546 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073374261 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061864093 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06626863 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067773411 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063788583 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071873723 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077542613 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060728577 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062514284 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077978362 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.207793355 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065774214 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.072841 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.079844343 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06887635 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071714681 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074574708 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.07421393 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.068434596 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.074142766 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.064581316 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.073456142 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066782382 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07547732 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062847094 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08155689 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061730897 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.078858482 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063414542 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.074666656 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063536954 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072631896 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06383048 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.080626173 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064441145 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.063864131 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.075473911 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.061388039 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.072733023 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.062173867 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.068675187 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.070319006 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.073097502 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.064799644 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073683744 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.064627292 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072028045 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067985509 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.07190513 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072662205 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067696749 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062278917 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071435521 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074410471 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071662252 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064062725 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064699946 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063318488 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073238029 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064768644 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064833311 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072163418 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068168123 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069493461 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064730074 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064753579 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064733247 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072344445 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073141808 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082139308 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072660717 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071479423 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07343526 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062823108 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079210247 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063433487 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.074426693 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061808926 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069213045 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.073022373 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063202232 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082898866 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064762742 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071755121 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076711287 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072094668 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067204884 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.0821712 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.067008405 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072212193 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.072054617 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068158692 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.070750595 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065459307 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072371033 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073282069 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074253689 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064294323 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070983846 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072698689 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06438792 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070781305 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064749481 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071747789 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064586942 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062140765 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.068375212 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07485803 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068634241 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068615365 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063034478 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061588577 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063211411 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06962299 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068020411 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071951596 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078517231 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061356924 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063164076 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061624612 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066936513 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08097274 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072887155 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070511048 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067218904 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060931786 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063349059 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063977305 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.210687937 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06809032 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.063039079 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063418381 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075123758 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065624464 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.068490676 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063741338 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064495475 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07352609 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.067750121 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063620669 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.070314382 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063052312 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068534487 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062104631 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064958742 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067830301 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062239335 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066674925 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.07399048 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.07987682 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.070244384 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072716539 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064124149 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071569791 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.079158033 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069818764 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063785727 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072941951 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061942861 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.082259792 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.073091733 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071997231 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073812009 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063855058 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.080223035 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067749725 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.073598676 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079232744 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063970915 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.069810812 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062477199 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078800512 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.067779677 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.06249381 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.071645513 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071783044 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.069531122 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.075666051 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.063541636 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.07176132 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068605399 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067060095 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064891674 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064688367 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072831404 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079655061 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064316494 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067404104 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071941721 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072427254 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06815225 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076032064 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.072303716 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0645313 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064850102 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.067325172 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064124368 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075784009 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06374378 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067864333 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068007721 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062516848 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070563104 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080221239 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073270337 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073658144 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062184913 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062113722 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081509407 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.067248196 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066973486 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072215299 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.073793257 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076328129 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073509584 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.08125733 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064087927 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069699921 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076219323 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064044507 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063063495 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067115178 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064446219 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.073040884 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073776922 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071338327 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064965197 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070847779 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077621916 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06407195 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.068049287 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067817377 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064083806 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074283501 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.072230443 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.075223712 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064358363 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062338262 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066438705 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071675236 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070865335 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072072164 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06313513 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06832926 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076153268 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069947242 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.210960688 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063824707 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067629592 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.073727802 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068083166 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063245723 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.068860794 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.068046586 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070066445 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073183576 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068407995 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062958915 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080690822 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071937519 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.07304317 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065111767 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.064787046 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063627946 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062603117 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.0748669 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.06210606 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064408879 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067855987 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064457927 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.081229728 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.07164299 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079454166 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063879427 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067621261 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062216983 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073324943 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067673701 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063133899 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.07425336 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062021695 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078855024 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075106823 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068579071 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062139355 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06843257 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071225679 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078386727 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073363792 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.07260683 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066133858 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073456071 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064846102 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.074509373 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062868952 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061930242 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.074043178 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072162161 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076413767 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062780402 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.073848299 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06519352 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.07203207 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.072122464 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064934314 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064789138 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064908057 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073652418 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.068077446 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.072997059 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.06833499 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080690644 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064460956 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07477653 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072641922 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074818782 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077535309 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07615842 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071762335 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063954565 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071122401 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.07170903 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064237309 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068689734 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066956185 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085680203 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065062085 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064921492 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078418976 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070294223 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063424533 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069845968 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068426494 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.074154902 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064357764 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074380714 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067343246 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064148494 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.068096255 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068574152 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061577318 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062227347 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06257628 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073481777 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067567636 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063203431 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082959328 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064572208 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072048517 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075181678 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070803899 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064602414 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061949022 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064016402 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07649904 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079267396 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066358768 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072199448 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063794206 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072020638 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060884833 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071304754 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070834434 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.217958449 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063703608 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063799379 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.079357408 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079637965 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.06867369 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.07356906 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.073206974 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064336106 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085965422 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072939127 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064404238 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.07488564 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065768639 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062532516 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061980729 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064282922 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07514808 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062656773 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065150096 seconds)
  done (took 43.861891267 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098667049 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063440902 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062230159 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062329166 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070938849 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06374694 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06286703 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063630635 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063510454 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065545063 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062861955 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065532056 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069087496 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076660816 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071469151 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066569714 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062445394 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063550557 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062758705 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063820684 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069386909 seconds)
  done (took 2.907273231 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064996661 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065040987 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066563874 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066842211 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066417619 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062994402 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067391088 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063255798 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067547791 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063524096 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067557796 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063233229 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063586021 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063703779 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063398096 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064410676 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067466959 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06664511 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062592845 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066884426 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063731992 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065671322 seconds)
  done (took 2.922847025 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062904217 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062156023 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070426294 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062045 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.0622559 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.065925661 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062224619 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067434474 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06766027 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067221994 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072554164 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063170324 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062123384 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068715074 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061813975 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063378002 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106599153 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063561138 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063359039 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062516169 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065058538 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072157148 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062010636 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062314418 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067394985 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065882044 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062265798 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065117469 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063043049 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067317248 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063783836 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061979354 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072333786 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071507239 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067447517 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067225456 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06424286 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063264785 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062430273 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062309866 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071802732 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063742671 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062856114 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064065962 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071974811 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062456338 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062443416 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07259893 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062209268 seconds)
  done (took 4.733964508 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071314118 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113599947 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067396706 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.09650324 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076183399 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068612655 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.069719107 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097366114 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063527798 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064382889 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077024909 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077709336 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065761006 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067358513 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.07081291 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065615923 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066236518 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064648317 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068559735 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06507019 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068115548 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070197581 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075708828 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076438518 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066445114 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064739179 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065196787 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066654989 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076467513 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.06842594 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066653592 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067200306 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076284808 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.069080871 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064939975 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064955112 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.077052031 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065801305 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065689216 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063932137 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065224155 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067530857 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070086747 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077768784 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065592466 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070970413 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065781777 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063450871 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076988239 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065631351 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069653861 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077504436 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.0670747 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066046977 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067138116 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076916238 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065808939 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064457584 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065938965 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076600032 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064023871 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066233952 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.08014115 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065241266 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068769819 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077455008 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.071090049 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066948199 seconds)
  done (took 6.436783918 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070390495 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096854458 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.078889541 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.079013248 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073922617 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073922502 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.074053188 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074090746 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074021062 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.077264918 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07418444 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.138023991 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070573212 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075965778 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074109726 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.074196033 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.074027705 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074024328 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073695483 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073868422 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073985587 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.078914478 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074220756 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.079230515 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076437619 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069961595 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073418283 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073534775 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.078813427 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07349059 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076403832 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073592233 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074270633 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.079171802 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076186144 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073757806 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063847719 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073549349 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073881113 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073774724 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069607392 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07900852 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073965826 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070028134 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073891887 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073515943 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.079086555 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076937447 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075835057 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.077237965 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.074256422 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.079360574 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073887547 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074412369 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.079586307 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.082225256 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.079531692 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.079586601 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074253584 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.079264633 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.079664966 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.081847536 seconds)
  done (took 6.287111009 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074669225 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068726263 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.08235162 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062505403 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062793083 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072829879 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062573162 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062860531 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069467957 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069988809 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072237302 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072729275 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074933854 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071628226 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072535837 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07488357 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072664754 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072656861 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069550447 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072641075 seconds)
  done (took 2.947247856 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076277665 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081938588 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068544465 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072679176 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068813263 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072809797 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068551389 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068923831 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069091419 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069078295 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073984047 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074317619 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068898528 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072910285 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073971305 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072810842 seconds)
  done (took 2.665389929 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065241621 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068861001 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.098149674 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064173316 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065987711 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063239284 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063688986 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062719971 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065505357 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077627998 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063591547 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066540034 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.063764575 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063079808 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063512252 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066475044 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.066363193 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063682097 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063757609 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.096501637 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072979134 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064769473 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066053257 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.063814576 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065816118 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07253978 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065120033 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065923537 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063113036 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066114984 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065887407 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071809663 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066196675 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064489468 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063198197 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063687745 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064438963 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066927356 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066974569 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.065032318 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062486355 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069254694 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064216336 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064340333 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065793951 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066557315 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065209209 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06989696 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064249898 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066033827 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.0643687 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065364839 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064427039 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072098742 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066377873 seconds)
  done (took 5.200287373 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078642329 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068369112 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062443253 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062290426 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068104427 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068841085 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068492561 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068746951 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068678325 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06252854 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069538793 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067941603 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068701553 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068292152 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068914457 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068969656 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062231504 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068531233 seconds)
  done (took 2.755501438 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067815273 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067620631 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.067517742 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064762041 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.064420297 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069808599 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063126717 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.064263892 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064462877 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064564092 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064890803 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064156853 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064170256 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064221819 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068685597 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06455207 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064014294 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062758439 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064491823 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062552376 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069147446 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062478427 seconds)
  done (took 2.955008052 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.118147627 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086648198 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.160213218 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082394198 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091885722 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074371521 seconds)
  done (took 2.134551766 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094227821 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099762509 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067662562 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067941525 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072757818 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071323843 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071264729 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071393654 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074697076 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075165851 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071224657 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074662311 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074965232 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076758611 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07340334 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073109459 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071312425 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071716847 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068142923 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079154642 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07160228 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075131367 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071484964 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071319138 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07147235 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077093746 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07455517 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075649641 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071497191 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07541187 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073191337 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071784436 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07557014 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075575427 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069042873 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074987551 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071603256 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07944337 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073445515 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076964096 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067975067 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073107782 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075322742 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074772835 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075746367 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07191277 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074773345 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071817464 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071694771 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080978801 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073581339 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076996549 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073462759 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075784846 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075405828 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081183569 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075892697 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077617769 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073765223 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075643802 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07745253 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073531783 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077158638 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076211457 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073339709 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076663376 seconds)
  done (took 6.45784188 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105043672 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06769717 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071554343 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074983337 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077337945 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072056659 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071807515 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071520472 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071630207 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06888135 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108236328 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072200908 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07716513 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079986245 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071887985 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071432425 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071940881 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077302177 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068785847 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080836781 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071622591 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077051703 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077076794 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077341965 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075681948 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073466421 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072011033 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072006827 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071781662 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07145479 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075120894 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071755323 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077335145 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068670495 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077019249 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072001626 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071665547 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075172094 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071766564 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073407693 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077261896 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079723511 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071290568 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071596282 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075802581 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07180184 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071948493 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068959583 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072154551 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06885274 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075922429 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0756861 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076141472 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077234238 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07234376 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071914194 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072396088 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072097875 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071822527 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073809496 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077429732 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071675778 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080867313 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072123277 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071934408 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077275341 seconds)
  done (took 6.474600433 seconds)
done (took 134.238265853 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.233668516 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.199610145 seconds)
  done (took 1.940354981 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074559576 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.193869397 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.074584732 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075192842 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.111100926 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107846399 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.104639471 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073704271 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.076493564 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.074282486 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.14137003 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.104899916 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.074305526 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.094920754 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073714563 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073710345 seconds)
  done (took 3.055847042 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107769408 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.215475096 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084432503 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072519474 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.154822464 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079718394 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.074584253 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.079548642 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079179326 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071987655 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.109946429 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.085744111 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.077754391 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.079133439 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073663211 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.078230272 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.079156893 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.07906965 seconds)
  done (took 3.220820339 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103591263 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.094550204 seconds)
  done (took 1.740272966 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156446525 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106229349 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146639559 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.350405063 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.139759782 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.140960454 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.145791839 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.141359824 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112631323 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.134615684 seconds)
  done (took 3.105159063 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106311258 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.107109234 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.31259659 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.104748065 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.084917946 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079924484 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077192374 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082338046 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077244826 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078865131 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125292012 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077405428 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074899751 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127288404 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102288087 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.109325893 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073414544 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.080496915 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.08231614 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073166305 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.078140975 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082062448 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.180601263 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.080535729 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.103068962 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.077728982 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.079172955 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077073377 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.076477628 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.080477907 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.080974984 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.102305771 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080767528 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.084407721 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.079285064 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.099862154 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074314106 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102209278 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.076807928 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074511399 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077626956 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081230555 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074397968 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.080673072 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077309172 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.080061163 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.082366649 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073244747 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.308549101 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074624365 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074638803 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.078665165 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078014771 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.079381964 seconds)
  done (took 6.676277993 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.11940028 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.114730135 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072532382 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.120123011 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.111617926 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072555408 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.125244636 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.106873877 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.125788386 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072043417 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071295917 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071638412 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078964884 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083509453 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120095644 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.112398705 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071562686 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070599733 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.111980896 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.112214173 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071718633 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.111008285 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.116749929 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.114252509 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.071078796 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071961461 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070393195 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.07168369 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.079320546 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078353044 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071353585 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.081509575 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.085273511 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075519901 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068453559 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069618842 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070567843 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07830571 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080685862 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080798556 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077696203 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070317332 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070437656 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071345352 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071523003 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070037887 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.080500133 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078762326 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.08047387 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070956616 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071227812 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070930548 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071025823 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078053677 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077250499 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080197497 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.082158515 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071257772 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071581571 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072870336 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.082816982 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079882627 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079367718 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072308933 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080221577 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.07135492 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081803672 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.085273275 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071308919 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071431113 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070773554 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071242252 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.07118757 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077206943 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077466595 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071787399 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071189314 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070948617 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079333273 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077328068 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070828241 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079155076 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070296869 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070693332 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071321229 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071241951 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.079378088 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078651111 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07178078 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.07049136 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070561757 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069939542 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069449514 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.078171938 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076332171 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076629889 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.219698039 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072645215 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.081637774 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078101197 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071808229 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.077652802 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071077742 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071534196 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071197921 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077476724 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.077121418 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.079142981 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070971241 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070429138 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.077907476 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080307562 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071026586 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.077021347 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079410874 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.078516037 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.071073848 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.080969646 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07135217 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080050235 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071174186 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079937249 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071413523 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077455911 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071664728 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070254551 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070878277 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.080726407 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07157536 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070649327 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071079488 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070878543 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077665682 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.084962947 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072363989 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078423955 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078238162 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07181299 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.080959346 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071759785 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080754124 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07204694 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071477659 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070222105 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083537194 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071586205 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.07140951 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071186685 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080746863 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071656364 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079818879 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077464828 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070613629 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081801668 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07999362 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.077742228 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.080385756 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072251249 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071232106 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070903935 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.074321203 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.079986707 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.081399575 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071939878 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071105747 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07660687 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080161008 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.070483761 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077507983 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077786117 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.078132295 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072045846 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071499179 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.08078443 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081269999 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078358546 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080351314 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078714507 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.0693705 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076844557 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080124073 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071275414 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084914362 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071120162 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.08168736 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.080898136 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076664152 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.080579903 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.080825858 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077840093 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077862414 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077718963 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068111368 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068007963 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.215501953 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070704763 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07037476 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077191088 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071795049 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071756579 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.082568548 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069728102 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07816732 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068737805 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076448026 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068663829 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069932302 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081441921 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071637462 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071412299 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077178697 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.07113295 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.077082112 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081405138 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075776899 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069377749 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069990901 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.081107299 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.080528975 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070868641 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070952126 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071163598 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.079876879 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.079386411 seconds)
  done (took 19.248956883 seconds)
done (took 40.53922399 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169186102 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.114878783 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.209912285 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199767328 seconds)
  done (took 2.32790356 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10060787 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06648486 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.113153488 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.123067975 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.067427406 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.108181223 seconds)
  done (took 2.163838436 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200633487 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.177505305 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250405332 seconds)
  done (took 2.209201463 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.369722679 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153773485 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221581155 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.508517505 seconds)
  done (took 2.931934009 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.138626997 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.130677588 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078122005 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.143337249 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.088124052 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.064496404 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.135957702 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.071316188 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.102668895 seconds)
  done (took 2.59535657 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.143675302 seconds)
done (took 13.948421681 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.335558936 seconds)
    (2/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.306659285 seconds)
    (3/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.163283335 seconds)
    (4/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.281819077 seconds)
    (5/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.286742965 seconds)
    (6/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.324746479 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.134738336 seconds)
    (8/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.222675653 seconds)
    (9/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.17504598 seconds)
    (10/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.26270683 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.126523416 seconds)
    (12/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.107205072 seconds)
    (13/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.239754207 seconds)
    (14/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.13102814 seconds)
    (15/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.181156342 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.078551304 seconds)
    (17/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.068291493 seconds)
    (18/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.110819371 seconds)
    (19/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.338801224 seconds)
    (20/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.076908622 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080208312 seconds)
    (22/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.224204857 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.08153731 seconds)
    (24/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.159639502 seconds)
    (25/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.121252394 seconds)
    (26/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.186665512 seconds)
    (27/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.187813125 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.098141462 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.224463339 seconds)
    (30/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.118822026 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076668659 seconds)
    (32/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.06937118 seconds)
    (33/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.179569357 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.210307178 seconds)
    (35/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.080567514 seconds)
    (36/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.129511836 seconds)
    (37/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076762398 seconds)
    (38/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.119557673 seconds)
    (39/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078566995 seconds)
    (40/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.074947494 seconds)
    (41/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.232541945 seconds)
    (42/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.209970046 seconds)
    (43/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.245670328 seconds)
    (44/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.07286681 seconds)
    (45/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.129477521 seconds)
    (46/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.202067675 seconds)
    (47/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.081701774 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.081973221 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.138669907 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153814816 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.069151551 seconds)
    (52/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.076455337 seconds)
    (53/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.185614074 seconds)
    (54/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.075411992 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.083505114 seconds)
    (56/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.264183145 seconds)
    (57/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.263233106 seconds)
    (58/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.087323032 seconds)
    (59/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.182849024 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.076977472 seconds)
    (61/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.093614511 seconds)
    (62/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.251614733 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.098008892 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.098907104 seconds)
    (65/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.076319784 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.098703148 seconds)
    (67/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.087654341 seconds)
    (68/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084424595 seconds)
    (69/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.301832897 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.131934582 seconds)
    (71/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.13049096 seconds)
    (72/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.096145767 seconds)
    (73/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.076071598 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.090579583 seconds)
    (75/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.07629524 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.07558208 seconds)
    (77/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068394079 seconds)
    (78/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.070021147 seconds)
    (79/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.156967019 seconds)
    (80/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.089520003 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.18888258 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.255608261 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076764584 seconds)
    (84/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.210084026 seconds)
    (85/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.07612266 seconds)
    (86/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.24602341 seconds)
    (87/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.069154496 seconds)
    (88/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.202644226 seconds)
    (89/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.129987983 seconds)
    (90/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.160378139 seconds)
    (91/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076502011 seconds)
    (92/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.112117338 seconds)
    (93/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.204525202 seconds)
    (94/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.068451578 seconds)
    (95/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.150744536 seconds)
    (96/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.080989481 seconds)
    (97/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071790983 seconds)
    (98/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.080288171 seconds)
    (99/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.091245121 seconds)
    (100/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.151508907 seconds)
    (101/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.131031784 seconds)
    (102/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.090810019 seconds)
    (103/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.077122002 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075990962 seconds)
    (105/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.082181423 seconds)
    (106/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.188132668 seconds)
    (107/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.148933692 seconds)
    (108/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.068080606 seconds)
    (109/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068600401 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.146375838 seconds)
    (111/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.075281046 seconds)
    (112/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.167189682 seconds)
    (113/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.075949981 seconds)
    (114/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.069244616 seconds)
    (115/341) benchmarking ("sort", BigInt, false)...
    done (took 0.26698895 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.099847597 seconds)
    (117/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.068899715 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.075377874 seconds)
    (119/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.067822998 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.091566638 seconds)
    (121/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.078055455 seconds)
    (122/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072865153 seconds)
    (123/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.169063743 seconds)
    (124/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.068474987 seconds)
    (125/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.206954924 seconds)
    (126/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.204859329 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.089177358 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126777451 seconds)
    (129/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.077118979 seconds)
    (130/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.219802779 seconds)
    (131/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076448375 seconds)
    (132/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.06732856 seconds)
    (133/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.160921767 seconds)
    (134/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.24092921 seconds)
    (135/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.079476281 seconds)
    (136/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.203744466 seconds)
    (137/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.076530708 seconds)
    (138/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077809013 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.089485291 seconds)
    (140/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.076938948 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.096979153 seconds)
    (142/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.077322255 seconds)
    (143/341) benchmarking ("sort", Bool, false)...
    done (took 0.146270378 seconds)
    (144/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.086356915 seconds)
    (145/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.06741304 seconds)
    (146/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.192813538 seconds)
    (147/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153529031 seconds)
    (148/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067261247 seconds)
    (149/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.072202568 seconds)
    (150/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.323867608 seconds)
    (151/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.070535388 seconds)
    (152/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.076657499 seconds)
    (153/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07876668 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.206814873 seconds)
    (155/341) benchmarking ("sort", Int64, false)...
    done (took 0.070087508 seconds)
    (156/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069662586 seconds)
    (157/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.070813247 seconds)
    (158/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.077002756 seconds)
    (159/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.07577957 seconds)
    (160/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.162705665 seconds)
    (161/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.067106447 seconds)
    (162/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.07753304 seconds)
    (163/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.151411454 seconds)
    (164/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090943488 seconds)
    (165/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.216013332 seconds)
    (166/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.068127407 seconds)
    (167/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.146126243 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.124438083 seconds)
    (169/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.15104014 seconds)
    (170/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092280242 seconds)
    (171/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078043089 seconds)
    (172/341) benchmarking ("sort", Int8, false)...
    done (took 0.154055149 seconds)
    (173/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.077349095 seconds)
    (174/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.068238296 seconds)
    (175/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06636169 seconds)
    (176/341) benchmarking ("sort", Float64, false)...
    done (took 0.14034684 seconds)
    (177/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.149208244 seconds)
    (178/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.070487967 seconds)
    (179/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068396341 seconds)
    (180/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.066716465 seconds)
    (181/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.175128433 seconds)
    (182/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.078074611 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125942106 seconds)
    (184/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.215089046 seconds)
    (185/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.07123958 seconds)
    (186/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075002124 seconds)
    (187/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.068820399 seconds)
    (188/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.18532331 seconds)
    (189/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150305527 seconds)
    (190/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.068466036 seconds)
    (191/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.069290162 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.067608697 seconds)
    (193/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.068581695 seconds)
    (194/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.200819023 seconds)
    (195/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.06862046 seconds)
    (196/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.201735927 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.093984308 seconds)
    (198/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.06859611 seconds)
    (199/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07968269 seconds)
    (200/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068138498 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.113231129 seconds)
    (202/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.167775735 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09807934 seconds)
    (204/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.06783846 seconds)
    (205/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.150186396 seconds)
    (206/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.06682223 seconds)
    (207/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.069172278 seconds)
    (208/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.166301656 seconds)
    (209/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.069970205 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.090340354 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.069088783 seconds)
    (212/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.068220589 seconds)
    (213/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.072672851 seconds)
    (214/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.071823876 seconds)
    (215/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076154427 seconds)
    (216/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.068930619 seconds)
    (217/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.075692353 seconds)
    (218/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.14958554 seconds)
    (219/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.075304159 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.088653967 seconds)
    (221/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07583461 seconds)
    (222/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.069024315 seconds)
    (223/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.068347877 seconds)
    (224/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.224606944 seconds)
    (225/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.070543702 seconds)
    (226/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.08692861 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.185469317 seconds)
    (228/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071573304 seconds)
    (229/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.070472098 seconds)
    (230/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.080475389 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.06804846 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079797078 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.078566476 seconds)
    (234/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.072955972 seconds)
    (235/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.068441408 seconds)
    (236/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.068299439 seconds)
    (237/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.068461188 seconds)
    (238/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.072713145 seconds)
    (239/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075639956 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.068425756 seconds)
    (241/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.233091356 seconds)
    (242/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.06983029 seconds)
    (243/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070783953 seconds)
    (244/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075496408 seconds)
    (245/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.072702718 seconds)
    (246/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.08485123 seconds)
    (247/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.06815328 seconds)
    (248/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.066053027 seconds)
    (249/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067803573 seconds)
    (250/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.238149148 seconds)
    (251/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.067891494 seconds)
    (252/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.067672161 seconds)
    (253/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.065265934 seconds)
    (254/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071786107 seconds)
    (255/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.06881726 seconds)
    (256/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.069496362 seconds)
    (257/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070005361 seconds)
    (258/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.068689759 seconds)
    (259/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.083878059 seconds)
    (260/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.068081481 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15752033 seconds)
    (262/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.067387642 seconds)
    (263/341) benchmarking ("sort", Float32, false)...
    done (took 0.139071168 seconds)
    (264/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077937341 seconds)
    (265/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.068652878 seconds)
    (266/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066984772 seconds)
    (267/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.0666354 seconds)
    (268/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.085487086 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148308348 seconds)
    (270/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.06755784 seconds)
    (271/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068804508 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06765723 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.06555131 seconds)
    (274/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067213948 seconds)
    (275/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.11475292 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.067991613 seconds)
    (277/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092860406 seconds)
    (278/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.078463386 seconds)
    (279/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067483638 seconds)
    (280/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067426536 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148235302 seconds)
    (282/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067387321 seconds)
    (283/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.094419494 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151505301 seconds)
    (285/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067855434 seconds)
    (286/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067951009 seconds)
    (287/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.067471203 seconds)
    (288/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09174467 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065945465 seconds)
    (290/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.071543725 seconds)
    (291/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.06666037 seconds)
    (292/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066748702 seconds)
    (293/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067035103 seconds)
    (294/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.07641567 seconds)
    (295/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077782978 seconds)
    (296/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070751693 seconds)
    (297/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.188945826 seconds)
    (298/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.06712788 seconds)
    (299/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067980028 seconds)
    (300/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075445083 seconds)
    (301/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.071707004 seconds)
    (302/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067440518 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.132912111 seconds)
    (304/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066968494 seconds)
    (305/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.076011334 seconds)
    (306/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.068015051 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066763138 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.066719532 seconds)
    (309/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067823771 seconds)
    (310/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.068178388 seconds)
    (311/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070971398 seconds)
    (312/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066315049 seconds)
    (313/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.066910252 seconds)
    (314/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.067254877 seconds)
    (315/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068322325 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085353187 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.067203069 seconds)
    (318/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.067505526 seconds)
    (319/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.06781413 seconds)
    (320/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.069364746 seconds)
    (321/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067285532 seconds)
    (322/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066432826 seconds)
    (323/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067009441 seconds)
    (324/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069412607 seconds)
    (325/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066787462 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078277836 seconds)
    (327/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080985962 seconds)
    (328/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066953696 seconds)
    (329/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071225157 seconds)
    (330/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066847669 seconds)
    (331/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.069275825 seconds)
    (332/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073444613 seconds)
    (333/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.067019126 seconds)
    (334/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.203209238 seconds)
    (335/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068142143 seconds)
    (336/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067526145 seconds)
    (337/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.1505655 seconds)
    (338/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073948365 seconds)
    (339/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066126336 seconds)
    (340/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066376298 seconds)
    (341/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.072766545 seconds)
  done (took 39.778605268 seconds)
done (took 41.384776118 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.133484326 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.084273991 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.08420876 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.081147766 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.086198025 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.084654115 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.086144355 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.084275534 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.08540416 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.084705598 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.115546148 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.07145573 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.080155784 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.087798208 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.080650395 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.087875275 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.084408797 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.087633442 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.072215453 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.086660884 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.09653076 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.083277533 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.079862952 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.085527575 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.071094767 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.080627424 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.127285053 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.090449818 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.07522973 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.080239803 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.077988579 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.089344637 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.077775958 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07620402 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.079636669 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075691048 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.079056331 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.076869066 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.124401367 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075208007 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069840767 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.081646702 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076885432 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.077397004 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077954069 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.081695363 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074737745 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.083145952 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.069217467 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.081385753 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12603285 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074794921 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.074038651 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077552188 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.074545188 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.078748456 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.074175074 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.081591678 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.074487613 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.081432609 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078964537 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.078175633 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.069255735 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.078112873 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.076317419 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.077113942 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067568323 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074360187 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068728469 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068927417 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.068504184 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.078196069 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.076334802 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073957204 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068086126 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068473106 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.068261787 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.081351376 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.075161884 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078098692 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.069106668 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074246093 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073997159 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.069144751 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07454983 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080327615 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.067819942 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.069646696 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068082636 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.08345634 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075406983 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068515641 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080432703 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073939701 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073959523 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068545894 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067838252 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074410779 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076905123 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068740406 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067506572 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074332867 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073916712 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077713821 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.068867359 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074257689 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074297644 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067603528 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.077961863 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.076309365 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.078391156 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.08204659 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077260084 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080999086 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.068979549 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067144036 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077562627 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.067509249 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071480643 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.222468576 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074344529 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.076709824 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.068981471 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.072137639 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072909967 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075059568 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.069958815 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.068746607 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.069314426 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.077982585 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075787456 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.067180864 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.067960581 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077707654 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077950257 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06788623 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067731822 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.07768883 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06912827 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074883943 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.074402228 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.077135669 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.067731263 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.068270482 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.067258157 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067538437 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.067475909 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.07380588 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074049002 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.069083927 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077658421 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.075058951 seconds)
done (took 13.830074835 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068038706 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108478881 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.116668099 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.114231659 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.082655254 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070336942 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.07288512 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.088802336 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.073100204 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.094568155 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.0948191 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091544412 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.136128808 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.067809556 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.0688379 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.070429846 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06778264 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.081658684 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.118096122 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092885334 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.1069667 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069154186 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.08627071 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.089657699 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.083876403 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.087612264 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070440359 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070093375 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.07200504 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.088036376 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095889308 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068788315 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070364334 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.087707465 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.084068245 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.077205422 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.069639124 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.075487577 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.072379218 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.0688989 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070296964 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.087008554 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.075447259 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07551876 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.069662754 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.06979307 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069049857 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.076438633 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.086995512 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.07520865 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.081428283 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.088810644 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.070946632 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069201511 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067192572 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.076854893 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069507837 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.069849921 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069531485 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069259393 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069580734 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071548892 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.075125999 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.076109459 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072963462 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.076039036 seconds)
  done (took 7.006262818 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083387124 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093472249 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08173665 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08241701 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06806703 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069780313 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069788214 seconds)
  done (took 2.313791676 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068168788 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.108022285 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.115439196 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.116951464 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.125535965 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.116275692 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070172639 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.10184496 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069139839 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.112482167 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.121436502 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.12101863 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071860811 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.080001755 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068166102 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.116133401 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068037421 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074730353 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.112301108 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.118164123 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071969673 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098947661 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081902236 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070484849 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.118384908 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.112492637 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.07172575 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070318054 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069935107 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069174685 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069144434 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092654508 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.109526209 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080024785 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070080566 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067656495 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.106015289 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069078316 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.106868678 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077677536 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.109288292 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069359212 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070421631 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069406006 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070727406 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.113853837 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.070733181 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069269057 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06884299 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.112820237 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068356804 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111281409 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071872823 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074692015 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074136798 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074261156 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076452532 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06968984 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.112047144 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075598818 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069629036 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.121594375 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.118925778 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105444965 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.118188003 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076091465 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.108623273 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106531767 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066742672 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06708109 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068110206 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.122375454 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072570041 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071587669 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070183654 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074304994 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.114890799 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.12685307 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.124049931 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080889165 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06950818 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069141441 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.075747326 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.278277578 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074924089 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069372396 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070354247 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068479885 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.073973425 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.069526552 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074291138 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069337557 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076330323 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071988762 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.07163747 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.117921157 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069425259 seconds)
  done (took 10.370224636 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069660828 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069925875 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.070139182 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.070325017 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.070260675 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.070398958 seconds)
  done (took 2.204434464 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090800376 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068110271 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079448733 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068281543 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090095475 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.109762039 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.11096186 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06986199 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.085029648 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.080694532 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.114583326 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.116837553 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.116539878 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.07195082 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.115026511 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071129667 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.114405991 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073467941 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080439061 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072457499 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.086706409 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072052752 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072482431 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.121448692 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073355475 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071335896 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071064897 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080604626 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080282578 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071894849 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.0722426 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073468406 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.079363173 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.072184935 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.114167681 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.077948732 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069381029 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.074562353 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072830407 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073058506 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.1181958 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072522123 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072780286 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075206317 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071893144 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.079394724 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075548218 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.079261318 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.113732993 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.074210836 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.074937341 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070218099 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.072321558 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075057591 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078723251 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071668855 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.074888104 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.114203869 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069762657 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.077555758 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068830239 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070879295 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071755771 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.072469255 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.074980756 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075605165 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078945027 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.07228531 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072363656 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069788963 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075372354 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069928101 seconds)
  done (took 7.625462477 seconds)
done (took 31.262307337 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.543167161 seconds)
  done (took 2.291259568 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.951365594 seconds)
  done (took 2.741505458 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.556086147 seconds)
  done (took 10.351036086 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.337797319 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.418095271 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.747011845 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134082592 seconds)
  done (took 3.430302727 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.748499588 seconds)
  done (took 2.549452738 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.232030837 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.228365006 seconds)
  done (took 2.266454262 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.374002291 seconds)
  done (took 2.167693456 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.223368878 seconds)
  done (took 3.014234249 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.234492067 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.167599266 seconds)
  done (took 2.208132618 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.643880932 seconds)
  done (took 2.444246167 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.539082153 seconds)
  done (took 6.348426766 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.250982889 seconds)
  done (took 2.094872553 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231057828 seconds)
  done (took 2.039480497 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.007101133 seconds)
  done (took 3.803706682 seconds)
done (took 49.558686902 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085332946 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087445449 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.089420269 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.08469258 seconds)
  done (took 2.121825911 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075184021 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073232771 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.076513527 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076590674 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.074059084 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076348051 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076036519 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.07285369 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074997172 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073443489 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071611625 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.072722997 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.075593119 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.072950225 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.075853786 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076923625 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073006236 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073046917 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075556329 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.072875196 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.075514113 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.072954849 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071016021 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072824289 seconds)
  done (took 3.581256303 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079132277 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.075116068 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077981158 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073500369 seconds)
  done (took 2.114911995 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077302403 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077235183 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086909304 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.09104497 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078332398 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.079613891 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08749355 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.087576291 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068527688 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090612482 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.07125152 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.07008409 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070402736 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.090244883 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.086833168 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.065284913 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06656414 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.08039084 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.079239367 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.082452189 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.07152536 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068137939 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078853317 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080399181 seconds)
  done (took 3.694151541 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.08291149 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066927893 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.083767094 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.094421795 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.095587475 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06841446 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083437403 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.096277737 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.131835752 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.068826696 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075029037 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068583197 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.109096883 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.069365028 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.085573088 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.113031646 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.116263665 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072997302 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101751358 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068829361 seconds)
  done (took 3.572036269 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078817422 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072080132 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072741138 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06832268 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.079350449 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076326878 seconds)
  done (took 2.269479719 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069074689 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.070188765 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.072647647 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075445904 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070512117 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.070460209 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.069858823 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.068871137 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.068942988 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.069492786 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.069796945 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.069761598 seconds)
  done (took 2.658769735 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.211384164 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070719623 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072800399 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067130203 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.070221995 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06980834 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08381 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071143479 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087530225 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.069281726 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.069469233 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.071990413 seconds)
  done (took 2.830301657 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104598601 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.113320947 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148185318 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120597379 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120913914 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099764398 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.16630518 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096448879 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.16590949 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.1416259 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121703225 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097374051 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09009315 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073259726 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104024888 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124048708 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141659079 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075980336 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117390631 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.209225322 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134566962 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.136919821 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.151918612 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120561859 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093646941 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.15160925 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101236796 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106080775 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128288025 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130889208 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121659663 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.101751683 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074586796 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.073700582 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153052032 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.107166852 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125201464 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.096869757 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108749337 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091450863 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111761118 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072452315 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.086288455 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.114963485 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08805137 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135260941 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091096944 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119925472 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084648141 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.142666567 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.283393936 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138658138 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089725373 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110080835 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141957969 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116315327 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138818315 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110292333 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086126277 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.122771396 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.106244353 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10454001 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111362609 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083301482 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.182687953 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092605056 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.115450485 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115381251 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.097747771 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098598856 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110802189 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.140204173 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129765297 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.1300463 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142928356 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098875856 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125651244 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.103435562 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.133780346 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1092074 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.075909188 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.126304806 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.132612857 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100852343 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104721044 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133836071 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095534791 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08061168 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102985058 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.122483156 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083836324 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.116803996 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083904381 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.112364248 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135319079 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100958256 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115231157 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121778197 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0812421 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.318147664 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112356787 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076480452 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120738477 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118026961 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161145744 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099359578 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080269575 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104956145 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1078773 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.15325987 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110316142 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083731429 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114628129 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142053711 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098520537 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.215921774 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099009755 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14555032 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115558354 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09084854 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07811578 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.094331441 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115551656 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112400046 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117276392 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094305168 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.088058989 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090629647 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116061473 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095807644 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084594662 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11808565 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103099343 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.078166652 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091999872 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.082763302 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145033854 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.081257798 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142628554 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129336139 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079524839 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110843309 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101717963 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113407455 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.101552892 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121147192 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144870465 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117990169 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093861298 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097646953 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112542982 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.149374588 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131544789 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096830939 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.08007914 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10442464 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.278396315 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101512113 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129127569 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099025052 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112237034 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107165076 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14576446 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148740346 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104666662 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105229162 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110350555 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.125806518 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079446486 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159022926 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108141316 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122276146 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087437469 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145687982 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.116231233 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093081597 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090747673 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104384318 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.107053112 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111209257 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1490503 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09947922 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.075435299 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096691344 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.149791698 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080450776 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114562587 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094758088 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.097022362 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123317991 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.098060047 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085250276 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071660189 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130698699 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161845838 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.073128473 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1194592 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.112832075 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107556333 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.125791428 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072853296 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123688225 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143421437 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122458703 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147216597 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15149664 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119284611 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.284616427 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.117973384 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110104129 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082821992 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.130374057 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.139325117 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099706434 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096002508 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138855081 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122938004 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.140001953 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.118574022 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11846269 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.10828346 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111582637 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106686381 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.105882896 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148773849 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124783719 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.128859223 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089700584 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110116576 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122685239 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139497375 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085645174 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147483537 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.088323593 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122890386 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.080675413 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128823136 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080581684 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112381369 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08283683 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10505628 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.072829879 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.077286695 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145759877 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.116504648 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110120788 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104330772 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.14284891 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.141270115 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081847514 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112366492 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119143151 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105220978 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120340365 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113371838 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.092896911 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099182346 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113619913 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08827239 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.084525879 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.280789553 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098160846 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130828937 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08763473 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078799365 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144877888 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108394769 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098630241 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081405566 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111395128 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.124892961 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096640278 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090657372 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118983827 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109085011 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145018004 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094592042 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101300116 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.128704113 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083658773 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.0957802 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072489898 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088636563 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078955315 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.131214118 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07932288 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119344105 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072313253 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134815019 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091178952 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097238821 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106270663 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116360306 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132451635 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098811413 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146578949 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093847164 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122917057 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111731295 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09834692 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092521213 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107768315 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104574802 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127013531 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.10022189 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12730291 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149646853 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108004014 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145318059 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095253816 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126606381 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111475269 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12867251 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116639174 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152405015 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141014001 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.275094923 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116000818 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078743237 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098587444 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109551953 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.116242308 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.179392869 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130083079 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.075303287 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110052473 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097633686 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111111132 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108148782 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085688795 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149490119 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105163916 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.09162002 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11660823 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.094713043 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10817692 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078767028 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099142495 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104616872 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098126041 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102473408 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11949052 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132603893 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117388313 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146876658 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.102199178 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.095935568 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122275267 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114183452 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114595666 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090014212 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089449877 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141621402 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120770826 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128980324 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102233085 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111165135 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115399859 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10448349 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130146584 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112618736 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.132418497 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083792845 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.079288518 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.071621709 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.075324691 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.127619043 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112480778 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116025116 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101011764 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074310156 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104966078 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108441828 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074215447 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090757489 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095293684 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097127426 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092572186 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106693836 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.113677217 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092503217 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104978023 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100685909 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144351634 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.102588472 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089434335 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143143886 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149720482 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088381178 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091367578 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072534135 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080295582 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111519331 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148821175 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150054134 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078915539 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088327374 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.086532852 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087554178 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073311525 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089690946 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.09096708 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105291732 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098284164 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112337878 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105469217 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076514693 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104521952 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100804909 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093961674 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106477211 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119554935 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121042396 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.13419086 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108276512 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103888139 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076321577 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.079930212 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076452632 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080463875 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101000693 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079956605 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076124917 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137240967 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09081936 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102295425 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105430169 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088434386 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076032742 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1295399 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.352283761 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143300717 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.078702165 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089713274 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.090008979 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085830252 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100329578 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146842898 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116578575 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119802938 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114366866 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111463632 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147860186 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163645687 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085665044 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.150324984 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08093221 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080658105 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08121334 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11987419 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094927926 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121733704 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145581886 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096143729 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108511777 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081656248 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147977394 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.101214076 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109117383 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091370905 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08327593 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149998208 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08370581 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.08497429 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095151603 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.116384006 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076473185 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109322717 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089348779 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084364268 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14876656 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635068693 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094574563 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.079419172 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101006681 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.148393259 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132777568 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099334704 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112574818 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.123347276 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104729464 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099418152 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112553709 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188257417 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077582697 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098822687 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.275138256 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101786382 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106734709 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.102439617 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088980352 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.096541707 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.090447426 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082820858 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111205836 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09239012 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100561748 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110952532 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086258323 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.090725115 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133939398 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.108078623 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.085379784 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091573504 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.106859597 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092170725 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104113226 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072131645 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117035685 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094159308 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119971743 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.097126766 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111322385 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130572211 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09393347 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142600928 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.110832921 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126712417 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091365727 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.081840425 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130200224 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.092273724 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081176794 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150630487 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.100197079 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094397411 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10793376 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.100245274 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118074168 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121033394 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116652703 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10112152 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081987454 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104946114 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.106706634 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089026964 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081755996 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.077900378 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079775213 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111523051 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08940323 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08641456 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118172939 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093042853 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107153287 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.269241896 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.126378824 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086406217 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104894267 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114142691 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095200934 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112814677 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104617027 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132067273 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.179816206 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129333829 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132665684 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137419269 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080048026 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079143892 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071897461 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120359661 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082902454 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.092748404 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084209235 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138456455 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.085257824 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11640571 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.234960097 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083593555 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098278587 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100758845 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073595335 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086760697 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112325923 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091339096 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084032373 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12379395 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086677693 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.132189837 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115442858 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104117814 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099096492 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084358898 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118806003 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106752754 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.13501665 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099310932 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.078802831 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119181517 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107436806 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143114802 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.076657053 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084615699 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.134639308 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108070728 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138530331 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083590738 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155944492 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148641362 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104492225 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.301873091 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074432405 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087095574 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091874735 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.130755801 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087466579 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114657687 seconds)
  done (took 70.538893494 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.156202772 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143584112 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.08258917 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.107552619 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189498644 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.20013428 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121375115 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.098161105 seconds)
  done (took 3.098240533 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069290655 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083910284 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.083817601 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.253739908 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.101727491 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.07105665 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.076350157 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.084938309 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.070922243 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.070198284 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.105828977 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068606911 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.070878693 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.468089467 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.069327286 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.075423389 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.070769325 seconds)
  done (took 3.876759181 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.33429438 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.009043119 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.256947187 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.180128352 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.146963072 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.556925451 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077241241 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.085589441 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.641275215 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371405135 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.143799042 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.091873234 seconds)
  done (took 19.89573483 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077183956 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.125428295 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.125353611 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.078009643 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.077532201 seconds)
  done (took 2.467688458 seconds)
done (took 124.550640768 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084107749 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.175585268 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071020016 seconds)
  done (took 2.265326987 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120325371 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.119120718 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.121539675 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.119912442 seconds)
  done (took 2.478742481 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075203344 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079220103 seconds)
  done (took 2.147543996 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227199039 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.221102342 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094851039 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082828185 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082606614 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.083185432 seconds)
  done (took 2.257036881 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071883729 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073412923 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074339219 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074542908 seconds)
  done (took 2.285719374 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.166038257 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067300427 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.071241477 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.074289359 seconds)
  done (took 2.373322995 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08594315 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.089135124 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.120145217 seconds)
  done (took 2.294384858 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083673755 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085614558 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081074621 seconds)
  done (took 2.249072981 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109532276 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.100312356 seconds)
  done (took 2.202066091 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080548876 seconds)
  done (took 2.078498167 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090561514 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102245737 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.187920835 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.154097046 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.188786058 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.173682729 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.080427227 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.081600939 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.076479088 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.075697525 seconds)
  done (took 3.204357705 seconds)
done (took 28.456202484 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085193522 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.3783704 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360939625 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08863556 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674256977 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359642764 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.008556721 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.094774166 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105196539 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071266745 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089487582 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652167571 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.001930978 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.330200728 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.985714382 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.329787393 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.656365526 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072505903 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071209753 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072078398 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.992451509 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071080163 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07172683 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072492618 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.654550644 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37801548 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07245348 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.328563497 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070825646 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075868153 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.360191831 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072288455 seconds)
  done (took 16.677432402 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076191593 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129450857 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075846414 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088208518 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073266187 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072573177 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.074827771 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.072110799 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11684339 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071993654 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090049568 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071091509 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.075537168 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073382963 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.092159847 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072138916 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074577697 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.075369203 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071870069 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072380374 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.09093608 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071393154 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072493673 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072299749 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.072470882 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085202932 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072680322 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071512432 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072106499 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07581028 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076439522 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073595703 seconds)
  done (took 4.542914577 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127916746 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.135696203 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.076272577 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.11327686 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.122183205 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073431178 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.155585744 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09568739 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.120033453 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072050347 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090017535 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071919279 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.108628219 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.07344879 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.092822614 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071919518 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074196295 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072783999 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071829623 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072844826 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091715536 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071830291 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072468002 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072711538 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.072715144 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.087105902 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072960436 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071926412 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07179802 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075855307 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07644009 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072630636 seconds)
  done (took 4.82470056 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070120753 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072098392 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080497603 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083827288 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069077853 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071025627 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072295532 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069427194 seconds)
  done (took 2.613944716 seconds)
done (took 30.676125684 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.08017817 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070282168 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073220053 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090261916 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076686794 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.115944482 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.0673983 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077376309 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073895474 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.074236264 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.076234661 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.070021647 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072886373 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067516766 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074933831 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.06894626 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.117493285 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072723521 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.115110766 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.116472174 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.071055464 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074208521 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.0770994 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.115541199 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.115412506 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.114891258 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076041573 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074387272 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.069183204 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071773357 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.17490766 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.187927013 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076332162 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.122337063 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068440601 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068281668 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07275074 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070748543 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.116877895 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.078157868 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.071202479 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077633656 seconds)
  done (took 5.681536668 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.187444074 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.197659517 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.193299741 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08316103 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.095727771 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.082474702 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.199226868 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080161419 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077949004 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.198599103 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074942922 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.079042319 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081333026 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.071836413 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079272797 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075522949 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080598742 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072808818 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079138673 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078264049 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.197722937 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071907458 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.084702377 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080879832 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.074323122 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080284247 seconds)
  done (took 4.786208787 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073740028 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.09096627 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.095749768 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.151526894 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.113123723 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08591401 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.085437956 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.096751745 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.104566985 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.071092768 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.075300848 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.099383494 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099544067 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077858351 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109839416 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.089034423 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.083633277 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072268413 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07804178 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105343898 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.093332854 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08928342 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.103843478 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090882517 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.070067799 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080049589 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.077898155 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086793872 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.078156858 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082969549 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074700775 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073906972 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071159187 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.083443326 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077972704 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.111511196 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092730681 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082896573 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085586223 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109398098 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.08084601 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072234307 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098947575 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136495016 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.070083241 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072864633 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074146703 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082826062 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071958992 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100423062 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087414075 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070075735 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089322799 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071869895 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.072383563 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08819529 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.072287812 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.072289994 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082495364 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07671695 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091379294 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07584026 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.092542544 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.070491243 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.08207788 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.072400718 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072276855 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.069379209 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105324639 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077945549 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.124108136 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071721153 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06856371 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.083211874 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081893603 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.077805771 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070350641 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.091043705 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.083129847 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.074737409 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08152879 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.073819864 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073863165 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106698196 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069541015 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.068493793 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.068377912 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.07308191 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073992832 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070834901 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.084297121 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069860062 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.074427643 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.086868254 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.070878548 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.071235159 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.073009545 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071678987 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.070209204 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081594588 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.074565363 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.072642062 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08392958 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071984359 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.074551848 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.085700389 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080321357 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069790925 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.071526925 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.073179539 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072525321 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075473933 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.07434618 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072941235 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.078010133 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077925388 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076966968 seconds)
  done (took 11.698821023 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.206837188 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.200215024 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071830874 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.195737702 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.079719891 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.125487325 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.196839433 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.13647125 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071378552 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.07211209 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.070171412 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.144680372 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.140973191 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.154604962 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.120313306 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071744296 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096879441 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.149272176 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.199089262 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.192389128 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094674419 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07932286 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073625476 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072756223 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072194313 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080188253 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.089924078 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.08025225 seconds)
  done (took 5.416518417 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076022477 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.086476396 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074878583 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.095605128 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089829578 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071354417 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.073465534 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.072705812 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.088663159 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.078329832 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.07114569 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075863244 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.075001522 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.072151593 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072466076 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077910085 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077984651 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.070614765 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07484591 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075678077 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.082034196 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.158421324 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.076259922 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071239815 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.074105042 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.071102245 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.078535342 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.081345431 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070833293 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.105417163 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.068181453 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075671238 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085932062 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.07203889 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070748941 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071500814 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.071057203 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070503478 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071370962 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068728534 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068455675 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.076334807 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069362461 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076794352 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084939251 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078895175 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072033999 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.076308145 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.07363142 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067721615 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073970408 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.074185848 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073716281 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079061631 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074424957 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.07370685 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.072316225 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099875794 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076920559 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.0702696 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.070219908 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068868509 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072569707 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.079309869 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087811927 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072713137 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.069412474 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070732309 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.079521119 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.085027942 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.070360535 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076202092 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067934892 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.071190973 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073845256 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.074084458 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072427613 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.069332386 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070536964 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070970623 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.072137513 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070722358 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.070718322 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073580689 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068553298 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069788708 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.071718615 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.072170083 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.077538949 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069731112 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073930354 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072306425 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069643472 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073492525 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.076833322 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073800137 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.091486808 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079778491 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071718523 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.069062143 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.086658299 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072982696 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070491133 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074111848 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.075614543 seconds)
  done (took 10.060099305 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092037481 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.07188773 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090363276 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097578526 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081285271 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075529536 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084877925 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.07129354 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087750276 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069633938 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07983095 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069235728 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084745632 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080681702 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072514127 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.081954041 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073349071 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091960196 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085978892 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069599325 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079924628 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083735856 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083526466 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.089126995 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.089065851 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089811562 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083980586 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073628429 seconds)
  done (took 4.370745751 seconds)
done (took 44.029897299 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.109098672 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.276531099 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.101828551 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.354424819 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.15557092 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.323240764 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.213052994 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.095103742 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.279806723 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.127641827 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.420026722 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.473054144 seconds)
done (took 71.027711483 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.108937218 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.238580613 seconds)
    (2/2) benchmarking "String"...
    done (took 2.309532385 seconds)
  done (took 6.579048026 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.698715803 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.097509052 seconds)
    (3/3) benchmarking "different"...
    done (took 2.147542226 seconds)
  done (took 8.975467811 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.172638286 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.723305826 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.351518347 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.096537153 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.10195482 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.534324195 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.912345872 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.563426306 seconds)
  done (took 34.31595155 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.328384322 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.301469068 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.861918174 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.901473676 seconds)
  done (took 17.476431657 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.704835672 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.360073506 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.359878321 seconds)
    (4/4) benchmarking "different"...
    done (took 2.353465264 seconds)
  done (took 11.870628354 seconds)
done (took 91.625484185 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.103772444 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.453601287 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.132008193 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.252064468 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.162423398 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.136303889 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.107422418 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.125398764 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.099883767 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.10494069 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.508803346 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.103920137 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.100765148 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.137537581 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.973081823 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.97306365 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.233095643 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.979365634 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.99725421 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.164937051 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.457571039 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.96893995 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.968183577 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.159573343 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 8.091526409 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.995742788 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.573671 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.97686889 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.670696431 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.984367163 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.97220989 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.974216224 seconds)
  done (took 213.676481114 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.966697908 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.025720892 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.084013428 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.019265457 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.616971673 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.158973063 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.11700105 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.64021871 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.970212278 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.984432907 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.190536125 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.97244841 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.2245587 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.907668421 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.961991102 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.054875548 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.157855856 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.210723801 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.971055325 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.15649316 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.988083105 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.111407936 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.051892714 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.153062101 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.985495326 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.062911292 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.983758038 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.980669465 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.152919543 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.128269834 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.985991293 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.000325822 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.171468976 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.832339596 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.980124546 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.980434669 seconds)
  done (took 177.84649408 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.132461119 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.974988317 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.026732705 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.091406705 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.661273015 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.647790584 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.967490282 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.965820429 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.96765488 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.973902926 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.967685957 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.035296432 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.066886931 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.989379412 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.967547974 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.965485712 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.858493565 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.965837512 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.96465621 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.964637199 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.027705156 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.339474058 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.091596218 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.971460379 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.975373449 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.088070848 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.976431963 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.96622664 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.088293067 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.968727591 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.040659779 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.069960829 seconds)
    (32/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.965729932 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.971917189 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.045527932 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.97326611 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.42737882 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.964089524 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.966107928 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.968168184 seconds)
    (40/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.965805856 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.026774671 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.966514547 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.016116631 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.055237594 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.966349947 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.978333603 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.153586296 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.639309977 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.969781975 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.965196609 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.966332958 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.966918788 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.96784192 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.838768119 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.966007892 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.992426825 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.482220273 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.969082837 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.966576089 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.964548443 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.967089026 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.967298968 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.973334726 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.003928098 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.68020633 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.470610969 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.351479615 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.693526128 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.967303638 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.254627292 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.021150387 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.967295735 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.046746692 seconds)
    (74/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.967889077 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.968598358 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.967063993 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.967943982 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.967275181 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.013514286 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.013116807 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.968923749 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.088591287 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.973473203 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.968832587 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.036388443 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.816471331 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.972174039 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.981319413 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.024720133 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.96909094 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.968257128 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.97586212 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.010986287 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.970457054 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.970196366 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.968118293 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.010499803 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.970190046 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.088101428 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.192159433 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.042652484 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.21103139 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.14154923 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.968803379 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.969853356 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.983507003 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.97039244 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.970859428 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.97899919 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.970546204 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.969533658 seconds)
    (112/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.969735246 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.969613285 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.969948884 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.969638646 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.969046519 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.982947857 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.97090968 seconds)
  done (took 430.749346981 seconds)
done (took 826.486546431 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.65286457 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.721726952 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.568900142 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.597628443 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.570594607 seconds)
  done (took 15.019293075 seconds)
done (took 16.92348019 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.984775469 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.988051588 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.973605504 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.991489602 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.989261381 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.990312339 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.020949835 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.012710497 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.008877409 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.98959362 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.996436895 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.991949943 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.995797143 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.012144919 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.998343799 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.997976339 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.991501989 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.981755496 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.998537458 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.994818655 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.992523411 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.986554892 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.991836456 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.998185122 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.004806251 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.994062381 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.986338323 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.993281584 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.985378818 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.993326094 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.028305396 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.998004401 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.023623306 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.99933998 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.999774257 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.003310289 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.992145665 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.014557851 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.993696705 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.031189368 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.000718105 seconds)
  done (took 83.804743021 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.978203895 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.107531657 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.184722647 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.00892099 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.977366018 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.186611371 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.033865907 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.109150668 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.110934462 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.193385101 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.19298706 seconds)
  done (took 24.99517355 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.977171632 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.109841207 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.194315536 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.01296428 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.979320882 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.194137382 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.039680407 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.113235078 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.111308596 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.198365264 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.197628109 seconds)
  done (took 25.04418393 seconds)
done (took 135.749523717 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.372268459 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.171201993 seconds)
  done (took 6.452861309 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.974633296 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.988730979 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.124973122 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.972791707 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.972702356 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.974935641 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.974500759 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.972065655 seconds)
  done (took 17.863611662 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.976284267 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.975169761 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.976497803 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.976334157 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.977155576 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.975988013 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.975910072 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.977152245 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.975325883 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.976482294 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.977605294 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.976195938 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.976840685 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.977639109 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.977336262 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.977639334 seconds)
  done (took 33.536856143 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.97552207 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.976299045 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.97644803 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.976105014 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.975481727 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.975490159 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.978607609 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.976470425 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.975811516 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.976514577 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.975590947 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.976955484 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.976997445 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.975992135 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.976100925 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.976707987 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.976623369 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.97907379 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.976658218 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.977077207 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.977498884 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.977110573 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.982172385 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.975874479 seconds)
  done (took 49.355436082 seconds)
done (took 109.124004634 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.159867611 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.477657294 seconds)
  done (took 8.548904909 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.982279973 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.978572398 seconds)
  done (took 5.934392592 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.978165356 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.978425371 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.978564793 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.978060083 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.977518472 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.97687678 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.97822554 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.978492071 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.978358227 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.978754824 seconds)
  done (took 21.693556604 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.97939105 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.980014725 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.978693642 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.979189513 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.979367749 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.977856872 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.978507971 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.979115502 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.978438451 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.978865073 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.978555151 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.979038539 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.979401303 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.979777618 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.978998168 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.979784291 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.979223035 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.977116364 seconds)
  done (took 37.534845317 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.978138759 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.980867133 seconds)
  done (took 5.874175586 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.979162953 seconds)
    (2/7) benchmarking "second"...
    done (took 1.978750723 seconds)
    (3/7) benchmarking "month"...
    done (took 1.979860589 seconds)
    (4/7) benchmarking "year"...
    done (took 1.979333606 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.980400436 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.979540578 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.979922011 seconds)
  done (took 15.770297798 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.981208737 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.144998595 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.187074652 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.607419894 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.982004469 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.982825772 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.854704379 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.982899395 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.983282709 seconds)
  done (took 21.620503296 seconds)
done (took 118.888067066 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.811466782 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.981823468 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.286516127 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.048905026 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.049311254 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.272970539 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.997298412 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.541971175 seconds)
done (took 43.902556971 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.01718062 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.974145849 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.007520435 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.007706502 seconds)
  done (took 22.903878807 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.975738279 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.292983369 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.996182371 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.975030881 seconds)
  done (took 23.16528138 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.355411887 seconds)
    (2/2) benchmarking "read"...
    done (took 2.321997287 seconds)
  done (took 6.596204081 seconds)
done (took 61.594882915 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979981725 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.980198753 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.979629784 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.978376971 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.979233119 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.979629855 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.980487075 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.980050839 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.980388464 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.979890959 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.980269489 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.979194613 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980832293 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979808754 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.979944886 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.979801358 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.979811589 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.979521737 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.980329544 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.980799714 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980669208 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.980453604 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.981667788 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.981234354 seconds)
  done (took 49.437965978 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.981088255 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.981271985 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.981641546 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.981379094 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.98147434 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.982059372 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.982815815 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.982712449 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.440950564 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.982164942 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.051835987 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.116650494 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.115541013 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.116551991 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.116461742 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.117046524 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.116652628 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.115318756 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.115436763 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.116313271 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.116814995 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.11663117 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.117372373 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.11764216 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.118596566 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.116732984 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.116725241 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.116948171 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.116973855 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.119561509 seconds)
  done (took 64.465161095 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.117078185 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.116355606 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.11616338 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.116905717 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.116089337 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.116722873 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.1166594 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.117024429 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.117518095 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.116335132 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.103861061 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.11740518 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.117681627 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.114659126 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.115416118 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.115226833 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.114308333 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.126585775 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.113791367 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.11289832 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.113770697 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.113743893 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.112526896 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.111182401 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.111828877 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.112545028 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.112584792 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.111798588 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.111244165 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.111575222 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.111666848 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.111596023 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.109688995 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.109561722 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.109374131 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.108793038 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.109447069 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.113132909 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.117735758 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.109020791 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.108358622 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.108900065 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.108533791 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.109120845 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.108640922 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.1103176 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.109110112 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.10939464 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.108500353 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.110127887 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.110065086 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.101766366 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.10501351 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.108966921 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.10937581 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.110028278 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.109669099 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.109692928 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.109553337 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.110235028 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.109223246 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.109994135 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.10887143 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.109057448 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.110957356 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.109017463 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.108481845 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.10879614 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.10859792 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.112433404 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.107669175 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.107963864 seconds)
  done (took 154.089460656 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.107038972 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.107593272 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.106201896 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.106179886 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.106939464 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.107244589 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.104998906 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.104585047 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.105736716 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.105537727 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.106480273 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.105123825 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.105818906 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.105399606 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.101764198 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.097094069 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.104547837 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.10574881 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.105290279 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.105272831 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.105722655 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.105544828 seconds)
  done (took 48.356295446 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.106126354 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.09458216 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.106652895 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.105831872 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.078591399 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.104138354 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.106007788 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.106218659 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.105918526 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.105730307 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.10622649 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.105958362 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.106068654 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.106444479 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.106555272 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.106148728 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.106455208 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.106404741 seconds)
  done (took 39.908705817 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.107611809 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.106891828 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.105905918 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.105990856 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.107303457 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.106380998 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.107705711 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.106981241 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.105976698 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.107321773 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.106450544 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.108018536 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.106322382 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.106445525 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.107271412 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.10640716 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.107962703 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.106607526 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.10711061 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.107247254 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.107133268 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.10882563 seconds)
  done (took 48.393003415 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.107568311 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.108092265 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.105915249 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.106374186 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.106527135 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.106223689 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.107846194 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.108133938 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.106925791 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.107990151 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.106736655 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.106452729 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.108313083 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.108269546 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.107277035 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.10711682 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.107341559 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.109152717 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.107246158 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.107080565 seconds)
  done (took 44.186030554 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.112480843 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.107466712 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.1066583 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.107764542 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.106420441 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.10731684 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.101508782 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.101597702 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.101695843 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.101272921 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.103142562 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.100460715 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.10168854 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.100609501 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.10083771 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.101986276 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.100890797 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.100553641 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.100385476 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.101827771 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.100389045 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.100941159 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.099610387 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.099215009 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.099952704 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.098686312 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.098665929 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.098898007 seconds)
  done (took 60.903626311 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.09545129 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.093677065 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.094895221 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.09385001 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.095164322 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.095672203 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.093898699 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.094530045 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.094532658 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.095320188 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.093000216 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.093779116 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.094041731 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.09293436 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.093499373 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.092884174 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.093059234 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.093034551 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.09334834 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.094265585 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.093299424 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.092491158 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.093545302 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.092979278 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.094245981 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.092627309 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.092385578 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.093165195 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.092134883 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.092801972 seconds)
  done (took 64.836970378 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.111917868 seconds)
    (2/2) benchmarking "in"...
    done (took 2.111587322 seconds)
  done (took 6.245588646 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.090428431 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.091190765 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.090144707 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.091138455 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.091223463 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.090188799 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.09071891 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.091121763 seconds)
  done (took 18.748251884 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.092518387 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.098251419 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.091326874 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.09156323 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.095388062 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.103551063 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.092735493 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.09666083 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.09729848 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.093138855 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.100683325 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.099294274 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.103228363 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.099689115 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.091684806 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.092381237 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.097352378 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.097865424 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.096346814 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.092730252 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.096207089 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.093054477 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.09066785 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.095235567 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.091083857 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.096561103 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.104700049 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.096241276 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.096051351 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.090658859 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.100179826 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.09072509 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.094682372 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.097254741 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.093456435 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.090130182 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.100068877 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.093774583 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.094606428 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.089792123 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.096072124 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.095835113 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.098543383 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.102701717 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.093453218 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.089538098 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.088856777 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.094035359 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.090936273 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.097065428 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.095377328 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.093702183 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.089697794 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.091294927 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.095256468 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.093277876 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.093504798 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.096410117 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.098969021 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.099963016 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.09602823 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.112085764 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.102001424 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.092325173 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.093470167 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.101758044 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.114186047 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.094594912 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.094351717 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.088845809 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.099608058 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.08855582 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.087490351 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.087035697 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.105483366 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.098391084 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.09231506 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.086686326 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.087201212 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.091642478 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.093466677 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.092984214 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.0924315 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.090838426 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.101008283 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.113189095 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.093654185 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.092306787 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.094010825 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.08963285 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.094762453 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.095164353 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.087925535 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.08794991 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.09258984 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.091178625 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.090596209 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.09085968 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.08683763 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.099931409 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.088325162 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.086715143 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.094629114 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.097275534 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.087303426 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.093014329 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.092413593 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.090382575 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.098967925 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.091081349 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.091514053 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.073012913 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.088054388 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.093793474 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.086732455 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.094934567 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.097632429 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.098472767 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.088754389 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.095529729 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.094536966 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.09436414 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.099509337 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.109802117 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.087848001 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.093934229 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.095345795 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.100409239 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.095656818 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.088277051 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.093794251 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.086435949 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.086359781 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.092298542 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.087806205 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.090204688 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.086447202 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.09129198 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.086476166 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.092471325 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.089727344 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.093318879 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.092895207 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.091021355 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.094599088 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.090541293 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.093192491 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.098846194 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.088856653 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.091799044 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.086967751 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.094457207 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.088734477 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.09198051 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.08684677 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.087759622 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.09192702 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.088901508 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.094630562 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.091886558 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.088768805 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.089227244 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.091631492 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.092113281 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.091611402 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.087781976 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.091706646 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.092883095 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.094199698 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.093651879 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.095076656 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.091956728 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.098205315 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.087114083 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.079521642 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.080370794 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.087786544 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.088947361 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.095358693 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.102094719 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.095135341 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.100239664 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.090405058 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.099912375 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.08822861 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.095091436 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.095218074 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.092381034 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.092582018 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.089354931 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.088312923 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.096802491 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.111758252 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.101811169 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.095266616 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.090749341 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.093156774 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.091635162 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.098701369 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.089240164 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.094999189 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.096302208 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.093830868 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.09466098 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.088778119 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.097967856 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.089695994 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.089829181 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.098247491 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.094017088 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.09072117 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.095842734 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.089931453 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.095611329 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.090009558 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.091621187 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.091376804 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.09218125 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.101551871 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.096815029 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.090987792 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.093884718 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.096784242 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.093807465 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.090420671 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.097075301 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.097789379 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.09010721 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.096333821 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.103160018 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.091512632 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.090610441 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.060351124 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.090052882 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.095755145 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.091019724 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.098496586 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.097348558 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.098355137 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.09405551 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.102943486 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.093184692 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.100388994 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.098265023 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.101108868 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.097967635 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.100881009 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.098074286 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.095436509 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.076149893 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.093639621 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.099351989 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.094551027 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.098717354 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.094885917 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.101357902 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.099419574 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.102527696 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.107155001 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.10492265 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.095371921 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.098949353 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.101676793 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.097376333 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.097053473 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.100059221 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.111090756 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.10809604 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.094479017 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.095032003 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.09929631 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.10271583 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.095507817 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.099920465 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.107474707 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.097428618 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.097431308 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.100334888 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.099595885 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.100407114 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.106548932 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.086361741 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.089867067 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.101624449 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.100598182 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.101191445 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.095521277 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.104363208 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.099746354 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.102556622 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.099291868 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.097143924 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.101714441 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.096624191 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.109445807 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.09633115 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.102017443 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.108317482 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.102180611 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.097812582 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.101619072 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.098502581 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.102335051 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.102852933 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.097666371 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.099424457 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.10373149 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.104786132 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.110001791 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.104885444 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.109376139 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.103336252 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.11134578 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.10134317 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.096546831 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.103951567 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.105409028 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.108994526 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.0988644 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.098348884 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.11175304 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.098412342 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.099200299 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.104909774 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.098157028 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.103839572 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.101804965 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.099985258 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.106545758 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.108945172 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.098639544 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.103456186 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.099704825 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.100384073 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.107863533 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.106002676 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.104299371 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.100878752 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.099346581 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.103801695 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.103403631 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.103717461 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.103916354 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.099261098 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.10120895 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.110639595 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.103699027 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.101289034 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.108652866 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.099960981 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.113533527 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.104170883 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.102620023 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.101854161 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.099808133 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.102171927 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.099054459 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.104439406 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.101858975 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.099584649 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.103099721 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.116372185 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.112876355 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.105108171 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.106662626 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.104987017 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.107017901 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.115103272 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.119366461 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.106290555 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.106549652 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.104496428 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.11285729 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.106717751 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.110192364 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.109634679 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.112457479 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.10890059 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.102367873 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.108244041 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.117779103 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.105352304 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.103917128 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.101383858 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.110973569 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.103915285 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.10332841 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.102679744 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.109036142 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.104603932 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.115631298 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.103164866 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.103298667 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.106139376 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.101204103 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.105488511 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.103541596 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.108327031 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.108314996 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.105918309 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.105916501 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.109995377 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.110840798 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.102848701 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.108650419 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.115113949 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.106317183 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.107884336 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.10520233 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.106891548 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.11177692 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.107358079 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.103687694 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.105939026 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.102365707 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.106182895 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.110933161 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.113600963 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.108763263 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.103586789 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.104084686 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.111982074 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.102969906 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.108561429 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.112091059 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.11696772 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.111604254 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.11715504 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.115767974 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.109032865 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.106057227 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.114788622 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.113726968 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.108890164 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.105630748 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.108570484 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.112052124 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.110083712 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.110307143 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.109108986 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.105913224 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.112928589 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.104611767 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.106014017 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.110494195 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.105102699 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.11138907 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.111712999 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.115021357 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.105753673 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.105756438 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.104795369 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.110592732 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.111572803 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.112175471 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.11027815 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.105821973 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.111990315 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.111091466 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.110204296 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.105577846 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.106140286 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.113529537 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.106185596 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.105991556 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.107735391 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.105393559 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.108142513 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.112792025 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.112694582 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.105608139 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.112747503 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.110574941 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.114882838 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.110130037 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.111240375 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.110906015 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.10624875 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.118513058 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.106995167 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.111063613 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.109046118 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.107383189 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.116591812 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.112175189 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.115922867 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.111968339 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.096722885 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.106639738 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.115855688 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.115943543 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.116356944 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.114248223 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.113684661 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.116280464 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.114015669 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.108080968 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.10664225 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.10921278 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.109531554 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.116185408 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.114018368 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.115676006 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.11098167 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.113988836 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.113431842 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.114897124 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.107609175 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.108547925 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.106409178 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.123025884 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.121465443 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.108796944 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.114431834 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.114919884 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.116222682 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.119422732 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.11217112 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.112499134 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.113834883 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.114883644 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.110700634 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.118715775 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.116297521 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.118172488 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.113425213 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.117925008 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.128689162 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.11628385 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.123061201 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.140397175 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.107523906 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.113833816 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.116071616 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.111632381 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.115294574 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.114207234 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.114229315 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.1225262 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.114525003 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.110148862 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.122065964 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.110003522 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.112637129 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.115105197 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.111894698 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.119963505 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.118100745 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.122538901 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.114536493 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.111154348 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.110736185 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.114781918 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.11079731 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.111453075 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.110540778 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.117381269 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.112856925 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.11629673 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.124659747 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.116394323 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.117080997 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.128678788 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.122199137 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.115946561 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.112063218 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.117033201 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.121834024 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.119340848 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.111649182 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.119532568 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.118687634 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.119739868 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.118360701 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.118486519 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.117290097 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.118587321 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.112928145 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.116474041 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.127816239 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.126459285 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.114987371 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.102543053 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.122989564 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.113353212 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.125657656 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.123633422 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.119458137 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.120356267 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.11790933 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.113940288 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.114374123 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.114384057 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.120638874 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.11956347 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.118699172 seconds)
  done (took 1255.098630113 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.114761629 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.113566649 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.116283355 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.115132331 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.11413129 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.114417785 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.11454672 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.115268267 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.114579482 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.114996906 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.115062793 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.115032987 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.115226269 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.115120493 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.115085564 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.114818343 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.115651683 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.116260607 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.115515927 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.115218051 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.115480472 seconds)
  done (took 46.460018463 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.115552 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.11537759 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.115128695 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.114900332 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.115408793 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.116136892 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.114821769 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.116011046 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.115792649 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.11747112 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.115886753 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.115677963 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.115203216 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.101000198 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.117001374 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.115683828 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.116812488 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.115771093 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.11657021 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.11639167 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.115938913 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.116414078 seconds)
  done (took 48.582292424 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.122026117 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.120570812 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.122173492 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.116312584 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.117027267 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.120942263 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.117135011 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.119475875 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.117346752 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.118783016 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.127710981 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.123023125 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.116327855 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.121954685 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.118000209 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.121356378 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.263474518 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.121168082 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.120812427 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.117393056 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.120753135 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.128458488 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.117731693 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.117798389 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.119446309 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.122288387 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.117432965 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.117957752 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.119516932 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.120255242 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.125338407 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.116842425 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.123860371 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.125364183 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.118615164 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.12076045 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.125601022 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.122824164 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.119260618 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.116255036 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.13174019 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.136690181 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.11845481 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.122322722 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.129578831 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.118134881 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.117659181 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.126047111 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.123700182 seconds)
  done (took 106.131733481 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.117378229 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.116973196 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.120697187 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.117619786 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.117878074 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.118030012 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.118112252 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.122245626 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.11162452 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.118543183 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.117580912 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.12040846 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.11834998 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.118673587 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.119087447 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.118726835 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.119201978 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.118680152 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.118698522 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.118114386 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.118760665 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.121069108 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.119381139 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.11903495 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.118666031 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.119245082 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.118108283 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.118849609 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.118830734 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.119476228 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.121167169 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.118665894 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.120076985 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.11918303 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.118552338 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.12040656 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.118586743 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.118787443 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.119170673 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.119053447 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.120011709 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.119116511 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.119664955 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.119345083 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.119994428 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.11916022 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.118764203 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.119250808 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.120353404 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.119600726 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.109474498 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.118242578 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.119808776 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.11907518 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.121284604 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.120146969 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.119959992 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.119340794 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.109365216 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.120258465 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.119428849 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.120523171 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.120237965 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.122075917 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.119668104 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.120764339 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.120895871 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.121733359 seconds)
  done (took 146.139652663 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.125207012 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.125100213 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.124824723 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.125052964 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.125024058 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.125407701 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.125610542 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.125536379 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.126754253 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.125430864 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.126110438 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.121542313 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.125761114 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.121054421 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.125574618 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.125393939 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.126368759 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.125078214 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.128209208 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.125942097 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.126149192 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.126283149 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.126133042 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.127045626 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.126670876 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.126415176 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.125955504 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.127604993 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.12686571 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.12644985 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.126945437 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.126663445 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.115376912 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.127249879 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.115987239 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.12664459 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.126971126 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.125939082 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.127830085 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.126871204 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.126161059 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.12791678 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.127428756 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.12602365 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.126605673 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.126968481 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.127651148 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.127328655 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.122823127 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.127218625 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.126746829 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.128667855 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.127547905 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.126430368 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.127645779 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.125267707 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.127174125 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.12782878 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.126828626 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.127168389 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.128440555 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.12414337 seconds)
  done (took 133.860254632 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.122277068 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.124086355 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.125458211 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.123154553 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.123761634 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.124508089 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.123645216 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.123142952 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.099650696 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.122974529 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.123353771 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.124902412 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.124982651 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.123774654 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.123489002 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.125042032 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.125811462 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.12295218 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.123431982 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.124594591 seconds)
  done (took 44.508364815 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.124317814 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.12309766 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.123226518 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.124417551 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.124630172 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.123720727 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.124018274 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.124359003 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.123970554 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.12313985 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.124230783 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.124755429 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.123306207 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.12521603 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.124910837 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.123727126 seconds)
  done (took 36.038997788 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.124063996 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.124788343 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.130046196 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.128272918 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.123591968 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.124317805 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.125614605 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.123807625 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.124776609 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.125384972 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.124395929 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.126288554 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.124876851 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.129195272 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.124796216 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.12509139 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.125249606 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.125463048 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.124641524 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.129082605 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.127240845 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.12489913 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.125154374 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.124695283 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.125763208 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.127351567 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.125474037 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.115695637 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.124687224 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.126120597 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.125023759 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.124911059 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.125481322 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.124556062 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.128616839 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.113745274 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.124885988 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.125230837 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.12507295 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.125832686 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.12531144 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.125514058 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.126481061 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.124634437 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.12599671 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.12500646 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.125020338 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.126296908 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.125432987 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.126713319 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.125433831 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.129304803 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.126109717 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.127431829 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.12591328 seconds)
  done (took 118.950060837 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.125885419 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.122804201 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.11869507 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.125650253 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.125981222 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.126112037 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.125906807 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.126986129 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.126410374 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.126474111 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.12767655 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.126733637 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.126388237 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.127526766 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.12769296 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.126563385 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.125907956 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.128495208 seconds)
  done (took 40.323577863 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.125904307 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.126725822 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.128027834 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.126895414 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.126145504 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.127059043 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.126726904 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.129013312 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.128928428 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.117028568 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.127886619 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.128912005 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.126784762 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.127800043 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.128343817 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.128143793 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.128136217 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.127914446 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.128319693 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.128662191 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.128461044 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.127822248 seconds)
  done (took 48.857150091 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.128155198 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.129704477 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.141681475 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.147127673 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.147640281 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.158842887 seconds)
  done (took 14.912062103 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130131903 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128453234 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.132509937 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128916665 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129447052 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130348511 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129179141 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129318275 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129974051 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130187533 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12936041 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129236106 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129577375 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.13044879 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130518566 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129839819 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130717532 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130310353 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130376132 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130472598 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130564989 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129516791 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129776944 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129897569 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130632001 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130950068 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130037739 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.131068423 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13053424 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.13007745 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13060714 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.129917306 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130448555 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130662629 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130182664 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131264056 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130811419 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.120277764 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.131524909 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130905192 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.130770011 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130917294 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130481315 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119040435 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.13040999 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131252466 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131391379 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132140252 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132079642 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131591913 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131639347 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132219175 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131310007 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132094548 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131016805 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131981322 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132226353 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131577235 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132431472 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132458623 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132219018 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132718871 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132045501 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131812021 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132186392 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132290111 seconds)
  done (took 142.67261226 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131872248 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.131957983 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133172405 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.133308726 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13317057 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132416504 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131982322 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.133021604 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.13164792 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134011096 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132462725 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133410118 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132146559 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133220402 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.13280737 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133770117 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.133050201 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132620616 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.13385563 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134654293 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133994234 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133495128 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133831445 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133721915 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133035892 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133762174 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.133309863 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133777346 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133159668 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133173402 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133633597 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134197941 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.13433957 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.13372937 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133144339 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133323156 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.134913954 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133731598 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133863607 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134472288 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134413042 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13372156 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134932087 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133989789 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.134985637 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.135121428 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13489317 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.13440755 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134499393 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135272256 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.135285209 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134762282 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135444144 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.13489313 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134573726 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133861193 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135217866 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.135215308 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134451053 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.13465532 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.134653914 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135195008 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135666659 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.13549654 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.136271738 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.136053095 seconds)
  done (took 142.905323757 seconds)
done (took 2926.929319551 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.134100794 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.242517589 seconds)
  done (took 16.440494778 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.300219606 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.174796086 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.322678787 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.253554686 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.143314955 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.145012147 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.13912296 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.126548737 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.232435679 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.138880326 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.168457804 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.138865879 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.140070959 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.139466186 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.139412292 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.139913615 seconds)
  done (took 56.910365855 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.143055247 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.141349318 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.141170478 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.138745625 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.152529267 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.213388932 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.159639658 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.142658344 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.153242195 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.172375926 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.157361058 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.145381313 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.148569324 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.145253989 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.230047921 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.185319367 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.197277859 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.211954031 seconds)
  done (took 41.046188025 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.218007001 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.14903383 seconds)
  done (took 11.440027622 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.170803765 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.159036363 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.165962835 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.152368913 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.163845234 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.14548174 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.160749818 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.15270789 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.155764569 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.165769556 seconds)
  done (took 73.667419954 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.143425052 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.143900671 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.400166461 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.148399024 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.146928391 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.164840016 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.144656132 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.172317755 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.144692383 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.140595291 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.152556349 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.405081868 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.153346538 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.143122988 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.558095157 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.153204587 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.147055561 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.173640408 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.172409522 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.146262239 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.148431486 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.146312623 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.30688953 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.831540071 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.144371561 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.145801846 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.148564317 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.141497127 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.14107473 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.14307572 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.144053023 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.142892596 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.147054045 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.141350606 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.149221729 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.148134824 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.630907653 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.163160185 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.150887908 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.232117014 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.185982856 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.149101468 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.902667036 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.144835399 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.141909751 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.148800349 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.815735521 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.231508736 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.144605531 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.321070853 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.468954839 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.156697488 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.286010555 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.304169955 seconds)
  done (took 147.77499052 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.141523188 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.474203426 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.295778912 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.143172632 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.456202263 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.355159201 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.794662999 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.187147691 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.145031715 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.360518233 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.278337069 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.252769102 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.144145012 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.144747709 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.142866072 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.142391766 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.298208335 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.209891335 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.146057024 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.141319725 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.16434257 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.299136354 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.248116846 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.146532056 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.158914599 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.356488488 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.192033392 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.250154099 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.643394934 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.143605256 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.205157584 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.612825536 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.147551268 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.143554508 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.188639653 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.24441329 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.232033934 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.146741634 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.14971623 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.143213313 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.826708276 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.343012639 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.246633079 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.276277379 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.290728314 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.355562089 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.615528278 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.145949224 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.655548587 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.322945811 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.350938336 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.364936834 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.243193188 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.12265888 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.598950988 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.145590331 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.792576068 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.373838253 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.285686166 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.249166264 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.146499642 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.145496058 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.144501365 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.387476986 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.146658442 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.242016144 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.147489744 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.145085789 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.243610312 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.250819203 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.281909215 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.368718989 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.177054396 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.868011261 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.368574338 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.315887519 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.209855338 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.370714037 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.148222155 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.145683002 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.232300044 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.745776631 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.275097134 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.393335131 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.385319538 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.171168417 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.74129105 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.149085291 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.290165556 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.319364738 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.445564225 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.292029657 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.198739153 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.035771226 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.147199162 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.146850397 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.217785477 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.275964874 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.340292764 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.499386533 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.389973642 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.733676609 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.164329018 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.523863891 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.252101838 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.148880923 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.800338044 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.147116772 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.354327374 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.188626101 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.147469986 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.145253527 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.31745126 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.16210217 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.14653903 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.910043921 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.208015044 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.151532406 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.323290011 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.148350426 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.395237841 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.066967046 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.380046243 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.093538693 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.177600474 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.320661419 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.290818272 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.442486542 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.479373319 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.393316365 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.232613568 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.375715399 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.052543297 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.149283216 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.411677063 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.148482132 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.147374389 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.315290361 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.067736502 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.294346899 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.150035696 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.479372223 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.165976705 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.200977606 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.153400354 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.391978609 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.179491903 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.195662721 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.150159816 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.279195944 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.148898849 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.07649905 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.30437016 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.150754034 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.149974943 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.742973565 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.148655677 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.294764999 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.375807117 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.161204173 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.215916381 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.641668111 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.744323354 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.235126739 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.170592147 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.514413953 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.86150827 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.282598557 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.139592528 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.640351571 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.14847484 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.387898602 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.343206782 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.15106956 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.150615595 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.004972206 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.779763793 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.148443998 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.305445579 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.97006043 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.522604067 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.357691424 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.153519922 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.200457892 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.155105886 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.887365132 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.490302912 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.149219143 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.149686562 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.150032198 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.150148728 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.149603531 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.357549568 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.179392904 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.707050249 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.28655231 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.406815295 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.456387135 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.3690792 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.184193612 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.153130338 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.432939088 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.151951011 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.212258011 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.152106996 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.159596503 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.427908038 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.154924099 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.365532178 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.359062061 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.120694388 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.196646856 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.151284407 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.150890105 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.150133245 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.285896576 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.238933858 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.143891859 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.150251052 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.188234543 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.256603421 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.33178379 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.453420549 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.15026011 seconds)
  done (took 946.64861096 seconds)
done (took 1295.993728006 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.150042858 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.154502944 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.155207798 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.153030802 seconds)
  done (took 30.692911674 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.151434066 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.151223829 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.151306698 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.154759049 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.151847181 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.15559884 seconds)
  done (took 14.994021347 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.150799404 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.154979164 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.153955658 seconds)
  done (took 23.539956243 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.568324575 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.546260296 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.225084868 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.291111686 seconds)
  done (took 11.710990438 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.154774666 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.156772012 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.157023013 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.15290194 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.152647003 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.156993488 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.152921255 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.153557091 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.151763616 seconds)
  done (took 21.475229881 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.344856216 seconds)
done (took 108.838304666 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.254548938 seconds)
    (2/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.639056821 seconds)
    (3/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.840837252 seconds)
    (4/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.308904475 seconds)
    (5/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.35007663 seconds)
    (6/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.154171273 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 8.558014172 seconds)
    (8/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.155423494 seconds)
    (9/341) benchmarking ("map", identity, Int8, true)...
    done (took 4.379545752 seconds)
    (10/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.694182349 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.029156877 seconds)
    (12/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.172897106 seconds)
    (13/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.413697006 seconds)
    (14/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.15402758 seconds)
    (15/341) benchmarking ("map", abs, BigInt, false)...
    done (took 8.686600115 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 4.169954307 seconds)
    (17/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.788983692 seconds)
    (18/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.939073454 seconds)
    (19/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.556957695 seconds)
    (20/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.165350786 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.166812629 seconds)
    (22/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.48018589 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.17697432 seconds)
    (24/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.04401848 seconds)
    (25/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.121153741 seconds)
    (26/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.311610384 seconds)
    (27/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.158686822 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.409799764 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.279563523 seconds)
    (30/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.747124881 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.175395859 seconds)
    (32/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.152608568 seconds)
    (33/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.156159171 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.251374551 seconds)
    (35/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.897117902 seconds)
    (36/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.242918796 seconds)
    (37/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.16655598 seconds)
    (38/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.751183487 seconds)
    (39/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.175383096 seconds)
    (40/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.287270467 seconds)
    (41/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.153141288 seconds)
    (42/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.073170566 seconds)
    (43/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.15556669 seconds)
    (44/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.320833367 seconds)
    (45/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.15354479 seconds)
    (46/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.652310079 seconds)
    (47/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.237255389 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.382794772 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.255789634 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.154325567 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.161941147 seconds)
    (52/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.259646081 seconds)
    (53/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.426094373 seconds)
    (54/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.453437977 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.572319312 seconds)
    (56/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.535494978 seconds)
    (57/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.37105693 seconds)
    (58/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.23448582 seconds)
    (59/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.428235255 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.393959454 seconds)
    (61/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.058170637 seconds)
    (62/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.462841671 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.231859266 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.919113516 seconds)
    (65/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.182630927 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.862757657 seconds)
    (67/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.263163457 seconds)
    (68/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.942545331 seconds)
    (69/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.375820053 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.866944312 seconds)
    (71/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.544602942 seconds)
    (72/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.326878704 seconds)
    (73/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.240346138 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.544406439 seconds)
    (75/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.16868443 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.380811578 seconds)
    (77/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.548146269 seconds)
    (78/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.108209584 seconds)
    (79/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.367933383 seconds)
    (80/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.3602969 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.963294541 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.36542789 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.165710379 seconds)
    (84/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.155603714 seconds)
    (85/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.287408259 seconds)
    (86/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.155087657 seconds)
    (87/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.977712585 seconds)
    (88/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.567451165 seconds)
    (89/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.24678912 seconds)
    (90/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.11714254 seconds)
    (91/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.174128956 seconds)
    (92/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.235354106 seconds)
    (93/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.352430813 seconds)
    (94/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.322770182 seconds)
    (95/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.293636919 seconds)
    (96/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.167344983 seconds)
    (97/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.215988194 seconds)
    (98/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.321117758 seconds)
    (99/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.488262861 seconds)
    (100/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.54107451 seconds)
    (101/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.048742138 seconds)
    (102/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.174614669 seconds)
    (103/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.167825829 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.16745379 seconds)
    (105/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.157148486 seconds)
    (106/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.427298983 seconds)
    (107/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.438291785 seconds)
    (108/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.848751315 seconds)
    (109/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.39690224 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.297942018 seconds)
    (111/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.309791308 seconds)
    (112/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.270769833 seconds)
    (113/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.403705818 seconds)
    (114/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.545943389 seconds)
    (115/341) benchmarking ("sort", BigInt, false)...
    done (took 7.159285887 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.233644841 seconds)
    (117/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.158499679 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.305001357 seconds)
    (119/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.457536098 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.44793747 seconds)
    (121/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.453868182 seconds)
    (122/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.429981157 seconds)
    (123/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.354439811 seconds)
    (124/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.278945452 seconds)
    (125/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.377515012 seconds)
    (126/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.464628926 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.028075927 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.167041597 seconds)
    (129/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.220530796 seconds)
    (130/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.158526056 seconds)
    (131/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.173146547 seconds)
    (132/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.292414784 seconds)
    (133/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.274374094 seconds)
    (134/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.453823897 seconds)
    (135/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.160925468 seconds)
    (136/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.543516022 seconds)
    (137/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.258399716 seconds)
    (138/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.394514387 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.149773485 seconds)
    (140/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.174798661 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.055492503 seconds)
    (142/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.410623625 seconds)
    (143/341) benchmarking ("sort", Bool, false)...
    done (took 2.375427807 seconds)
    (144/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.259870414 seconds)
    (145/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.238487552 seconds)
    (146/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.159835014 seconds)
    (147/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.260788804 seconds)
    (148/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.938223438 seconds)
    (149/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.417029517 seconds)
    (150/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.929813309 seconds)
    (151/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.446255747 seconds)
    (152/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.169958898 seconds)
    (153/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.174644122 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.283031696 seconds)
    (155/341) benchmarking ("sort", Int64, false)...
    done (took 5.789393546 seconds)
    (156/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.557953403 seconds)
    (157/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.87325863 seconds)
    (158/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.260209931 seconds)
    (159/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.26830739 seconds)
    (160/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.039363245 seconds)
    (161/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.252039969 seconds)
    (162/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.162193962 seconds)
    (163/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.393759022 seconds)
    (164/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.557556332 seconds)
    (165/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.921948661 seconds)
    (166/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.365680678 seconds)
    (167/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.311415608 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.299387857 seconds)
    (169/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.160370421 seconds)
    (170/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.177074105 seconds)
    (171/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.175901677 seconds)
    (172/341) benchmarking ("sort", Int8, false)...
    done (took 5.10074096 seconds)
    (173/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.163035641 seconds)
    (174/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.356946107 seconds)
    (175/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.309413437 seconds)
    (176/341) benchmarking ("sort", Float64, false)...
    done (took 5.87165511 seconds)
    (177/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.36475927 seconds)
    (178/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.302034186 seconds)
    (179/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.515089453 seconds)
    (180/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.246457136 seconds)
    (181/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.609064539 seconds)
    (182/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.172590545 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.002857666 seconds)
    (184/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.264279542 seconds)
    (185/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.222717849 seconds)
    (186/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.16304382 seconds)
    (187/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.618271509 seconds)
    (188/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.376553751 seconds)
    (189/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.162029078 seconds)
    (190/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.38663758 seconds)
    (191/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.346911937 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.252507165 seconds)
    (193/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.202742553 seconds)
    (194/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.354502648 seconds)
    (195/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.438813744 seconds)
    (196/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.573164358 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.045137039 seconds)
    (198/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.013076369 seconds)
    (199/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.271933003 seconds)
    (200/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.607341509 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.288400802 seconds)
    (202/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.455967943 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.870823183 seconds)
    (204/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.375167552 seconds)
    (205/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.284147076 seconds)
    (206/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.181232655 seconds)
    (207/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.216364497 seconds)
    (208/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.37959525 seconds)
    (209/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.162612796 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.165705313 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.188576504 seconds)
    (212/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.454730855 seconds)
    (213/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.304798172 seconds)
    (214/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.377199314 seconds)
    (215/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.310274566 seconds)
    (216/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.566596923 seconds)
    (217/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.556413788 seconds)
    (218/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.419776782 seconds)
    (219/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.17878774 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.35192247 seconds)
    (221/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.183023543 seconds)
    (222/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.436241155 seconds)
    (223/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.438851778 seconds)
    (224/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.491507909 seconds)
    (225/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.483655332 seconds)
    (226/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.564514981 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.16486265 seconds)
    (228/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.263992375 seconds)
    (229/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.105928257 seconds)
    (230/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.852764105 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.484795909 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.803346147 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.464991155 seconds)
    (234/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.292526452 seconds)
    (235/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.499953723 seconds)
    (236/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.252461187 seconds)
    (237/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.632179843 seconds)
    (238/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.267915411 seconds)
    (239/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.1849045 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.421820045 seconds)
    (241/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.169686878 seconds)
    (242/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.915581693 seconds)
    (243/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.244448628 seconds)
    (244/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.180241235 seconds)
    (245/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.243395395 seconds)
    (246/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.367144141 seconds)
    (247/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.511659841 seconds)
    (248/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.254574165 seconds)
    (249/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.660238821 seconds)
    (250/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.163917411 seconds)
    (251/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.535251493 seconds)
    (252/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.294265952 seconds)
    (253/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.247381831 seconds)
    (254/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.178284998 seconds)
    (255/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.164083807 seconds)
    (256/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.360778772 seconds)
    (257/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.243092342 seconds)
    (258/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.661475464 seconds)
    (259/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.41952132 seconds)
    (260/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.275809092 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.192570977 seconds)
    (262/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.166727649 seconds)
    (263/341) benchmarking ("sort", Float32, false)...
    done (took 5.875883999 seconds)
    (264/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.309909161 seconds)
    (265/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.163842258 seconds)
    (266/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.291304912 seconds)
    (267/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.353256842 seconds)
    (268/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.412762138 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.194018659 seconds)
    (270/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.243355963 seconds)
    (271/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.166365029 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 3.974484136 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.185024348 seconds)
    (274/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.576587834 seconds)
    (275/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.297077888 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.164931318 seconds)
    (277/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 3.683605656 seconds)
    (278/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.16701834 seconds)
    (279/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.552535248 seconds)
    (280/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.256936292 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.195559509 seconds)
    (282/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.368589909 seconds)
    (283/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.286901862 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.256418314 seconds)
    (285/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.507219316 seconds)
    (286/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.172592623 seconds)
    (287/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.300103228 seconds)
    (288/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.188061444 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.16920754 seconds)
    (290/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.633118965 seconds)
    (291/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.431913784 seconds)
    (292/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.373833455 seconds)
    (293/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.481373209 seconds)
    (294/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.266248336 seconds)
    (295/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.473698286 seconds)
    (296/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.671738894 seconds)
    (297/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.178530034 seconds)
    (298/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 4.069925033 seconds)
    (299/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.52170927 seconds)
    (300/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.20188926 seconds)
    (301/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.624482282 seconds)
    (302/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.09506072 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.414043232 seconds)
    (304/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.620319539 seconds)
    (305/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.075416763 seconds)
    (306/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.620492599 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.522865615 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.589505844 seconds)
    (309/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.044774154 seconds)
    (310/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.37009766 seconds)
    (311/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.284831026 seconds)
    (312/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.310807468 seconds)
    (313/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.478531211 seconds)
    (314/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.5607517 seconds)
    (315/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.181873301 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.104555848 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.516366091 seconds)
    (318/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.299744147 seconds)
    (319/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.449391671 seconds)
    (320/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.183791186 seconds)
    (321/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 8.679213103 seconds)
    (322/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.659340791 seconds)
    (323/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.444582363 seconds)
    (324/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.261714451 seconds)
    (325/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.581294014 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.010237053 seconds)
    (327/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.001617184 seconds)
    (328/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.195068869 seconds)
    (329/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.330798821 seconds)
    (330/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.317984226 seconds)
    (331/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.935633611 seconds)
    (332/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.341177113 seconds)
    (333/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.593031958 seconds)
    (334/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.183796706 seconds)
    (335/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.322588244 seconds)
    (336/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.618308875 seconds)
    (337/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.191487695 seconds)
    (338/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.204876517 seconds)
    (339/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.496098646 seconds)
    (340/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.514367765 seconds)
    (341/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.204058864 seconds)
  done (took 1196.145266835 seconds)
done (took 1198.319343541 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.206872135 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.184293184 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.71359508 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.196555093 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.184665866 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.188263865 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.711159768 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.215422886 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.200386121 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.704883508 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.196424439 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.18310771 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.198984521 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.219571599 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.195087581 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.197264651 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.189136862 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.208252525 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.218538235 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.1824794 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.224709577 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.187134148 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.181074025 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.233798263 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.170120114 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.196191384 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.204978316 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.235377433 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.231817584 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.183566118 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.187118711 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.540810713 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.242882162 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.18625427 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.190980847 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.195589038 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.187103068 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.196408733 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.203793956 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.195729052 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.182461055 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.192928617 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.185469079 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.183952448 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.181695856 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.180209634 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.182298545 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.306624359 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.195668836 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.520935354 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.252402934 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.202986268 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.232397208 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.184606463 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.182998485 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.182418259 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.231367075 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.186782378 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.186389441 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.521970106 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.283259582 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.194544183 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.522872909 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.249462257 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.191621984 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.190486985 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.180659082 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.202558663 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.539559081 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.754110736 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.213792868 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.200986303 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.181876916 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.181536141 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.192503709 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.701352736 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.196475736 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.770644367 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.208923439 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.194811161 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.186805489 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.181779873 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.180074079 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.194075748 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.200499825 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.178360019 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.185847313 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.185285315 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.19385769 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.538853398 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.229735828 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.685647289 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.188202574 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.201772877 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.199812878 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.768899253 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.207867351 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.197742746 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.183009556 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.537603329 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.229567939 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.201788817 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.181069099 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.189163426 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.292506928 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.201484826 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.200870926 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.177958201 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.198060339 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.18493832 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.176215059 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.189686854 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.196626589 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.210298784 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.193265628 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.177734625 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.183543917 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.182345827 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.19751359 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.184875149 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.182861615 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.186922699 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.176173454 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.226538054 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.196332761 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.192355757 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.288949832 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.181221145 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.300121343 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.18996978 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.181803144 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.173508944 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.514291371 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.225317395 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.197633714 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.180653731 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.195317965 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.19580506 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.191607063 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.177495127 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.18985639 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.176463499 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.22431351 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.174749828 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.198290332 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.22523814 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.187917047 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.179677577 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.195432784 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.208311529 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.193569856 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.180288073 seconds)
done (took 343.280542868 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.219258225 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.170761802 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.246865558 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.172338889 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.239838621 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.224301239 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.170504651 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.173083092 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.171260458 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.552302791 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.169976445 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.176790954 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.169028233 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.171263987 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.221189498 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.170988313 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.170585712 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.402198925 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.174990539 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.22913239 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.171722944 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.17143171 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.171563161 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.561201743 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.173133685 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.169357809 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.22936981 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.169717015 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.411747488 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.170964293 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.166877009 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.406345967 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.223772316 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.175185338 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.169738278 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.170493442 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.229311835 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.173969961 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.210378029 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.20948021 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.238437209 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.200387518 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.150345501 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.160762065 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.162528509 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.163505578 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.158931815 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.190985523 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.156794939 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.164950845 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.39081465 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.163688475 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.165897099 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.157631812 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.157875307 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.176562661 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.154138118 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.141881161 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.218782336 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.163156026 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.203621856 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.548703483 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.539123506 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.159160132 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.158549464 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.158638131 seconds)
  done (took 203.441471425 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.227520914 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.244079743 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.225848638 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.165544802 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.210863414 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.226909696 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.164488595 seconds)
  done (took 17.551370678 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.166775803 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.159741888 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.182183106 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.181963286 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.163544933 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.299176255 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.170827266 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.164679222 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.185617911 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.158885344 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.49755088 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.183380036 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.165832057 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.157222066 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.171033494 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.189313861 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.161719411 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.163854867 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.257196232 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.237124736 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.16532504 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.166636128 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.188761795 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.171929742 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.161817108 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.160586559 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.163600666 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.167434168 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.160134695 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.16057559 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.15873242 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.173564782 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.160721895 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.159500995 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.160533236 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.166319942 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.167232179 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.163012959 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.163629265 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.162408674 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.162281414 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.163361924 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.16352581 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.162794662 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.163017641 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.184576014 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.163169994 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.163547536 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.163025671 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.1632762 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.193046882 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.163582594 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.163877402 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.16857839 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.205010345 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.167562682 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.168211855 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.163872514 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.16464365 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.163905268 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.163671128 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.244767073 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.186410272 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.16344883 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.187843056 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.201567441 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.164770214 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.164713492 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.163275073 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.188765223 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.165812641 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.187331926 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.163920145 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.263121697 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.165412303 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.305971357 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.187387519 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.168482259 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.168674703 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.16419383 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.17318956 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.166179154 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.166968786 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.17220367 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.169990946 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.164349716 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.16530225 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.167840474 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.172517845 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.165136967 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.211231863 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.164499588 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.169750522 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.263764374 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.165289278 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.263764906 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.191599359 seconds)
  done (took 233.668770718 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.170851265 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.167922898 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.179936957 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.166348633 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.166668381 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.170876641 seconds)
  done (took 15.115142695 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.16830178 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.169575792 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.165376284 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.165221715 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.170048233 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.170715677 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.16557428 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.167607489 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.173592391 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.166349781 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.169898142 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.165259074 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.170095135 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.170487565 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.166596981 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.16526362 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.166573799 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.166458947 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.166472604 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.171467449 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.41287454 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.170900908 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.170077195 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.170044421 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.174275223 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.167578271 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.176724111 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.167083448 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.166742722 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.17381025 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.177162194 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.172827491 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.170091113 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.174181553 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.170670818 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.169770806 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.172527541 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.166807696 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.168589422 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.150904833 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.167273238 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.171945634 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.168990531 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.167575183 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.169892397 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.174255431 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.171168041 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.175715068 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.168577061 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.166957767 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.166896675 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.168887178 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.172216192 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.167129954 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.171224742 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.163180127 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.170604892 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.168247116 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.172670472 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.171664141 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.171780603 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.174153266 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.170350218 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.173165559 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.176712052 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.167894717 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.170618451 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.178986934 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.172976331 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.169084213 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.166858162 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.168698214 seconds)
  done (took 159.554729801 seconds)
done (took 631.432214164 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.604241813 seconds)
  done (took 9.700770259 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.311346199 seconds)
  done (took 9.448156312 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.694468252 seconds)
  done (took 12.826294204 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.22791511 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.21542834 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.224470856 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.219492972 seconds)
  done (took 31.033291267 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.442502005 seconds)
  done (took 9.573984367 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.218381099 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.204321146 seconds)
  done (took 16.618055823 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.222944243 seconds)
  done (took 9.356941814 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.339387761 seconds)
  done (took 9.485169952 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.228694809 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.23007586 seconds)
  done (took 16.608873936 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.204755611 seconds)
  done (took 9.336403091 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.021919651 seconds)
  done (took 10.234030734 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.216356769 seconds)
  done (took 9.365047867 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.26369583 seconds)
  done (took 9.396723857 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.249873585 seconds)
  done (took 10.381567263 seconds)
done (took 175.460456566 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.21468069 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.204587047 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.203368014 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.201325906 seconds)
  done (took 30.953950966 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.231924567 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.23264012 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.242573473 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.230999477 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.221910944 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.219180303 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.229351931 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.229101836 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.219385133 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.227900734 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.229884869 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.228759586 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.228880634 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.210552595 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.237591642 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.227171422 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.230214812 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.228660587 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.22093583 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.236917214 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.223472137 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.229245818 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.195569092 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.194364899 seconds)
  done (took 55.531863017 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.384024439 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.258811597 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.344373609 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.234789215 seconds)
  done (took 11.340466265 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.189416758 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.250828299 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.239769546 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.233923254 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.236259018 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.291786055 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.235481693 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.319214961 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.311728613 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.310255034 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.192346068 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.201077492 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.204980582 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.22785358 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.288694207 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.179500657 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.177795855 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.293892822 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.240489644 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.350853458 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.175249627 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.228509663 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.226226765 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.231714254 seconds)
  done (took 55.952571824 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.172711543 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.181396651 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.179247618 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.177164136 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.172507108 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.172160952 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.174915151 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.172510592 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.193089252 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.172662585 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.168942383 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.171058565 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.179999439 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.168494634 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.167262467 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.181317454 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.189160968 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.16503354 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.168493997 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.171347674 seconds)
  done (took 45.598850179 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.168034761 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.007836215 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.506249169 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.410581672 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.154225066 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.156638565 seconds)
  done (took 33.494675041 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.170663002 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.174035607 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.162200986 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.187633387 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.201414881 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.163016301 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.216473979 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.321464912 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.167827211 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.208287013 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.168396968 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.157350657 seconds)
  done (took 28.380078111 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.147090837 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.151422492 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.149293732 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.16100694 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.158548252 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.158680045 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.157645725 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.145390209 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.160099069 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.165481425 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.153131681 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.153645358 seconds)
  done (took 47.939447701 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.362253468 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.364742037 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.35874671 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.833194577 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.464290171 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.127540371 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.425954258 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.352043026 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.820758125 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.95617362 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.512307795 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.195951724 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.158735979 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.133932501 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.108599966 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.448104109 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.208408949 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.065913531 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.466656386 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.257988017 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213673021 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.208961411 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.212087971 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.498634541 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.540288615 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.210967773 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.420376747 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226051455 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.206807457 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.472194885 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.871263893 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.268219198 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.414315243 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.471240697 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.551877299 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.268551052 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.319753471 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.470318346 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.258808095 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.243235952 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.218335755 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.219193894 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.75093008 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.223521325 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.480443172 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.211364807 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.213566715 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.311141098 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.133598131 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.553231312 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331108708 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.211861409 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.247098919 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.642382993 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.332181443 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.450711087 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.213164905 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.47488226 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272366389 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.487486353 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.324168467 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.317975366 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.424754562 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.136939611 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.634972884 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.339751197 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.215132554 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.215910804 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.911741476 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.455508077 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.293962538 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.557721002 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.9745328 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.216984686 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.215523226 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.252909642 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.301898482 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.211780821 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.504203467 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.21375485 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.137138534 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.308146007 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.6084088 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219857391 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.213086705 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.218445467 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.059680262 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.133428613 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.30702019 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.486904704 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.539203796 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.212743289 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.209880963 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.235568809 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.211641423 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154872759 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.85843231 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.282616653 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.13899231 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.772629944 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.872840016 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.185249045 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.759306426 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.259758628 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.490357931 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.371750224 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.616680526 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.420989936 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.456391205 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.745416673 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.219159415 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.776947614 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.296013754 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.290912816 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.217811638 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.773450649 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.481947346 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.547909804 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.33781623 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.211176618 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.137985878 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.220967862 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.413068203 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.881140327 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.268652191 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.220264956 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.216224053 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.211085594 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214225887 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.321431631 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.225956756 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.516826348 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.286219159 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.209327515 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.149661692 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.214984751 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.498716522 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.015134476 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.271802361 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.475633586 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.48047942 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.911844582 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.808661372 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.256856011 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.484916124 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.285710114 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284367648 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.793589042 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.345201113 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.308727991 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.212529844 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.332400075 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.220811736 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.214364962 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.734645029 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.625916185 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.642848034 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.257774363 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.209645444 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.210612909 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.479237054 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.456435515 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.31799424 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.244435417 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.216490235 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.299008529 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.438582105 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.216181804 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.138303776 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.462071632 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.457565446 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.508441828 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.626654119 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.335408714 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.28852297 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.221351768 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.426130588 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.293034859 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.873491428 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.762973084 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.434164981 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.861612235 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.182925863 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.853167175 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.498504598 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.601117729 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.230275039 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.66420888 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.480546281 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.97501723 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.246450281 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.742389752 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.140415975 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218307034 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.55421882 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.173119433 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.540734331 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.277010955 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.311312671 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.213761571 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.213137994 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.22215072 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.158569562 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.325141282 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.282665543 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.285874836 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.141892834 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.988133167 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.256985964 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.217609056 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.213933314 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.627399315 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.119066149 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.169281725 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.214911954 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.290302163 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.963611566 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.766551501 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.222192401 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.217356645 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.82283779 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.219865933 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.12899677 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.224501499 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.143778004 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246259653 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.504291303 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.921539311 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.507028769 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.297502484 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292724159 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.216021062 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219222994 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.917890003 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.224447965 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.918482932 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.508604361 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.493444406 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.672826269 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.28388249 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.42578295 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.230184764 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.213135166 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.745533156 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.244897947 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205273748 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.41914186 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.736038537 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.577409057 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.864185426 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.301719749 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.219360979 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.489076996 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.228676913 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.877337639 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.921339813 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.225568214 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.21679639 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.465535873 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.90352033 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.218982844 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.127515207 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226779746 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.427804977 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.421143739 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.491292931 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.526098747 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.670864592 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.145553554 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.221742564 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.254949063 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.462910445 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.220798548 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.253791406 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.665998673 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.323040106 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.650330494 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.499712696 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.643535608 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.863847849 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.491602492 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.286665644 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.228318476 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.881932072 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.352533706 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.142712525 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.338387444 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.14452303 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.005661937 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.520355495 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.236276917 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.492624524 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.204478095 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.570819183 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.520891822 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.512204084 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.273288801 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.251442079 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.220087316 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.24903159 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.220816555 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.502231338 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.340334798 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.223158189 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.840695442 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.263101835 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.267966322 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.22581138 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.781181143 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.242478715 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22225421 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.906768513 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.246316842 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.337304152 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292930115 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.007926281 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.915122179 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.252517166 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.177710129 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.868134127 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.494831113 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.280492604 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.679389767 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.264091041 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.626414402 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.220579451 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.434626199 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.226590324 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.883083594 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269971845 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.499097904 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.182564549 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.433889104 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.427084719 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.250527878 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.228060198 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.147340452 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.328276401 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.081578225 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.201171699 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.192918065 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.903167537 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.659571343 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.526086295 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.700351792 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.042199393 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.22637362 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.6095968 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.638283935 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.939851369 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.260467625 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.224887515 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.587244952 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.365114242 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.565032365 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.523179884 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.232666178 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.247516615 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.439275869 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.350078128 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.142860692 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.704855096 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.811765692 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.92594362 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.236301706 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.429540549 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.58684052 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.605290348 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.262264826 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.300446278 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.629258089 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.500620639 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.29599139 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.150042763 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.224394034 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.623412617 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.734035031 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.324246171 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.469387892 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.549986033 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.985480333 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.898666687 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.735437352 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.705228532 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.645819363 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.63818207 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.44030707 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.60130105 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.555629957 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.819150375 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.637363259 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.440279382 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.314694241 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.505256136 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.1033877 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.937979514 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.471929485 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.231067141 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.15642754 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.432604584 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.237136355 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.855715322 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.752964452 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.475095503 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.514006976 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.70258092 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.765491253 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.501232322 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.254953733 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.195674924 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.253768125 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.246788452 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.229681111 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.706845893 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.516149101 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.241294511 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.170510479 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.900876819 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.154412232 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.44179179 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.502038038 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.266373519 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.782736871 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.525472162 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.340333752 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.525453679 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.56726014 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.266779587 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155588993 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.006591531 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.179944084 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.331150519 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.658375083 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.245121256 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.23279171 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.4303795 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.158898057 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275226735 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.23370926 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.42969043 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.809700123 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.505121999 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.356584145 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.474914452 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.536236866 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.141705959 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.260333228 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.500924066 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.157121325 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.916931099 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.911340573 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.267745048 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.301123003 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.226692656 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.232362981 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.499213363 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.584554527 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.328898784 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.005247433 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.268090868 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.253243735 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.590111793 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.326936564 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.23286796 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.234234944 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.780807927 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.466076928 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.232253087 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.193453095 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.444022908 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303516817 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.428817915 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.307070426 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.742108199 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.233171732 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.156236113 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.334533147 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.185331601 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.251947118 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.956026822 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.290830481 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.228231692 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.515423411 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.877723281 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.435800349 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.625714683 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.098629702 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.510806356 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275370284 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.235039942 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.239975019 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.625500457 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.528767714 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.21832511 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.506890629 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.285091564 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.23730578 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.894722024 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.200429588 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.232835599 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.015229765 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.124132683 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.964012655 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.630001835 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.232031511 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.307690068 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.235632849 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.158892376 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.231580815 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.392701419 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.230424624 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.234660468 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.612783652 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.549626554 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.329883422 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233556809 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.232035198 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.233171287 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.44531371 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.74663706 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249073819 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.930601673 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437060648 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.233562859 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.712522248 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.688008193 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.582333252 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.275028024 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.513945392 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.487243851 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.808225995 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.514518713 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.212809031 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.461772566 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.233690924 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.505992375 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.506326311 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.234106174 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.446911866 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.904555507 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.521538384 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.588378851 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.559149984 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.306467468 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.525821711 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.21952142 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.242208452 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.23833472 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.506240431 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.291604806 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.23347726 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.242000502 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.792887582 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.968452828 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.711534496 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.388600161 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.590590797 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.128598493 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.99287513 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.238448788 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.162352768 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.232681374 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.259317855 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.236844032 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.160565334 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.020076333 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.958133619 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.448167969 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.542604433 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.162177414 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.438930657 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.839919415 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.159275013 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.204468849 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.28594559 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.479622033 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.163847872 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.236765789 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.190786879 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.546673748 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.022549086 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.509394269 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.234406386 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.181359835 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.242339125 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.237256183 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.234657034 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.32255805 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.237049493 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.353544694 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.506329736 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.647446073 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.350784396 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.876095484 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.03096331 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.177634029 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.281101407 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.795176589 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.806708143 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.54709177 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.373520954 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.021611695 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.18557254 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.241338855 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254958563 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.479035751 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.242153782 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.237628684 seconds)
  done (took 2299.913442951 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.282944479 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.323233455 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.298822004 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.275380474 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.40828044 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.379436423 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.324331215 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.326146643 seconds)
  done (took 60.780283499 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.23603886 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.222267717 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.247343286 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.238510431 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.238976168 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.242934892 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.429535895 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.272855391 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.240683531 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.241458677 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.239350333 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.238277185 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.237962911 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.236175918 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.252326079 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.503009411 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.269860075 seconds)
  done (took 82.822992122 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.288967263 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.118280972 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.24395892 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.030599956 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.299131057 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.542448997 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.241836619 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.245588735 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.586124725 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.533493714 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.262034746 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.252551714 seconds)
  done (took 96.834259207 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.238058821 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.238814721 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.238725799 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.23755036 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.240054648 seconds)
  done (took 13.353759018 seconds)
done (took 2865.087298575 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.481306497 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.339819759 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.319504112 seconds)
  done (took 6.818180365 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.380903659 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.431649486 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.547569912 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.527727595 seconds)
  done (took 12.056062964 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.527096606 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.602226295 seconds)
  done (took 7.289627886 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.61494159 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.246123823 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.629846566 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.238893566 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.245428465 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.244819478 seconds)
  done (took 23.894420619 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.225852142 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.239744869 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.238884472 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.237875322 seconds)
  done (took 11.10253128 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.234528215 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.027597708 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.237639543 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.25611825 seconds)
  done (took 22.916329633 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.43765719 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.293075183 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.006329332 seconds)
  done (took 9.900569049 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.86877284 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.680967602 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.857536689 seconds)
  done (took 10.54426417 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.467927065 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.057637811 seconds)
  done (took 8.686580755 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.384332864 seconds)
  done (took 4.546573462 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.074666217 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.558749322 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.717425522 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.759316485 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.835300165 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.462213852 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.582352019 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.523632462 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.634777805 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.688485643 seconds)
  done (took 28.996139755 seconds)
done (took 163.883627928 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.67198432 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.264124847 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.449142792 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.614474297 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.478927103 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.448739888 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.538317016 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.60124212 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.284232116 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.272451968 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.613688743 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.484218187 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.484127406 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.26114736 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.492457755 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.265465622 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.478874395 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.687810656 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.295694067 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.507233594 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.543213562 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.256467272 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.457032428 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.270750399 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.48030229 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.399518252 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.864193592 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.265747522 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.44616479 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.875499758 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.401024859 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.657751193 seconds)
  done (took 181.272424367 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.116249499 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.240897567 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.24560333 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.240335815 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.560461872 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.243583951 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.244928622 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.240953359 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.486865266 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.473161339 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.243792838 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.546094056 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.243145474 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.240827294 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.242432983 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.241901505 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.605788478 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.151497758 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.242559008 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.24205214 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.244288211 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.407734584 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.252654952 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.434285268 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.598625685 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.243644404 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.24215777 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.243381465 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.2453418 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.247420866 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.246091419 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.244537877 seconds)
  done (took 219.909948942 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.248603668 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.245829117 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.242591826 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.246348591 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.247202193 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.250087834 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.245491253 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.2432905 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.909683389 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.903635821 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.243427251 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.247541351 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.246271791 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.241669024 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.245821455 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.245162925 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.242564088 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.246084125 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.244229637 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.24791623 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.248731025 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.102566455 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.244480726 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.121525937 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.248586583 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.247924521 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.24325023 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.248143686 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.250396882 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.248048296 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.24809138 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.243683141 seconds)
  done (took 233.099003994 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.488205443 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.248010394 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.248174664 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.260379898 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.248273628 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.244631833 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.255003104 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.490509275 seconds)
  done (took 22.655692855 seconds)
done (took 659.116677999 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.635831112 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.001378595 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.378017875 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.271125445 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.515602266 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.30576409 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.262157201 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.321431276 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.923660595 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.343498878 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.65707961 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.272775401 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.958285283 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.296372683 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.382589076 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.325404076 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.6184545 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.875821221 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.400261106 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.925647057 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.474585839 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.183425015 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.347322041 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.957315526 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.668364207 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.206191899 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.276351526 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.616875042 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.270984475 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.502643867 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.946369525 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.52198006 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.278367284 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.264993643 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.319335377 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.308747595 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.44295568 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.272068518 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.378930204 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.978089969 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.922522402 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.792286417 seconds)
  done (took 115.770740295 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.251445914 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.251457616 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.253925224 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.250441263 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.248771167 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.252284776 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.249381063 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.253073252 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.247363808 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.251214149 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.254137875 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.250753325 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.252732085 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.250338189 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.251344158 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.248219403 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.25101677 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.252295461 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.251941533 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.252916131 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.250555764 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.249616611 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.254309295 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.251241581 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.251663472 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.248915372 seconds)
  done (took 60.706370027 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.248520835 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.395976876 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.540247877 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.283993259 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.247476421 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.253373671 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.277005195 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.255095997 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.254902349 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.253216788 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.341785438 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.254097055 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.264177835 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.538033283 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.280423104 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.250342845 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.250098685 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.251186903 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.407156782 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.26501417 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.279034571 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.258141693 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.282609362 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.264810794 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.250325935 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.238139405 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.252843098 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.670964871 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.26655348 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.340528673 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.294092542 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.290815689 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.586049963 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.55331088 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.320681677 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.258582979 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.250000313 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.389684727 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.261404225 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.251476887 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.277660907 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.256992946 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.540720077 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.756330473 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.263932762 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.247462303 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.671967647 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.399693439 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.299224382 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.263263939 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.544059831 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.282272231 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.249885756 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.251577813 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.285264468 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.257577261 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.251605532 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.493220764 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.271034442 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.27091436 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.256828455 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.256749384 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.425622728 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.245610484 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.403805161 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.26118225 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.256314094 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.250556206 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.542430854 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.284707906 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.750568441 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.267586079 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.251415651 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.344013392 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.40777297 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.694552554 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.26661758 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.421841501 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.603967814 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.293213109 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.266030238 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.659525631 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.293763206 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.263872258 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.252465549 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.252545898 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.248370023 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.296635683 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.278943206 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.673160607 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.755442763 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.514532635 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.296242061 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.263621636 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.253102489 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.495956157 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.266020567 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.25672246 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.535439287 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.774151554 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.269233925 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.261817786 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.731548064 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.267836822 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.28262606 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.263043193 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.550233913 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.283647528 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.295105765 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.253719979 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.259861184 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.254764084 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.284146085 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.261808887 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.254111486 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.72619686 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.408630154 seconds)
  done (took 277.270794567 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.261893285 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.251091849 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.255365514 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.255698769 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.248829705 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.252333623 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.251096269 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.252296605 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.254521842 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.252637864 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.254634839 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.254579805 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.25281058 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.251381205 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.298112788 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.256758996 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.74132857 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.255945528 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.253172446 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.254744438 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.817461631 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.258985025 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.255741743 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.254562298 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.25754627 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.250579209 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.261939639 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.28960263 seconds)
  done (took 178.438177137 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.255146433 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.305735012 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.270648635 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.30335584 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.262789832 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.254726068 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.277308854 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.270741655 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.263842612 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.254867539 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.256149246 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.283461157 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.262596684 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.327821644 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.284609899 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.287829663 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.331505106 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.262571659 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.25462058 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.254281945 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.304035255 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.271804867 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.28422565 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.306125976 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.268736785 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.3038603 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.270845177 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.25590221 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.255520067 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.347669527 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.277865195 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.286697858 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.292023075 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.276966603 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.351276865 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.348504142 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.334831565 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.283974094 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.257776956 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.255536586 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.257129511 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.261429465 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.305778251 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.270683454 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.258944215 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.356290498 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.278444464 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.257140919 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.27566062 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.261589536 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.269839975 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.27350131 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.290606598 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.359651789 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.301444122 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.283715124 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.275449312 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.273542767 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.262743224 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.333341573 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.263331374 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.34432404 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.280888058 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.263278279 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.255447929 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.264017073 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.305823949 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.29023303 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.336207198 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.265386979 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.330033566 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.310526243 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.272066136 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.256696978 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.256592437 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.309015849 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.346134633 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.309855079 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.321902969 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.294022675 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.267424701 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.25958986 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.261637357 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.282947449 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.264217524 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.348287884 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.350179479 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.263136873 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.256640446 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.257614939 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.257966821 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.283129532 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.31334599 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.29984073 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.345512347 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.292744451 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.293625921 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.263174315 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.270282332 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.261597878 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.28874546 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.265219388 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.272527858 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.611054341 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.2988797 seconds)
  done (took 242.552362781 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.625850503 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.303979979 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.328907134 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.536863579 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.65284465 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.373944105 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.298353319 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.315439197 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.316617257 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.421580218 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.367276325 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.358061724 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.295060161 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.279942991 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.304890512 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.317428001 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.336976447 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.597890357 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.404211876 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.041946888 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.298849276 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.560966239 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.594067668 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.64369494 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.348642863 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.683655817 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.928369054 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.397579083 seconds)
  done (took 73.114059642 seconds)
done (took 950.023101732 seconds)
SAVING RESULT...
DONE!
