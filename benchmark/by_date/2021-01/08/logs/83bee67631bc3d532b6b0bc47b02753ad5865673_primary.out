cset: moving following pidspec: 31652
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.806782414 seconds)
loading group "shootout"... done (took 1.135357497 seconds)
loading group "string"... done (took 0.668462221 seconds)
loading group "linalg"... done (took 8.598897898 seconds)
loading group "parallel"... done (took 0.167259056 seconds)
loading group "find"... done (took 2.912145551 seconds)
loading group "tuple"... done (took 2.095057091 seconds)
loading group "union"... done (took 14.784830773 seconds)
loading group "dates"... done (took 1.47010846 seconds)
loading group "micro"... done (took 0.218729457 seconds)
loading group "simd"... done (took 4.763659628 seconds)
loading group "io"... done (took 1.074559222 seconds)
loading group "random"... done (took 9.529743915 seconds)
loading group "problem"... done (took 1.521382991 seconds)
loading group "array"... done (took 25.229227058 seconds)
loading group "misc"... done (took 1.889252441 seconds)
loading group "scalar"... done (took 43.439398623 seconds)
loading group "sort"... done (took 3.324936508 seconds)
loading group "sparse"... done (took 12.690843588 seconds)
loading group "collection"... done (took 18.36253751 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.421500995 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113219178 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.125712969 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.111704568 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.181935671 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118295578 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127345854 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082329811 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.917750936 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134899754 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.112970008 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.424180906 seconds)
done (took 5.304586393 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.164037112 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.088968537 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081890734 seconds)
  done (took 1.378907379 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069583698 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061436791 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065763716 seconds)
  done (took 1.403879687 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063512502 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.132970498 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064827734 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065085829 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.06571349 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064496979 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064628872 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064617745 seconds)
  done (took 1.734402451 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070399732 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066259152 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064243611 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065807842 seconds)
  done (took 1.477971071 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063513756 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119617735 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063091694 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063537729 seconds)
  done (took 1.517298611 seconds)
done (took 8.968433247 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.137057453 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.82204721 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.766589237 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.120322822 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.244947898 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.366378462 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.121636853 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.180709986 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.086960688 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073378687 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119505918 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.075794039 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.381428713 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.494645593 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069346183 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173862239 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.640518081 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085052353 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133765869 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.460936986 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071990347 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086057676 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.083110752 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069482358 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.330253382 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151191361 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.669515365 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091297493 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066580282 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.0924746 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068857297 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076374714 seconds)
  done (took 10.654808598 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09138701 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088621951 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067530903 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122369956 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092377337 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068219909 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073825425 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066196233 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087621308 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122889806 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088456596 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097272466 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064627178 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067808261 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.071976467 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195461881 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078849111 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079982053 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066003751 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079622871 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104169605 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076912424 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07691586 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076724803 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130840727 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167644447 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.0953909 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096914377 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064334999 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077577509 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114002752 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123982908 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065189593 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063663297 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118590359 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093837646 seconds)
  done (took 4.581174696 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.884386059 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094376664 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081363424 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072951104 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104523374 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.111698582 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.118970822 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12092371 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097572816 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067477791 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153265417 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.674266731 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.160717573 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070414799 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119260427 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.355052827 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.067019796 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068610659 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06644085 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069463865 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068170868 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.110550937 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064584053 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173497338 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.581141165 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068977276 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067851965 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094238826 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06318074 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.137303512 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090745181 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068204582 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.536504737 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063808709 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062320987 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.091163538 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.19668573 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093518334 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065870378 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067146956 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077587437 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065054479 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107059093 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07791378 seconds)
    (44/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.082474243 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.509936045 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067950592 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.578047951 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.223653296 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07106523 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.069946825 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100266054 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063015301 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06580938 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.938722771 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.142910659 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065240921 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.271091472 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06615113 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066437434 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067216083 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.097025806 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068659421 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066991299 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071392443 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094631881 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.788594923 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.087900256 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094879514 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066387657 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.403779543 seconds)
    (71/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063102362 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071430964 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067214781 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067698328 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067058888 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.10479142 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064969086 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064561079 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108953033 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093169028 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087162382 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068471964 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065800258 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064303097 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.324903047 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.143809994 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06426622 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065228385 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.469986663 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.061961949 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064020758 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065971357 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.204637629 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067993478 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063334209 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063688756 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097812879 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066880352 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.338057664 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065496373 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.474988413 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067328042 seconds)
    (103/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.064882356 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118139168 seconds)
    (105/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100372691 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066789003 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099055775 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066577821 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063779629 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071804864 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064521924 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063434998 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067948358 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064165292 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065140945 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067700972 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067059044 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06584622 seconds)
  done (took 22.52463559 seconds)
done (took 39.858238322 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.311021195 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077203286 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077473291 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077484951 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077644236 seconds)
  done (took 1.880591179 seconds)
done (took 3.234757651 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.250593171 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.074028654 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062779909 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.200877863 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.086532343 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173669822 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.212451067 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.157903693 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.087128373 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086400963 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086623009 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.218450394 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.223996755 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086489361 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.157130422 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.224796889 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086412232 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06269051 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086736139 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086289066 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086218432 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062626309 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086611233 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086470112 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.156111254 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086029026 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062096602 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.155474325 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.085022322 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.15583017 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.085458041 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.084790175 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.084981952 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.15499086 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.084910275 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.154632667 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.179944536 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.085174189 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.084752378 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.08440459 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084119506 seconds)
  done (took 6.207629959 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07294942 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081140724 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082729974 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060729239 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070399649 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080667082 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060455635 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080398517 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090168568 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081094024 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080833906 seconds)
  done (took 2.185604883 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068692549 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08138871 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082687984 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060202274 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071686891 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081866471 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060583854 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081226541 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084065979 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082030082 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081865471 seconds)
  done (took 2.132989985 seconds)
done (took 11.806673852 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.09545268 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.064028319 seconds)
  done (took 1.438418066 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.2206249 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.493644551 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.922944396 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090531688 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07019952 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083402076 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.19396856 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065105322 seconds)
  done (took 7.608276716 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.101458233 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067138895 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066090852 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066379637 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065466262 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067929248 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067598633 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06641608 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066616158 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065753651 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067126578 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066798596 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066541045 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.06655391 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065925523 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067767173 seconds)
  done (took 2.496436623 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.102297838 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067762504 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.09802273 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060605559 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070370199 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06060272 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069188195 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071021472 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068322706 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069554219 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.071144318 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069348744 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.07000766 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069929114 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071362375 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071411966 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071524196 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068816418 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07111781 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072076681 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070724416 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071275473 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.072058091 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069557201 seconds)
  done (took 3.13939333 seconds)
done (took 15.979045558 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.173066159 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073077048 seconds)
  done (took 1.534862403 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.065796512 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.06656305 seconds)
  done (took 1.439291878 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071324138 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058948756 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076004292 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068705672 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059985794 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059366887 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07500028 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.0596073 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059769297 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059841483 seconds)
  done (took 1.954697347 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.060984538 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066554969 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064743886 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062966087 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065117397 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.061144564 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063444118 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060890195 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06696041 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059709964 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064210369 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081069487 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063407755 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081641602 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.0634268 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064116153 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06596144 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063623991 seconds)
  done (took 2.488249296 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059406579 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059819528 seconds)
  done (took 1.43248835 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062574664 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059861102 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062395347 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062222792 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059946268 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.05987028 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060258987 seconds)
  done (took 1.734495161 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421776048 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.12201585 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.342062202 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067086498 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.075031223 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.253700549 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062577379 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.06733652 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067152751 seconds)
  done (took 2.828418968 seconds)
done (took 14.732360677 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080488757 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.178749986 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085744122 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.378165761 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.08977743 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065534469 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.111091092 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.176469934 seconds)
done (took 2.498993027 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.275151402 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.127216087 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.309638588 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146496453 seconds)
  done (took 2.899006925 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.327476124 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.076664075 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075320817 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064935449 seconds)
  done (took 1.871878009 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063511331 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069692675 seconds)
  done (took 1.45423305 seconds)
done (took 7.830458223 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.070200115 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.09510178 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059651884 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.061842415 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062210871 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.060373514 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.061747078 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061784476 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062250057 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059837482 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059870061 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.062429516 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.062091814 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062460364 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06211286 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0615506 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061094068 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062201963 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06154851 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062096959 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062217976 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06247183 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061630396 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062063685 seconds)
  done (took 2.868652847 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077251467 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063870349 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064930178 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064222286 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064897638 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064998076 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064733715 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063903442 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064981017 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063384691 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065807336 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065961061 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063389317 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065814431 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063849307 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06568064 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06528274 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063960919 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063784731 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065650839 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065449083 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06392259 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065563628 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064931063 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065749785 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065457992 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063493663 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064207759 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065041638 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065462098 seconds)
  done (took 3.294828098 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064265257 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057980273 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058606394 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068169195 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058261859 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058470117 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059227582 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058135428 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058514077 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060140924 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059054675 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058730374 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.0590478 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058225655 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058693364 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059275834 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063339759 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077749985 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058605282 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058326892 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062792446 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058838002 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058365442 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058390935 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059077106 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058607759 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058293484 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.05886439 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058622675 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059119576 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058431259 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062700552 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063937036 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058543331 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068636414 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063403938 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058326104 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065145839 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059664474 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058229905 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058573797 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058420388 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058791499 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058515222 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068685817 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059018902 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059410164 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059163765 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058553346 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058209453 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058629323 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060633392 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06732935 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060220772 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058533822 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.05984055 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058400913 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059646606 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058816771 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058269715 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.05847837 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062339622 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060109686 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059482716 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078344968 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060136423 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068904643 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058845086 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059145556 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062712495 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059271288 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076730079 seconds)
  done (took 5.717572097 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069652586 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070285628 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077925196 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068509589 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062003154 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059352983 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063037742 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059368855 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068586319 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063654567 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059625478 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063121713 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068718906 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063645936 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06053576 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068488805 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063525652 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062718901 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059454771 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06363728 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060812526 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063192023 seconds)
  done (took 2.769014963 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137161168 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064354474 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103488267 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068374627 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06694197 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068183311 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064532917 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065010539 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065211898 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065269665 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065506546 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065415736 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06697928 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065151811 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065049916 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06503034 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064680263 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065243928 seconds)
  done (took 2.630439792 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074795836 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064311703 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087645246 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064006123 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064399156 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064066924 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068023023 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068342748 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.0639002 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06425877 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068460695 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064188006 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.064339051 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064971512 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064228223 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064248534 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064183813 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064497887 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068271456 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067611258 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068230797 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068877701 seconds)
  done (took 2.816595476 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07681122 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062967354 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078669212 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064777143 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058472046 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058829056 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064554704 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063668072 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.06461228 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063146926 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063881387 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059048723 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065265101 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063223839 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06575739 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063617992 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063349337 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063675675 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06315781 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059472076 seconds)
  done (took 2.627733948 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070166576 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061321761 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061625301 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066776449 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061476925 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061870344 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066981758 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062022598 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062058243 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08384555 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06210672 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062300414 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.078179622 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065141643 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06179428 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067009434 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066927907 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067076573 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061976236 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061973028 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083833875 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061794624 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.067228423 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061806019 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061733838 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062063984 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061417866 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064915116 seconds)
  done (took 3.180022004 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062381466 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061527876 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061871582 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061696831 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061544631 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061574411 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061865487 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061872368 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061463008 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062096666 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061695425 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061614561 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064457769 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061688768 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.0615406 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061680033 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061810036 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061931126 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062301172 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061979228 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061640587 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061893838 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061476527 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062233778 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061969018 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061360157 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062112845 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.061838049 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061917991 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062113202 seconds)
  done (took 3.206003742 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071088511 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069241341 seconds)
  done (took 1.487367167 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059765872 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075610352 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057985552 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.071212289 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066530912 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062439052 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067231509 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066678236 seconds)
  done (took 1.870573485 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064453791 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.089583211 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060597769 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060458294 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063452637 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125687658 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.073537263 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072127679 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074184364 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063115357 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060793084 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072527182 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.06034478 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074067994 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06169439 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.06990691 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067775295 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078037878 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073446835 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058817959 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07238387 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061144009 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.058792025 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061262436 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060098093 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067555545 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075944251 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07252404 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068372144 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058421628 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079176814 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059570114 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060699063 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069040196 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063838551 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.05944617 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097025075 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.05997026 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064621952 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058868049 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072197017 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080171651 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073524546 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.07685355 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060822942 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060966121 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.05875719 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060858524 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063620166 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069433316 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059779772 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067923249 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059079165 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061049936 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070459865 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060426078 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064939457 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.0691627 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073488745 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070148305 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.068203918 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075085274 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068355463 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.066701078 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.059900209 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.078750807 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060448184 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07242288 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073591613 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.059948323 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072298793 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058536865 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.0579997 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.058843967 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092465944 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060585268 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060283423 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059621635 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059115913 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060612147 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068712921 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064119783 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06706112 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062705661 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075389475 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.06867899 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.05896348 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065505207 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.076665371 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062829615 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.058830814 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075376906 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062224518 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058350996 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076479339 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.069022844 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060449692 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059648881 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062099513 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072256613 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060050229 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057689286 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067863343 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060501979 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061206354 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06315429 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067570996 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058869833 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069024427 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063391876 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060328495 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.05784688 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063321281 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059446542 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057432616 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068035555 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058203582 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072188161 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065123104 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072424279 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072673036 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068205889 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073898105 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.057857671 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056954962 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075720495 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067349023 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.05927974 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075601906 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057411798 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071293459 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.05764949 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.05895633 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.20581692 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059389374 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062179656 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060450649 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065291917 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061567225 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061591189 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065781599 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068203746 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07157582 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060464333 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068366836 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059590951 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074934416 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.0695771 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063893026 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062478385 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059472407 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.070882816 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065927903 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068358941 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058571794 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059768856 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059203365 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07026724 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069252366 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060915286 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066337108 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063602808 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059822286 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.05946477 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060466305 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063046179 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062486368 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.059992397 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067429585 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.067616284 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.072976262 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065956163 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068676945 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058479234 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058506286 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060613663 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058530579 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063438493 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068285519 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074337275 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070641385 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.079993441 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059095127 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069022547 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060290594 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076117832 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072754945 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060150726 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063801154 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.05787287 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060510933 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068465263 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070817172 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072686125 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074911559 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.063907908 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.063740525 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058779158 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074399591 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059659264 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067664084 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068435643 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063559348 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.058973464 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060394669 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.06800815 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063608322 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.058663782 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074541856 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065135799 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058808612 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073480965 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059184427 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069750334 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058464437 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062938999 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064337323 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060913003 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068724371 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074295701 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058071363 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059612288 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07476635 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060988923 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060689283 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067208194 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074274875 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063480385 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067156254 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070048629 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.06913038 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063611316 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.06873936 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059723058 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068588546 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06203917 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070664579 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059053024 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076237443 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057857249 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073982519 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059026941 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069932932 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.05946182 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068224635 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.05954301 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075805243 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060675326 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059663257 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070638559 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057362205 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068113257 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057959762 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063939176 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064981853 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067435585 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059517079 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067145921 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059460716 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067149116 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062471154 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066076932 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067513191 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062438054 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057358633 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066348412 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068819661 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066399386 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059373078 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059657802 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058244474 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.209514997 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061800886 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06191804 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069218099 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064743993 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065846858 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061030102 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061448213 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06115357 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067829112 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068925471 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077354869 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068029246 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.066909118 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068906322 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.05870727 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07476816 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059208099 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070068602 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058048819 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064611001 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.06852832 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.05923072 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07816168 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060511011 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067801376 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071628509 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067847751 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.062724482 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.076644935 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062407397 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.067797566 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067434223 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064502191 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.065726586 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.060898896 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068210522 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069338622 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070009947 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060100023 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.066961701 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068288158 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060793905 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066511947 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060401278 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067380367 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.061149718 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058401481 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.064117156 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070656963 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063736839 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064088932 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059525009 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.057709857 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059547467 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065682471 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063692324 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068002655 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074944739 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058044655 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.059948477 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.05888837 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062782308 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077219644 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068871083 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.06709875 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.06375936 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058303839 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060468543 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060948918 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059559671 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062687434 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058153124 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.05844196 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06979209 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060859147 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063417749 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059094224 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.0598738 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068634738 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063951569 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059432461 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065611439 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058770336 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064111335 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058235176 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060629676 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063763555 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.05838875 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062656543 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069300576 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075278158 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065607561 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067957213 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060054299 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066887501 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074334217 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066178256 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060151295 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068294906 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058222879 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077243724 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068745848 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067490098 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.06890063 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059688294 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075839043 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063342656 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.06907595 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074037293 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06052581 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065343399 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058064601 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074390452 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063182743 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058325954 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066785756 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066900614 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064400864 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070420755 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059109974 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066714292 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063409643 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062177656 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059723589 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059472004 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.066860913 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.073960476 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.05870239 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06184488 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066489993 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066742841 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062740036 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070232292 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066001673 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059087815 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.05966961 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.061966339 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.204900372 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07232271 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060819615 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064506169 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064346453 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059365156 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.065864816 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075905348 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068956517 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068599138 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058820991 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058291624 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.076683565 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062914946 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062836297 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067559754 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.068924618 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071628203 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068826854 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.075791163 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.05973677 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.064686016 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071615143 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060052695 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.058922462 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.062749864 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.060542686 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068209566 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068725028 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.066951746 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060890915 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066502643 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.072795793 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060375794 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064124778 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063851077 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.059635633 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069796089 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067415336 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070943234 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060317642 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058580461 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062509745 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068031042 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066515971 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068235412 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060018633 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065315487 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072819099 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066465059 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061878762 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058588906 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061818823 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068306591 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063601855 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058603239 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06425432 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062985952 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065896295 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068577109 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063817703 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058596229 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.07615613 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066951077 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068526254 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060605244 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061281855 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059437258 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058627909 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070140909 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058565988 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060521458 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063729011 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060472333 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076428325 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.06739201 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075033087 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060254949 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063710087 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058770692 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069026116 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064017974 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059478464 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069657405 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.05808665 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074527969 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070948273 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064615248 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058401488 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.064198298 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067166909 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074413478 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069282592 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068608925 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062698504 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069252494 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060771406 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070424579 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058647769 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058065944 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.06956075 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068058793 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071774092 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058735852 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069594737 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.060964793 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067465989 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067154787 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060481033 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061009652 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06071929 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068880391 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063838176 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.06891154 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063894716 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.075797162 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06009273 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.069877581 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068587219 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.06981486 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072626957 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07160816 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.066901825 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059741439 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066558475 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066824721 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059454909 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063260111 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.061320918 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078963421 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059653355 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059419233 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072284843 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.063652631 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057871963 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.063897639 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.20598246 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070929494 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06146708 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070650786 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.064121755 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060353176 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064291576 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064301133 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058445926 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058885535 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059396675 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069591617 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063672388 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059825645 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07791879 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060740339 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.06771273 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070506355 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065862609 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060754327 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.057939561 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06019999 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072118905 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074571825 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063057818 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068149435 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060686344 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068810106 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057962615 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068042467 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067758124 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068518639 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058674428 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059362485 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074689741 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075095832 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063682529 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068908892 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068437626 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060754706 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080380109 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068427861 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060044431 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070308151 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061480228 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058738732 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058114202 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060795606 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070784025 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058690775 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061158121 seconds)
  done (took 40.90371267 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096632572 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060083503 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058971703 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059116335 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067355867 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059935956 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058966526 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060193521 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059896907 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061703394 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058907739 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062026751 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065973094 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072067587 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06732602 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062609903 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059014607 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060010596 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058990084 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060194872 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065244361 seconds)
  done (took 2.791864851 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062472216 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.0632376 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06270859 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063287803 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062373339 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059092123 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063081644 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059236767 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064034018 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059628521 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063598755 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059003271 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059764224 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059558665 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059487157 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06048435 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063307561 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062410418 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.059150384 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063160054 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060711964 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062902056 seconds)
  done (took 2.791829086 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.060932218 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059316528 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.06763273 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058382328 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058333417 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062182832 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.057959112 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.062941656 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.062875749 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063285095 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067870693 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059351508 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058284982 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064909936 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058309041 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059779035 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.101317826 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060019126 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060159812 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058449166 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061178432 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067698509 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058374523 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058787607 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063281032 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062238933 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058496594 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061254224 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059459908 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063098209 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.05971212 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058230855 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068392502 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067288452 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063154176 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063170591 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060192165 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059699409 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058558909 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058805751 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067299301 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060222597 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058805638 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.059917991 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067897143 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058303393 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058369233 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.067974289 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058553976 seconds)
  done (took 4.49328386 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069227411 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110837026 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064427226 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092043375 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071540113 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064973525 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064401726 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09299836 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059718616 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060649681 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072195512 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072592008 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061653313 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063207803 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065944025 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06164622 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063105491 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060888672 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064125404 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06138368 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064196647 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065466604 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071352642 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071528685 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062760732 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060530137 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061291807 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062595812 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071416966 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.06477948 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062690771 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063458175 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071568973 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066066697 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061031753 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061341926 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.071972887 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061859357 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061565028 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.0599648 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061127735 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062675308 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.065953215 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072744647 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062100118 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066377118 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061658191 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059699191 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071932577 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061301571 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065082432 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072620686 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062197071 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.061727446 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062685955 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071788965 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061598741 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060140796 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061569413 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071831597 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059950035 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062304222 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.074923201 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061220249 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064684035 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072414626 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066536379 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062541157 seconds)
  done (took 6.102190444 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067696789 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093817384 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074336951 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07407863 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070055217 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069269742 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069191101 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069293667 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.06915798 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072730021 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068911984 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.103782468 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065729416 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070746038 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069370377 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069430784 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069249643 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069211098 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069407521 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068930477 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069015644 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074088236 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.068941596 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074046479 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071366077 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065487306 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069156722 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069148707 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074358586 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069305181 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071558695 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069070404 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069253066 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074314006 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071299659 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069258172 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059749302 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068734561 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069196145 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06919261 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065489357 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073897089 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069405977 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065352598 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069075498 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.068656204 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074447405 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07194975 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070584412 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072501222 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069628889 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074382756 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06911382 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069396121 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074654538 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076467362 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074358032 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074175802 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069160863 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074331899 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074437841 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076769031 seconds)
  done (took 5.909958871 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071870051 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065346209 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077513651 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059336909 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058444361 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068552047 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058676025 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058531477 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06571503 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065574836 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067006477 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068090916 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070298643 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067153619 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067889456 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069699954 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067636862 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067600308 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065549726 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06787394 seconds)
  done (took 2.803243866 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073735852 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077455539 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064271384 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067754081 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.063924358 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067677652 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063712496 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064158845 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064831203 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064988781 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069309935 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069148497 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064584197 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067850329 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068763726 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068118013 seconds)
  done (took 2.541340807 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062641494 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066554951 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065326956 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060346208 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06174149 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059438466 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060557112 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058435587 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061163645 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072918567 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059507158 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062436859 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060256684 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058835688 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.05899638 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062266602 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061330788 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059583425 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060353473 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.064583639 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.067970344 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060721213 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062250198 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.059706535 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061850488 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.067911534 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061075688 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061882911 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059444463 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062021749 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.0619664 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066336375 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061800109 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060461714 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058967435 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059634882 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060198034 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062384971 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062283191 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.059940363 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058190955 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065022563 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060040886 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060555317 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06151607 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06236945 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061040114 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065390035 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06029664 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062015697 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06043645 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061326319 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060179413 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067197634 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.061934639 seconds)
  done (took 4.865521296 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075592695 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063971372 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058137958 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058515441 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063535978 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.063898327 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063715411 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064923152 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064366881 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058789904 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065267308 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063451688 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06432955 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064130533 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064938787 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063881814 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058840413 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.063930355 seconds)
  done (took 2.620469571 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065084729 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064726034 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.06344306 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060666738 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060468357 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064991199 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058841112 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06036482 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060236918 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060534263 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06049219 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060378299 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060201979 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060731631 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064697907 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061218805 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060090557 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058778851 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060465491 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058649022 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065053501 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.05877982 seconds)
  done (took 2.817779717 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.085938065 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082162028 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125438454 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.077915424 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086716326 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.069626154 seconds)
  done (took 1.997192691 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091527254 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096052593 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063509324 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06375244 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068227355 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066336094 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066893195 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066562527 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069956554 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070280739 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067346173 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070370743 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069894679 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071995616 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068371275 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068718485 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066917645 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066915795 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063875163 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074414137 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067277283 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070207581 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067140362 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066622037 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066675285 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071837167 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070020967 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070350678 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066653528 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070227586 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06863956 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067280234 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07063956 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070521728 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.063653761 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07011094 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067068821 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074411147 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068468493 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072046667 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063816711 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068598104 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070073445 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070240177 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070546882 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066966998 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070291964 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067166232 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067436031 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075885711 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068717793 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072077419 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06851342 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070768242 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070308352 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075558369 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071028991 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072066795 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0688451 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070846966 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072299781 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068788661 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072088126 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071384591 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069090047 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072486316 seconds)
  done (took 6.094007283 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101867271 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064445165 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067095234 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070205292 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072211035 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067210157 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067337946 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066980277 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06720968 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064274876 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102383265 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067368574 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072552981 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074986234 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067155556 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067197316 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067411438 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07228368 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06447274 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075738663 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066612178 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071888285 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071825236 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072096547 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070400628 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068557423 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067023393 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067246532 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066808354 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066786711 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069911135 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066780387 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072110395 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063758898 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071964281 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067077149 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0672162 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070454563 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067042635 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069063777 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07184903 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074093943 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066862671 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066771233 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071056793 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066971783 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066613642 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0643714 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06709481 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0645746 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070857101 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071181739 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07086571 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072102017 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067175592 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06709836 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067126911 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067107453 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067437047 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068780192 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072066038 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067097258 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075620485 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067053652 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067527351 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072439256 seconds)
  done (took 6.102831295 seconds)
done (took 126.627738718 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216109354 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188449942 seconds)
  done (took 1.862816785 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072285305 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163331599 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072406279 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072508949 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106004029 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105250352 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073648458 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069687807 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072304708 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069927232 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.136944187 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073529523 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069501127 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070110784 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.06984817 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069775974 seconds)
  done (took 2.846959877 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.104919941 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.180550484 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.100273249 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.06759694 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.148664509 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074493687 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.069973366 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074316064 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074060233 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068073543 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104253916 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.080897707 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073066576 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074289208 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069545636 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073204857 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074103782 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074126683 seconds)
  done (took 3.071449693 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.1006923 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089328525 seconds)
  done (took 1.678750627 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.152951614 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102910273 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.141677525 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.340508089 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.133758171 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.136049992 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.139426092 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.134482207 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110113868 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131223463 seconds)
  done (took 3.004118392 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103554605 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.103009519 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.302762544 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.099974476 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080281648 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074987173 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072588521 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07725264 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072733346 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074060016 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119419294 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072748613 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.069681891 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121525192 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.095670827 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.103816392 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068379137 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.075806201 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077638308 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.06858172 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073943331 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077326466 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.174627893 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076159776 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.096935624 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.072736128 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075182076 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.071896689 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071759483 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075863618 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076461434 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.096812179 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075831948 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.079966071 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074391175 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094045546 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069398601 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096245227 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.071778315 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070044074 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072711579 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076670971 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.069910565 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.07571921 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072651533 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075154672 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077379326 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069066265 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073295542 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072159916 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070495327 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074205533 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073911966 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.074746735 seconds)
  done (took 6.130914918 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105195784 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106053267 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06813279 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.109677843 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102835661 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068087065 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101814484 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097617018 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105586343 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067452108 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066631355 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067400318 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074333772 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076875413 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.11375787 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105772867 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069211019 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067800386 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104564171 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.104776 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06657195 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099194873 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097482781 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104117898 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066485319 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067508943 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066382741 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066886287 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071587371 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072850136 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.06660404 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073792676 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078333771 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072796951 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066055069 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066118811 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066355445 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073370957 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07428749 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.073973024 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.071991759 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066135631 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066296163 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066688837 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067612762 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065753565 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072389708 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073432433 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072383444 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06670918 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067014453 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066582835 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066968993 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073123858 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072220693 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074061781 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074311406 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066724547 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066934802 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068360204 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074623438 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074063706 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073774376 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067438078 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075060195 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067044669 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.0757323 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078212111 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066855723 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067142998 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066826337 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066481193 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066958134 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072634497 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072734808 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067511795 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06664231 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066497141 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074755772 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07241622 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067162061 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.071802157 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066293914 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066508037 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067302721 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066919001 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072049954 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.073707709 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067503421 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066462333 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066632846 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066566215 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066093013 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071606908 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073037218 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073358758 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072414969 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066827139 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072697551 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072529168 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066677153 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072275153 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066334514 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066526563 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066300204 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071299991 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.070421657 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.072942417 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065834489 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065425832 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07110685 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074131969 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065429291 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07063495 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072926873 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.208991861 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067375877 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076421375 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067546182 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074783834 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067539399 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075179613 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067524987 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072773008 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067105788 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066217481 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066629041 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072743341 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067230404 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066647828 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.0670764 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06654894 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072609445 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075911826 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0672612 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07272222 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.07287069 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06714797 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072901728 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.0666394 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073992492 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066865013 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067104789 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065859025 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075127531 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066597206 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066860328 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066501197 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07425921 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067150852 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074743082 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072339004 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066201978 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07616003 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074809027 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072259101 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075076545 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067832053 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066937359 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066928736 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069561606 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071766996 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072748522 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067299126 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066761229 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071896125 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074471877 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066365067 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072165053 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072415016 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072966657 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067092529 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067052698 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075886111 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074855689 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072818626 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072596199 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073465824 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06704182 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072124467 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072731577 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066692858 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078512983 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067292093 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076337891 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073127347 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071977117 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073084056 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074884206 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074837545 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074959036 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076776649 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066644488 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066689402 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.073210212 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066867894 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066699488 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072568416 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067047881 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067402226 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077432285 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067236094 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074932592 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066362657 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073322702 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066485487 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067464521 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076936847 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066945528 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067204218 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072253625 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.0667609 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072417545 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074931295 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072645433 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066361992 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067094964 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073316451 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073673566 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066428445 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066468927 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066930774 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07178835 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071348459 seconds)
  done (took 17.83893489 seconds)
done (took 37.933052382 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.167300061 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112984818 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208634078 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.197853534 seconds)
  done (took 2.271042785 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.098265461 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063374814 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.078280497 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087726282 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063057189 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073587612 seconds)
  done (took 1.993997987 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.198610858 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173611369 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.242986092 seconds)
  done (took 2.136362984 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.36549795 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.146325187 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212734472 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.495613702 seconds)
  done (took 2.849131654 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107631751 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097867628 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075319088 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108819801 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.083070183 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060804103 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.131177263 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067610435 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.09780686 seconds)
  done (took 2.422193579 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.136482259 seconds)
done (took 13.355884914 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.103986604 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.467288843 seconds)
    (3/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.112389262 seconds)
    (4/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.120512307 seconds)
    (5/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.077462409 seconds)
    (6/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076062611 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.163229424 seconds)
    (8/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.218687466 seconds)
    (9/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074898969 seconds)
    (10/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.223052267 seconds)
    (11/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.090253963 seconds)
    (12/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.205219796 seconds)
    (13/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.196039739 seconds)
    (14/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.212706771 seconds)
    (15/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.218343305 seconds)
    (16/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13281392 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073892459 seconds)
    (18/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.095149323 seconds)
    (19/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068525302 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076039156 seconds)
    (21/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064103575 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.116752797 seconds)
    (23/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.071335136 seconds)
    (24/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.251544282 seconds)
    (25/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.197834716 seconds)
    (26/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.073268283 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076111415 seconds)
    (28/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.147444378 seconds)
    (29/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.137052608 seconds)
    (30/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.181188287 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063620504 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072497093 seconds)
    (33/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.144396321 seconds)
    (34/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.12101037 seconds)
    (35/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070458628 seconds)
    (36/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.150588941 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.178860459 seconds)
    (38/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.070809083 seconds)
    (39/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.072236627 seconds)
    (40/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.159348345 seconds)
    (41/341) benchmarking ("sort", BigInt, false)...
    done (took 0.259962655 seconds)
    (42/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.181374737 seconds)
    (43/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.06867808 seconds)
    (44/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.143831791 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.070849526 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074492232 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15466545 seconds)
    (48/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.063472274 seconds)
    (49/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072395916 seconds)
    (50/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.075814548 seconds)
    (51/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.215444576 seconds)
    (52/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.223384751 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087968495 seconds)
    (54/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072504177 seconds)
    (55/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.089475722 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.084482193 seconds)
    (57/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.14503649 seconds)
    (58/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070517662 seconds)
    (59/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.135486203 seconds)
    (60/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.148391002 seconds)
    (61/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.19858733 seconds)
    (62/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.063870273 seconds)
    (63/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.077407091 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.080061259 seconds)
    (65/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.074582881 seconds)
    (66/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.063399454 seconds)
    (67/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.195901096 seconds)
    (68/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.160684686 seconds)
    (69/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.236116528 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.064880512 seconds)
    (71/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.073745756 seconds)
    (72/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071062341 seconds)
    (73/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.062588063 seconds)
    (74/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.061514873 seconds)
    (75/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.070788814 seconds)
    (76/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.0646404 seconds)
    (77/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.13660128 seconds)
    (78/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.139083022 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.062853113 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.119050427 seconds)
    (81/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.070909722 seconds)
    (82/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.137174054 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.283192732 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069569944 seconds)
    (85/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.088157093 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087298606 seconds)
    (87/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068850125 seconds)
    (88/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.072006961 seconds)
    (89/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.166388452 seconds)
    (90/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.08252413 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.12263413 seconds)
    (92/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074475019 seconds)
    (93/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.086981959 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125788861 seconds)
    (95/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064210866 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.08961496 seconds)
    (97/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152976966 seconds)
    (98/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.197809601 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.124503463 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093677734 seconds)
    (101/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.198039669 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086851713 seconds)
    (103/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.151336036 seconds)
    (104/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.064570753 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086203691 seconds)
    (106/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.087227256 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071922109 seconds)
    (108/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.064577777 seconds)
    (109/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.197093163 seconds)
    (110/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.151537773 seconds)
    (111/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.21782461 seconds)
    (112/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.188233829 seconds)
    (113/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07294936 seconds)
    (114/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.142395969 seconds)
    (115/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.195594051 seconds)
    (116/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.139986307 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085396072 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.078351477 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109245041 seconds)
    (120/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.080959928 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.127406917 seconds)
    (122/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.067047601 seconds)
    (123/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.167534935 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.073984407 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.066966896 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.063782085 seconds)
    (127/341) benchmarking ("sort", Float32, false)...
    done (took 0.135536283 seconds)
    (128/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.06474807 seconds)
    (129/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.213940564 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089405641 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065040447 seconds)
    (132/341) benchmarking ("sort", Int8, false)...
    done (took 0.151061386 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.113574284 seconds)
    (134/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.063998848 seconds)
    (135/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175366199 seconds)
    (136/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074492443 seconds)
    (137/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.064177991 seconds)
    (138/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.076908449 seconds)
    (139/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.22612586 seconds)
    (140/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.063891233 seconds)
    (141/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072989339 seconds)
    (142/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093217914 seconds)
    (143/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.070824061 seconds)
    (144/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.225760128 seconds)
    (145/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.071011386 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071701152 seconds)
    (147/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.071334115 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073376963 seconds)
    (149/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.08194642 seconds)
    (150/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.071759487 seconds)
    (151/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.063818102 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.072841596 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 0.141322604 seconds)
    (154/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064015345 seconds)
    (155/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.063975127 seconds)
    (156/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066388455 seconds)
    (157/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065360065 seconds)
    (158/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.074649531 seconds)
    (159/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.07490436 seconds)
    (160/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.064388836 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.0708068 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073207182 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 0.064844964 seconds)
    (164/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.215566228 seconds)
    (165/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.081157438 seconds)
    (166/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.064356163 seconds)
    (167/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071118554 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.138789048 seconds)
    (169/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.070691154 seconds)
    (170/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081713978 seconds)
    (171/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.159848292 seconds)
    (172/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.063910925 seconds)
    (173/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.216914051 seconds)
    (174/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.070480105 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.151710371 seconds)
    (176/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.06345843 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.062993062 seconds)
    (178/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.061737066 seconds)
    (179/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063133849 seconds)
    (180/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.158934452 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.079700249 seconds)
    (182/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.230759445 seconds)
    (183/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064071787 seconds)
    (184/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.080679568 seconds)
    (185/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.064525183 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.071419935 seconds)
    (187/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.25881754 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063227761 seconds)
    (189/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.151088318 seconds)
    (190/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067145203 seconds)
    (191/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067459509 seconds)
    (192/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.063727036 seconds)
    (193/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.161857622 seconds)
    (194/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.06476455 seconds)
    (195/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.063635433 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.144711674 seconds)
    (197/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068526131 seconds)
    (198/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.067224811 seconds)
    (199/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.063777809 seconds)
    (200/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.0635637 seconds)
    (201/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071004993 seconds)
    (202/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.169632778 seconds)
    (203/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075734775 seconds)
    (204/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.064798308 seconds)
    (205/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.064247118 seconds)
    (206/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.160778893 seconds)
    (207/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.073296537 seconds)
    (208/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063296943 seconds)
    (209/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.061975928 seconds)
    (210/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.06358484 seconds)
    (211/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.063918829 seconds)
    (212/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.064677302 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.070958491 seconds)
    (214/341) benchmarking ("sort", Float64, false)...
    done (took 0.137841359 seconds)
    (215/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.070353954 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071067449 seconds)
    (217/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071070717 seconds)
    (218/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064273323 seconds)
    (219/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.068107209 seconds)
    (220/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.063449683 seconds)
    (221/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.064052501 seconds)
    (222/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.092911355 seconds)
    (223/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.143884189 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.065723418 seconds)
    (225/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.063427641 seconds)
    (226/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06437652 seconds)
    (227/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.072086457 seconds)
    (228/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.064893507 seconds)
    (229/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130288843 seconds)
    (230/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.080113457 seconds)
    (231/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075353287 seconds)
    (232/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.080870507 seconds)
    (233/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065491806 seconds)
    (234/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.178948819 seconds)
    (235/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066366981 seconds)
    (236/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071307403 seconds)
    (237/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.154496378 seconds)
    (238/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078240711 seconds)
    (239/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.064420792 seconds)
    (240/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070798339 seconds)
    (241/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067136998 seconds)
    (242/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.086646133 seconds)
    (243/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.067364177 seconds)
    (244/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.162025628 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064183824 seconds)
    (246/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.063850874 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.063554944 seconds)
    (248/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062372094 seconds)
    (249/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064230397 seconds)
    (250/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.063924855 seconds)
    (251/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.064309814 seconds)
    (252/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07171277 seconds)
    (253/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.06816486 seconds)
    (254/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.06474103 seconds)
    (255/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.06395101 seconds)
    (256/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.063517982 seconds)
    (257/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.140919969 seconds)
    (258/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.187399631 seconds)
    (259/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.152287564 seconds)
    (260/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064174835 seconds)
    (261/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063492304 seconds)
    (262/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.089572326 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.082175835 seconds)
    (264/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.062151288 seconds)
    (265/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063806404 seconds)
    (266/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.081717176 seconds)
    (267/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.063863472 seconds)
    (268/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.198277678 seconds)
    (269/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072361686 seconds)
    (270/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.064538142 seconds)
    (271/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065809192 seconds)
    (272/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064434604 seconds)
    (273/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.074959612 seconds)
    (274/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.189952012 seconds)
    (275/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064139727 seconds)
    (276/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.070366304 seconds)
    (277/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.06206871 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.145018149 seconds)
    (279/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.062416477 seconds)
    (280/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148313379 seconds)
    (281/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.066837683 seconds)
    (282/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07586307 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.139965985 seconds)
    (284/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.063512234 seconds)
    (285/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.066920362 seconds)
    (286/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.063643062 seconds)
    (287/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065714496 seconds)
    (288/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.062232055 seconds)
    (289/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.081874675 seconds)
    (290/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.064039799 seconds)
    (291/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064662931 seconds)
    (292/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072058396 seconds)
    (293/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.080060058 seconds)
    (294/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06364521 seconds)
    (295/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089002851 seconds)
    (296/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064921667 seconds)
    (297/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.066064273 seconds)
    (298/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.079302903 seconds)
    (299/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064814938 seconds)
    (300/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066056548 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.063584799 seconds)
    (302/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.17040496 seconds)
    (303/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.063873395 seconds)
    (304/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.06384713 seconds)
    (305/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.065520536 seconds)
    (306/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.063641378 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.062800669 seconds)
    (308/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.065057199 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.087588045 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.080191872 seconds)
    (311/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.062497594 seconds)
    (312/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.06432224 seconds)
    (313/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066244621 seconds)
    (314/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.128502777 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.063870175 seconds)
    (316/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.062781382 seconds)
    (317/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.063487037 seconds)
    (318/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.06304677 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.074323458 seconds)
    (320/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.24454896 seconds)
    (321/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.068600598 seconds)
    (322/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.067291772 seconds)
    (323/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066057819 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.088407237 seconds)
    (325/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065072982 seconds)
    (326/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.066587892 seconds)
    (327/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.065323129 seconds)
    (328/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064659987 seconds)
    (329/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066185708 seconds)
    (330/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.063834552 seconds)
    (331/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064305187 seconds)
    (332/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064508611 seconds)
    (333/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.062868527 seconds)
    (334/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.077800244 seconds)
    (335/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.063887528 seconds)
    (336/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.065815726 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.145300303 seconds)
    (338/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.063525953 seconds)
    (339/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178114955 seconds)
    (340/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072196977 seconds)
    (341/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071481204 seconds)
  done (took 36.257294294 seconds)
done (took 37.806504136 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090912453 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078926212 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.07741554 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073940949 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077627977 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076520026 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077562681 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075450995 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076426145 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075948076 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.075723144 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064070083 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072487004 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.079599101 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072906671 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079347606 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076478695 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078930959 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064389869 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078208054 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.091218969 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.075455271 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072847165 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.077620956 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063894316 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072880856 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087244441 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.085309182 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070453323 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073028759 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071653785 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082187308 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071691214 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.069908552 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073381794 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069118037 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.072791275 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070697637 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086601364 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.0693632 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063799972 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.075742026 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070887619 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071459081 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072276697 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075646888 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069625156 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077219185 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063400264 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075060728 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086536572 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068549108 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069997866 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072338088 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069103474 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073066719 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070078879 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07494177 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068675943 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.074777659 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074864422 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072066551 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063381956 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07252488 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070641947 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071579126 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062663693 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068503714 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06356257 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063666753 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062402168 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072453998 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070245229 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068343207 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062912913 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.06355999 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.062783083 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.07565697 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069502675 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072747367 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063844294 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068521287 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068311422 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063713607 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068402367 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075103644 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.062555275 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.063909447 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06286089 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078102495 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070230412 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063748054 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075128591 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068510954 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068752358 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.063650565 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.062369198 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067825608 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.071453971 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.063570405 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062417644 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067987415 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.068243911 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072478438 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064156147 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068512156 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067934796 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062223227 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.072444859 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070519632 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.071978187 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076313066 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07217261 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075070074 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063700599 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062491447 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073052526 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063778961 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067972974 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070997781 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068528628 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071366486 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063811623 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062303886 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067918894 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069640682 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063754921 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063780987 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063379687 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072659738 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.069973867 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062128205 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062747845 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071818578 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071863931 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062490023 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062472279 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072394766 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063479342 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068786327 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068356683 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.070941831 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062066469 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.062809836 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.061745228 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.061849255 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062354815 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071034189 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.06729786 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.062715132 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.070969622 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.217094733 seconds)
done (took 12.494949204 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.065483354 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106484766 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.078495067 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080318325 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076928039 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065575411 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068082703 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082888484 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067693358 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.0881166 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089668762 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085452217 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094448237 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062856231 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.063763134 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06462069 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062131126 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075804829 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080469482 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087346775 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099617669 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063598608 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079556659 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083477422 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077787868 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.081641137 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065296473 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.064741204 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067210859 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082634541 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090007172 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064045402 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065125699 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081478621 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078900999 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071843888 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.064746575 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07027725 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067646313 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064008294 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065858286 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08152024 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070147195 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070907226 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065419813 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065517081 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064316324 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070958489 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08151129 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069444888 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076142993 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082748642 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066156447 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064722041 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062718632 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.07129998 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064397183 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064870411 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064717032 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064469722 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064694899 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06660205 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069556023 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070229169 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067641346 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070132921 seconds)
  done (took 6.437252915 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.080390148 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.089905017 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07851677 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079020732 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063578514 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064843873 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064647311 seconds)
  done (took 2.18188724 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06482774 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072183679 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076261378 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076200372 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085971392 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.073615499 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065038902 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096141047 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063789744 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072638725 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.079483065 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077664849 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067900709 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.07645007 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064673081 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.07598374 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.064859907 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071387926 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071982784 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.078048135 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068559755 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094227034 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.07789378 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065437482 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.078261258 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071992944 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066763204 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064939925 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06500735 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064236755 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06415468 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.08621162 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.070476817 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07645412 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065241486 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063435578 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.068971936 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065300122 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068400599 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07332231 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.067803784 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.063948738 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064380135 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064386294 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065232083 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068904177 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065485478 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064729362 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064009993 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.071546399 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063206442 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.070374426 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.06639477 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.06904172 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.068845793 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068526273 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071073481 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06438807 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071525777 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070435897 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063881623 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.0766329 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075279045 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.068500015 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075722321 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.073304828 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.071112856 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.068225419 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063613351 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063664049 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064992709 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075849959 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067788921 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066701974 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065273526 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069431214 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068553233 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.07948668 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079111761 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.07785432 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066721603 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.0644711 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068652437 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.07959248 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069246305 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064314283 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.06552053 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063886174 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069547153 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064556909 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069268949 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064335254 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.071121615 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.06706521 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066616334 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072428401 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064633763 seconds)
  done (took 8.4498484 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067074892 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066510187 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065298 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065564279 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.06585019 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065522045 seconds)
  done (took 2.088901058 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087683376 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064647799 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076545299 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.064747925 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086613202 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.070650467 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071222645 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066548192 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.080903796 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.0749333 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.07081442 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073452982 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073777321 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066735787 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.071538417 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065670321 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.071541384 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067674909 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074505879 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067095879 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081046313 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066512907 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066663167 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076511024 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067646479 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065383588 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066049215 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07542136 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074398497 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066500803 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066041159 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067342305 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07298477 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066071318 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.071042933 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.073233425 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064332265 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070143659 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067171157 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067420572 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073173171 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066294579 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066729374 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.069805264 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066556057 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073075074 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.069951414 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.06803412 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.070641263 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070130631 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.069780799 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065286643 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067436737 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.0697605 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.072990771 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066595173 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.0703916 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070579005 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.065980564 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073108343 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064558334 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067424893 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066490975 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067228592 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069382184 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070036796 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073316807 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066503287 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066361598 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069299353 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070554381 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064747553 seconds)
  done (took 6.69669695 seconds)
done (took 27.496502688 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542286808 seconds)
  done (took 2.179700032 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.88627256 seconds)
  done (took 2.564811042 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.083509032 seconds)
  done (took 9.764603424 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.346422359 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.409070081 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.733990078 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.130904956 seconds)
  done (took 3.337539457 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.754497754 seconds)
  done (took 2.443875101 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.228966354 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218572498 seconds)
  done (took 2.148030599 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.332584215 seconds)
  done (took 2.014475169 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.14139989 seconds)
  done (took 2.819195362 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.231546377 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160341512 seconds)
  done (took 2.083725842 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.534622627 seconds)
  done (took 2.217553613 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.275407888 seconds)
  done (took 5.964031863 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.230234623 seconds)
  done (took 1.957553518 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.226860192 seconds)
  done (took 1.915854473 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.014826093 seconds)
  done (took 3.697136057 seconds)
done (took 46.794516864 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.082143845 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084865869 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084865006 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079563106 seconds)
  done (took 1.992783053 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.072484997 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068392323 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071783155 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071686163 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069330289 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070277284 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071173575 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.068060279 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069215517 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068277709 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066767825 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068536563 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070738947 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067892131 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070746746 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071858165 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068350658 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068272339 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070388336 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.068251839 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070511334 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068358819 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066410376 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067940084 seconds)
  done (took 3.352879641 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076146735 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070773641 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073357554 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069387157 seconds)
  done (took 1.98248185 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074884405 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074564118 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08335239 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.088568568 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.074171989 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074697234 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081560313 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.082288025 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063382426 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084636774 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065765427 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064932103 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.065065156 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083324432 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081632441 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060587274 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061573289 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075033327 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074340985 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077290274 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06655234 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063492057 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073656617 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074947141 seconds)
  done (took 3.462897127 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080023903 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063344347 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078990291 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088574528 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089898827 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063694166 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076778676 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.091037737 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12564848 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063684112 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069793349 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063457215 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102600632 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063684051 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078584863 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106794475 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.110008855 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067555591 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096680358 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.06387548 seconds)
  done (took 3.345945723 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.074353073 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067543494 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068695337 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063590304 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075044354 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071168437 seconds)
  done (took 2.127925834 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.067032065 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066107764 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068196049 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070455601 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065818858 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066022409 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065136856 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063972659 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064094469 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064792503 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065051897 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065304029 seconds)
  done (took 2.492195185 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.146433319 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067279248 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068550339 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064050778 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065442167 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064584295 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079217497 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066629029 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082835147 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064485728 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064927616 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06732436 seconds)
  done (took 2.602860773 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102205948 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108191484 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14275894 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114864697 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114177092 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094197246 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123007707 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092752667 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.156676609 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134371263 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114566454 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091239199 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084081856 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067513554 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097211076 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115948377 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134243267 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070793241 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110405807 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161741095 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129314014 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.132420387 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145932018 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114841685 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088201466 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145100594 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095168654 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099997349 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12236863 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123857315 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117501219 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095515833 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069669088 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069637917 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149610754 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.102863492 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118748194 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.091172353 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102632358 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085988742 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104806697 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067275546 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083337102 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110022267 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082554714 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128673938 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085673688 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11281936 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079239544 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134770141 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120068073 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095461449 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082237997 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100114287 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.289544558 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110313392 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132129119 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105114472 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080706083 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116294451 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100716324 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097988503 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104865761 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077876986 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173660566 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086961739 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109429045 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109510241 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091682204 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092307853 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104326275 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132565891 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122623336 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.122874757 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135383269 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092990586 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119590285 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097659133 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.127024279 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10272853 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070913938 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.11967751 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126953366 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096300007 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098883311 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127492059 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089793507 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075383049 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.097038464 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.115907349 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07812943 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.110596516 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078636739 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106514358 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131486902 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094964909 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10924834 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114219872 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076020656 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152193927 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106597339 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070991617 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114573216 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110688025 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152026329 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091797229 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073557394 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096378968 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.261054617 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14755258 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105391717 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078308074 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108405512 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137283715 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09310036 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166164341 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093775657 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138115019 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109598576 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084880843 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073173325 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087776476 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109833393 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104844082 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109211172 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087619218 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081824287 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084659847 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108851452 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09002855 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078230003 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111340304 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099278638 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072784204 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086337788 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077413004 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139388834 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076171749 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135489457 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123201474 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076807801 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103651917 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095937728 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10576627 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095694632 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114693054 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13782066 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113663193 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087908461 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091203917 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105769966 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141117258 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124332405 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089880195 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074658933 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098140953 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109293856 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095973157 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123659901 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093428872 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106911584 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100739872 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139119767 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141275306 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096701721 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097291034 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102726492 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.282140108 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075127903 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154057595 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102214613 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116350826 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082632376 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138367724 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111382173 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087169577 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085237641 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098027286 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101423348 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103151661 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140016247 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094022817 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070536501 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090418795 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1410669 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074491303 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107452757 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088309079 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091327087 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11553334 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.091083796 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079026928 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.06641312 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124546967 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156092722 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068117045 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112029047 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109142852 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1006618 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.119046392 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067514627 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117069339 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13644344 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115326148 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138615018 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145142374 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11444329 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115680481 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111266348 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103740605 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077468603 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122489239 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131922172 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093831879 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090021004 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134117399 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11581693 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133134958 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.111549181 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109853324 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.100491708 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103697396 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.262995613 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100525916 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14180234 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118983491 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121602335 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083880068 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103981672 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115363895 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131884951 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07988246 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138833591 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081434887 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115418702 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075174615 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120288074 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077012956 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108588588 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077383593 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097157999 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067500553 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07204505 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137819029 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.1095999 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103237061 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097342428 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.134581529 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133223748 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078610934 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105549624 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11286476 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09856016 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113788456 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106787214 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086659841 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093149793 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107153799 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082739275 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079555943 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112698645 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092090841 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124739489 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082306441 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073012881 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137995205 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101981886 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093435326 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07546016 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105854629 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120392711 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091085524 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085092941 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112635133 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102007788 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1394762 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088789016 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095944282 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119810154 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077708391 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089079723 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067482757 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.082500591 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073330245 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.285375131 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074789417 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114884891 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067108962 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127826991 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084444403 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090839995 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099574236 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10882776 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125475494 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092234724 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137121841 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086890341 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114986776 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104928698 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091773969 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085698984 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10094498 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098229432 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.118968214 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.093664195 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119313642 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140152405 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101178283 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138012155 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088900269 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118741224 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10440624 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122131145 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109485619 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144821268 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135845178 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110324682 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109604624 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073178132 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092485508 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102979677 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109255725 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171813063 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122831704 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070334853 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103602848 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091671524 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105510931 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102488819 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080512296 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144393427 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100319679 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086098312 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111291675 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089253509 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101318585 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073449256 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092378343 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.096974196 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09043201 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09344134 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.271785422 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12559582 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111330705 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140195789 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097296082 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090424052 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115938605 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107950331 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108059838 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083710228 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083846878 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133429208 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115479734 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.1252293 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097304244 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106275029 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108731397 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09729262 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121584155 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10535596 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.123696802 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077776978 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.073724507 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066554618 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070193243 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120293836 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106479802 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10932741 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096091484 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.069867423 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101247524 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103892438 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070131454 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08646136 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091995711 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092902277 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089493808 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104477436 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111692768 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088704579 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101379622 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097557836 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144285452 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097874959 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086660743 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141164206 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147102877 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08576385 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0909349 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069539462 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077215959 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110984428 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147349398 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149298986 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.075294313 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083675589 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.082366619 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08406914 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070144289 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.084570504 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.244708484 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102571851 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097244568 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110406848 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102156946 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073746973 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100772163 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096908476 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089903826 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101781028 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11551813 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121569058 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.137405708 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107550481 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104316678 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073914721 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.077865844 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073388493 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077028082 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099793777 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.07701015 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073687012 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139698758 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089765652 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101930833 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105997576 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08634009 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073221832 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130927692 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067410257 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132268905 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069119331 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080184303 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081002357 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077200995 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091995857 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136554313 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107565473 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111636728 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104021124 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102411376 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138660549 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153664391 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078062534 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140818204 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073673503 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073757947 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074125952 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11203036 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08731863 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112805013 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1385517 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089016154 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101226675 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075564407 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140978345 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096108713 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102115952 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083922228 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076263025 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137347322 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076513313 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.076046785 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085755519 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10599313 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.069487354 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098835253 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080145879 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076138786 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13571482 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.626526855 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086307166 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.072492562 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091076358 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.136293957 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121130002 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090618294 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102794505 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.110153549 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092831976 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087842062 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100618711 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.176444992 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070257523 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086878594 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.096915217 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091179742 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093656359 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.091595215 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.08102234 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.086539407 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.082905639 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074844456 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100672858 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083253071 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.089517273 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099750734 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077612001 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.080925402 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.120568976 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.09614256 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.07613836 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081266161 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.100567727 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082401124 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09304807 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.066018515 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105621683 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085734051 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107371758 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.086175943 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100525203 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118029918 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08392529 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125408042 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.097317793 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11254094 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082401629 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.073356544 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112931459 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080638648 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072878766 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131452888 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085216322 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.361014225 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104069468 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.098237238 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114831022 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118244053 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112277454 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097610596 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079014099 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100595789 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.102253317 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085026001 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078710088 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07443365 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075897906 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107115368 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08498338 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082694009 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114465737 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087809366 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10338991 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.099347027 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120814959 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082411445 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100242217 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109106729 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090792305 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107860321 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099965561 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.127972218 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175137698 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124252986 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128045626 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132744552 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.075483279 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074598231 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067335647 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113853998 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077971013 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087535325 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079934646 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132726132 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080651487 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109976119 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232119848 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07852683 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092074062 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094909531 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068475635 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08229373 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106597054 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08576 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079150822 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117353742 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081363679 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12583155 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109566375 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097389915 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092986317 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079555631 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112666628 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103518693 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.128207768 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093124488 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073847621 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112765416 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100632994 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.29731761 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071407811 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078803774 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126338395 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101641674 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130182695 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077983092 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147195854 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140128109 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098699237 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131007585 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069595625 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081508891 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086857944 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.122834484 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082242653 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108562283 seconds)
  done (took 66.251311935 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.147805796 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141764038 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080129007 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101607593 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185468211 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195697246 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.118101382 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094424912 seconds)
  done (took 2.955952207 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.066108909 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.080755149 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078973998 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.202196479 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.093574073 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065384799 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071223742 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.08007214 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065681272 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.064950206 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099418463 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065499935 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065679463 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.369388295 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064970814 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070325885 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065484229 seconds)
  done (took 3.539503042 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.330337271 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.94522731 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.239213573 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.191232937 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.145750198 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553500624 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074457526 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081004466 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.690379592 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.366704293 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.137670645 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.08605316 seconds)
  done (took 19.722593679 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.075854681 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.077758285 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.078099126 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.074592291 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074263043 seconds)
  done (took 2.330012783 seconds)
done (took 117.872516386 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08267377 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17183859 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066591446 seconds)
  done (took 2.153957266 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.081018932 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.07989702 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079412067 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.077521496 seconds)
  done (took 2.206522389 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07390047 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.07515101 seconds)
  done (took 2.029095403 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.222510781 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176797693 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089324302 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08114003 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078592051 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.07888962 seconds)
  done (took 2.132653425 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.070427987 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070106134 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070550697 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.070579489 seconds)
  done (took 2.161713076 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066787881 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065318552 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067574301 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070335859 seconds)
  done (took 2.151859024 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.084275886 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085069232 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114541658 seconds)
  done (took 2.166196516 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081543238 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081390973 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076877312 seconds)
  done (took 2.128563275 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.107456125 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095796348 seconds)
  done (took 2.086778877 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.078720572 seconds)
  done (took 1.967461342 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.088393917 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096307364 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.137922821 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105629025 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.139594788 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.125341772 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075805169 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.077346913 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072565975 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071705613 seconds)
  done (took 2.875089264 seconds)
done (took 26.510722398 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077764472 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.37208093 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.358326256 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085507682 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672438573 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.356046724 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.001337615 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090038779 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100015273 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067352158 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084340181 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649034016 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.993249266 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.329846575 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.978830271 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.328567013 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651266768 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067586032 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066920094 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067369951 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.987815945 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066626176 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066950046 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06744039 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.648635149 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.373575431 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067897546 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.329090081 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066862597 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071066511 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356274911 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067689133 seconds)
  done (took 16.432499741 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.068865204 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.121840521 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071001324 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082716316 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.069016522 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068616489 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070394053 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067676924 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111011847 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067083597 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084516459 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066579573 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070830872 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068167862 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087128961 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067116171 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069210055 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071093758 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066909299 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067774695 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085713243 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067085503 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068261993 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068621395 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067833095 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080973468 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068520079 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067513603 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067190756 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071360016 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071317568 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068154284 seconds)
  done (took 4.276429378 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12049059 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125017351 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071866277 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.108006986 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.116802421 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069129805 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150671457 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090438104 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114807288 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067718305 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085094693 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066717646 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.103276412 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068552634 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087258798 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066941137 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069812648 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067908311 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066993253 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067776689 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086015953 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066833881 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067447139 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067926009 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067616069 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082397745 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068371308 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067338354 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067087657 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071147829 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072248454 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068303671 seconds)
  done (took 4.543687104 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.068398657 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069795176 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076688317 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.079663533 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065114379 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067401578 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.068612305 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065279475 seconds)
  done (took 2.470317007 seconds)
done (took 29.630317959 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077715903 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066425018 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069641821 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.086137948 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072962109 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069245684 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063349989 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073641296 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070192868 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07063189 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072570062 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065998311 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069299796 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06368782 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071164638 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065184204 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071374283 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068894567 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.069504782 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071180124 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067502283 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.070556958 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074215506 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.069420274 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.069378682 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.069366062 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073561453 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070838021 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06531048 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068075378 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.067334929 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.079498377 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07163741 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.071458271 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065221085 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064771933 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069183863 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067285002 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.071679004 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073972074 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066927168 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074027154 seconds)
  done (took 4.822554395 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.087039955 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.093491453 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.085800247 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080509935 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.106354094 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080145639 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.089580008 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078048881 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076452827 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.089343014 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072634355 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077915189 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079498544 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074273564 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076739652 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073478169 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078413723 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071896298 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076967246 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076695136 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.090363143 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070150166 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.07739039 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079055853 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072672391 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078655666 seconds)
  done (took 4.008711636 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.071369551 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087465398 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091724243 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.140434191 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.10882399 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08133919 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080938803 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092844266 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100274919 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066996281 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071126562 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.092754658 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096166375 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07410232 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105388835 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.08529493 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079631655 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068707557 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073598157 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.101712507 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089566698 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085971475 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099908245 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087744566 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066189047 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076295292 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074766747 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082803996 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074489192 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078832032 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071441592 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070626337 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.06757882 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079036828 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074329851 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064604017 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088809083 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079554603 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081381744 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10576368 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076971319 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068648684 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.095480846 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133114879 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066086622 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069997018 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070736009 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079300498 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068453252 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097088513 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083159702 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066566844 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085484339 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068144881 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068516949 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083226557 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.06813474 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068504197 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.121942834 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072878232 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088897719 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071838388 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087860939 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066166449 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077542168 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068136728 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067944281 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065583937 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.100812925 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073688244 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.118001695 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067558627 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064494958 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078595312 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077815385 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073040213 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066019371 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086202977 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079166195 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070672122 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077937896 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069727235 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069755429 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.102751789 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065356123 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064552876 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06443692 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068624974 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069978324 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067374556 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079625387 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066153278 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070173923 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082090559 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066653399 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067174222 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069200901 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067697797 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066144712 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077536406 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070432757 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068220287 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079618288 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067783423 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069855097 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.081676505 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075949437 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066162815 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.067553685 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069038665 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.068532994 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070915541 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070028028 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068568001 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073668531 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074151132 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.072594583 seconds)
  done (took 11.097211918 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.162140294 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.151844026 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.067471967 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.147276186 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075190825 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.071062949 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.149631903 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.087314394 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067196729 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068538946 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066325566 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.095431496 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.090776328 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.102568271 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071142364 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067602599 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092675929 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.100361546 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.151056966 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.145664107 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090715856 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07496211 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070326873 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069088035 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068505326 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07615455 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083689401 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075186601 seconds)
  done (took 4.592810796 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.073535523 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082832143 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071144544 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091417817 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085160438 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067231588 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.06922108 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068693394 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084539518 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074145534 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067212083 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071660952 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071243887 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068164944 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068205705 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073533386 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073892425 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066238515 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071358424 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071863559 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077430789 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.092692136 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071511942 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067186149 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069824625 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06770666 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074568698 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076425627 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066746194 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.097398689 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06439142 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071350732 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081241027 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068253768 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066830346 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067735363 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067160375 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066997203 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067272109 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064655873 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064906742 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072166172 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065735307 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072838825 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081049518 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074695235 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068342252 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072417737 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069376673 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063809598 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070196059 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070233387 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069571866 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075464711 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070724223 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069668595 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068337665 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.097397313 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072748768 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.06671607 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066443185 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065239467 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.06854743 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075019421 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084137801 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068613128 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064843551 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.06695927 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071909647 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081324665 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066387451 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072152193 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064073259 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066971457 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069699781 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069980047 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068231104 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065271794 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066822012 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067150643 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067425477 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066624266 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066454499 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069421298 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064694795 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065139921 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.06715586 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.06825475 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073095958 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065722318 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069775235 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068620843 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.06596479 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.06942098 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.072446657 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.06975484 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.086834434 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075302428 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067299788 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064708756 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081398687 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.068656165 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066167677 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072209722 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071509812 seconds)
  done (took 9.435683546 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.089591112 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068487617 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086869435 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093488522 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077188559 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07191958 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080812764 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067653645 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08334922 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066076491 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076160478 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065357618 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080223306 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075900925 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068723557 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077541752 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069654074 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.088009684 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081710918 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065332526 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075758301 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079947748 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079938134 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085524301 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084924118 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085828047 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.07889998 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069489568 seconds)
  done (took 4.140767073 seconds)
done (took 39.999183219 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.995540961 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.156399234 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.981131947 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.248372159 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.043353307 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.100333123 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.085490457 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.972554264 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.004857393 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.029926057 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.29926334 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.343799433 seconds)
done (took 68.241285756 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.027534911 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.116051777 seconds)
    (2/2) benchmarking "String"...
    done (took 2.18586747 seconds)
  done (took 6.224593611 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.575512793 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.976049641 seconds)
    (3/3) benchmarking "different"...
    done (took 2.032080827 seconds)
  done (took 8.494873028 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.068944872 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.603136586 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.229447584 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.974294631 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.980212784 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.318183312 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.784318944 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.446251396 seconds)
  done (took 33.249869584 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.2277804 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.190861079 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.732453462 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.776161123 seconds)
  done (took 16.890948932 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.578559965 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.237214634 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.238820826 seconds)
    (4/4) benchmarking "different"...
    done (took 2.212817061 seconds)
  done (took 11.246014422 seconds)
done (took 88.212543156 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.97724906 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.057508945 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.990362482 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.131347455 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.039859728 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.007406038 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.987596599 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.982806274 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.976674007 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.981997131 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.399744209 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.976492372 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.994299439 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.015971326 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.977378619 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.004436025 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.429490368 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.989469763 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.026832724 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.495966793 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.489542304 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.994045935 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.986374054 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.22237062 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.098900927 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.015173734 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.018259038 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.979866994 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.682789313 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.990459555 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.984542943 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.981226909 seconds)
  done (took 210.800485004 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.978466238 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.167961089 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.22390214 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.016363156 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.49346294 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.172299827 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.119467704 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.552785826 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.983816344 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.009148047 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.098902588 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.979820868 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.10344849 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.928223015 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.97535288 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.981564298 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.275504319 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.12282288 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.977748084 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.168962744 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.981976398 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.897230329 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.877339374 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.086519217 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.003098835 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.043034876 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.99931073 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.993174874 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.163892524 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.25741667 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.005062978 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.983969709 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.177674463 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.852151879 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.998645852 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.996160603 seconds)
  done (took 177.564076995 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.150770516 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.988567832 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.041925949 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.113142747 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.727504951 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.711433489 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.980993626 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.978903186 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.980117242 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.986917023 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.980982325 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.047624976 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.564562159 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.997788882 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.981814644 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.981936738 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.472352112 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.981608463 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.979449487 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.979901448 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.043463677 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.355192401 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.114898468 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.983672024 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.989992683 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.11737738 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.988299979 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.98040101 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.114425558 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.983708232 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.057796485 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.115135034 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.989485244 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.062324884 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.988408989 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.979955675 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.471052858 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.980157196 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.980696604 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.981887724 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.043283281 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.981258709 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.070874089 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.069803668 seconds)
    (44/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.9807484 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.981157142 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.993876524 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.053950884 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.650316621 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.983007817 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.980701319 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.980714936 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.982217029 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.981497384 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.600089398 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.984109265 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.007475041 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.595547833 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.983291371 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.981589197 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.981686004 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.982266626 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.981153667 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.98845888 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.018666619 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.787234835 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.218898698 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.371592032 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.781267106 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.982895138 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.232575964 seconds)
    (71/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.981483482 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.038241136 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.983146297 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.06117097 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.982053743 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.981978374 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.982385365 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.982704949 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.071442698 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.064423667 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.98407592 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.118480382 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.985045583 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.982855436 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.226477333 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.395205929 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.175612556 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.995900801 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.042464653 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.981832168 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.982568866 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.000314354 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.144209174 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.983606049 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.982449689 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.982436487 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.153091348 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.984065996 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.042427153 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.207120977 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.058821783 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.234373983 seconds)
    (103/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.983986848 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.984726695 seconds)
    (105/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.210354532 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.984131708 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.999380454 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.985786638 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.982281954 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.992904693 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.983466371 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.983232195 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.983096186 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.985162544 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.984085948 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.984797915 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.997185449 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.983552336 seconds)
  done (took 433.685356739 seconds)
done (took 826.165104254 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.633741884 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.807144882 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.612567699 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.700852501 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.613840196 seconds)
  done (took 15.289245364 seconds)
done (took 17.209130719 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.998488734 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.001055008 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.988955044 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.008126178 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.0058165 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.003613956 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.035717498 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.027998337 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.024136749 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.003166365 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.012123149 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.006261522 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.010074675 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.025420783 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.018583595 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.012067458 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.005683683 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.997155582 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.011609451 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.00788193 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.00520076 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.006245804 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.006078975 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.010864205 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.01850927 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.009097307 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.001642297 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.00867629 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.007790359 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.009111328 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.044679867 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.01373339 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.038159937 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.015313792 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.014372293 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.01782476 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.004906763 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.031326352 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.007114821 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.044050415 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.015119851 seconds)
  done (took 84.450519708 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.994701687 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.131444176 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.202362841 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.027171242 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.994424965 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.228917623 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.051236611 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.120308989 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.140062541 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.20804079 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.221529996 seconds)
  done (took 25.246995733 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.994353858 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.134828223 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.207760066 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.029416961 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.016979434 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.2084633 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.057729775 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.139545499 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.134929303 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.209022829 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.221997776 seconds)
  done (took 25.28839736 seconds)
done (took 136.906700194 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.364261216 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.019978022 seconds)
  done (took 6.309413537 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.990322906 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.00796192 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.140063013 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.989780831 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.992569694 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.991510389 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.990734354 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.991823538 seconds)
  done (took 18.020513341 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.989972402 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.990069042 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.989404883 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.990599463 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.98968968 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.99022168 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.991041581 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.99009725 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.991129319 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.989947709 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.990493945 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.989816179 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.990953786 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.98958903 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.989515905 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.990630821 seconds)
  done (took 33.769480309 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.990800015 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.989890783 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.99220685 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.990713159 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.990899523 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.990785797 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.993037277 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.99189749 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.991703024 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.991752367 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.991337488 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.991596073 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.99105244 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.991175862 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.992321411 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.991525207 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.992529065 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.992478549 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.99197816 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.991296104 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.99241948 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.992422097 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.996414052 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.991780931 seconds)
  done (took 49.731438315 seconds)
done (took 109.763588928 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.256286566 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.605181701 seconds)
  done (took 8.788792878 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.996118456 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.992532385 seconds)
  done (took 5.986289121 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.992657082 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.993165923 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.992369347 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.99273838 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.992955843 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.99325065 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.992892035 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.993228217 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.992727146 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.993241163 seconds)
  done (took 21.857316018 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.993598111 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.993124071 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.993034515 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.993278666 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.993458777 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.992994773 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.993198112 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.993185945 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.993791245 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.993250249 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.993234128 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.993531507 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.993310293 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.992966833 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.993983861 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.993952477 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.994332352 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.995173462 seconds)
  done (took 37.811822166 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.993881428 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.994670652 seconds)
  done (took 5.917598283 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.994617822 seconds)
    (2/7) benchmarking "second"...
    done (took 1.994920522 seconds)
    (3/7) benchmarking "month"...
    done (took 1.994728123 seconds)
    (4/7) benchmarking "year"...
    done (took 1.993883822 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.995692406 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.995738273 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.995735717 seconds)
  done (took 15.894495162 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.995829505 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.145127983 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.195369403 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.598065901 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.997061903 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.000005681 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.890371922 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.997632144 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.999823908 seconds)
  done (took 21.74867233 seconds)
done (took 119.931197105 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.839033713 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.995823295 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.300150474 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.130207285 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.016681142 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.333599392 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.015946924 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.541568557 seconds)
done (took 44.10302772 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.129399367 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.993816295 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.028251422 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.028256775 seconds)
  done (took 22.980953513 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.995549722 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.325967167 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.020555791 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.014385386 seconds)
  done (took 23.298249803 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.370801805 seconds)
    (2/2) benchmarking "read"...
    done (took 2.347819456 seconds)
  done (took 6.654735853 seconds)
done (took 61.995239781 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.99695004 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.997585479 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.996654361 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.996785557 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.997474962 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.996472536 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.996094755 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.99731913 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.997351352 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.996885588 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.997304908 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.996953754 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.997257961 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99737592 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.997888892 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.997884258 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.996252345 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.998024815 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.997909781 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.997554128 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.997873099 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.998211369 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.997296475 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.997538577 seconds)
  done (took 49.867385497 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.997761001 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.99883643 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.998956099 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.998319353 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.998609629 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.998403224 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.999065923 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.99924014 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.99917978 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.999365721 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.997962825 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.998407022 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.998694871 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.998697563 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.998980011 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.999168847 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.999484018 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.998771427 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.99866705 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.000314789 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.000036467 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.99967638 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.000035238 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.999850473 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.998740113 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.999144131 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.999853198 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.999706341 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.000163782 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.000084593 seconds)
  done (took 61.908048116 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.995449104 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.998697592 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.000025393 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.999678536 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.999822341 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.999654103 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.999877947 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.000030573 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.000382769 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.998938547 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.000326836 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.000309439 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.000170216 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.000821429 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.000550304 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.000440876 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.001038603 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.998802927 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.997312593 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.998890552 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.99858492 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.997992338 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.999334739 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.998214457 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.998709782 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.998793076 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.998661739 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.997615208 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.99959568 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.999150597 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.999552548 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.999794626 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.998645657 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.998398569 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.998970978 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.999373935 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.99871249 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.00261822 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.007595927 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.999815091 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.999826062 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.999343383 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.001031517 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.999805175 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.000174207 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.000578655 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.999839264 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.000465177 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.999337929 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.999870284 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.999938691 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.983461468 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.985499439 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.000085414 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.001250219 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.000663887 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.000412283 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.000760173 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.000611197 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.999768482 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.000082425 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.999640742 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.000196261 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.000314772 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.000529567 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.001582615 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.000331413 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.000988192 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.000565754 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.00305665 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.001478457 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.001724482 seconds)
  done (took 145.900354506 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.00131899 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.001300196 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.001751013 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.001877771 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.001651742 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.000033257 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.001430612 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.002646404 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.999448913 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.000943843 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001179701 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.002009201 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.001629722 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.001853747 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.002046975 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.002338876 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.002178855 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.002872527 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.0029092 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.001560637 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.002744864 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.001994173 seconds)
  done (took 45.974054958 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.003247916 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.003480159 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.001701581 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.003274201 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.002139754 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.001352822 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.989728483 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.001676383 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.002729753 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.002322109 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.003824976 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.002982189 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.002567124 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.003666695 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.002634919 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.003492557 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.002586589 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.002560542 seconds)
  done (took 37.972909441 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.002774055 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.003659729 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.004333531 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.002674852 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.003345078 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.002788874 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.003329284 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.004476221 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.002694933 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.003442033 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.002624131 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.00368085 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.004226436 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.0036472 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.003699916 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.004066315 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.003825375 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.00365569 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.003640058 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.004378402 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.004250069 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.003964459 seconds)
  done (took 46.017911325 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.003839286 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.004570713 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.004439246 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.004318588 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.005309491 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.004437507 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.004448258 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.005306187 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.004533048 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.004825253 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.004043326 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.004473798 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.004797479 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.005130808 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.00604545 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.004615049 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.004411508 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.004344298 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.005216908 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.0047703 seconds)
  done (took 42.033190951 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.005891075 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.006194808 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.005307197 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.005881921 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.005731282 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.992957138 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.006665796 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.003397785 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.006764656 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.005986752 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.006864239 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.00644647 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.006149557 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.006600478 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.007464693 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.007076234 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.006392799 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.006605818 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.00673129 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.006978179 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.007405234 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.006980913 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.998752039 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.995786243 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.007649829 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.006153312 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.995297575 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.00724991 seconds)
  done (took 58.077689576 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.006066687 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.006491915 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.00689766 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.006610132 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.006614027 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.006046117 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.006346558 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.00701202 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.006381538 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.007147093 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.006801294 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.005995254 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.007160109 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.006064952 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.007803678 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.00687923 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.006031481 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.007831368 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.007384758 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.007473127 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.006633703 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.006917933 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.00778248 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.007268152 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.006548071 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.007325087 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.007673098 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.007604636 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.007664396 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.008096996 seconds)
  done (took 62.14822522 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.027909876 seconds)
    (2/2) benchmarking "in"...
    done (took 2.025046484 seconds)
  done (took 5.995731254 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.008104678 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.007534107 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.008473912 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.007695766 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.008370352 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.007575253 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.008396814 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.008148811 seconds)
  done (took 18.007269475 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.009002722 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.01161859 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.008561208 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.008916475 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.008844325 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.015779999 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.009836913 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.010472739 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.010257961 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.010427502 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.014588041 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.01358832 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.017584063 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.01334942 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.009383957 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.010526219 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.01092271 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.012674685 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.010480994 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.010467176 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.013225965 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.01004974 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.009734454 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.009161414 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.009702925 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.012517447 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.020007066 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.010305899 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.011797287 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.010056578 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.016880361 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.010442599 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.010928304 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.998828453 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.01048598 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.010372114 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.018103923 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.011124739 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.010546635 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.009643635 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.012826732 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.003046497 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.01426813 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.019225809 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.01168207 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.01172151 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.010816449 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.011361822 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.011113698 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.015157033 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.019043648 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.011875151 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.010370743 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.010931578 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.013798693 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.010992885 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.013069642 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.01465672 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.018624853 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.018041484 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.016072605 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.033137035 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.021281378 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.012699454 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.011960717 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.022152188 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.03650363 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.014469029 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.013984709 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.011856731 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.019524575 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.012425909 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.011669927 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.012544931 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.024648749 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.019724126 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.012614132 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.012023305 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.012139524 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.013091283 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.013565153 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.012724295 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.012968945 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.001867657 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.022704258 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.038653716 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.013060059 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.013549319 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.014872372 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.014475596 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.018370567 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.016156023 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.013601891 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.013202216 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.014098503 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.016582529 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.013728743 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.013360688 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.013353407 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.02188432 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.013094857 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.01372148 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.017235731 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.021250942 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.01347733 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.013971778 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.014248066 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.01459399 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.021639539 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.013991147 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.014690608 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.013655428 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.015356111 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.019558916 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.013278584 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.018004079 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.022728597 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.022328053 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.016080686 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.019357485 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.018628382 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.017406506 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.024847764 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.039406329 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.01458521 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.019095702 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.020925759 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.02706155 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.018637448 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.015403204 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.017019414 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.013416463 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.014018033 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.017109048 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.012754922 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.015689448 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.016100012 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.015596208 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.016101777 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.015806231 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.018445621 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.017361377 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.018184256 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.016327793 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.01957073 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.015275524 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.018451584 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.02328358 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.016451449 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.016129566 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.016306844 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.018557069 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.017226123 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.017202206 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.01594896 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.016600943 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.015996297 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.017173378 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.018500268 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.017094482 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.016695873 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.018238896 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.02042949 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.017208521 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.016547037 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.016363926 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.017491706 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.01656188 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.017790445 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.017371266 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.019431502 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.01747667 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.021774849 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.01655712 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.017259735 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.01691849 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.017439049 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.018335592 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.020749022 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.029111712 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.021275387 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.027751678 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.016951404 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.025777744 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.018065733 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.017463716 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.017810451 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.018719048 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.017875322 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.017318765 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.017904717 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.021995228 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.039849243 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.028159739 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.021129877 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.019737479 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.024504065 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.02283323 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.023564359 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.019189169 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.02036719 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.021113181 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.018439919 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.019985292 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.017949579 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.022232296 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.019382199 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.018777919 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.022952912 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.019091601 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.01876577 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.019514446 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.019413688 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.02036089 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.019288295 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.019368477 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.019945768 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.02244447 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.027349906 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.022486715 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.019467517 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.006518956 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.021591472 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.019974133 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.020434764 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.020934209 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.023231928 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.02027947 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.021030737 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.026839299 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.020996245 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.020550296 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.021136248 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.019609051 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.022683375 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.020253437 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.0238866 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.029718685 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.022952983 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.020851137 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.025529174 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.020063218 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.022534718 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.021104928 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.021272077 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.021067742 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.021831081 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.021106059 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.020616439 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.027834731 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.020313195 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.022635166 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.021279093 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.024616949 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.023298178 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.022747201 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.021164739 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.024467301 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.030648643 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.027635158 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.021818907 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.024738059 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.023613332 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.023369396 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.026381623 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.023002104 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.034659331 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.03155006 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.02148455 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.021765193 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.022547046 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.024628989 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.023653858 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.021126031 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.029215531 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.02342909 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.023191651 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.02669861 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.023320482 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.022998412 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.029061222 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.023425795 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.025984409 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.023543282 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.022600122 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.023950516 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.022743189 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.025271293 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.023116547 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.024923915 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.027348979 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.023531142 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.024546583 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.022766681 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.030955295 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.022787544 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.024367307 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.03161755 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.025047688 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.024158271 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.024618811 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.023213728 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.024507588 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.025019098 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.023586845 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.024971678 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.023881922 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.027647983 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.034878872 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.028417877 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.03266089 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.026690014 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.035116012 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.024069095 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.025370433 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.024953092 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.027733293 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.033269704 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.02442423 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.024870448 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.032464954 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.025526538 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.02535983 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.029120115 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.024245012 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.024690322 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.025618861 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.026671654 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.030914816 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.027487966 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.025407303 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.025568503 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.02483705 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.025180323 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.028099338 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.026889968 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.025749025 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.026011335 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.026504579 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.025810815 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.025087571 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.025066976 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.026923361 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.025421773 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.025831572 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.034699077 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.026778047 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.027521459 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.029989596 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.027161503 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.034866627 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.027192633 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.026362538 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.027687218 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.026009633 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.029838604 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.026369701 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.026009327 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.026652116 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.025965374 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.028658956 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.038612935 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.034213777 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.02974819 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.029172595 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.027135331 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.027083881 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.037192806 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.052135785 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.02779274 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.02957781 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.031471303 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.033357992 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.02974506 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.033597124 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.030601186 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.035775686 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.028804153 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.027512652 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.031373397 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.041022816 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.028058685 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.02784122 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.027583277 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.031293348 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.030424539 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.027743502 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.02839972 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.031286291 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.029814893 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.040358484 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.028569519 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.03065154 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.028972337 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.028345331 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.028844158 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.02847679 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.030295615 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.030554032 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.029567846 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.029009781 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.030695155 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.033482054 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.028822514 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.032742469 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.039638012 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.029226215 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.02883415 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.030575877 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.029171521 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.03114622 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.029462187 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.028640271 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.032155505 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.028959681 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.030691922 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.03305917 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.038570955 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.030816933 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.029994347 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.030579091 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.033692729 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.029831599 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.029203835 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.031222583 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.037828647 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.034267581 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.041031326 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.04101938 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.031529138 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.032173862 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.038118874 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.038397057 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.031196551 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.030465179 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.031128967 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.033372396 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.032288716 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.032137937 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.030709337 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.031866511 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.036199701 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.031626717 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.031532036 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.031264472 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.031114437 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.033286302 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.033354098 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.037023761 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.032518074 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.031851986 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.030586224 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.03228313 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.03213882 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.033442408 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.03141345 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.032541927 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.032886829 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.03386917 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.036010293 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.032197327 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.032362353 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.033560838 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.032271637 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.031393 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.031802247 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.032658069 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.032570643 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.035839197 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.040411085 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.032354726 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.034436065 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.034349643 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.038166439 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.032626548 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.033322705 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.032267816 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.033037585 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.040809796 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.032259636 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.032994569 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.033261293 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.032812385 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.037656525 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.034357306 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.036433301 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.033500601 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.033798707 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.033558653 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.037546648 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.043394271 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.038572032 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.036930111 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.04159636 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.038001897 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.035541367 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.033407379 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.034173027 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.034086649 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.034910467 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.038096674 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.035823601 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.036439204 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.035295674 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.035748893 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.03351758 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.03568962 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.033020814 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.034559364 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.036716686 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.044483408 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.04350634 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.034135568 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.036988399 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.035499188 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.038446656 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.046697291 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.035346047 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.034982342 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.034280262 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.036407866 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.036374255 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.043986178 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.044171044 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.038949709 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.035696913 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.040657774 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.053238417 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.037214594 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.046069854 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.06706551 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.037137221 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.036023519 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.036055841 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.036507938 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.035949172 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.039653732 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.036050017 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.0412764 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.03625675 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.035687065 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.04354407 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.035784271 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.035900305 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.036715046 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.038186916 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.042023583 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.036247573 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.042716192 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.036444805 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.037476842 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.037285619 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.039513952 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.036833648 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.036696836 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.036150566 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.038685343 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.036260768 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.037049467 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.043997944 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.03700081 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.037958117 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.050697937 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.049692914 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.036357308 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.036770986 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.037090872 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.042745446 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.039387713 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.03805327 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.041381885 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.04610051 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.042128969 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.045560294 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.039201635 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.039336649 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.038581334 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.037685367 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.039061578 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.039248119 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.048534776 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.03890702 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.040029414 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.044834047 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.038235135 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.044072734 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.04387611 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.041575734 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.03695413 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.028988263 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.038342011 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.038058708 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.038646994 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.042501523 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.046937807 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.039237582 seconds)
  done (took 1209.489046566 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.038224887 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.038216767 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.038532073 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.040290356 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.038250346 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.038565813 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.038612454 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.037052947 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.039767087 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.036600947 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.036551815 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.035757779 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.037409533 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.036355407 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.036336704 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.036096448 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.035670307 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.035450391 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.036689701 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.036923505 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.036741381 seconds)
  done (took 44.757753546 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.036020933 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.036811604 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.037379965 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.036907669 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.035583979 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.037137049 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.037973001 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.036199981 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.027182907 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.037150768 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.037150678 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.03766458 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.036544285 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.036334389 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.037381149 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.038179209 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.037312693 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.036906201 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.036664026 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.03607503 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.038119457 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.037102722 seconds)
  done (took 46.775158347 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.038754851 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.036293296 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.03941572 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.037133983 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.037313734 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.037493007 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.036920435 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.039683532 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.035785425 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.038709953 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.043763529 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.045348974 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.037443196 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.038089747 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.036771068 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.034754414 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.181733271 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.036455513 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.035455885 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.03632982 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.035844166 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.041965353 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.032647969 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.028512313 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.027863146 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.029373446 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.027678988 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.030009368 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.027986469 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.02893503 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.033776237 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.027852844 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.02964324 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.031103566 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.02746245 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.028462172 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.032477522 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.028630959 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.027700805 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.028462061 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.037865626 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.052225195 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.028542862 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.028308739 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.035737309 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.02768344 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.028303655 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.035871129 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.037241642 seconds)
  done (took 101.794183598 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.028565092 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.029348505 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.027998071 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.027550173 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.026609489 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.027491452 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.027899276 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.02776202 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.028333401 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.02727481 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.028913694 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.02866214 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.026727052 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.02673094 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.027806166 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.026722396 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.027625012 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.025814986 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.026484751 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.025510011 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.027295007 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.026774585 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.02562902 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.025279795 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.024960277 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.025909545 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.02553261 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.025296607 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.025326439 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.024537623 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.024769047 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.026159103 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.024437193 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.025305611 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.025365899 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.025134871 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.02520894 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.025603501 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.026041706 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.023967803 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.025414911 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.024774542 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.025632698 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.025653478 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.024537074 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.025393023 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.026599903 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.024769393 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.025111623 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.02517857 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.024843895 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.025477449 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.024870808 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.023946279 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.024867909 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.025270813 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.026080885 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.025798151 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.025345571 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.025606105 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.025007403 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.02629598 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.025992208 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.025663522 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.02521667 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.025300806 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.025352945 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.027235757 seconds)
  done (took 139.732660637 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.027409978 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.025508426 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.028263353 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.012647738 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.026663699 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.026755251 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.02673229 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.028589026 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.02650204 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.027176624 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.026466613 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.027811327 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.026593564 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.025958591 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.026739915 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.026827576 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.028486857 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.026018165 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.027309662 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.027561063 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.027013516 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.027665184 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.025796984 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.026837133 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.027252413 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.027760391 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.025222603 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.027655076 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.027174698 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.028023534 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.028479621 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.028739411 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.026012937 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.026238816 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.027546717 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.027210693 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.029201035 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.027059126 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.027037249 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.027227087 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.026739199 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.024984573 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.020298754 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.020057095 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.019877586 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.020040143 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.020297418 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.019506777 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.019661512 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.019926864 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.019259969 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.020360258 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.019035212 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.019131493 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.019209205 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.019173793 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.019433415 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.018643385 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.017149417 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.018453691 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.017370883 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.017663606 seconds)
  done (took 127.469276252 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.014552211 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.015844699 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.017080194 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.016768215 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.014974346 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.015029508 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.015264212 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.015954286 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.015368602 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.015084293 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.015199416 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.015003587 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.016229788 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.016682523 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.014826974 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.015723189 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.014791272 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.014250752 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.014245427 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.014051909 seconds)
  done (took 42.256751127 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.013822934 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.014036692 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.013106391 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.013629442 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.014009034 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.013871879 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.014127534 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.014482154 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.013377054 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.013637967 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.014227428 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.012766879 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.014812774 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.011580089 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.013849097 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.013740937 seconds)
  done (took 34.166738088 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.013977023 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.012494652 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.013321907 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.011876344 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.012023704 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.012729961 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.012939939 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.01268254 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.013334603 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.011683367 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.013394806 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.011875786 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.012303221 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.01227283 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.011468458 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.012312374 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.012079357 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.012431925 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.012852881 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.012512815 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.013087253 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.011983992 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.011029677 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.011357391 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.012331902 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.013111853 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.012134043 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.012397119 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.012706284 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.013601994 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.012835272 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.011676992 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.012253105 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.011797219 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.013057627 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.010998914 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.011362855 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.011045969 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.010944275 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.011018777 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.011682111 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.010818618 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.010771842 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.011164879 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.012494605 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.011125248 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.011259939 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.010523633 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.011194016 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.011513726 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.01059268 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.01026346 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.010667984 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.010653338 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.01155752 seconds)
  done (took 112.604954421 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.010406916 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.009949953 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.010936851 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.011172475 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.009898557 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.009387593 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.010147941 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.010630105 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.011068974 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.010588422 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.01018137 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.009425021 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.00937106 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.010241507 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.009572264 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.009494067 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.010029699 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.009827836 seconds)
  done (took 38.126105897 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.009365318 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.00872349 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.009525862 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.008180702 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.010473845 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.008580809 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.008367378 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.009478267 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.008829595 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.009675673 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.008489184 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.00852643 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.009411042 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.008884741 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.01093694 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.009454056 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.008959686 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.008012712 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.008645978 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.007458121 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.008895307 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.008485688 seconds)
  done (took 46.141474868 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.009540927 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.011410251 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.021367572 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.026192137 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.027012085 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.038487932 seconds)
  done (took 14.075295487 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.008195093 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.007812468 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.010668371 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008206988 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009270876 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.00756074 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007591028 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.00732952 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.007069007 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.008524067 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008105906 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006904692 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008080825 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.007401615 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.00828587 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.00756198 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.008734223 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007398259 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.006942953 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009537549 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006964331 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.007391091 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.007237962 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.008130743 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.00867612 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.007316175 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006249348 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.007409749 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.008237968 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009127671 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.00707156 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006977751 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006803471 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006923966 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008737876 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.007040596 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007757279 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006912236 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006119237 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008294241 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.007335768 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.00669867 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006010141 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007721143 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008607433 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.006285563 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.008037731 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.00749639 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.007193286 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.009595383 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.007039372 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.008023247 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.007715805 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.007794408 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008175642 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008742374 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.00813273 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008378516 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008116173 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009350143 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.99627457 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.008510792 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.007662434 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.0082302 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008068357 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.008611633 seconds)
  done (took 134.450254968 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008433519 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.008363963 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009711682 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.008977576 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.008983612 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.00842338 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008554814 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.010278821 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008440842 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.008610552 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009147332 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008197226 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.010403555 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008949007 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008861382 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.007909487 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008286098 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009270427 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009382792 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.008948551 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.007880285 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009288248 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009493569 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008936963 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009362966 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009672583 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.008769139 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009778523 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.00965757 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009183418 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.009642739 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009142325 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.010561409 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.009189971 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010374553 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.010356518 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009557912 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.010019084 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008768344 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.010131248 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.010243822 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009833501 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.011462849 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.997480085 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.010922116 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.010839073 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009022126 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.012049993 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.010323808 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.011572019 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011075555 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.010722608 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011927112 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009725822 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.010088106 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.010237994 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.010466633 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.012306886 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.011320077 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.011635247 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.01157962 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.011677122 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.011883497 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010224226 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010839074 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.010297914 seconds)
  done (took 134.580858181 seconds)
done (took 2802.260487061 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.117624869 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.024495317 seconds)
  done (took 16.086883988 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.178377418 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.072717967 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.200822695 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.133950656 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.021374737 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.02257392 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.018288031 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.018419082 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.110310071 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.019002273 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.038397405 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.018429006 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.019106391 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.019314323 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.018168358 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.020275941 seconds)
  done (took 54.880277364 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.021360291 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.022514247 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.020176251 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.020703569 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.031879594 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.094116841 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.04191494 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.022873631 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.034918116 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.054124448 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.037737229 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.025831385 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.027706656 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.026092536 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.11077697 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.064854095 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.078641125 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.093779135 seconds)
  done (took 38.77966712 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.099200399 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.025702529 seconds)
  done (took 11.083961797 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.043988689 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.02073865 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.044630415 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.021055574 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.040159695 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.018954754 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.028501012 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.019781717 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.026604554 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.997397543 seconds)
  done (took 72.216147553 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.023379557 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.022385382 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.276646227 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.03003166 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.028630907 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.044933764 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.02207217 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.05329267 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.025172026 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.019355557 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.030357227 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.278997672 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.03117635 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.020447939 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.453891722 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.032365941 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.026058248 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.037844075 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.048289005 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.028057281 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.026440219 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.023802273 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.183765167 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.698582387 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.026601812 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.024399676 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.032307274 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.020353138 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.019444288 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.020693705 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.023761128 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.023578257 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.024813972 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.029785417 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.029117342 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.026044787 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.51131674 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.038575459 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.029068752 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.115307464 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.063566168 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.028127457 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.774946006 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.025369316 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.021206693 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.027868692 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.70166563 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.118002276 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.024131328 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.200262322 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.350110528 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.037418651 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.169112286 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.183789901 seconds)
  done (took 141.140325665 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.01904565 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.255389215 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.172991457 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.023473035 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.277960114 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.231435414 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.023467823 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.067260218 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.027488965 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.222850344 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.282617775 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.123609706 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.022977889 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.021226311 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.022319378 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.02057356 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.164956319 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.088201229 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.025171058 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.021141449 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.046247518 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.22045404 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.143539596 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.018819162 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.046830392 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.226903586 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.136787899 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.123865088 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.837702414 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.020625881 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.083448258 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.023926909 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.021998123 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.023588109 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.174912989 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.114338251 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.106186931 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.02358657 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.023040171 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.022325805 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.69688874 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.223540114 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.118812735 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.144367138 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.271625071 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.235162627 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.635510543 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.023683063 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.648743506 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.19101381 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.224870782 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.219502343 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.141123381 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.025286883 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.311374118 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.023067991 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.025843816 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.24374343 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.241802244 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.13041637 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.02639607 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.027077136 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.022844071 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.261749078 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.02680473 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.114530353 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.025535406 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.024006147 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.117522295 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.124134921 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.249922349 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.242421108 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.054280997 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.334068188 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.519336087 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.226802744 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.089605607 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.244016471 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.026959257 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.023479529 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.109457375 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.867870187 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.283922321 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.266615813 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.225128081 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.054265766 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.676942199 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.024767073 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.210544494 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.214023439 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.25979382 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.268013897 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.261130115 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.403828555 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.02711028 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.025334342 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.33058394 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.142468742 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.018203259 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.375686339 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.254172567 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.51515148 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.051681694 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.371322081 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.154095029 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.027526467 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 3.102372172 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.026930334 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.215252396 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.064811341 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.027690152 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.024598018 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.215682598 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.934573555 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.026454491 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.746304224 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.086092163 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.029715379 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.230122595 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.029435519 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.270660174 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.029560568 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.258376364 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.667798467 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.056416168 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.200424842 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.269583109 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.659397132 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.265907419 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.26781946 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.13949357 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.248900496 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.840691628 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.026877715 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.288118697 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.028245046 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.027518875 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.194245075 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.030292382 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.169030132 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.030029258 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.292421021 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.047135013 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.254732613 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.03042298 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.265630306 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.05833694 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.077023299 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.03011655 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.157729704 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.030301102 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.866725988 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.185177568 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.029993795 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.029798239 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.618055145 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.029104392 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.176503594 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.252337059 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.048619061 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.095794417 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.592784426 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.021596386 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.115358 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.049940158 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.667114651 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.028825264 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.28206292 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.007673414 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.503728361 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.02860096 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.262892766 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.213392204 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.03107236 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.030007256 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.874327021 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.028326777 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.028124403 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.184453782 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.078856413 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.932464872 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.229817258 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.031553549 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.156691612 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.0331257 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.108775639 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.368691565 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.030177836 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.030638931 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.030220954 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.030653782 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.028790948 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.238190439 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.056112926 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.462394397 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.166586947 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.28435034 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.335317306 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.226386015 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.069688368 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.034858202 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.252298399 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.03267229 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.091089871 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.032135344 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.038040717 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.256795308 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.033240681 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.222902032 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.266650274 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.078063412 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.076919486 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.032244506 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.030384504 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.939969263 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.177694385 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.11632044 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.032978274 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.030795675 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.143760286 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.149903693 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.21195494 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.850164768 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.211485657 seconds)
  done (took 937.021018348 seconds)
done (took 1273.153708584 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.030553006 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.032000431 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.033137198 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.035016411 seconds)
  done (took 30.094794198 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.032149789 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.031980725 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.032950258 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.034369888 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.032795042 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.032531619 seconds)
  done (took 14.159041077 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.034351608 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.034699524 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.034224954 seconds)
  done (took 23.067148201 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.458322875 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.436248212 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.105594438 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.172670692 seconds)
  done (took 11.137181777 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.037018599 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.033473902 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.033783803 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.032927581 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.033360412 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.034183067 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.034522532 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.035031897 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.035190398 seconds)
  done (took 20.28148145 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.277310929 seconds)
done (took 104.981346914 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.122070242 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.280892994 seconds)
    (3/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.000820773 seconds)
    (4/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.354028222 seconds)
    (5/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.039130103 seconds)
    (6/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.772883775 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.172482611 seconds)
    (8/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.143757692 seconds)
    (9/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.055632191 seconds)
    (10/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.509160978 seconds)
    (11/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.320554519 seconds)
    (12/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.111503838 seconds)
    (13/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.319269322 seconds)
    (14/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.346891722 seconds)
    (15/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.575153598 seconds)
    (16/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.2257122 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.047130184 seconds)
    (18/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.032944118 seconds)
    (19/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.209337758 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.047681018 seconds)
    (21/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.376345179 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.146292503 seconds)
    (23/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.117008844 seconds)
    (24/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.033546459 seconds)
    (25/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 4.604848531 seconds)
    (26/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.439825726 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.150187989 seconds)
    (28/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.032897386 seconds)
    (29/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.197557859 seconds)
    (30/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.123181398 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.273522108 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.048177836 seconds)
    (33/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.544497177 seconds)
    (34/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.165808418 seconds)
    (35/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.0364084 seconds)
    (36/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.977384321 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.135109812 seconds)
    (38/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.173629192 seconds)
    (39/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.14614223 seconds)
    (40/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.193593403 seconds)
    (41/341) benchmarking ("sort", BigInt, false)...
    done (took 7.038287916 seconds)
    (42/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.03696763 seconds)
    (43/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.05032324 seconds)
    (44/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.160541101 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.123557498 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.261603995 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.062369292 seconds)
    (48/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.218738766 seconds)
    (49/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.018043195 seconds)
    (50/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.159736565 seconds)
    (51/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.21355896 seconds)
    (52/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.940264773 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.932867394 seconds)
    (54/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.056115987 seconds)
    (55/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.408932561 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.456440528 seconds)
    (57/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.298995715 seconds)
    (58/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.04924254 seconds)
    (59/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.162821894 seconds)
    (60/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.040012598 seconds)
    (61/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.195309111 seconds)
    (62/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.365577346 seconds)
    (63/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.041654626 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.35666639 seconds)
    (65/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.038497329 seconds)
    (66/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.196238198 seconds)
    (67/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.344424754 seconds)
    (68/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.149743549 seconds)
    (69/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.037955262 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.787580139 seconds)
    (71/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.174768331 seconds)
    (72/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.047272927 seconds)
    (73/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.144578936 seconds)
    (74/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.040980749 seconds)
    (75/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.046682414 seconds)
    (76/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.393334337 seconds)
    (77/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.502050841 seconds)
    (78/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.292237385 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.364116452 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.51924493 seconds)
    (81/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.245476659 seconds)
    (82/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.234321572 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.041230199 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.151983362 seconds)
    (85/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.665923479 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.304023222 seconds)
    (87/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.098999028 seconds)
    (88/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.163128752 seconds)
    (89/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.154429988 seconds)
    (90/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.126973405 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.172045452 seconds)
    (92/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.047482351 seconds)
    (93/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.04717089 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.206651624 seconds)
    (95/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.129610815 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.875500361 seconds)
    (97/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.048219196 seconds)
    (98/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.279673329 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.042777459 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.803152378 seconds)
    (101/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.345718022 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.255999695 seconds)
    (103/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.933569899 seconds)
    (104/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.194213347 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.491728951 seconds)
    (106/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.038602532 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 3.47551231 seconds)
    (108/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.253789683 seconds)
    (109/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.433300143 seconds)
    (110/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.038335241 seconds)
    (111/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.353234761 seconds)
    (112/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.043608919 seconds)
    (113/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.050519508 seconds)
    (114/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.300448151 seconds)
    (115/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.443198143 seconds)
    (116/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.271282423 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.095243082 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.369473973 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.164437602 seconds)
    (120/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.186045163 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.167894758 seconds)
    (122/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.113812685 seconds)
    (123/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.040612634 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.337818227 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.304665536 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.349325422 seconds)
    (127/341) benchmarking ("sort", Float32, false)...
    done (took 5.706696926 seconds)
    (128/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.15807726 seconds)
    (129/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.439168328 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.903302097 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.045231362 seconds)
    (132/341) benchmarking ("sort", Int8, false)...
    done (took 6.395625232 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.170685905 seconds)
    (134/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.297353895 seconds)
    (135/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.039000796 seconds)
    (136/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.041908962 seconds)
    (137/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.193762592 seconds)
    (138/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.642174804 seconds)
    (139/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.338022246 seconds)
    (140/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.358106302 seconds)
    (141/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.058461236 seconds)
    (142/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.040074498 seconds)
    (143/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.192938321 seconds)
    (144/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.349927 seconds)
    (145/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.053936434 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.134620713 seconds)
    (147/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.300345144 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.304188971 seconds)
    (149/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.307030087 seconds)
    (150/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.119697463 seconds)
    (151/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.372883806 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.291832138 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 2.257810081 seconds)
    (154/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.432869576 seconds)
    (155/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.190105681 seconds)
    (156/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.138655723 seconds)
    (157/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.038594476 seconds)
    (158/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.047464905 seconds)
    (159/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 9.476837984 seconds)
    (160/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.289526201 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.059634944 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.054576028 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 5.686133425 seconds)
    (164/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.440471458 seconds)
    (165/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.294986971 seconds)
    (166/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.131206098 seconds)
    (167/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.196845686 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.164843944 seconds)
    (169/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.335623133 seconds)
    (170/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.867136084 seconds)
    (171/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.242644329 seconds)
    (172/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.241349395 seconds)
    (173/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.638629836 seconds)
    (174/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.534045428 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.918774766 seconds)
    (176/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.416226649 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.389408728 seconds)
    (178/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.139315035 seconds)
    (179/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.246771308 seconds)
    (180/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.129707313 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.179551553 seconds)
    (182/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.045498379 seconds)
    (183/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.524942286 seconds)
    (184/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.275859261 seconds)
    (185/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.495923117 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.059442815 seconds)
    (187/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.308893596 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.291768936 seconds)
    (189/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.042492592 seconds)
    (190/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.043643515 seconds)
    (191/341) benchmarking ("collect", "all", Float64, false)...
    done (took 3.563076545 seconds)
    (192/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.737098687 seconds)
    (193/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.157398486 seconds)
    (194/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.221904039 seconds)
    (195/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.182809505 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.041935876 seconds)
    (197/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.146294679 seconds)
    (198/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.241611823 seconds)
    (199/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.492269775 seconds)
    (200/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.047231996 seconds)
    (201/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.108963968 seconds)
    (202/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.973222178 seconds)
    (203/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.834783585 seconds)
    (204/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.038837945 seconds)
    (205/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.126893304 seconds)
    (206/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.158763482 seconds)
    (207/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.544614077 seconds)
    (208/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.385648222 seconds)
    (209/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.061750451 seconds)
    (210/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.153924021 seconds)
    (211/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.193653763 seconds)
    (212/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.554170334 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.371618433 seconds)
    (214/341) benchmarking ("sort", Float64, false)...
    done (took 5.762218483 seconds)
    (215/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.049124534 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.190545888 seconds)
    (217/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.058016041 seconds)
    (218/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.373933612 seconds)
    (219/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.223636217 seconds)
    (220/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.435914423 seconds)
    (221/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.423018741 seconds)
    (222/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.129398214 seconds)
    (223/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.250842654 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.463751963 seconds)
    (225/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.24856563 seconds)
    (226/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.351945398 seconds)
    (227/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.060638838 seconds)
    (228/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.044066323 seconds)
    (229/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.14915405 seconds)
    (230/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.143266834 seconds)
    (231/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.672969892 seconds)
    (232/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.347712844 seconds)
    (233/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.043933468 seconds)
    (234/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.262333272 seconds)
    (235/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.023035589 seconds)
    (236/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.070973042 seconds)
    (237/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.260101381 seconds)
    (238/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.660925157 seconds)
    (239/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.332458916 seconds)
    (240/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.06163442 seconds)
    (241/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.128594562 seconds)
    (242/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.060344854 seconds)
    (243/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.421466014 seconds)
    (244/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.338532047 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.42872724 seconds)
    (246/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.446746114 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.285476044 seconds)
    (248/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.12965504 seconds)
    (249/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.50880684 seconds)
    (250/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.363743887 seconds)
    (251/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.327088148 seconds)
    (252/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.059775 seconds)
    (253/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.125937988 seconds)
    (254/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.046650369 seconds)
    (255/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 3.70824622 seconds)
    (256/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.354400783 seconds)
    (257/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.302679346 seconds)
    (258/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.267252861 seconds)
    (259/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.758715341 seconds)
    (260/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.17313096 seconds)
    (261/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.167629176 seconds)
    (262/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.758333643 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.105002244 seconds)
    (264/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.07586673 seconds)
    (265/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.321731481 seconds)
    (266/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.922398131 seconds)
    (267/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.247827795 seconds)
    (268/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.817934133 seconds)
    (269/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.059209504 seconds)
    (270/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.810541852 seconds)
    (271/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.047547682 seconds)
    (272/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 3.876252834 seconds)
    (273/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.051177618 seconds)
    (274/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.097449424 seconds)
    (275/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.251255701 seconds)
    (276/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.138077763 seconds)
    (277/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.144367026 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.07282752 seconds)
    (279/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.126786772 seconds)
    (280/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.048145758 seconds)
    (281/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.116421452 seconds)
    (282/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.727124809 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.200714005 seconds)
    (284/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.579654934 seconds)
    (285/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.419454366 seconds)
    (286/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.05056866 seconds)
    (287/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.071461091 seconds)
    (288/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 4.057868482 seconds)
    (289/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.512011754 seconds)
    (290/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.136703458 seconds)
    (291/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.431632267 seconds)
    (292/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.060165247 seconds)
    (293/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.515249099 seconds)
    (294/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.45554426 seconds)
    (295/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.064177207 seconds)
    (296/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.804102084 seconds)
    (297/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.129871717 seconds)
    (298/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.440794071 seconds)
    (299/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.052167043 seconds)
    (300/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.300959713 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.458803973 seconds)
    (302/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.052858341 seconds)
    (303/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.361646509 seconds)
    (304/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.353671566 seconds)
    (305/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.054659888 seconds)
    (306/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 10.023787672 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.512564336 seconds)
    (308/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.028711908 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.947347738 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.969297821 seconds)
    (311/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.366211561 seconds)
    (312/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.05276954 seconds)
    (313/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.117384735 seconds)
    (314/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.053342067 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.816075402 seconds)
    (316/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.75912313 seconds)
    (317/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.38672173 seconds)
    (318/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.060355174 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.982365754 seconds)
    (320/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.258536267 seconds)
    (321/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.475904395 seconds)
    (322/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.920883836 seconds)
    (323/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.294953834 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.984849257 seconds)
    (325/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.279286876 seconds)
    (326/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.168401622 seconds)
    (327/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.161028712 seconds)
    (328/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 3.999273981 seconds)
    (329/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.843765181 seconds)
    (330/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.220349547 seconds)
    (331/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.267946911 seconds)
    (332/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.444872168 seconds)
    (333/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.135459288 seconds)
    (334/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.952999298 seconds)
    (335/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.457164138 seconds)
    (336/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.964261058 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.1934844 seconds)
    (338/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.26626851 seconds)
    (339/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.057411489 seconds)
    (340/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.07030591 seconds)
    (341/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.065597411 seconds)
  done (took 1159.635433795 seconds)
done (took 1161.709668298 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.078281048 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.057129973 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.551038466 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.06794474 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.057409666 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.059397165 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.559252337 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.088319208 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.074252824 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.563304175 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.067776821 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.056425876 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.072557405 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.091566729 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.070081769 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.070920182 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.063347502 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.0825523 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.090913277 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.064928944 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.109059591 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.063453833 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.056926929 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.111303873 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.047423478 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.070722434 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.079531518 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.109402718 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.109991202 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.06077454 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.063650245 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.411886068 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.108694074 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.06368325 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.070040198 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.073508306 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.065016321 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.072824513 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.081315846 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.073169114 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.058452205 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.068838545 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.063364428 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.06171051 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.057809977 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.056869064 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.060583183 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.184986088 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.07275746 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.39383313 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.122716719 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.080383863 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.111927581 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.06089357 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.060766616 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.060970907 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.109910549 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.066136247 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.062268596 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.393035937 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.153334922 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.075193281 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.393868214 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.12206311 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.070373705 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.068292563 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.059346109 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.080679029 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.411225655 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.601449231 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.0923301 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.080364074 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.061491668 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.062185923 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.073660797 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.560620278 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.076775585 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.631172358 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.087748514 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.075422056 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.068148212 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.062712035 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.06194132 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.078603482 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.084367913 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.0602802 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.066374416 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.067413153 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.074947987 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.412466376 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.104462558 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.550940443 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.068258969 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.083626697 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.083762997 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.62942574 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.090977977 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.081950127 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.065591159 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.411086862 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.10213568 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.083383713 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.063701826 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.073790567 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.176237852 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.084023718 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.083394389 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.061395326 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.084403616 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.068544967 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.061677416 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.074492598 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.082861789 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.09679428 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.079384689 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.061430685 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.070152995 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.069845665 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.083087988 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.070159001 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.068591223 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.073879525 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.062076264 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.113024271 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.08337709 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.077156839 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.177151149 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.070123097 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.187632027 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.076654735 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.069093733 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.063054764 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.396198849 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.106400669 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.085299696 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.070033117 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.086236028 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.08537894 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.080577781 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.065262075 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.078217352 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.066324202 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.115259625 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.063518214 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.088225061 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.114843534 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.077860794 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.069982411 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.084426917 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.098260156 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.084623223 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.070837657 seconds)
done (took 324.775109589 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.110685411 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.062714586 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.140870701 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.063540667 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.130719652 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.118506552 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.06288506 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.063445861 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.063096524 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.444496806 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.063404174 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.067672648 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.062077052 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.06381372 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.111659536 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.063496761 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.064249298 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.295249495 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.06417261 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.123478763 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.06435256 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.064585766 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.064059557 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.453583296 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.062342564 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.063635123 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.125306532 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.064755695 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.30382416 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.063232243 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.065574139 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.305011581 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.123391994 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.077541217 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.071785576 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.072049903 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.136010588 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.075414178 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.114939078 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.111360208 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.143927941 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.09814057 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.0638158 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.062053822 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.067276115 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.066601729 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.06120304 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.097847428 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.065545273 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.069954177 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.297698775 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.072541925 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.070639665 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.064557475 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.065924958 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.081327952 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.065949878 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.06601661 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.124751627 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.0662359 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.115604489 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.455225219 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.446572107 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.06676376 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.065883844 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.067157538 seconds)
  done (took 196.707224559 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.133219347 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.152010826 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.132785179 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.071920649 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.118250687 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.130906175 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.06079996 seconds)
  done (took 16.79615503 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.073073913 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.066956111 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.090239061 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.091437915 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.066150477 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.209110553 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.078808386 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.072968818 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.092913767 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.068888695 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.402446144 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.090832797 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.073749197 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.05599214 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.07967288 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.096981175 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.069634372 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.067538484 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.166305087 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.146223551 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.073754323 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.075741595 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.096838863 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.079717119 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.068908792 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.067195141 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.067825248 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.075326801 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.068387553 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.068719084 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.068232155 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.082811536 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.069010587 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.067366104 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.069620906 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.070086381 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.066777877 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.069306689 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.068684986 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.068576611 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.06938613 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.06891565 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.068401702 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.069983704 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.068903519 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.09307401 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.069571079 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.058310274 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.069287843 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.069674019 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.098656579 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.069220129 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.068518142 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.076800511 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.111382488 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.07575764 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.069302788 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.069886433 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.069332093 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.069259912 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.070316949 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.150288344 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.092822034 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.070190593 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.092946792 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.107502345 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.07039333 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.071266909 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.070029042 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.094802569 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.071189145 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.093775216 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.069912807 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.168211137 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.070973673 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.213991881 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.09369614 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.073188429 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.074185757 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.070921732 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.078141159 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.070824336 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.073019378 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.077987377 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.075741446 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.071246334 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.071147413 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.072636781 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.079123436 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.072384845 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.1193656 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.071255528 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.070357061 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.173603262 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.073791196 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.171114476 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.100679954 seconds)
  done (took 224.499527724 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.079532364 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.070778962 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.077852428 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.074033984 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.074042707 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.078224713 seconds)
  done (took 14.457548764 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.076214223 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.076744226 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.072845352 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.073124922 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.074471741 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.075986046 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.074028981 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.075426363 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.073274624 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.0735023 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.074452664 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.074915301 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.074125165 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.074062577 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.065480164 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.073389318 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.074827245 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.074789711 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.065455743 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.074833194 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.311291221 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.074047025 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.074249045 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.077182576 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.079307758 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.075657175 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.085267691 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.075492471 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.076408876 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.082809873 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.078503686 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.075960061 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.078488334 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.081584502 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.079450468 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.078624817 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.078134769 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.075816928 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.076046853 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.075641353 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.075176447 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.075517241 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.076540386 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.075935043 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.078242713 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.081804553 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.078623581 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.086243188 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.077357015 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.075773586 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.07720094 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.076849483 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.076946882 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.077226873 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.080466465 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.082738759 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.079044989 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.076966599 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.076096375 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.079108418 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.080273655 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.07696812 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.079361656 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.081341881 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.084675174 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.076821993 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.080422703 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.093858643 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.076262741 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.078289892 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.076899313 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.078383601 seconds)
  done (took 152.794465813 seconds)
done (took 607.248952722 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.190265761 seconds)
  done (took 9.195961698 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.122677463 seconds)
  done (took 9.231757583 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.229397766 seconds)
  done (took 12.236443198 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.083423685 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.120070662 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.081316049 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.0823503 seconds)
  done (took 30.3879897 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.372789867 seconds)
  done (took 9.379729375 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.087079974 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.075494615 seconds)
  done (took 16.240401452 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.220607452 seconds)
  done (took 9.228408754 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.121142564 seconds)
  done (took 9.14624754 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.087183049 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.108929831 seconds)
  done (took 16.222211428 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.078281103 seconds)
  done (took 9.08490812 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.914748427 seconds)
  done (took 10.01478282 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.092803486 seconds)
  done (took 9.119441943 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.099494036 seconds)
  done (took 9.106608367 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.926387254 seconds)
  done (took 9.934977861 seconds)
done (took 170.542291992 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.083348465 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.077841551 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.077983703 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.076300323 seconds)
  done (took 30.321665554 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.11378874 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.114377324 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.126328493 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.113205233 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.10391481 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.104226613 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.115023603 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.116790602 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.104100366 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.111027953 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.113156878 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.1106456 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.115107581 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.122892307 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.122732651 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.111448044 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.113026869 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.118929943 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.104698592 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.12299311 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.100241409 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.117808172 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.078991704 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.080018018 seconds)
  done (took 52.662198645 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.2696656 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.151194639 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.233791323 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.125663845 seconds)
  done (took 10.788986469 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.078935235 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.144013152 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.130717815 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.125444988 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.130692278 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.182669675 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.131862035 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.21587389 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.208213745 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.206878962 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.087674505 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.102038886 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.105433305 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.125262472 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.182666152 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.080212491 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.080465348 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.166219125 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.143195351 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.326084537 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.081295234 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.134838563 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.132073987 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.133177784 seconds)
  done (took 53.445575635 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.081463322 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.088032052 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.088161988 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.082002491 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.082248327 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.082563455 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.088343202 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.084063365 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.102902672 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.087922445 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.081550494 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.082250242 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.083416237 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.057245951 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.082657988 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.09521111 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.096642254 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.082155938 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.089866405 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.089142458 seconds)
  done (took 43.71792467 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.080186654 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.927561082 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.429017003 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.333628338 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.081299797 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.082581091 seconds)
  done (took 32.944691655 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.096597563 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.103304032 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.087083555 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.105955961 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.130801172 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.094689223 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.144677083 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.244978231 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.092798385 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.139813369 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.094799536 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.088414696 seconds)
  done (took 27.433902287 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.08097803 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.084383037 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.086223701 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.095448428 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.09819963 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.091139958 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.090315962 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.082506704 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.097121394 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.100711301 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.091108031 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.094290015 seconds)
  done (took 47.104408573 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.295947921 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.308358214 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.318201051 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.638399096 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.411812441 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.068542438 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.366687056 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.295268514 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.79120542 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.808687601 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.380127524 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.068777333 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.036963105 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.009240152 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.987050771 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.325887235 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089066997 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.942357519 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.362494698 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.136738515 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086729286 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.084113781 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.087754611 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.373643027 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.412710904 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.093589094 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.296962467 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101518556 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.083880627 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.302801592 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.641049692 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.137280055 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.295147501 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.342877187 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.444863762 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.13918103 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.191555429 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.20475977 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.130143457 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.119682424 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.095012681 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.094938596 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.617545537 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.096415991 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.357501121 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086425467 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.088413631 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.175084883 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010445192 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.550908722 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204992915 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.086196747 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.119487913 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.517002701 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205280532 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.329119441 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.089040773 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.211318843 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.142653716 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.479674848 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.201934411 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.200195724 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297852285 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.01125345 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.490603757 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.216430312 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.087523856 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.090901774 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.786243199 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.328764558 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.167265337 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.565122762 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.851052244 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.086780167 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.088768358 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.129775104 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.175321957 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.089845749 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.387484363 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.06211551 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.01276874 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.185404798 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.483639724 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.091934009 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.085940748 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.093643966 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.933141111 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.012560542 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.183501381 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.485043435 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.421962895 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.087627948 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.08848718 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.109076771 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089579488 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.035155918 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.59346159 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.152660369 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.0139937 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.652468863 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.614630814 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.052943486 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.509170309 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.129629645 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.368919972 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.246185725 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.492814581 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.298850781 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.334270242 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.629155322 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.092801091 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.650569279 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.169131881 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164413234 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089171342 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.645037272 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.205727991 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.560366123 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.21112054 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.08814917 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.015661839 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.099153851 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292115013 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.626422135 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141910374 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.088448203 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.093757246 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.088131797 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.091754594 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.196740813 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104817681 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.389389962 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.166312235 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.090260702 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.027471665 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.095665044 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.377626661 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.640720794 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.148699288 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.350602804 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.35955113 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.78917203 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.685909446 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.034041522 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.372538349 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.164040317 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156895727 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.668915336 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.22562004 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.187289385 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089467245 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.223134315 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.100655855 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.091814826 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.370409641 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.503708935 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.516531188 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.132917987 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.076923524 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.114094899 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.224146302 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.330518353 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196818639 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.11549519 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.095533332 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.17335387 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.31870809 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.090761427 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.01756246 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359941787 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.336905648 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.388803051 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.508665305 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.218084047 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.164900189 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.102313775 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.304225109 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.172788823 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.739340006 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.637630276 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.333900357 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.605339985 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.054280136 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.73693118 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.509619437 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.480726135 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.106325654 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.545692224 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.218564907 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.741312968 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.122085594 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.620435508 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.017854627 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096348619 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.532641551 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.053548542 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.421890314 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.292679503 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108985201 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.093058254 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.093244919 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101132422 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054048165 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.199112803 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161325854 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165501144 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.019396353 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.678319127 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.130529864 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.095234725 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.093502223 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.501522342 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.007887253 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.048166635 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.092772635 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.169814023 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.839303062 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.641297964 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.097514828 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.096811583 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.690269967 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.09899308 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.997904815 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.093531384 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.017807954 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.123171809 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.530495326 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.801365673 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.389654712 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.161125842 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.171045378 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.082305323 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.094453304 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.79524878 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.102826753 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.795009892 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.383751544 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.374065173 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.552802123 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.165169607 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.294093734 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.108857266 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.0956698 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.623143164 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.123541622 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096215936 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.298466012 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.609465968 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.59700773 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.74471404 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.179828506 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.095122609 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.381778684 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.101925772 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.639302475 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.79540021 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.11061 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.09571355 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.3646481 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.781076385 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.097471861 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.072038799 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103319027 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.308523766 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.298859023 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.393459451 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.402112033 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.550306604 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.021797834 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.101831733 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.138777503 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.341302333 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.095078072 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.130720145 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.539956454 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.197959797 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.528481603 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.390988211 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.660747868 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.737415205 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.367223265 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.165387929 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.108544941 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.762175378 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.238037486 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.030585064 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.214140393 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.02303301 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.846648166 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.391444377 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.113298403 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.38427109 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.081855082 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.442785783 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.398986332 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.542821414 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.150467768 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.125500147 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.097156744 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143725371 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.097183965 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.229327795 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.212455068 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.105199716 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.585686273 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135522067 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.144291711 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.102944015 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.63189693 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120873091 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.101285836 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.792036715 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.123098938 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216653641 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.169487696 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.881237469 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.654050913 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.159811289 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.975492523 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.745343046 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.385053275 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.157363646 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.653034453 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141119802 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.503068309 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.099418522 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.31188907 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.1038946 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.606487969 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144039854 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.375773892 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.060971734 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.312730842 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.326495751 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.127044468 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.104595456 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.025676171 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.207039442 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.975926002 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.084022233 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.103125666 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.781521534 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.668342978 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.248058863 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.690960541 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.923181619 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.102712802 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.51297699 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.526103586 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.658790523 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133618972 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101865889 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.587810795 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.239944757 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.561741377 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.397891922 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.107849247 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.126185561 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.313411601 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226167922 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.019395843 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.589690034 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684900602 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.802305141 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.1117603 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.304547909 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.581479165 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.336965723 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.134993953 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.179671883 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.506098614 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.393790837 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.173614901 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.027565169 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.101518518 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.49846863 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.607592415 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.198515087 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.330363745 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.422089427 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.619974503 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.693783084 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.484972899 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.562978412 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.520950801 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.497660369 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.321656775 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.585164696 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.433247616 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.980695682 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.514237022 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.315608654 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194480539 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.401108593 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.977530381 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.812222193 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.346702141 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.107709198 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.031113245 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.310706518 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.110419769 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.484142985 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.629321573 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.349840513 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.541928922 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.583318139 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.642095616 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.23762364 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.127097181 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.069805784 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.127012779 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.123999318 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.103323905 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.596786939 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.398143018 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.115356854 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043563354 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.775173722 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.030132059 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.316901763 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.230705236 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.126501226 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.660567507 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.51475102 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.217144349 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.411526486 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.292558685 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.139819436 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.030537419 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.85077446 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.051779955 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196335792 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.530209289 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120912435 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.106353251 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.307915727 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.033578584 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150480135 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.110067994 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309789363 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.689306998 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.393933189 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.234421029 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355066221 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.409047674 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.022884302 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.142977425 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.378302382 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.032555337 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.684366198 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.81007804 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.144973839 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176480158 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105149867 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.108359728 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.376656601 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.583970509 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.21277996 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.755639074 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.137593029 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.128875546 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.608084228 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.209649328 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.107754904 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.111283961 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.519093373 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.338583202 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.106642481 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.095369043 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.319586492 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188451962 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.302499475 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.179482874 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.621155028 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.11171934 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.029612017 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.218544416 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.055900123 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105854472 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.930325434 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.159843333 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.107582835 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.397178457 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.774198389 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.310611323 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.502622607 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.982354098 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.238866752 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.149021644 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.109756669 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.116638714 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.505102791 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.413758874 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.107119798 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.381661333 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.161814367 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.113383205 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.769520967 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.076257559 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.108047917 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.813212511 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.085772427 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.840362824 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.503001837 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.248998355 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109842414 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.110751639 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.031891152 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.106655007 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.283679675 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.104406155 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.11168335 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.485124505 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.555693259 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.204214936 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110969362 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.10705042 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.111881803 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.318920821 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.621267129 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122449674 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.80660314 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.309304509 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.114159764 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.595947759 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.550155042 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.316471361 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.146346449 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.245231885 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.348948664 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.647234369 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.34896862 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.077370836 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.334344339 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.108298612 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.379256114 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.381207737 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.107856927 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.318947778 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.656897802 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.391292962 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.463456821 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.420289381 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.17329292 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.244703068 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.00862601 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.108841577 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.11117369 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.372398679 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162941019 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.108303641 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.116907487 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.662654215 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.79480739 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.685853413 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263411365 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.536410284 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.962166724 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.865161269 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.111006221 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.034409153 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.108219047 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.133135547 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.11154905 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.034462723 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.872426004 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.833775256 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.321783768 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.418015308 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.03542416 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.313095734 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.71212352 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.035272114 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.076162395 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.108334939 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.370564552 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.037456354 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.112128886 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.063460579 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.503526136 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.760816061 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.377080428 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.109470992 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.054214832 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.11345852 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.111338981 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.108845177 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.193220331 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.111138318 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226650637 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.37380855 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.623121601 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.215933644 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.748718775 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.841317517 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.048471604 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.153683388 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.727340918 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.682117719 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.497045152 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.240185084 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.822151045 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.056759833 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.1136455 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127332596 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.371027228 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.115092636 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.114134745 seconds)
  done (took 2222.815191517 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.113661788 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.164478984 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.184243932 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.210808415 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.218233668 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.161041549 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.176768925 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.210223339 seconds)
  done (took 59.478639044 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.111961509 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.418759821 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.157908648 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.115729263 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.112051744 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.123139337 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.29763496 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.138565536 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.112346425 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.1169951 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.11210396 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.115213271 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.111858417 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.113355205 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.120400074 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.373177566 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.132926192 seconds)
  done (took 80.837545622 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.16612463 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.971571272 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.115292807 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.889958109 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.139947652 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.401934982 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.114309108 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.114968772 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.436709677 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.410941348 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.173095689 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.125045519 seconds)
  done (took 95.1383435 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.114138277 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.114054016 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.113044498 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.113137073 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.11299613 seconds)
  done (took 12.608871344 seconds)
done (took 2771.370350556 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.356167133 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.204991317 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.184530121 seconds)
  done (took 6.43025555 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.255704166 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.306673905 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.419338128 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.424582345 seconds)
  done (took 11.45295343 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.399244258 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.490861505 seconds)
  done (took 6.932204308 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.475822325 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.134813912 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.499366714 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.115651917 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.118315676 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.118680877 seconds)
  done (took 23.399873855 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.114529783 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.114608981 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.115329925 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.114263999 seconds)
  done (took 10.500471983 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.111626865 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.90661295 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.113599798 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.125930646 seconds)
  done (took 22.301111771 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.316195454 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.125831406 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.88587707 seconds)
  done (took 10.369489659 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.736783782 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.565252241 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.726554142 seconds)
  done (took 10.072210029 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.25827059 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.950776514 seconds)
  done (took 8.253307887 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.259518331 seconds)
  done (took 4.302496201 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.939581021 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.427590641 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.591002512 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.63380408 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.701071281 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.333161194 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.425616862 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.378818656 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.514844357 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.510574831 seconds)
  done (took 27.500473384 seconds)
done (took 158.022308915 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.536779436 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.135033402 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.322350244 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.482917175 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.353593173 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.322317042 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.404068582 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.470788532 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.154654174 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.141870474 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.481499884 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.352180822 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.351264228 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.135733868 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.362249655 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.138664674 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.326256613 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.5555652 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.16889738 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.407413726 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.424417378 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.128099046 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.323022708 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.142642776 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.350511936 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.27334814 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.729291675 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.137542281 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.316040848 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.741744691 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.274118585 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.555124102 seconds)
  done (took 177.033970091 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.990827856 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.118341038 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.118532508 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.118687999 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.562606566 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.119375486 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.118868898 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.118115843 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.418116597 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.393128805 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.118647154 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.55419894 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.124390406 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.11949832 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.121026938 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.118904467 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.527447127 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.022250029 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.118896115 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.119889704 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.121371281 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.419399277 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.120120057 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.442354271 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.521739079 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.121045652 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.114934547 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.121078474 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.12068037 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.120372572 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.120406253 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.119984752 seconds)
  done (took 216.52630889 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.119924462 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.120576762 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.119533666 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.120913673 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.120664658 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.123567132 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.122316871 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.119913597 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.842230871 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.841585787 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.121561496 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.127003899 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.122877828 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.11955663 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.12300666 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.120410402 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.1206249 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.121483875 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.122012933 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.120945473 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.122431515 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.959151853 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.122590232 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.981837263 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.122869123 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.12312682 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.121019688 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.121577893 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.1206921 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.121853237 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.120527273 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.121128384 seconds)
  done (took 229.07973631 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.363541586 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.121782039 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.123331145 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.134069375 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.123392348 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.122595308 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.127467455 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.368763645 seconds)
  done (took 21.534955833 seconds)
done (took 646.227390499 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.517651014 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.852446469 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.253227395 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.145670779 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.417826373 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.186835821 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.140106737 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.209774761 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.78364321 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.217266908 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.533663671 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.149069731 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.840476306 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.166582294 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.254432113 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.207364935 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.487152724 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.740852372 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.275655565 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.844306629 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.340759391 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.058157217 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.208078724 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.836707585 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.543809264 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.076756233 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.143285562 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.490371374 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.145569474 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.374120915 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.809991815 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.383951934 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.156808891 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.143383209 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.198079752 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.184958895 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.329960354 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.152107265 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.253824232 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.861341169 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.808078576 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.670328601 seconds)
  done (took 110.446609174 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.129895192 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.127611787 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.128473657 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.128663144 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.136078331 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.128339668 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.128011753 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.128934989 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.129089459 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.130171022 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.129922754 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.136029327 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.129306674 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.135952702 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.128821416 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.128992236 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.129487897 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.136808204 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.129945164 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.129771392 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.128994062 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.129478774 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.12598112 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.129296594 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.129642404 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.129369425 seconds)
  done (took 57.443557659 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.126434283 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.300639765 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.410037277 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.154364096 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.127156609 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.129647438 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.155237687 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.132537357 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.129049703 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.126618235 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.218564142 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.119127907 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.138359186 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.406972972 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.15097735 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.126533522 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.127403391 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.127435169 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.310337875 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.142532596 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.157411528 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.133767602 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.156546657 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.141795437 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.129175555 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.12806103 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.130118664 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.551850267 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.13901459 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.222414163 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.17183247 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.161878136 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.464868254 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.419337548 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.190071104 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.136895247 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.114928359 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.270605467 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.1284335 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.128240914 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.156924026 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.136421262 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.398339376 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.632948756 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.143130085 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.115596784 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.550648288 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.27627613 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.175322021 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.141153974 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.417225286 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.155164213 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.129692939 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.131141997 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.1664756 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.140985684 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.129529003 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.374919878 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.143416623 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.157868474 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.135432267 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.13088777 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.316388493 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.138528208 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.304917823 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.138430581 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.135037176 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.129959786 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.412269111 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.155388429 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.630399019 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.142885192 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.129287279 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.225119243 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.309526659 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.573711999 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.14276071 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.316194709 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.482316783 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.167087385 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.139230528 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.538681795 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.169495953 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.139864279 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.131228504 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.130813809 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.130498378 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.172771484 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.155876976 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.551918877 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.636414602 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.399662081 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.168990448 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.143492099 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.13178937 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.37502319 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.141242398 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.131138504 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.40852697 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.653460581 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.144786875 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.136802348 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.612239423 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.145884037 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.159846738 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.14213735 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.421052127 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.159579045 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.174910494 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.131534433 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.136950109 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.134263687 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.161367458 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.142092649 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.131025084 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.609527402 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.285060516 seconds)
  done (took 262.863786699 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.135016049 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.131713507 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.13123387 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.131846428 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.131261987 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.133179105 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.131384634 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.13076924 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.133325727 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.131369349 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.131304279 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.132165264 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.134350865 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.111429607 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.16905195 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.133146086 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.62322764 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.1318981 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.130980732 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.13357733 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.703489406 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.138547159 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.131809673 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.132822532 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.133049128 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.132073591 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.136567647 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.166979075 seconds)
  done (took 174.893884886 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.133366537 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.179532407 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.142965055 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.179713811 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.144147891 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.133847763 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.153587334 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.148234007 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.138962873 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.132731484 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.133891255 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.160408894 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.141564792 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.208103081 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.162702826 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.16182418 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.211463684 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.140276389 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.133665962 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.134544898 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.181672557 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.145961861 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.161687345 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.187461383 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.147727202 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.182240774 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.147100897 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.134500481 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.134469243 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.220923232 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.151702778 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.161937315 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.168836335 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.15189532 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.225139317 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.224042954 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.214695445 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.145538026 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.139288309 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.135364534 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.135490071 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.136936205 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.182059802 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.149478806 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.13632501 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.223957912 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.151698413 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.135286445 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.158671374 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.136431535 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.146077871 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.150961926 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.167535236 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.233620269 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.180313724 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.162381547 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.156931715 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.153130949 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.13592507 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.209582025 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.143579213 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.223364776 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.153836428 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.137287204 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.138007812 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.140582412 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.182998032 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.170763643 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.213152096 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.142953163 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.209995912 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.188516279 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.150108579 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.13766395 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.137295985 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.183791132 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.22392685 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.189585588 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.196926397 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.173918664 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.146041359 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.136819619 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.138965098 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.16477409 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.143149161 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.223102165 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.226494472 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.144764577 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.137155882 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.138066407 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.138063803 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.16007315 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.191925637 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.178687353 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.219596993 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.170244155 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.172181823 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.145182768 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.150043171 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.142622429 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.16866158 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.145493737 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.149657066 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.483662555 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.174580587 seconds)
  done (took 229.573922598 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.50789249 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.187770056 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.2040737 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.419212878 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.522433548 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.238358261 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.177546985 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.196349177 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.196525238 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.301536661 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.24687816 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.254133245 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.174195752 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.159528153 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.186037134 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.194127939 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.211413451 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.490019156 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.283797987 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.835427348 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.17515259 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.450717801 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.46714083 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.53466082 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.222582087 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.606805619 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.797570429 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.276924018 seconds)
  done (took 69.589099915 seconds)
done (took 906.861752583 seconds)
SAVING RESULT...
DONE!
