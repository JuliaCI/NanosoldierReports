cset: moving following pidspec: 2584768
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.251793995 seconds)
loading group "shootout"... done (took 0.845384225 seconds)
loading group "string"... done (took 0.219132759 seconds)
loading group "linalg"... done (took 3.170489764 seconds)
loading group "parallel"... done (took 0.021755872 seconds)
loading group "find"... done (took 1.160243965 seconds)
loading group "tuple"... done (took 0.699371849 seconds)
loading group "union"... done (took 3.062754577 seconds)
loading group "dates"... done (took 0.158763208 seconds)
loading group "micro"... done (took 0.058661 seconds)
loading group "simd"... done (took 0.375241187 seconds)
loading group "io"... done (took 1.421137848 seconds)
loading group "random"... done (took 2.311592959 seconds)
loading group "problem"... done (took 1.156551953 seconds)
loading group "array"... done (took 4.350887115 seconds)
loading group "misc"... done (took 1.114589034 seconds)
loading group "scalar"... done (took 3.595345871 seconds)
loading group "sort"... done (took 0.311989204 seconds)
loading group "sparse"... done (took 3.537894731 seconds)
loading group "collection"... done (took 5.988586135 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.475520747 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.072316236 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.266952961 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.072375317 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.271319273 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.083210503 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.091135239 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.07258917 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.108071315 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.15755853 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.238770641 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.36145659 seconds)
done (took 4.998691752 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.33165315 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.032574869 seconds)
    (2/2) benchmarking "String"...
    done (took 0.122076947 seconds)
  done (took 0.746688605 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.135603247 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015605271 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022645554 seconds)
  done (took 0.759353864 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020398363 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.098479173 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021441522 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022040514 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.02203266 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021386665 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021213374 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.02124299 seconds)
  done (took 0.814286672 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.02882477 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022425541 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.02073933 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022112562 seconds)
  done (took 0.679918473 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022703633 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.090596799 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.026311063 seconds)
    (4/4) benchmarking "different"...
    done (took 0.026249072 seconds)
  done (took 0.747772298 seconds)
done (took 4.699777979 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.191191459 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.760434663 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.86599695 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.173759074 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.340069325 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.317117358 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.074785434 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.2247782 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.14480459 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.033866391 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.178238492 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.036097118 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.503927241 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.559839445 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.026381428 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.145347088 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.565291638 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038368767 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.068337667 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.162407854 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.035033676 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038122757 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.042346951 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027342423 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.048197192 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.135659024 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.571876009 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.065142614 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.02404556 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.047207461 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.02675083 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.028053746 seconds)
  done (took 9.125266713 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.149659158 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.139765632 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023375455 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.057278918 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.052095112 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024725977 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029888935 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022721235 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.041846398 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.085170546 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.044993682 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.151906968 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020980225 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024326985 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.137039529 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.110903688 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037147078 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036599381 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022266852 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035941083 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.047503434 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.034168724 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.031932839 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.03147546 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.066638748 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.085354739 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.040476495 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.062008063 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022468621 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.03363881 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.049597359 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.061020805 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022602072 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021598813 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.063863775 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.039076186 seconds)
  done (took 2.614137376 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.752550459 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.113003559 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.137352467 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.177154306 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.066392325 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.04908611 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.171561095 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.072670221 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.053419483 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023822504 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.1903475 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.649201275 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.162556124 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.251262356 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028414163 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.277169027 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.881667013 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.931894647 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.022556508 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022783699 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.1281879 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025925977 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.285099437 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021134363 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.139265213 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.567664606 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.02554558 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024078309 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.049989446 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.135040684 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.020790939 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.092540212 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.045852038 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.024915078 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.362071776 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021489757 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019680193 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.04076259 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050839464 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021794785 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022900601 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030475347 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020869604 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069142176 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.032060471 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.488244953 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024871139 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.668105001 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.628222201 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.028990857 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.026342136 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.058901365 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019870563 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023242768 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.500497554 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.092756953 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.022676426 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.281751304 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02544876 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024095956 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.046470372 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.054381958 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023017663 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02443446 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026210558 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.04004615 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.039504133 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.032861194 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.041953839 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021601222 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022675314 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021208929 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.385775962 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029286219 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.123417846 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020425916 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026158265 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022547702 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022206263 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.060905198 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.047656394 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.044981613 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026235814 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023086056 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022242692 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.528662633 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.937059426 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024960882 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024544665 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.329169394 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020443935 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022510656 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.0241403 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043314449 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023424374 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019990239 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05721121 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024550427 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.126682259 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.345569598 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024528448 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.021287952 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.55879177 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.023843555 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.052519466 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070819671 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022240615 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.05530542 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022222661 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019855184 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.02575628 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019678159 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.044290355 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020836159 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021342109 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020749325 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.021732379 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023298164 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022140997 seconds)
  done (took 23.158622102 seconds)
done (took 37.237710326 seconds)
(4/20) benchmarking "parallel"...
done (took 0.762869399 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.202912027 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.050009882 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019697421 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.153454865 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.043176876 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.12965678 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.165259085 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.121163125 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.044126642 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.043854636 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.043924514 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.171728611 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.178759534 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.04501656 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.112837565 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.179744381 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.045140749 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019810662 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.043998411 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.04505363 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.044757676 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019843498 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.044142825 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.04468829 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.112046372 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.043571621 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019576885 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.113032405 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.045349204 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.113999237 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.045802287 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.045756213 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.046415554 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.114288766 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.047348064 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.115175215 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020040523 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.047348713 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.047769061 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.048621658 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.048053991 seconds)
  done (took 3.801243289 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046399367 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038387842 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.05393863 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018078443 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028102853 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038472921 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018118775 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038046535 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.055490164 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038478378 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038437058 seconds)
  done (took 1.156160324 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.04138557 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039185424 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.04693975 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018012878 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029765534 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039003915 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018048282 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038724335 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.054746963 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039111066 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039218582 seconds)
  done (took 1.096062283 seconds)
done (took 6.724866435 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.146669593 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.117339341 seconds)
  done (took 0.945035419 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.572477132 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.199974784 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.124020026 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.241645198 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.117670574 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.149716455 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.704378808 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.151843647 seconds)
  done (took 6.997703714 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.075282606 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.138657101 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.024037478 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022500405 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022771852 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022683126 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024254285 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022987149 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022290148 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024720081 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024330165 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022421757 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023240809 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024354938 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022541297 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022693841 seconds)
  done (took 1.359446152 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.02792749 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02528406 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026131802 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016758043 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026669485 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025456225 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026504825 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.02778172 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.025934225 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026272146 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024160744 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.027224104 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025835363 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024660133 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027220041 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016958207 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.027261344 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026443143 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028293457 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.026812066 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.025817868 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024128485 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027526223 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025530734 seconds)
  done (took 1.319189827 seconds)
done (took 11.313605336 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.133571779 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.028794401 seconds)
  done (took 0.85465364 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.122333627 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.121091314 seconds)
  done (took 0.945720673 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027738936 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015978877 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.03091328 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023695823 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016158344 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015915747 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.029901364 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016137829 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015975815 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016049957 seconds)
  done (took 0.914312208 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019281993 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022357924 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.02050048 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019042558 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020495545 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016980618 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.0191277 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017179139 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022323509 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016232444 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019717136 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037580561 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019247757 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.038021264 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019236995 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019653787 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021029695 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018977619 seconds)
  done (took 1.091901291 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017716385 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016759273 seconds)
  done (took 0.741768631 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020295931 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016903002 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018383409 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018280462 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016543029 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015989865 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016506551 seconds)
  done (took 0.822874715 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.388000413 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.089895228 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.317076895 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.024535021 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.036188741 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.234500496 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019769201 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023750914 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023609432 seconds)
  done (took 1.859815367 seconds)
done (took 7.936784702 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.045207618 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.144410662 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.14537848 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.438214881 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033806997 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022613163 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.055819444 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.218840784 seconds)
done (took 1.821023475 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.27357438 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.262813962 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.182428933 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.020833413 seconds)
  done (took 2.175693653 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.307941177 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.136219264 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.032086507 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023014808 seconds)
  done (took 1.222485279 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022028142 seconds)
    (2/2) benchmarking "read"...
    done (took 0.027453818 seconds)
  done (took 0.767386032 seconds)
done (took 5.159937464 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030333605 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016710177 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.025901075 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018155739 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017834552 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017453211 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017395239 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018231419 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016364763 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018159536 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018184797 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018083087 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017886287 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017859474 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017446204 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018164228 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016360564 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017886877 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017808789 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017848495 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016301174 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018116429 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017396659 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017795635 seconds)
  done (took 1.149292965 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.039190605 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.022129568 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.022076539 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.02193977 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.023126576 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.022101143 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.022135438 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.022024689 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.022235448 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.021125855 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023168452 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.023168855 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.020983477 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.023281366 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021147018 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.023663678 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.022296094 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022151625 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021185292 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.023275392 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.022126046 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022086784 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.023198929 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.022175299 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.023150477 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.023201605 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.021215915 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.022120715 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.022212806 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.023133824 seconds)
  done (took 1.405972887 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023076445 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015057095 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015294117 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025423819 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014976712 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015156299 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015500643 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014850832 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015179398 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015922217 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015498647 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014929174 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015673761 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014951733 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015051195 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015553357 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020329369 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.035875227 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015251576 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015021272 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019840397 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015183933 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.01505634 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.015052328 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015481915 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015018523 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014863897 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015316869 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.01505211 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015547685 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014992015 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019701298 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021102251 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015474803 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.025441343 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.02026781 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015463527 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019627923 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015804952 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014899445 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.01489332 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.01490043 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.015010279 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015055284 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025541914 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015199006 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015996709 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015438714 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015133493 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014871548 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015007142 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016421375 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020739816 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016072958 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014910294 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016061608 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.01490501 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015633438 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015043874 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014865165 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014899916 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019090862 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016301807 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015599049 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.036574176 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016230535 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025501847 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015053186 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015419874 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019253948 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015506252 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.034913278 seconds)
  done (took 1.974669479 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028407022 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.024588172 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.034089001 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024552019 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018318085 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015937219 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018776949 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015923132 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024790881 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019139036 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01593171 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018774161 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024782975 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019201928 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016894176 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024681147 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019127163 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018418241 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015900751 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019116677 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016914052 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018811908 seconds)
  done (took 1.178106959 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.105691586 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02236691 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.067627491 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.021881923 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.020583379 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.021677732 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.02240677 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.022252689 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022460557 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023571713 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023492666 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022545544 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.020592791 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023438948 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023504415 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02326097 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022500964 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023237711 seconds)
  done (took 1.254336809 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.039713991 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.023729203 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.049770011 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.023644585 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.023815048 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020373816 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.027285947 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.025907885 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020344549 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.023980017 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025996571 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020433326 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020331859 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023884045 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020290185 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.023951928 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020418563 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023992455 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025914516 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.027244947 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.027322526 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025988972 seconds)
  done (took 1.287084137 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.036859561 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021056175 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.039337607 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.023081852 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015454429 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015513978 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.022980546 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.021933423 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.022904316 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.020986076 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021977038 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015491788 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.023877261 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.02202817 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.02400521 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021884363 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020992341 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021929413 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020948395 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015484272 seconds)
  done (took 1.171750262 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.124958397 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017514371 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017279399 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021455925 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017250541 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.01723432 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021523417 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017213579 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017222453 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.041330431 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017304761 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017326426 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021555758 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019969212 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017324952 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021608554 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02174212 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021456395 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.01739698 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017361538 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.041507506 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017352319 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021507457 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017360026 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.01726125 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017328614 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017289229 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.019932194 seconds)
  done (took 1.397720349 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038525017 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.014844713 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.014982089 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018669762 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018747571 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.024446157 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018766167 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018738046 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014770334 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015021613 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.016943852 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.014789993 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014777378 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.023893903 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.014779936 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.016995965 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023886257 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.01875373 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.026707602 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024491483 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017020199 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02380313 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.017023227 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015168145 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024645041 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.016970438 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018824015 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.019569511 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.016925722 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015122898 seconds)
  done (took 1.304782968 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029329571 seconds)
    (2/2) benchmarking "in"...
    done (took 0.02619009 seconds)
  done (took 0.779707438 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.020759175 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.034776661 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014865929 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.029630325 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.026528644 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019311012 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.0251851 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02667799 seconds)
  done (took 0.915158052 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.123443951 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.145514776 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.017065431 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017228371 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.121216208 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.083346463 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.131438883 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028519084 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030479065 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019813926 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016821878 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.130540362 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016371159 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.030141002 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017852297 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026265247 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023840038 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034330486 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029418025 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015490004 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029155507 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016998665 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016270137 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017111243 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017429599 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023288322 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032019119 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028881012 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024650114 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014887512 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.034667823 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015605352 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016199158 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024644109 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.122629576 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015919953 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.052844863 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015828027 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.01967835 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015501187 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027444085 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036287979 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029872911 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.033083364 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016837413 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017364875 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.01551546 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017114358 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019836082 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024807228 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015786969 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023156265 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015469458 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.017081707 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026171375 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015895374 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020051968 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.02497495 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029417617 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026115536 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.028227218 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.03108126 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.02450117 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.023566111 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016426895 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.035676703 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017291753 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029090746 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030602086 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016838733 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02833294 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015703284 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014998354 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015792405 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.049213198 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017012783 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016520349 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015829047 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015936911 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016968996 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025157803 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02007257 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023151166 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018515293 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031468808 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024851979 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015624152 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.022355539 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.033722919 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019899977 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015781295 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032548473 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019840942 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015601775 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033440196 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026230955 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017181935 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016403578 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019819215 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028698739 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.016993372 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014977079 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024121025 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017631834 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.123774291 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020593504 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024361768 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016036981 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.026376917 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022154846 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017535537 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.01530344 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.02103011 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.01696582 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015380207 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025634419 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016280619 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030759781 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023174243 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.030906574 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031343724 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026748063 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032094701 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016136697 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015383156 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.034519524 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025550816 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017339811 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034279282 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016099124 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026748729 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016252662 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017585188 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025503964 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015629739 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017763495 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016403876 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022119304 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017714006 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018027153 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022376136 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024920627 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028527184 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.017390357 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025205472 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016630385 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032357312 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.025993077 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021283568 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019486898 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.01704431 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028290774 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023375008 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025404431 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016169536 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017041371 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016344529 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027442414 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025772065 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.017918676 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.0250182 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021317385 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017113183 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016337545 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017220768 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020278041 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019453324 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016846858 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024128396 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.024976212 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030304203 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023310025 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025326072 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015718159 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016108625 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.017870249 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016089393 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021112467 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.02541425 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031882864 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.027901755 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.037764331 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016462695 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.025964192 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.017834113 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.0332326 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.029620897 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.01713929 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020634593 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015396105 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.01786175 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025536519 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027474522 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.029974521 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031324466 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021345799 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021208288 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016227916 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031534038 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016744428 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024860741 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.02558393 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.022441394 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016327367 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018083039 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025467227 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021399796 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017405095 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032302707 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.02381374 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016339627 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030929796 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016738098 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027094629 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.01641055 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.02037018 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021976049 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018337557 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025978776 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031701065 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015590369 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016740834 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032053628 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018168416 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018071515 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024472956 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031780683 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021410189 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024268671 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027183619 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027083611 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021322343 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026746742 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017491984 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025668233 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019664142 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028267467 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016477701 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034859327 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015654997 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031722235 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.017175177 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027634047 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016897708 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025750857 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.01729147 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033731808 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.018000719 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017308096 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.028154146 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015625131 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025519914 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.016338482 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021771724 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023479786 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.025713434 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.01826029 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025829962 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.018029257 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.025315898 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021455458 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025316992 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025620134 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021350831 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.016281051 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.0246543 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027333508 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.177443357 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017129291 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016904637 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015985328 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024886252 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016856793 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016421987 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02376301 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020788414 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021879941 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016764251 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016898745 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016727429 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023889164 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024784615 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033145116 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024115595 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023036647 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024507855 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015358377 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030678814 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015339388 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023024711 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014818005 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.020992021 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024479541 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015600125 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033846344 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016724073 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023174053 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026752533 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023884957 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019619956 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032782139 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017882448 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023669627 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023141724 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020379851 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022425468 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016666936 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023723665 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.02452704 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025475844 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015955228 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022794773 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02413529 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.0165872 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.022249745 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016487968 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023695586 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016628403 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014903034 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020377963 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026110445 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020550138 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.02066001 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015494524 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014606711 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015516432 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.021216657 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020382504 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.023815633 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030399156 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.01465644 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.015934069 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.131571901 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020295276 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033279652 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02470041 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023258348 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.02039882 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014838493 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016427721 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.016517379 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015310047 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.017615991 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014729177 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015169548 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025464142 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.016540417 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020078089 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015447811 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.016308274 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025132086 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.019067047 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015746034 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022468642 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015278511 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020991512 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.014927993 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.01675499 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020359913 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015251392 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019607933 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.025415095 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.031398177 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022410114 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024216445 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.01622058 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.02318118 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030513725 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022573656 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016213055 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.024594945 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015229859 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033891747 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024792504 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024073664 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025074585 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016519746 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032344092 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020651228 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025420681 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030890007 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016536214 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.022726332 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015577471 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031116689 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020634107 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015573232 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024166077 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023571531 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.022010685 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.027107326 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016442993 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.024041073 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020095078 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020079466 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017137396 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.017147142 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024349955 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.031787741 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016467236 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.02058474 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.02363688 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024094383 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020695915 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027578812 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024177188 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016944114 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017627767 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.02018699 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016831189 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028048936 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016392617 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020995202 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021024559 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016032543 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023147838 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032570465 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025306177 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025506062 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016015129 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015517913 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.033997381 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020213969 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019290958 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.024137504 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025798408 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028215869 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025265752 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.032938556 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016554487 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.02231667 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028158498 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.016937193 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.015886576 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020181563 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017606672 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025103414 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02569248 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023426035 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01780109 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023179783 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029552169 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017454476 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021112292 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021905323 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.016901866 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026516835 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024020892 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.02469398 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.01745205 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.015964287 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019798805 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.024868482 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023652116 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.025236997 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017105528 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.024422569 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030147446 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023712601 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019490822 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016061901 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.01937665 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025235612 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.0222808 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016154509 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021293839 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020202708 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.024531132 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.02553142 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021147792 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016112264 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033292487 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.024705036 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025181131 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017829125 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.017912497 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016486197 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.01608012 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027184192 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016138661 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017768213 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021281158 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018043403 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.034017546 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024223657 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032261076 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017131934 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.02104796 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016084062 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025694695 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021138923 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016216561 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026566019 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015695207 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031611349 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.027948068 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023145399 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016132558 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.02170426 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.024749287 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031377602 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025738236 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025017374 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019437705 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025690173 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017819836 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027131622 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.016136768 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015374235 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026160843 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024705649 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028346876 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016074674 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026136538 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.017922743 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024365587 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024710359 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017739655 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017862202 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017744281 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025604546 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021220408 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025367875 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021407688 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033464606 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017316133 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027462694 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025242087 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.027314415 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.030228792 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028616783 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.025010969 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016853299 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023797225 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.024939942 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017467113 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021631565 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019653802 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038848 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.018036854 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.018040895 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030801643 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.024703994 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.016531988 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.024217813 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.021541171 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.026633557 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.017320931 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.026667666 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021892144 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.01729503 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021379286 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021417324 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015501216 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.016250908 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.01657893 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.0260025 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.021423877 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.0164854 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.035864152 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017872296 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.025012804 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027656137 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.02344484 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017897776 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015611169 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.017203514 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.029687502 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031897289 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020547311 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024868322 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.018076175 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.179651817 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.015033789 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.024149385 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.023357974 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024037111 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015519513 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015682414 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030505847 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030853482 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020613444 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032375404 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.024283028 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016711527 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036584053 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024353993 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016149365 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025877406 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017076191 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015004773 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014863906 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016635611 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026565376 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015349311 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017058073 seconds)
  done (took 15.18164882 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.060399058 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016583376 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015312327 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015380372 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021938396 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016455342 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015363586 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016490344 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016519371 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017423461 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015408254 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015449803 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020481414 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029642205 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022582132 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018752883 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015403316 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016445112 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015432577 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016489011 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020820801 seconds)
  done (took 1.191509256 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.019789418 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019475312 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.01880731 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.01893549 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018384665 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015662585 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018719328 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015538838 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019153073 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015949123 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019132179 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015598941 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015904075 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015920704 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015906274 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016925747 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019141937 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018476496 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015565575 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018726425 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016892917 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01875182 seconds)
  done (took 1.148570032 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018229706 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.0160351 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023934968 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014985106 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014825991 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017377936 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014926384 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019729795 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019676 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019680229 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023787696 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015778944 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014874527 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021068613 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014907587 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015638885 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.068508498 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015805219 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015878591 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015181336 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017129994 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023994132 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015140296 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015305205 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019754316 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017579869 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015101801 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017183951 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015614666 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019765262 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015774115 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014918326 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023880232 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.023117381 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019813141 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.01975564 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016215312 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015774644 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015084529 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015119838 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023278334 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016235313 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015301444 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015989324 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023707286 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015141345 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014945614 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023874225 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015008868 seconds)
  done (took 1.682778949 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.027173756 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.068150907 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.022747972 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050455372 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.027560843 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020066642 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.022020697 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.052908377 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016222972 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016563057 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.028218644 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.028908857 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017594549 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018680822 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.022944558 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017442387 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018096914 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016834142 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019580773 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017153291 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019660475 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022963322 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027402314 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.028513814 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018295653 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016993852 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017219852 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018489726 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.028183004 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020077783 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.018731922 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019157339 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.028024882 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.023984702 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017146367 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017228068 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.028367028 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017685384 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017492949 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016121804 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017244243 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018450831 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.023059156 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028562316 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017679 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023964717 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017501607 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.01579125 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028427816 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017332073 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.020474396 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.029338358 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018505496 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.017791148 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018805758 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.028157095 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.017651409 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016579814 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.017770156 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.02855954 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016181648 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018289025 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.02921079 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017220785 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020260098 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.029280154 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.024105702 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018439437 seconds)
  done (took 2.430168837 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026454483 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.021903799 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025855819 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.025895606 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022009987 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.022020397 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.021966032 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.021966255 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.021923754 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.024474705 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022070729 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.131114845 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.019446687 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.022621379 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.022134782 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.022126302 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.022112928 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022079622 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.022036948 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022020396 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.02207865 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.02617881 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.02204968 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.026239449 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.055159995 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019293541 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.021940589 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.021989282 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.026389581 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.022035422 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.028644186 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.022126436 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.022164236 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.026403737 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.028643078 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.021943432 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015725391 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021947829 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.02224673 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.022285544 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.019321702 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.026846757 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.02226876 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.019398838 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.022422167 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.022235956 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.02679071 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.029000708 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.023027964 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.024956231 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.022357866 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026815992 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022249396 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.023038585 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.028690069 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.064722952 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.028955622 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.028939669 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.02393676 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.028641878 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.028761519 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.03784498 seconds)
  done (took 2.435369973 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029666135 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02055892 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.025611113 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015143042 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015092905 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.020537901 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015095251 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015086503 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020501923 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020482952 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021802243 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020679165 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022284418 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021774413 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.020623864 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022295233 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020546683 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020596908 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020475462 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.020573651 seconds)
  done (took 1.197600607 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018753721 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.019966865 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.015645037 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.019369634 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.015779198 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.018949401 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015750555 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015699265 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015761082 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015800965 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.01993654 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019948144 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015809268 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021654664 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.018997467 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.019049034 seconds)
  done (took 1.054747708 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019989746 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.024950807 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.120488749 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016408044 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018145075 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015800489 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016536764 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015117715 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017589141 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.031253901 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016140626 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018376283 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016623743 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015324711 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015841698 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018413293 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017607153 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016158178 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016616851 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.121213974 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.028155311 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017004103 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018428732 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017025011 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018070961 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.027841677 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.017323286 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018097625 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.015454325 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018470514 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018066349 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.026021573 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018081932 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016575145 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015349732 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016089358 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016505401 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018358061 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018338149 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.01657138 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015140717 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018004382 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016643018 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016901533 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017592268 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018394798 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017548831 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.025244775 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016377821 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018026842 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016494972 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017524772 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016476244 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.022831147 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.017969387 seconds)
  done (took 1.98252361 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035551819 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021643515 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014940134 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014888552 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021082402 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.022380415 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.02136001 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.021861438 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022384025 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014973338 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.022497696 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020900095 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022514001 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021574506 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.022464665 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021531921 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014976447 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.022285338 seconds)
  done (took 1.157412021 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.023613483 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.02014579 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.02036668 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016862912 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016774735 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020396259 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015340553 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016570501 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016457853 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016838464 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016790041 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016477806 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016492406 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016451169 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.02004682 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016766029 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016463164 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015426144 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016824012 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015344185 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020506696 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015448596 seconds)
  done (took 1.155395983 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.180100414 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.140996044 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038258719 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.033519404 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.025250958 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.051124978 seconds)
  done (took 1.238957802 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.053725668 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024250508 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021450204 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.04773266 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020637931 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019475423 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019549888 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019714951 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022493424 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028089383 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019944731 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022209668 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022523957 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024159944 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021262738 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020749249 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019751093 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019808194 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021742813 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032338253 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019981056 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022110389 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020002356 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.01964239 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019810678 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02415595 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022643398 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028099937 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019644019 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022153525 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020732927 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019882012 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022493081 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028118944 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021505185 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0226231 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019895616 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032396106 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020762072 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024155019 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021331254 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021343978 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022611533 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022320375 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022241605 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020153527 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022565064 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020087597 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020164239 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034831099 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021160925 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024333108 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021622164 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022587029 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022799414 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034834851 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028503166 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024550959 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022264057 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029985786 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026131403 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022387502 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026195723 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030244955 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023190073 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026243053 seconds)
  done (took 2.36123538 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029810032 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.049366141 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019573668 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027847671 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02380598 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019739604 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019769478 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019725365 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019729883 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022111395 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.061268866 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019995783 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024006622 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024046198 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019889064 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019664185 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.01971152 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023948031 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022175524 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034245295 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019829891 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024125587 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024022988 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024041361 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028136957 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020857709 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.01981725 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019785053 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019804709 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019821607 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022391844 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019948133 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024081014 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.022018644 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023998724 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019940844 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019770141 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022399648 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.01982979 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020848448 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024222872 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031896171 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019856116 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019988754 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028652395 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020080507 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0200129 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022328061 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020066947 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022267072 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028492195 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028361113 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028415061 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024487354 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020237586 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020217667 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019999704 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020033511 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020160007 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022019437 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026004716 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021137084 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.037539711 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021346879 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021321323 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026348797 seconds)
  done (took 2.360920056 seconds)
done (took 51.109970242 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.214774248 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.176215805 seconds)
  done (took 1.150051617 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.131338338 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.128917563 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.157521877 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023572925 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.080838349 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.175325858 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125468893 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026140265 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023920578 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.024994263 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023464325 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.024731749 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.024892664 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023396613 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.08574396 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026109967 seconds)
  done (took 1.886533635 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.090245048 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.272843558 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.066809584 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.02287997 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.076451908 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.03256949 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.023883059 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028900258 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.032125241 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023453482 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.087208188 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.043769884 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.026872956 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.031639989 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.02363 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.026777074 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028825659 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.032245202 seconds)
  done (took 1.749906766 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.085651997 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.031390277 seconds)
  done (took 0.896042379 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.136511767 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.061729202 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.104952241 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.335439591 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.094410776 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.290327922 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.099667303 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.096345731 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.068588124 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.093756179 seconds)
  done (took 2.154626014 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.059547754 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.054444068 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.274952867 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.053785999 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.033699324 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.028664673 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.029813351 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.028983357 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.030199348 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028994848 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.071470421 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027745092 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024223191 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.067168163 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.046335072 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.058247408 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023486563 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.028434831 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032447399 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.02335772 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027410352 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.028763006 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.133032397 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.028695111 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.047571301 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.026602944 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.028138076 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.029019067 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.02896185 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.029824827 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.029905621 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.049657161 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.028546659 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037129451 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.027603628 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.046907985 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024246642 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.046654268 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.026768694 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024221049 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.026549229 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.029979724 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024783289 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.029690163 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.030456539 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.029042235 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.029059304 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023510531 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.03063853 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.026974617 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024456989 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.027693548 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.027784275 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.028359185 seconds)
  done (took 2.957103793 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.075863461 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.065973044 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023897781 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073210159 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06513513 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024132568 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079280992 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060035598 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076572673 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023544914 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023248816 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023237805 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030083588 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.034380681 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.075367299 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.068334821 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02512487 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023821381 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.067666796 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.067723925 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022600489 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.078094752 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068120089 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.066280229 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022378549 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023803482 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022565698 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023175179 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.02954936 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.030228821 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022985977 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.031851747 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.03386367 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.029549923 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022405814 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022647854 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022592404 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.030396539 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.030900998 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.030898409 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.029009043 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022384684 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022749428 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023196755 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023574353 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022223795 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.030705209 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.029883737 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.030748374 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023460583 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023468714 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022547898 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023431909 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.029337961 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.028331403 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.029846239 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031664031 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022873182 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022857299 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024033131 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032300348 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.030564056 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.03032988 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023843352 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.030447167 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022865465 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031389199 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.035527144 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022747405 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023248853 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022980479 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022968101 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023366419 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.028743051 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.028824165 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023385758 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023222827 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022713602 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.030312133 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029184727 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02282168 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.030019695 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022507127 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023066358 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023350379 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023643799 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.030885125 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.030342114 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023501982 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023021817 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023055039 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023115831 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022359228 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.030891619 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030912642 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.031494652 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.032336209 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023982336 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.032969458 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031995858 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024326462 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.030639243 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023605408 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024015064 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02386219 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030616874 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.030252479 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.03198625 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023607754 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023237887 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.031254514 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033535803 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023419954 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.030137496 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032213903 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.030699893 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022928505 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033392464 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023617361 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.032685556 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02381005 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032096795 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023829484 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030949668 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023785388 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022942311 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02367331 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.033310576 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024078408 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023622808 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023892521 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023580739 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.031123908 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.034248434 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024230426 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031356078 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.031303916 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024088182 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032295682 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023767321 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.032524144 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023849456 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024014916 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022882233 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034862145 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023520613 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023956663 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023617814 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033141836 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023455755 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.032764979 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030053305 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023014577 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032829099 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032367942 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.030187378 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.03315565 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024291149 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023731128 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023376925 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023632055 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032052399 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.033474358 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024496268 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023637473 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.029879586 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.03257259 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023082458 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030316471 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030141857 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.030607119 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023844802 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023668333 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033697622 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034699087 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.031016184 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.032815539 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031846629 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023679357 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030457182 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032946744 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023707434 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037704779 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023634436 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.034370259 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033355176 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.030096096 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032988783 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.034276815 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.032761471 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.033070454 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.035056451 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023287016 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02355812 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.031063531 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02363682 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.171215709 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028554531 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023464388 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023398777 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.034746523 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023159762 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.030334857 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022498939 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.029174552 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022447291 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023330942 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033408365 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022823933 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023295938 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.028267194 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022854612 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028127605 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.030819912 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028069008 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022663495 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023200538 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030558761 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.029510288 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022602785 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02258514 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023136055 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.02954915 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.028950741 seconds)
  done (took 7.65982943 seconds)
done (took 19.243220265 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.13156855 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.069820813 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.124159727 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.076215974 seconds)
  done (took 1.174465471 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.055343555 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019502347 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.135212204 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.146106595 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019739079 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.128981279 seconds)
  done (took 1.297107256 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.241074851 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.144242353 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.146247319 seconds)
  done (took 1.326438984 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.148269941 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.275586474 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.545101039 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.141744272 seconds)
  done (took 1.913508791 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.162169712 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.154758065 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.029987907 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.170888939 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.036650107 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016051142 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.098185149 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.016796233 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.048867471 seconds)
  done (took 1.589969487 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.090277614 seconds)
done (took 8.185406302 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.196374695 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.131422874 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.033243122 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.027828485 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.121553269 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.125025109 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.142187779 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.030005606 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.1327625 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.296651963 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.17751695 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.048245584 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.146790209 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.040946116 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.253885115 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.030610862 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029396509 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024449284 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.138582721 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.129751472 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.233310627 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027870361 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.095754058 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.030246871 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.099275301 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.082481944 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.182069228 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.301778817 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.262656569 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030609062 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.117571134 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.040639514 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.113539634 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.120522546 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.127667838 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048006109 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.02010727 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.23492637 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.099020044 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.311222756 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.16209054 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.02714114 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.136672533 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025131753 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019536979 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.139375815 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.031946244 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026067735 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.042215917 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027359615 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.03845572 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028150995 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.128555131 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023822698 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092172982 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.132830234 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.17883905 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.101376191 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025873028 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.037442715 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.0299708 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.155441081 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.037115977 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025486823 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031421075 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020114174 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.130627258 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.039858444 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020449074 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030765279 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.02904603 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.096315893 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.147384696 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.063976933 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031372177 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.106102662 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.096411934 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.045789505 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.047371662 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029455314 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.01971144 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.187388488 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.02556863 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.03785663 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026951173 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052606545 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.01995722 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034285076 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.166280281 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.144930764 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.085158949 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021178082 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.232555096 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022038963 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.044772887 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021262109 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020712282 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.183227517 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020341522 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020550735 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.030581358 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029304646 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.022560856 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.16541815 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.101243081 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028654636 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.027454844 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020964121 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.02647699 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021654635 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.02114504 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020511362 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.095351834 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.037175292 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019949121 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.102400145 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.119478044 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030922297 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.03740979 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.248827012 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.024025559 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.030249919 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027531494 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.13507818 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.026779957 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.131030165 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021770996 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.040626163 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.114747145 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.095963763 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.10043142 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019694178 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.136993808 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029482412 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019310457 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027003653 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046353493 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.02933013 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.036433547 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028037859 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.13685802 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.02967289 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025507373 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.114591785 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019023928 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.104923608 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.097638988 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.127246407 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024619212 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029180901 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091656919 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.041688154 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.048779104 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.040202225 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.024190448 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019754744 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.01946474 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.032485005 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018872753 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019682514 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.032213729 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.026336778 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.035577976 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.232271674 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.029267353 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023801838 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.242915005 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031581946 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.089415423 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038901603 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020004837 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.098949601 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021367142 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.039735911 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.081779122 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.019961269 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095475341 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020465887 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019893103 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.025806464 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021664528 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029323455 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.033123626 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020398542 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.03257584 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027499834 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019865276 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.099344729 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022047956 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.182679309 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.098027597 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.0931207 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020198188 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.038542038 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019893713 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.130756746 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020132171 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067892586 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.109999134 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.034338879 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.04023582 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021154179 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.097743539 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.033964079 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.025009929 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.098274183 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.129173861 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.090043827 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026226437 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.238391206 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028922594 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020373051 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.025826389 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.02889517 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020442191 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.099047455 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024739199 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019425841 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019683957 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021927725 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019075073 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.043595738 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019270159 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027835821 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.025563783 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022933736 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022034398 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019112308 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028192777 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.099195203 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.117573905 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.026099651 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039364974 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032354905 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030171378 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.066126581 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.027722038 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.156299275 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019193779 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029429238 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.039727206 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019377498 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024661241 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.025201354 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036251072 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023170456 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.020961595 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028722511 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.019996676 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.02001858 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.019707231 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020074528 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028882967 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.02138196 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019616234 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019597407 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.035964004 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024999866 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025550416 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030847593 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.040000838 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.46635115 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.02148734 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022444205 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.032620718 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.025559878 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020401362 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021455232 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019940461 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022205988 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020164464 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019621008 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.047261177 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025235263 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020536038 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.039931093 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.025977661 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029847825 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.11686783 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036485861 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.024984453 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.01938589 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.252171081 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.093115391 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040947276 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.039236791 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020538603 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.03094603 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020453242 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.02094907 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019545622 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046317822 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025732628 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020428041 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019443058 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019780596 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066784018 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.028425997 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019807597 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028379292 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020098314 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020096918 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046511193 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020971657 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020270187 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037612169 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032131527 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.104618892 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031990008 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023415625 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.070522431 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.01968783 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020287873 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020605376 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.106321369 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032566646 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021803346 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020275434 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027682846 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029473287 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.072934232 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026552387 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023822502 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028082493 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019653715 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020589998 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.04684472 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.048462802 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021551904 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.02390638 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.020113593 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020473673 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.097190426 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027904096 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.025387352 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.108434796 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022675648 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.028391574 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019652767 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.479431184 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.208155509 seconds)
  done (took 21.937824284 seconds)
done (took 22.750593312 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.148766444 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032781985 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.040102727 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028550694 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031846212 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.031420584 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.041999852 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029357685 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032370495 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.040172458 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.141233875 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.020037487 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027413016 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.033680865 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.02837187 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.032196024 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031112112 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.031804847 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020464164 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.032101534 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.03084093 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.030891578 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028666133 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.031405338 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020379566 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028255479 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.143913899 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.034365164 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.030072864 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029173501 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.027393736 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.041605736 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027463946 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026933993 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028952303 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.02521445 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029550119 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026193745 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.143145241 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025480867 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020359174 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031402812 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026961198 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027585843 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.02846417 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.030738159 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025177179 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.032177725 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.027990057 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.039250628 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.142958873 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028561639 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.030113995 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028055414 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025280833 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028824693 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.029732392 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.030091819 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025065563 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.038664063 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028283658 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027489943 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019574913 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028002931 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026936026 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027252599 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018962613 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028463054 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019699928 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.02526736 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.027963396 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.027923398 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.02633181 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024735574 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.027829724 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.01958143 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.027480691 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.03840499 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026518642 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028111199 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019962044 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025109791 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024638382 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020078063 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028381389 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.03055373 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.028661035 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020130329 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.02791426 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.038866674 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026221173 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019594602 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.030411177 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028383711 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028190403 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019668471 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.028070725 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028091626 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027417346 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019645876 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018956683 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028272524 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024782379 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028004405 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019975496 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028107029 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028079891 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018938395 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.027960405 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026808332 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028459138 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.030241142 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028017466 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030704946 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020095512 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018822413 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029182944 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019966639 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028369678 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027645192 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.025058615 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027376493 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020170591 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.027394257 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028203841 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025638587 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019986851 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020133415 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019936851 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028228383 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026767398 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018907075 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.01962546 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.02809935 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.027967402 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.027539659 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.027938808 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028045331 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020150474 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025602126 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.02510975 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028091208 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.027663425 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019953565 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.027741038 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.027662011 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.028510924 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025038598 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028278762 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.02017835 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028047114 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026683138 seconds)
done (took 5.62015823 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.074678961 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.062216964 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.170273712 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.13840971 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.032951312 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.033597879 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024831651 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.039541543 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.026473099 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.044774193 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045093772 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.042864625 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.155273322 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.040611551 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020094197 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.031818802 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.020589432 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.046365153 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.139623485 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.04486157 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.061632362 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.018824133 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.035205543 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.038385583 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.031801937 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.038100337 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.044272017 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021187051 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.037652404 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036882193 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046851516 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.022693506 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020523163 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.038966613 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.036091256 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.028590836 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.01989044 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.026670917 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.031520384 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019994075 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.06250311 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.03797499 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.026506314 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.026640031 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020895094 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.034494816 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020840287 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.027402422 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.033360256 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026461753 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032266207 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.036196775 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022027595 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.037500759 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019121502 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027145146 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.026847203 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.019928719 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020817767 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.020001311 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.019947177 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023015933 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.032282062 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.038027013 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023919355 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027095823 seconds)
  done (took 3.503674313 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.046180737 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.065994225 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034190825 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034661788 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.01986752 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.02036939 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020273316 seconds)
  done (took 1.148556786 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.091691478 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.135196643 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.138123249 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.139454163 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.151922979 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.136577705 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032873678 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.0500606 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.054693828 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.155161543 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.146861406 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.140897072 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024313849 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.032525764 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.05210006 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.143675937 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033115713 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027738396 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.135458189 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.141164227 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025316084 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.05172226 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033194615 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.02332451 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.143926331 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.136561953 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024109872 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.061823334 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023111099 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020874354 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020896987 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.042972271 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.137406253 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035661811 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021296322 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019897981 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.134861454 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021439911 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.137080863 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027870669 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.134489699 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023344423 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023482873 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021218978 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022048524 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.134511222 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022244966 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.02089026 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020458593 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.138677752 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031906214 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.137341902 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022338717 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025774603 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.02774738 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027376789 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027690552 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021189482 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.140365014 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.031012526 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022786162 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.143186355 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.142327086 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.137975472 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.143569922 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029879374 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.139681826 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.135183039 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020878147 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028525355 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.02166115 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.144176977 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024786122 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023532117 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019599021 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028369807 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.150487447 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.150568355 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.150465302 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.034948179 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022763279 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021720569 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.150334851 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.151556432 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026698949 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021465116 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021706144 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.036709642 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.045478009 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023547131 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026057134 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021338535 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031755688 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023650385 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023142557 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.144630262 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020646838 seconds)
  done (took 7.554683108 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.038665057 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021434751 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020978988 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021344702 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021543477 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021327622 seconds)
  done (took 1.131287837 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.06022343 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021755206 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.021621885 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021495109 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.043577286 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.128758962 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.128556642 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022837176 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.037915342 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.033435942 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.128377335 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.131530262 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.130917296 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022833222 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.128512431 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.033121924 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.129009224 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026189003 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032427782 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022796159 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.031785031 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022421384 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022625748 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.147633217 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.016805067 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032687375 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030798306 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032583306 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.032126324 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022469344 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022333256 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.016458632 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.031427409 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022418255 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.130023903 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.031819779 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021843718 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.017579431 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.025715563 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.016522893 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.132572395 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023027939 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025924963 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.017553447 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.02241441 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.0314731 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.017547764 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.031361818 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.131031319 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.017756999 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.017537942 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022106814 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.016570082 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.017516585 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.031688287 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022597397 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.017489957 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.130846371 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022741181 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.031766334 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021779703 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.016607117 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022507813 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.016518067 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026414706 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.017500031 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.031648849 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022795279 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022782959 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021710903 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.017631405 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021679853 seconds)
  done (took 3.987889122 seconds)
done (took 18.232788252 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.453517595 seconds)
  done (took 1.361364297 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.956849187 seconds)
  done (took 1.87625374 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.050091988 seconds)
  done (took 0.987545686 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.28723487 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.463143646 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.72928811 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.090973005 seconds)
  done (took 2.491938654 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.842221305 seconds)
  done (took 1.788229388 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.204066413 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.168971946 seconds)
  done (took 1.336203246 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.489594208 seconds)
  done (took 1.421419984 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.314688621 seconds)
  done (took 2.25371837 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.191745842 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.133834389 seconds)
  done (took 1.265606051 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.594876871 seconds)
  done (took 1.532761921 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.349019299 seconds)
  done (took 7.288624535 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.195194038 seconds)
  done (took 1.188439169 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.24118797 seconds)
  done (took 1.180896861 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.699663598 seconds)
  done (took 1.637987888 seconds)
done (took 28.557624404 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.044027861 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.036966719 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.037049705 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034322255 seconds)
  done (took 1.080338729 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030507006 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024957552 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.027026425 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027335028 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024785749 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026524103 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.02736677 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.023817931 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024900618 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024247455 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.022892868 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024108772 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.026621163 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.024023373 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026416001 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.027566551 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024276748 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.024823012 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025948783 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.02391851 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026686173 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024163572 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024183559 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025533582 seconds)
  done (took 1.554048848 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.039327822 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.033802196 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.031822293 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.031366611 seconds)
  done (took 1.080640394 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.032672504 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030089265 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.0382353 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.037790813 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029933575 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030670034 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036579763 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036891537 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.043415148 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039277437 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021694003 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021444203 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020787254 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.03390277 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036088634 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015814093 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.016913382 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030837947 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029623701 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032457839 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023568184 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019362608 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030211712 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030519283 seconds)
  done (took 1.659016676 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.036787826 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.01955783 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.034787024 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043670459 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.043766785 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019424685 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032440212 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044331805 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.184151462 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.01971563 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025635346 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019508654 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.05635421 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019471106 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033774582 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.163783579 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.166492348 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.023791364 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.049954157 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019595875 seconds)
  done (took 2.005716485 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028748204 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.02735774 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024794655 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019136842 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.0301431 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.03325443 seconds)
  done (took 1.114252295 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.02397499 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021242683 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020976012 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025355197 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.020956445 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.020900507 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020939567 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019763377 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019793429 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020614436 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.02061932 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020998818 seconds)
  done (took 1.199647308 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157815777 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.02628099 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.0240831 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019810863 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021568905 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020626369 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.033648008 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022547416 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.03661895 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020528238 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020841464 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022910328 seconds)
  done (took 1.371654106 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058897914 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062675309 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094731174 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071933087 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077500159 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048827202 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.194399854 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.033177657 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.111525755 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086854167 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074632845 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045132183 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039220643 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023859184 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053516181 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069994862 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08789397 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026948402 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071901417 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.229530956 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082750014 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.082578956 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098525895 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075966204 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045076087 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098673959 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.049772114 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055557787 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07558173 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079095396 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074168144 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.056592374 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.025283698 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024829279 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112769518 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.05724939 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073169521 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047209606 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059029846 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043448296 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078927591 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024487344 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037804467 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.064752007 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041360886 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089170334 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.049768748 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071513205 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036021911 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094842959 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084247217 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.180326657 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041419388 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059541436 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097563954 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069001081 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087361125 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062955321 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036229803 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.076151109 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.066568035 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0581632 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065501284 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035667439 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132987402 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044961253 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.233870089 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066158771 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.043434521 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047627985 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063023321 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086840861 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076534432 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.068867906 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08084298 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045177574 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079200607 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.052393096 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.075955504 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054731891 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026218704 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.072357268 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078900214 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049530113 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052100248 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078007322 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055863399 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029335215 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.042355453 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.07082101 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033537764 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.061047087 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03849991 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.081484824 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086332323 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051087119 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067598143 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074191208 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032158897 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115847569 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061860234 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027144369 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.070976079 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0659064 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104158474 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050017724 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029303392 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053329552 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056479909 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.113960808 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057466382 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034717946 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07084081 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094907948 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048982181 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.270251455 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050325123 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097640069 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070138572 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040921356 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029773048 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.049138601 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068280719 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066390749 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079452171 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050560158 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.038204125 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041459349 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076357641 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061848577 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034115343 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075456588 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.059443229 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.029648179 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045445043 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.032168619 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108426423 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.04168124 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097578141 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.24355339 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.029844705 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059034137 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049362946 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057823637 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.053428447 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07227581 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089708511 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.143298153 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043034537 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.036040468 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060198248 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093126703 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076416112 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043626779 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.037915176 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051926092 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062351023 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.052673821 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073610684 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046315251 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06202524 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054691716 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089714505 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093518774 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053799539 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058233601 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058271114 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.065624295 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028936365 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108943295 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05645732 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076002373 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040965309 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092884478 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.069058337 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059942764 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04038771 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057316917 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.055720617 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059428074 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095578102 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.04738176 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026265856 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047037674 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099816117 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030995239 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072512956 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.044572597 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.046183133 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071013025 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.047710933 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036200643 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022742381 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077295249 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112216416 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024998735 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072201408 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.070823276 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058738536 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.078157467 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.02393445 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083441733 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093835726 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082094598 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105240785 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.398186958 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078640257 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074579451 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.080999072 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.227430915 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033143172 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.0770121 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084351235 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045146734 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044279862 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085058875 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096792587 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.084530538 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.06417534 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072562907 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.056085536 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060335455 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055079385 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.052695245 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092366165 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073488306 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.075961687 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037214086 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062135835 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070849186 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087016317 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034408804 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092108178 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.037984181 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094363217 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.031940681 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078359817 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030376841 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.122638446 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033352389 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052940719 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024027743 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.026237305 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095069007 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.074876745 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057678482 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05170694 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.086873739 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089609913 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031781233 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065271685 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068083702 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057451159 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067967727 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062467618 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042515496 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049120892 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06154572 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038860192 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034829863 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079891271 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050884382 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090137167 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03753046 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029222818 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093229519 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066018906 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04854737 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030994443 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062783653 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.082714656 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047575758 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041184156 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076734662 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060535325 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098372656 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.045736129 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.057538494 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082079519 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03670585 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.051831581 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024537353 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.045064972 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.031564045 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087798449 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031433464 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.236156151 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023212093 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081008307 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038044161 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.04988741 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.056133105 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060059382 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085409846 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046894349 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089376499 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041300913 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.069764722 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059570702 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063858337 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038915733 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054400723 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055639032 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.072445869 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.045836634 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071379603 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091502551 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053648657 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092168115 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042795032 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.074499272 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058749351 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075855921 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064870026 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146236959 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090994158 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066697723 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065694578 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029432118 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049266183 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06423603 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06321393 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126294525 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07715684 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026164458 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057439314 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047500249 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060132178 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061089911 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033367585 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095262374 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054195757 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041386519 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061553443 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.042618209 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057906485 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029812311 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056227155 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.049333457 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048761751 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051179653 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069684263 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08328959 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064583844 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099609248 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.057786912 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045972072 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.073672904 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073135293 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070932493 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038101322 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038660542 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099742418 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077198652 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.082165309 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.053999205 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067181375 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071221177 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056740039 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.239834369 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058305306 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.074999084 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032676108 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.029742812 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022384911 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025696002 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07415501 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062270271 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060493671 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056025017 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025896526 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057241522 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058824979 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025631486 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038153268 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045768032 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050954379 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.034947572 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056606646 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.066424571 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.046515403 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053078019 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055420682 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089873372 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.050448888 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040809746 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093177914 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099454854 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04127315 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046122601 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025341026 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.032747303 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075323845 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096358354 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099549635 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032583851 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040144642 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.037563236 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040510802 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025412099 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.042436124 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042424979 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058066381 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05266 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.067080096 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05762746 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029618694 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060871938 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052894878 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059296673 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.062225872 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073734414 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079396063 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.090866845 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068672491 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068462783 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029962603 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.033172053 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030167787 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033975179 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060747455 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.033434634 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030628308 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102331466 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.046310375 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066505044 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0683584 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042667693 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030037023 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08929337 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024143255 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090711065 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025534146 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034920207 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036746112 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03340798 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050718576 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099150449 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066395851 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066049653 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062792067 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067515461 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.297984078 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106901894 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037757121 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091222853 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0287886 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.029351783 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029432636 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059073089 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041668315 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068962047 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092325914 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04032893 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052028737 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030894489 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091531078 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.048983324 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052779176 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037825963 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032131097 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091166755 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03285999 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.037156549 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041347233 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062560919 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.025948893 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053648123 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036270867 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032833876 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142437746 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.665183828 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049728706 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.028267715 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049690021 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094189043 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085853428 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049131745 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063610575 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.071256659 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057815221 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047722528 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067004552 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.154568261 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027904052 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048460902 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.051011194 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055677802 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061535962 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.049619988 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.04150865 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.048764972 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.039899845 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033202891 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066796903 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039987251 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050139788 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.061245275 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036897295 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.041852608 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084546721 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.056268634 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.038091891 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043573282 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.066417809 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041399228 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061523557 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.024148523 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065362196 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043487892 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075564978 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.055166381 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06566634 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080653925 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048835899 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092931471 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.064672182 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079395866 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041944476 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032746104 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083104633 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.045991996 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.187920482 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092964102 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.045259109 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.056948685 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058082644 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.048742715 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060256424 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064017515 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063564014 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052079257 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03121308 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04957342 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.056335999 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037883401 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031902513 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.02604022 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.028909838 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059025421 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03669435 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038973324 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067342654 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040861616 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054587323 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.049553155 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072698452 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041549855 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055415722 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061230104 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044609226 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083598729 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053655329 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079609017 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126333055 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083995676 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082299797 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08601387 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.031681002 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.032850381 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023133379 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068359513 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033690402 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.040805464 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032837439 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085862713 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.038282862 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064476384 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.210129761 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034185638 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046679671 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04972815 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023968249 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03731065 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062941524 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040331444 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033646589 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065352219 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035633845 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081376239 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061743456 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05239825 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049178058 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034322108 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06170973 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.058800995 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.082805678 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.052128178 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.02859649 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078782378 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061068031 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097372254 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029101059 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035229076 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084219447 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060102753 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091094779 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036154157 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117375736 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101027874 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06121703 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091668123 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02586526 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044657947 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045400027 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.0791944 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041472273 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064717212 seconds)
  done (took 40.126663621 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.14054336 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.254628587 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.129064744 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.109609565 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077128214 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.077057959 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.246485143 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.090859773 seconds)
  done (took 2.256660079 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024975098 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.054581031 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035637652 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.30234354 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.052909492 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020966609 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.027207934 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036163213 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.022535673 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020484771 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.058128983 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020775647 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.02470598 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.438934648 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020067455 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.024720831 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024705247 seconds)
  done (took 2.287916392 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.301531213 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.570807231 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.207239218 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.455399807 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.103191621 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.560541566 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028731806 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.033757009 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.624543072 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.164155438 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.097334945 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.174491693 seconds)
  done (took 17.385647735 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.03121938 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.147466644 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.146291748 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.027770536 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027381917 seconds)
  done (took 1.518857753 seconds)
done (took 75.655311236 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040805199 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.121777253 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020775 seconds)
  done (took 1.233728803 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.149868998 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.145906875 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.146459698 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.147479996 seconds)
  done (took 1.649819918 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030549472 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029855107 seconds)
  done (took 1.127848207 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.173431271 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.282835923 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.052090417 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040106853 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034627983 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.035147258 seconds)
  done (took 1.181496534 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026979402 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.02464036 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024727734 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.025071231 seconds)
  done (took 1.161654145 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.129586444 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019676399 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022246853 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023640257 seconds)
  done (took 1.256893866 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.039991521 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.038666327 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.068419527 seconds)
  done (took 1.211860544 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039350778 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.038649827 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.03304465 seconds)
  done (took 1.17707905 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.055891428 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.047033237 seconds)
  done (took 1.165579896 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035822723 seconds)
  done (took 1.101209511 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.044324484 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.049940563 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.204976188 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.172355793 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.209537973 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.192154072 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.032345749 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.029629444 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.031960309 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.03403689 seconds)
  done (took 2.061378197 seconds)
done (took 15.942022977 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.036116109 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.141991253 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.268999149 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.039006974 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.607928436 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.266116827 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.683611287 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.042505687 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.052815874 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021843596 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037996455 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.586619533 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.68541888 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.106969652 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.670264102 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.095716601 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.514846188 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022051285 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021187338 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021646529 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.663700638 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021367633 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021466955 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022081635 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.513240219 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.286585218 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022659497 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.092393213 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021695871 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025468024 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.271070813 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022721023 seconds)
  done (took 11.963212177 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026101614 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.075244232 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026561047 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.036149814 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023483896 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023963485 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.039706808 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022210501 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.063760014 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021944187 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037666114 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021420418 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.026094752 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022788038 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.040803859 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021763376 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023595933 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022382866 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021859658 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022489657 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.03949689 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021617869 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02224085 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022329766 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022099107 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.035843809 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022761131 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021909268 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022096347 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025440624 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026528084 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023294745 seconds)
  done (took 2.002269073 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077549094 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.076532554 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027491144 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.060357235 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072156871 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024787314 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.102649246 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043397871 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066308358 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022330951 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037791231 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022092773 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.057167571 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023150861 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041074683 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022200484 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024108574 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022661278 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021747628 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022267372 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.039653924 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021909936 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02213851 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022688152 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022392652 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037616321 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022798815 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022070112 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022008695 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025469443 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.02714335 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023244953 seconds)
  done (took 2.253220599 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.025914928 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.02597791 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.031672803 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.03489874 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020408638 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.02298468 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024116321 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.02042811 seconds)
  done (took 1.285739977 seconds)
done (took 18.587461731 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.03570805 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022155866 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025013366 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.046156138 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.028528648 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.136338897 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.02472705 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.02719313 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025768558 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025043496 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.027203712 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019603416 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.024376526 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.024360064 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026003128 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020192972 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.139654738 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024589355 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.137075136 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.138756446 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022846009 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025793702 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028639824 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.1375397 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.137680888 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.13748914 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.029365668 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.026104605 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.025784776 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023247594 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.136070078 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.138597449 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.023039887 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.134124004 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020609923 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020361797 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024912597 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021948338 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.141532122 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029570007 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022664634 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029124064 seconds)
  done (took 3.374388033 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.142126712 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.147109769 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.140352908 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.032637026 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028973265 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031971053 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.145639953 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.02938345 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028187129 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.144897783 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023944418 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027856807 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030059179 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021058316 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027633637 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.024330125 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029705256 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022118308 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027577841 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027803666 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.146708438 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021474421 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028713006 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029205802 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023852443 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029858305 seconds)
  done (took 2.507349806 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031326015 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.04302404 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045388121 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.108412049 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062746085 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.043592651 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036874931 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.047143248 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.053413021 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021302508 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.043587653 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.049341612 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.05033234 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028201731 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.059818379 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.040045371 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.0345573 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022864319 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.02751882 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.05666261 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.044634667 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.040526209 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053762906 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.04152936 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020348858 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030346818 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.02560427 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.038352429 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.032530576 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033257758 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024840658 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.0247612 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.022218148 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.031805929 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.02465542 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019733967 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.044615501 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033673071 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.036031743 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.059923924 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.031434736 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022400041 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.047320602 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.080400485 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020122426 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023938654 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025396354 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033661509 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022618637 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.063162735 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036028448 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020833699 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040325241 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022489275 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02255842 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.041755242 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022763203 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023327004 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.041444588 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027577796 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.043238191 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026801443 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040814955 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020319796 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032465969 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022400407 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022864811 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019891255 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.05453076 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028209469 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.066500134 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022133336 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019604362 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033125387 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032365202 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028386319 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.019872011 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.03901179 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033504722 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024935665 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.039321386 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024058266 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024563441 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.064660978 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020450044 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019596133 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019478974 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023566844 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024388093 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021672545 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033178782 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020586152 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024578052 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.04747328 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020833265 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021798518 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023711466 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022462139 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020572792 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030286146 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024282162 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022982779 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.03364145 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021852836 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024528229 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.036454499 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030263772 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.01985713 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022394125 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023554953 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022956989 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.022636438 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024469567 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022883693 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026733851 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028695746 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.026925322 seconds)
  done (took 4.965955597 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.231672255 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.221374038 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.02233356 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.217471901 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029552088 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.149777565 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.220802086 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.220938831 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.0220561 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022987839 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.02125993 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.165126951 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.160023949 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.171719801 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.151934639 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.024179788 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.054465177 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.171026843 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.22608513 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.220133952 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.057241837 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029135951 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024746581 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023499743 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022816031 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.03059825 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.038944733 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030547754 seconds)
  done (took 4.086403856 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.029988183 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.065908024 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025597216 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.046271583 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.037541861 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022506782 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.02389391 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022642561 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.03873606 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027300606 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022248497 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025917467 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025306803 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024004036 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022178615 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.028190431 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028629617 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.020907645 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025527468 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026465475 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032999172 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.044469399 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.02574202 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021813029 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.025133564 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021776094 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026801703 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029989841 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021632729 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021701757 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019149065 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.030580359 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.03681561 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.023266978 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021629297 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022561985 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022300908 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022613776 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022060283 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020284528 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.02022908 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027090847 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.02061771 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.0265843 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035295606 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024341009 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023476989 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024473863 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024636195 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019144916 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025271318 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025280469 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024574134 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030472727 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.024344589 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024791025 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023522487 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036714433 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027862873 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021875783 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021300381 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020661535 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.02448555 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028331953 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038293761 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024132066 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020532255 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022397759 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023687381 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035405351 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021500762 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.028574491 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019233881 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022642178 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024409819 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.025109789 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.0235414 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020771267 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021768943 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.02153668 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022454765 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021855712 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021434601 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024685042 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020138019 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020830499 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022758243 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023959561 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026883479 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.021273941 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025401272 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023653383 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020845858 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024650628 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.02753572 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024719768 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.039948757 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029352644 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022852079 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019933511 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.038373059 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024832484 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021489608 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024019112 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.030744683 seconds)
  done (took 3.847758622 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.05264293 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024194438 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041394414 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.057302588 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.03224155 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027733704 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.03583 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023420142 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.043452307 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021247038 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031269389 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020425943 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035159698 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030810073 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023958277 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031968335 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024760134 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042535349 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.037003908 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020790243 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030614794 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.034459338 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.034520472 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039528723 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038844895 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040140672 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.03411045 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024784311 seconds)
  done (took 2.044065755 seconds)
done (took 21.897920879 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.124876818 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.309620697 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.109678718 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.673029962 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.171962575 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.231173056 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.307700604 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.08762689 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.033913169 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.192918012 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.744036383 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.310307173 seconds)
done (took 59.466158541 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.246191236 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.258711369 seconds)
    (2/2) benchmarking "String"...
    done (took 1.339766573 seconds)
  done (took 3.708099 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.5352995 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.096969433 seconds)
    (3/3) benchmarking "different"...
    done (took 1.130133359 seconds)
  done (took 4.856672867 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.511843003 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.082362794 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.436701658 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.086165515 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.10242582 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.884952419 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.230681204 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.776857187 seconds)
  done (took 27.70508368 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.161150361 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.377186431 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.54388093 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.575714066 seconds)
  done (took 17.849547858 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.551009124 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.469224676 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.467883476 seconds)
    (4/4) benchmarking "different"...
    done (took 1.735760912 seconds)
  done (took 7.449312821 seconds)
done (took 71.515571924 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.086474067 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.246120011 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.098677508 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.278555425 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.172265268 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.164356381 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.099303988 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.11521217 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.096255955 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.098215485 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.996741689 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.095979296 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.102898625 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.15298545 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.10463496 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.124208611 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.241642556 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.099808066 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.130870376 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.648935731 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.255125451 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.09754 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.106923157 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.169265585 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.171581294 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.153090994 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.39003436 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.10685443 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.691755559 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.100912982 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.103401529 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.098828736 seconds)
  done (took 180.695148349 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.085553031 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.859653805 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.901055797 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.109181022 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.417050227 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.44619433 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.903627459 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.43756579 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.095121294 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.123122973 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.091538401 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.088846881 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.114604226 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.626092305 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.130954455 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.11895925 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.997363851 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.962585085 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.143641785 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.981152092 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.088645032 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.598963764 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.592669476 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.913989014 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.111372503 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.157552852 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.103743313 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.116400569 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.567503476 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.999959225 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.106760696 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.125984447 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.278332202 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.331432101 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.086387161 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.103441112 seconds)
  done (took 152.023221557 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.271863297 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.093587869 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.130944166 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.204455189 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.935892489 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.763608332 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.096903284 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.085617544 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.085819531 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.092629678 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.087613537 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.15225512 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.09579528 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.375093929 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.125701425 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.087826473 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.086576643 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.374905979 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.106498126 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.085812736 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.086273908 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.186568651 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.437817695 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.197349929 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.095932139 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.094130154 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.19504663 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.102852645 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.087400505 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.085758241 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.194724949 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.096335283 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.213494698 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.204590625 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.101389813 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.141628755 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.103263681 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.18957666 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.098045376 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.085848663 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.086984573 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.131747421 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.095196065 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.955054968 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.195414836 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.098974605 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.104467743 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.652481721 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.682562814 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.098551741 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.086479056 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.085920331 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.089131509 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.08723369 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.523150708 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.10097371 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.119666064 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.181393368 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.102969534 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.08668927 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.086064909 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.086145563 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.086492396 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.092583817 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.121778408 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.655463359 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.33367067 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.449125737 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.749756731 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.09631977 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.086292641 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.085936153 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.499388765 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.156833728 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.08769737 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.085585545 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.25371998 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.095753497 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.086792487 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 2.923863844 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.934125176 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.096710345 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.194583023 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.096395031 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.085727897 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.50796966 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.385467904 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.106018447 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.105305297 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.140106936 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.089601462 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.086081235 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.092661541 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.924922147 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.097489611 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.098854795 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.296824178 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.096842201 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.085656594 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.107999247 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.439709006 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.09626798 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.168701827 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.475643703 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.90628054 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.096751795 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.08614149 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.104666461 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.087192754 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.097879845 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.097752567 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.087155435 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.086154422 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.090444601 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.085891648 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.085425767 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.085325333 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.104400159 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.086913067 seconds)
  done (took 322.863830378 seconds)
done (took 658.05722789 seconds)
(4/20) benchmarking "parallel"...
done (took 1.086163774 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.34201406 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.115288893 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.310166854 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.3541385 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.293796222 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.267491286 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.296972096 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.385080873 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.323374605 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.259919221 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.317208812 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.266127119 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.375786651 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.350033612 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.352177205 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.375367373 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.2892553 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.779762044 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.306392316 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.266309419 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.291251605 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.256799252 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.250207082 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.318441647 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.35209818 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.289387082 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.493452929 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.335410128 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.296580962 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.342143551 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.363549946 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.377316906 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.309875314 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.344069613 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.357439803 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.357509958 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.279675658 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.356045565 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.275316029 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.304274632 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.31566002 seconds)
  done (took 62.589881586 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.575775553 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.276218322 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.402853975 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.406072372 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.82653914 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.396582559 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.497654146 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.275452144 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.279524791 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.392117621 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.415115052 seconds)
  done (took 17.868155906 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.322764034 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.274848773 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.411028924 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.411827895 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.504341585 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.404237684 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.448434923 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.272991 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.288790281 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.404645865 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.414131325 seconds)
  done (took 17.279113636 seconds)
done (took 98.823343213 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.683721098 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.168349396 seconds)
  done (took 3.947031529 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.117382961 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.105927861 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.098560695 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.101713977 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.09993724 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.098245291 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.149307713 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.111274375 seconds)
  done (took 9.978195537 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.097962572 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.098093457 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.097857439 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.09728098 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.097013825 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.096911478 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.09785581 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.097005031 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.097309419 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.097802125 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.097459248 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.097339877 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.097960609 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.097881345 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.097573913 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.098125513 seconds)
  done (took 18.659174604 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.097078473 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.097810964 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.09709479 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.097033023 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.097074915 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.09695158 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.097424302 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.105646143 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.097335342 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.097132759 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.097352945 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.098370336 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.097261483 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.096981048 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.097656142 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.096891778 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.098729027 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.097000665 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.097586152 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.097345885 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.097130889 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.097156664 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.097777177 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.100493858 seconds)
  done (took 27.443883998 seconds)
done (took 61.140092318 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.694162979 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.914387195 seconds)
  done (took 6.703676067 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.098461117 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.098022317 seconds)
  done (took 3.3565359 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.097646272 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.098143645 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.098369572 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.097246581 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.098500598 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.09746543 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.098121883 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.098473122 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.098395338 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.098341394 seconds)
  done (took 12.076209507 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.097411646 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.098181737 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.098031413 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.097459084 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.097113237 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.097547147 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.097849261 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.097601306 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.097957632 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.09806511 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.096875933 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.285401668 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.097510495 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.323734575 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.098482852 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.097909699 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.097635529 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.097400616 seconds)
  done (took 21.267737071 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.098891803 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.09719271 seconds)
  done (took 3.291581837 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.098086537 seconds)
    (2/7) benchmarking "second"...
    done (took 1.097642957 seconds)
    (3/7) benchmarking "month"...
    done (took 1.097317001 seconds)
    (4/7) benchmarking "year"...
    done (took 1.097445994 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.097768305 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.097554276 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.097490565 seconds)
  done (took 8.779043925 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.544104014 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.269278563 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.321397038 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.554606846 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.767595388 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.025264674 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.769540037 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.028102815 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.845555624 seconds)
  done (took 16.221143537 seconds)
done (took 72.782904988 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.776892174 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.090818465 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.55981529 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.179926562 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.174064771 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.425448484 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.086787685 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.621807646 seconds)
done (took 37.010016488 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.09502582 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.08681295 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.125840719 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.124421491 seconds)
  done (took 19.433494095 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.087575436 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.648273579 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.128217484 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.157831364 seconds)
  done (took 19.19840144 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.494270074 seconds)
    (2/2) benchmarking "read"...
    done (took 1.498456652 seconds)
  done (took 4.107846231 seconds)
done (took 49.923603145 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.09731672 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.097807645 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.097543578 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.098100352 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.097856705 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.097043402 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.097955345 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.098094627 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.097872947 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.098063247 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.098024771 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.097723465 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.097232625 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.097236514 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.097150589 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.098033651 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.097634979 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.097453376 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.097418792 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.097513138 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.098077098 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.098825748 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.097751527 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.097851451 seconds)
  done (took 27.441607841 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.23792213 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.190876205 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.236020116 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.224415322 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.213687645 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.229269557 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.23236246 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.16657373 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.234765842 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.243614358 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.141026896 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.205585867 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.235479032 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.209364549 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.232447699 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.209599252 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.234966339 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.16619044 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.232338747 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.213465692 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.231187391 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.166049492 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.205326248 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.190868999 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.201947234 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.145296382 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.370540205 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.19062287 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.194116286 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.202524962 seconds)
  done (took 37.485174544 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.131737504 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.098444734 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.098192238 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.187444919 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.097770893 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.097990909 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.097773104 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.098652601 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.097933972 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.098609144 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.098603606 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.098428147 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.098655204 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.09846141 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.098462123 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.098135169 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.133773513 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.276864407 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.098541047 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.098142365 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.143101496 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.098019834 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.097972523 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.09853144 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.098389949 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.097895002 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.098252797 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.098669349 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.098273018 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.0979508 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.09790962 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.147561928 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.137659202 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.098236713 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.220444398 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.156277573 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.098396648 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.129464641 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.097949065 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.098654544 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.09919196 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.098476637 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.098456613 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.098332977 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.161060406 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.098514523 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.098533073 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.099061539 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.09910069 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.098559148 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.098434063 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.098451695 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.11346684 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.098771407 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.098315476 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.098590724 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.098779421 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.098193329 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.098427464 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.09807549 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.098202772 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.173270141 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.098277808 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.098268276 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.469594701 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.097781588 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.164654146 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.098303549 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.098547977 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.315011604 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.098105248 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.300779875 seconds)
  done (took 81.870834312 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.098271542 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.097703695 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.174916908 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.175129644 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.098046032 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.097690867 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.09779741 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.098144423 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.759800706 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.098109109 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.098233883 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.097759944 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.768322333 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.098357601 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.098089538 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.175402107 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.098389704 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.098022058 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.09794651 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.098302706 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.098084868 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.097956001 seconds)
  done (took 26.817759116 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.137070429 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.113007114 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.139393795 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.098195166 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.097629383 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.098635963 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.136749751 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.113679218 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.137905377 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.137631001 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.139478966 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.13734025 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.097559949 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.138182634 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.134248722 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.112605716 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.143341865 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.11299384 seconds)
  done (took 21.322628964 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.274826634 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.263575918 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.231092261 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.139749129 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.359437789 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.354449788 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.2020974 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.320270951 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.193643063 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.263784855 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.320460515 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.194136868 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.354377848 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.140203893 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.189739668 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.359337854 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.231645056 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.139897475 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.264084109 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.201974596 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.273738754 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.264114161 seconds)
  done (took 28.633327021 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.179221785 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.200032967 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.174949969 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.181057121 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.097634299 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.098220959 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.156210701 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.134042183 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.113472971 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.183286096 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.134160893 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.098443254 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.113033296 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.152313989 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.187490655 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.140257083 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.199228931 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.152005069 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.182290818 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.098132116 seconds)
  done (took 24.072146687 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.098982422 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.099094879 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.098753709 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.099165486 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.098970708 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.099331091 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.09962616 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.098643374 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.098973199 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.35347991 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.09885838 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.099183211 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.098920174 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.099164751 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.098764651 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.0994748 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.098955875 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.099366457 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.099430799 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.099012303 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.352773161 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.098437571 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.098809803 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.099272773 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.098576814 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.098975974 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.099426152 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.099283243 seconds)
  done (took 32.378770185 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.161392933 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.09845206 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.098174168 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.098129209 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.098303387 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.166654492 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.098282027 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.098206519 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.098858664 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.098060308 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.0986937 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.098246165 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.098495684 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.160639814 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.098819758 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.098535933 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.236131184 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.09893446 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.173622074 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.086988491 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.098827866 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.206636944 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.09891883 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.097990846 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.086958422 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.099179155 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.098578195 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.098507166 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.099136087 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.098080464 seconds)
  done (took 52.543503824 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.120537296 seconds)
    (2/2) benchmarking "in"...
    done (took 1.119902243 seconds)
  done (took 3.336852656 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.098540883 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.255418519 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.098853031 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.314409953 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.288954063 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.276587244 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.316449451 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.199438698 seconds)
  done (took 10.945226386 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.098849262 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.215953064 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.224935667 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.099150298 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.098723951 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.364862828 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.144645398 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.871680468 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.79185508 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.071689473 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.250291961 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.670569679 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.162923322 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.370222584 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.213854544 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.893073166 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.229990631 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.468629191 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.014210794 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.201473668 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.701545641 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.156733112 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.098773297 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.098905477 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.098944542 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.021928227 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.777503804 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.684906038 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.152675502 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.20145477 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.736840124 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.138145046 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.099445968 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.254190448 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.194275614 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.098958513 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.179160112 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.183731594 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.099675984 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.098641933 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.591754914 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.714459583 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.270289703 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.242237671 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.162906182 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.098978766 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.098986336 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.099243378 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.328885511 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.757131587 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.194879158 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.022963694 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.237715557 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.099500281 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.53154731 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.210020839 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.099929531 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.023371993 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.483621644 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.20926155 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.468627366 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.288859571 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.026742149 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.20421192 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.099402257 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.318591641 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.033634362 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.777199553 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.711555186 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.189689092 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.404311312 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.249611822 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.099845416 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.09879197 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.00079918 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.413221342 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.111785941 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.099127313 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.099090446 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.099147612 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.24961206 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.194569359 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.880260397 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.238309822 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.307056214 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.587991166 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.204199664 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.099136492 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.679411084 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.951310714 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.150910056 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.487685631 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.397177732 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.237724593 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.01010303 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.31958318 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.135547995 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.099118222 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.901181731 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.500949258 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.236264302 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.099690706 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.468628901 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.258926954 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.115621275 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.100005292 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.703999868 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.20327005 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.16124884 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.124733478 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.099456517 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.09960247 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.726509229 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.156280236 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.112729206 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.612571044 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.199915645 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.415881857 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.41062156 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.239315004 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.341779789 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.94753795 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.333352538 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.033029852 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.115296227 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.369540408 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.10343377 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.839274438 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.262260666 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.198990695 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.687751472 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.274403554 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.099362955 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.140984088 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.129628957 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.099384647 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.099219397 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.098899576 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.099423705 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.09949389 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.19633372 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.392549668 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.611254258 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.205239026 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.295160529 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.218874024 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.671697156 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.37520633 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.745454996 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.238255505 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.100147738 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.533877254 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.238881674 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.862856187 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.202593238 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.100031381 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.099870791 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.907118075 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.036791545 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.172419967 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.100127058 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.744583875 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.155296291 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.112824342 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.10016487 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.586745921 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.237494467 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.100692771 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.120292122 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.771022382 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.653560157 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.209689394 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.363471248 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.215722435 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.099705185 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.099943993 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.099546483 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.841602105 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.768244507 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.225430248 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.694026748 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.85456322 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.142727558 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.178292892 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.167197745 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.285985585 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.246571575 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.239061401 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.10044277 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.099318665 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.099594541 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.618978997 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.030601535 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.851463785 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.002373503 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.107508025 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.051398297 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.14404587 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.733124761 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.268761366 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.718390643 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.982214463 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.177216528 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.100087658 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.100043165 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.216795249 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.230582505 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.240141426 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.421095031 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.233944777 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.099689842 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.671638029 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.202229231 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.684752511 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.18020328 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.893240527 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.09994089 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.200435434 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.180140857 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.565694467 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.153390635 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.099719159 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.628797433 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.171570306 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.100159313 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.093873969 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.514445927 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.973677241 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.807684966 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.522295048 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.1355837 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.660208483 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.330716718 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.240731287 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.840707111 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.174855513 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.372962149 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.276543501 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.345534849 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.222808718 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.678309111 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.268668503 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.565473032 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.203785734 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.99617157 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.197141208 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.475158207 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.191628231 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.100118586 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.201915756 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.168319265 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.679078872 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.200385115 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.20372628 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.356401495 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.860758979 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.174769239 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.376423745 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.27561235 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.962677449 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.059926008 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.415861085 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.931158203 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.091007838 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.14443824 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.798378148 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.195261852 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.371690939 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.235275826 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.100448412 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.100013499 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.197149768 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.160456383 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.100573246 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.352945455 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.992120949 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.161155987 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.145075474 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.113815084 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.100623353 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.229443915 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.137327868 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.22457379 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.451654663 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.668149575 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.820241485 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.200008731 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.565652986 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.152410577 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.813033915 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.153521954 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.114111307 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.68337482 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.200417783 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.291101427 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.217787981 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.166322068 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.551497698 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.254439816 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.329540117 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.169002668 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.196256555 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.787283101 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.630575808 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.301820053 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.275588051 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.272648113 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.657968127 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.199494085 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.649042226 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.215722858 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.829294562 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.064556006 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.12816531 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.100523918 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.100583493 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.652974198 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.189533754 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.116274287 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.837049578 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.563998936 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.159435362 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.863434746 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.155936859 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.114346769 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.100450747 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.099948786 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.027599973 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.062450134 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.271005942 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.179086975 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.10062037 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.100140874 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.024501204 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.292372 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.773384403 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.861417187 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.996376065 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.237574304 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.101135423 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.100617961 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.100411913 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.10045473 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.100204727 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.100805989 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.385291373 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.237956947 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.740960974 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.157825335 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.113709549 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.2328363 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.134705724 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.100557927 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.160763423 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.130080439 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.193397092 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.168184719 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.100863073 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.528954675 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.23884232 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.086785667 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.263984849 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.276471413 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.274755068 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.357179678 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.254087193 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.533344764 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.432741609 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.98572121 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.116013291 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.025918491 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.145250005 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.794019725 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.050411391 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.442136693 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.723615534 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.206650211 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.288236423 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.915638129 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.51412509 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.280970501 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.136925694 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.100310563 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.099867348 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.080570067 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.294005901 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.145418342 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.307366169 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.216842065 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.098150529 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.278247619 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.166435151 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.093843209 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.264275763 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.117739182 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.10144294 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.100453748 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.468883992 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.818234486 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.132645664 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.1012142 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.020201804 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.841320939 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.923291355 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.762361885 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.149037898 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.235121834 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.101047844 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.277807077 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.150899816 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.619624625 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.222211962 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.834080813 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.408764296 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.145616577 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.154989375 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.471638024 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.851962712 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.364506175 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.18624743 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.101238271 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.362396817 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.021297585 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.240712707 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.030030232 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.360024333 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.652280523 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.683841215 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.386248499 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.185865284 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.020284041 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.667274452 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.208725697 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.117571402 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.905533723 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.241185569 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.296069836 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.961654931 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.294770814 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.239294615 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.769645571 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.728278681 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.238096552 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.681703777 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.239302215 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.100988118 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.589275884 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.117179567 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.138038583 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.191230508 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.100659244 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.118906542 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.685295263 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.677562383 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.207486548 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.145237375 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.101149066 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.576288095 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.929794381 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.154949498 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.113913774 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.101237718 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.274325993 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.24941608 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.101135104 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.532920608 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.733095312 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.238287874 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.618420728 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.298635211 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.240447293 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.290614252 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.400482073 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.231712786 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.161661566 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.100962378 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.100900879 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.100211457 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.411427613 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.22952858 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.101297978 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.661872822 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.238672653 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.677005835 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.190438602 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.259202752 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.13759723 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.519899835 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.239063456 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.624170392 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.110251864 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.143302993 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.395321528 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.275023915 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.137334905 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.73947109 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.173860623 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.100845741 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.952723462 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.265582095 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.299613101 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.37153326 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.316086922 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.155598623 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.706038913 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.179349816 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.593858082 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.214259688 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.101364868 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.614333004 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.286962208 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.415950343 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.218896913 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.461914446 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.184191957 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.460670903 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.43523295 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.1915872 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.102091184 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.101011098 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.014404435 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.114525188 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.658388846 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.143362114 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.472512373 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.200091046 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.966651846 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.713724609 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.624991991 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.395105472 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.306185182 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.294520642 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.267759231 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.016100637 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.337382955 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.126198517 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.230819805 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.193684249 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.802689257 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.12043815 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.101793034 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.424345142 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.228764186 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.101876385 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.101273589 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.027074881 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.774476384 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.171573786 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.224777297 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.163792488 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.101156398 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.662411716 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.365669516 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.138543475 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.101111331 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.101343883 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.91024263 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.178169717 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.100883607 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.35022566 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.220035097 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.322047028 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.858728683 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.518673054 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.190737546 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.101484439 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.101170695 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.624200832 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.564292496 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.232236829 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.464016701 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.274500732 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.63845961 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.216574522 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.491839919 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.59979968 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.003048463 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.190988867 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.101648706 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.078011243 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.753459613 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.145191131 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.874319306 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.441018626 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.158497895 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.807442425 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.983253096 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.129387144 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.199063125 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.11966667 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.103066886 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.102055948 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.101981023 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.616965099 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.226225423 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.117456174 seconds)
  done (took 1407.942844299 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.377886676 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.101201616 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.101067529 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.100867258 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.101413991 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.101471325 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.101088199 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.10058916 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.101430883 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.101160402 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.100919225 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.101375469 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.101106636 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.38431549 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.101043338 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.101304118 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.10116743 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.101337555 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.101159704 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.101135527 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.10091282 seconds)
  done (took 24.784018962 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.101007322 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.100943988 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.101115231 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.10180983 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.10169771 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.101612418 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.101697853 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.101650477 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.10178416 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.101595763 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.10125714 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.101477361 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.102028876 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.101412518 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.101291603 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.10113189 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.101272674 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.101595831 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.10101169 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.10138727 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.101343883 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.100856145 seconds)
  done (took 25.330762562 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.102148907 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.101541393 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.728484553 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.190549807 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.101326285 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.102326394 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.101721626 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.280059502 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.072696196 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.002787278 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.523561682 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.27239782 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.117239898 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.249334825 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.195321776 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.101938864 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.227490274 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.102269152 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.102364057 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.101413829 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.101536469 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.243637887 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.202513344 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.101494324 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.888955 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.242130235 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.102158061 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.101501195 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.101582201 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.13987053 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.153661581 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.114713359 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.865349775 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.763553375 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.344877108 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.999978052 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.166393152 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.115080154 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.102520615 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.101844742 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.328307612 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.996929453 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.117341169 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.101354136 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.324022878 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.182599588 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.102168398 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.47792477 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.270190313 seconds)
  done (took 87.732867377 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.115427757 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.281672594 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.185016404 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.102029811 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.276437459 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.101783377 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.253905058 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.101412355 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.101311607 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.101669828 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.29390239 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.275290717 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.101561004 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.101725673 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.251375083 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.101643927 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.101385981 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.101647953 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.101555493 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.102399552 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.102353339 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.203288361 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.267524385 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.27436797 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.102087039 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.101763514 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.101848265 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.102169924 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.268418371 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.101874601 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.102285397 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.102187667 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.284951454 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.241474597 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.102105825 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.10204697 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.279800414 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.101523753 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.102230562 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.101551967 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.102445359 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.10237754 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.204720028 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.290866333 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.101924609 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.233340153 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.10166113 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.102169486 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.265608473 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.101924781 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.102205734 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.284904094 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.102290893 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.102110406 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.102381037 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.274835959 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.101768448 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.102068948 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.102939328 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.26024791 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.101905702 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.102479192 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.274733853 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.101503629 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.101892828 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.284123535 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.233715613 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.101462477 seconds)
  done (took 79.847821402 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.101950243 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.102233637 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.102375739 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.103007894 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.10253427 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.102420932 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.102394984 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.102300253 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.102627305 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.102468031 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.102533953 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.103182359 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.102600191 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.10318376 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.102672252 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.101996361 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.102548805 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.102614145 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.102785094 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.102601737 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.102450272 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.102309208 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.102547774 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.102788764 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.465843371 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.102864476 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.102825136 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.102538383 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.102306737 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.102650669 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.46456421 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.102973389 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.1023273 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.102625701 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.46412534 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.102526109 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.102438707 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.102492276 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.101998538 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.102592928 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.102652886 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.103045916 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.102800567 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.102706979 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.102366058 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.102349201 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.103020177 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.464256707 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.102846957 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.102189568 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.102789083 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.102634998 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.102381466 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.102563363 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.10256678 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.25327658 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.102856135 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.103358086 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.103146084 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.103035078 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.102216086 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.252716451 seconds)
  done (took 71.212422581 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.102487114 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.102410467 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.102253232 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.102218649 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.102199479 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.101922689 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.102378717 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.101873773 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.102082188 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.102070144 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.101918945 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.10240747 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.101982814 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.102041492 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.102018616 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.101852413 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.101711647 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.102162934 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.102242874 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.10193885 seconds)
  done (took 23.143178503 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.102184229 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.102241001 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.101523339 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.101828156 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.101676309 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.101942516 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.102128046 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.102544534 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.102179165 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.102360611 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.102133222 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.102588813 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.102141011 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.1021524 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.101780635 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.102379398 seconds)
  done (took 18.734990151 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.102197377 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.102173899 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.102644209 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.102865845 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.102053665 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.10278566 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.102223947 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.101780639 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.102178189 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.646289448 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.102613702 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.102058299 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.101853899 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.102389769 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.102092638 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.102021196 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.10216031 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.101754099 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.102170687 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.102027551 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.679646726 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.103214557 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.102125323 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.102238321 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.101966108 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.67434114 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.101836323 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.101970364 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.102023656 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.102284617 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.10185048 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.589900638 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.102097689 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.101903392 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.101943105 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.101856945 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.101883792 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.102005957 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.102091156 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.102234884 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.10240125 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.101115339 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.101720153 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.10233781 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.10190145 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.102586024 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.10188325 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.570893255 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.102629498 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.101827719 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.101793471 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.101958621 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.102090281 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.659118065 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.102442169 seconds)
  done (took 64.926790291 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.192300726 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.210012546 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.10240247 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.102377301 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.156510299 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.152932691 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.196177274 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.117897673 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.153406679 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.102205135 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.188383216 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.117283046 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.153532035 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.208394268 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.187846997 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.191991693 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.101979067 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.176180808 seconds)
  done (took 21.912154929 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.101958181 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.102178438 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.101740065 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.101702328 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.102244894 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.101551419 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.102405935 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.102022533 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.102340429 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.102234406 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.101798037 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.102044391 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.102243433 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.102266856 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.102213245 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.10215752 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.102410804 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.102378896 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.10202967 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.10235535 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.10246452 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.102438983 seconds)
  done (took 25.347682895 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.133845407 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.148366136 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.103734191 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.103355131 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.103171012 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.125640136 seconds)
  done (took 7.818432426 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.155179802 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.102723705 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.138445928 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.151294654 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102639889 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.101893185 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102397037 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102498322 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102465218 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.409929487 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.101365188 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.102772177 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.103158791 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.103058798 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102175144 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102736074 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102816089 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102352893 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.147428112 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.242694817 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102416261 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102667881 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.102484375 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.101880619 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102668269 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.102508802 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.102534964 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.410459278 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102111803 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102454243 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.10251364 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102213218 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.102515914 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.405529847 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.149156706 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102600871 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.101853698 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.242146786 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.102124939 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.102284518 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.144608029 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.102441616 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.102452403 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102538951 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102421971 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102232788 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102309819 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102609063 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.10239991 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.458879596 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102554205 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102651483 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102655538 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.10273326 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.103136451 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.454366615 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.409448489 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102054042 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.102251086 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.409787048 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102121059 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.102667564 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102127676 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.410860391 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102913171 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102972019 seconds)
  done (took 76.986560439 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102233268 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.138134022 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102816557 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.417499028 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102864036 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102598115 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102146803 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102523644 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.10256006 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.155777111 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.248836656 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.10258912 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.10231467 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102425518 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.102291244 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.10246832 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.102409604 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102338469 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.156410967 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.455634742 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.102445224 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.102676433 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102673599 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.102711922 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.406351071 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.103113534 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102338756 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102277621 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102300505 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.102257709 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.102568107 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.10250925 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102927775 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.138769638 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102181048 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.10271649 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102754209 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102686242 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.102671448 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.10278286 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.102559057 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.245401954 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.102446234 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.102932976 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.406198785 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.102706186 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.1027082 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.162501996 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.102219096 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.156886946 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.406589564 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.405659871 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.414520728 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.103376191 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102525457 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.102291174 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.10268342 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.10265786 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102383573 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102582584 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.103121165 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102894311 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.458134373 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.1028548 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102419567 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.102529081 seconds)
  done (took 77.005224739 seconds)
done (took 2360.662590788 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.18471819 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.166667129 seconds)
  done (took 13.4530301 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.103583827 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.104408918 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.260157154 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.104639054 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.095819568 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.246585865 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.157046321 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.113963534 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.103629559 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.18963862 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.104658076 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.240386807 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.210012807 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.103976769 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.144696587 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.114358728 seconds)
  done (took 39.550345432 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.09104962 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.272506762 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.145057973 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.881497605 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.106179135 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.132324186 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.395150083 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.329677581 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.394093232 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.551148076 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.360833306 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.610530545 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.897772949 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.216948863 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.601650994 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.613698238 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.67005859 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.771870677 seconds)
  done (took 59.143904544 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.098012014 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.247537063 seconds)
  done (took 8.461495676 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.134324715 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.14003705 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.105847552 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.106402911 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.137539674 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.107905473 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.113385043 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.113476842 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.140030233 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.10574743 seconds)
  done (took 62.325317853 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.034637402 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.759282812 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.520795271 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.680556834 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.624462383 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.499492114 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.263160164 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.460041369 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.191389183 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.091648069 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 4.923351911 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.609325965 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.833707222 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.075544966 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.604207397 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.422035009 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.690587647 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.631858944 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.413255834 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.440570135 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.347825677 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.834579976 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.56056892 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.97030948 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.114687358 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.188620269 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.209396428 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.203600446 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.186924324 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.008861318 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 4.928473723 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.128857353 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.06569987 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.111841393 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.027901438 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.736516345 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.752315693 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.310716707 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.452854119 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.401343263 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.485897385 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.377449484 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.231621727 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.351352648 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.330432272 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.319575777 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.061579648 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.343638482 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.195019822 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.216826546 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.485344802 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.285420664 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.234968758 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.221566643 seconds)
  done (took 149.566545754 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.092357796 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.46798613 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.244033682 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.095468911 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.360487453 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.308510935 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.649886615 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.594522558 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.100227548 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.303713225 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.270635194 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.227386833 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.095671127 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.094039546 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.094034374 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.094594872 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.283438826 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.502710661 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.100125839 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.093177076 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.301283412 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.333204084 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.235891694 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.09747489 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.263497281 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.343693511 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.488976442 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.22221215 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.479253792 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.093506955 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.496341609 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.099729477 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.096421086 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.99913592 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.467921432 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.396758414 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.501528118 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.093572781 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.827217016 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.095135917 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.74114329 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.299433007 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.406048146 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.242516884 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.253198604 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.333570282 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.687369541 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.093018793 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.844415087 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.274112866 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.315301476 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.31411548 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.375357383 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.101780998 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.609689376 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.094792272 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.093321452 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.353323933 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.246572141 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.216726716 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.09653824 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.094272477 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.095761288 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.34112333 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.096315625 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.213356492 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.095930653 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.09577948 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.214175047 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.221141688 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.248782774 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.343966578 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.367840429 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.059480604 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.434323932 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.371574515 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.514191623 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.365619442 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.10000702 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.121032677 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.580729201 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.646379298 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.368270399 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.454129336 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.515423853 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.508428812 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.794951037 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.166147741 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.387260028 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.331210416 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.529887387 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.333895238 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.52337201 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.083332821 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.142313392 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.140935458 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.098434414 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.275416854 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.137296862 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.628333091 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.396013011 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.725654663 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.301831923 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.415742859 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.233546147 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.126130136 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.679060854 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.119128597 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.354128194 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.419474033 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.119329618 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.113830631 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.280373567 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.109916991 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.115467976 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.42855448 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.509970046 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.121389029 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.28378494 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.119715686 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.370102705 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.961082488 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.356622306 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.452858861 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.393126101 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.307662096 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.266788925 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.117238386 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.495753336 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.426631675 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.537798174 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.45036121 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.139137277 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.121124715 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.4302719 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.139390505 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.121528184 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.284476888 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.030211997 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.300243149 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.122343028 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.543135624 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.310214808 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.496255645 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.15703603 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.398979236 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.377025812 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.538866182 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.151269205 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.278666189 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.109335287 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.1103585 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.291966374 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.113270145 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.139408348 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.91847316 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.128897472 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.278383535 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.346340904 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.752868018 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.604113454 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.483817252 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.130749926 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.588642178 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.31714776 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.556078236 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.62645407 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.290044154 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.858549571 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.346603153 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.0982654 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.382170087 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.4546426 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.149968019 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.153428569 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.835602427 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.213042635 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.129119597 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.29731551 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.041695594 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.544242354 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.341579794 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.111766074 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.485559288 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.156458709 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.418222497 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.681559051 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.383765968 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.12789832 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.126659748 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.141065888 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.150568727 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.319162668 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.391490439 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.6772369 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.28954636 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.444586276 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.320920776 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.437250342 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.593556408 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.158972518 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.471141768 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.143638322 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.580591384 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.147643208 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.242865785 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.44521549 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.146718308 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.359743545 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.495246573 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.314329126 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.571670421 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.113399655 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.134319547 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.728009399 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.298768335 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.561784292 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.124201094 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.282925328 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.540224588 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.253539052 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.303142808 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.393839191 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.129119867 seconds)
  done (took 728.029369035 seconds)
done (took 1061.622176218 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.105215073 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.114106179 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.122844835 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.13754016 seconds)
  done (took 25.595113203 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.06968767 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.13684452 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.268532951 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.129313106 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.348782184 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.380732939 seconds)
  done (took 11.526840754 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.671691339 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.236035795 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.230951298 seconds)
  done (took 18.282000124 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.596783656 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.753684486 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.350749825 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.2833885 seconds)
  done (took 7.2639089 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.19495015 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.197631241 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.190355589 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.169328447 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.178973789 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.160452807 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.168353033 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.169319106 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.182947087 seconds)
  done (took 11.810588062 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.587543593 seconds)
done (took 80.181573242 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.552511343 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.410293619 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.126196522 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.32664949 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.295582477 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.477715114 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.230127788 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.132907748 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.399555416 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.539309788 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.620274471 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.29648746 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.616645972 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.654668476 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.384051978 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.167427446 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.161385096 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.205874659 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.799116853 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.368977847 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.87793629 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.249132196 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.13023473 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.141241343 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.033797343 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.182099159 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.357172987 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.100160574 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.960002044 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.129978802 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.194137165 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.642556183 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.292564127 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.411352743 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.19959083 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.014578056 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.584905488 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.107054681 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.359774477 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.661445725 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.39764658 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.226066502 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.093264817 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.411299717 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.518465389 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.122903132 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.046635581 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.264773006 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.675023078 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.295346981 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.478590577 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.107314471 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.718704678 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.179086162 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.18675718 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.095026595 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.181914143 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.586063584 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.31657763 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.414376499 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.12030447 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.0928968 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.112708187 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.131453655 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.092786609 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.479565317 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.551106376 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.191882951 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.567930995 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.130816015 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.120450533 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.135015818 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.818917599 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.189724007 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.094132162 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.13582547 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.397543398 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.170797951 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.105303514 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.195455649 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 3.531994255 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.101277899 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.324377313 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.396159967 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.265121188 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.4630029 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.592198122 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.514833643 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.606690622 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.110125641 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.628273617 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.802010678 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.564699625 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.107536867 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.185675952 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.479369464 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.763405028 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.60760883 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.23601831 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.781093241 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.133408004 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.120174553 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.603396263 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.460844802 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.921507446 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.141946011 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.234200423 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.093466406 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.285416166 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.093567774 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.764293331 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.630963798 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.109722985 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.166363097 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.590372737 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.103326174 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.390749824 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.563206488 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.207762649 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.10492471 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.343725262 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.108393073 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.225731164 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.609808883 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.49525074 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.305524754 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.098702287 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.742285166 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.108163419 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.354531818 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.110980058 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.737928328 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.64780176 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.136824865 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.353946392 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.229344196 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.093698179 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.269048439 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.155273287 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.239919734 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.399533778 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.382466226 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.224361166 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.093984794 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.423787433 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.230234254 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.347346476 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.408850359 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.267195224 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.365541843 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.187226319 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.116855392 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.116315201 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.60439419 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.711039526 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.810608703 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.368517547 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.236101028 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.649123218 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.42161021 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.914959801 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.206837074 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.155073547 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.107343822 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.122002832 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.16559354 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.094594273 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.105187571 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.339351475 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.46190829 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.759699845 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.921351559 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.000731666 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.398054135 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.240156942 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.103776335 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.743322419 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.103363496 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.51940978 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.548999667 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.242470145 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.132837798 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.094714866 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.234834453 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.926713478 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.145003822 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.412310262 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.708928993 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.534906025 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.548817596 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.30353913 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.15084394 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.537570062 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.349101197 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.381478617 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.335849321 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.606612095 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.186111388 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.40732501 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.164229741 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.38321945 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.107248951 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.501280299 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.287224814 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.581022326 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.457196708 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.325811471 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.331758868 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.438144433 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.107352203 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.106060599 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.199386424 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.494551169 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.135916666 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.095679346 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 7.980681019 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 1.550589618 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.274238463 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.230302544 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.52818232 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.207550356 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.271616679 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.660656973 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.120034643 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.431396662 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.326996891 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.310213034 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.316971757 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.139294562 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.246668438 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.278380105 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.243539484 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.356785564 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.112878984 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.485275982 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.195369536 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.125512722 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.097093718 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 1.779368479 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.138559819 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.115046621 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.438510498 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.286378272 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.406940978 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.235245728 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.265614041 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.095006976 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.205625536 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.680456183 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.040298474 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.665625397 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.223061547 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.134001225 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.094288942 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.622930846 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.535431867 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.171043865 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.241617567 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.72182853 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.146819944 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.275972155 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.111086174 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.10761585 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.997301411 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.232114485 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.346387076 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.711678645 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.158429866 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.641266265 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.154661216 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.63722429 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.630202645 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.154577497 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.226290936 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.09758397 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.147820194 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.484966725 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.135314049 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.260629688 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.462566343 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.221702722 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.235765476 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.117674985 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.147185311 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.688871981 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.475164684 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.677223419 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.143149442 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.51326339 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.108102233 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.632908721 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.129746148 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.187470884 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.503199552 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.245715358 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.541210676 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.110049021 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.148159048 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.356849115 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.132344366 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.094420113 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.252862691 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.173216529 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.852443482 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.996820212 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.25449895 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.040576757 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.339403686 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.107779876 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.099309972 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.235972074 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.187863238 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.736356957 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.646842458 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.109246094 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.455225922 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.096601101 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.542684212 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.130023138 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.122311198 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.225281633 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.195410041 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.095304471 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.13620096 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.266055075 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.688261583 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.251204437 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.995116513 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.112444405 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.555241673 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.226692185 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.441383746 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.10873409 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.121536651 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.303841287 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.775982448 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.266512975 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.134257922 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.323554025 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.112187929 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.747176736 seconds)
  done (took 869.754219191 seconds)
done (took 871.147833284 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.142196424 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.473263583 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.299798928 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.956440402 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.898204052 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.742370396 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.320006039 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.335157331 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.178638304 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.31930986 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.016576738 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.909016409 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.192652819 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.217950486 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.178658346 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.203906678 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.306599494 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.339950918 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.216468031 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.902128152 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.464928814 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.908442268 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.516394347 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.395598649 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.474143646 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.197314959 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.16474819 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.454056922 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.453487963 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.130309307 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.303988972 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.298761491 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.93381602 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.346208778 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.179258798 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.182483512 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.908610619 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.192747147 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.126637954 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.18239488 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.474829733 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.222368937 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.818835466 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.974218072 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.87875065 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.522219394 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.967662848 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.203354908 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.21411868 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.276988805 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.129634041 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.125994244 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.454117458 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.150725028 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.937982507 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.954333728 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.452703869 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.922025893 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.830618156 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.277484064 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.471208547 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.198134032 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.276314087 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.33177355 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.221281169 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.394322244 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.517623399 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.126719001 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.298897849 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.325705886 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.345639816 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.325721339 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.214464675 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.294516508 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.216085442 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.319556058 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.829958019 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.301061639 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.891084706 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.198052001 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.012634187 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.001562369 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.054157841 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.179361681 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.143409704 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.88095833 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.915190293 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.013686896 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.217096748 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.299520896 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.026436479 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.300671215 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.555424832 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.164611342 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.142490741 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.301131232 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.922498212 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.124242763 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.076478873 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.300554574 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.884987176 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.165357933 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.139744536 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.179328689 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.204127453 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.126242316 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.165662735 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.523238172 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.326094447 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.256554717 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.473138106 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.216855055 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.325695618 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.218428812 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.182966396 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.881822207 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.383343619 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.914240294 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.125340382 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.772485358 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.359314636 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.178932832 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.475179098 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.396327401 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.14304606 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.193347152 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.204554033 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.004990598 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.203130077 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.198576223 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.283719127 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.554301445 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.276321181 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.956620648 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.325327863 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.775396848 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.337102001 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.326270721 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.182802413 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.026115086 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.193967144 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.056159851 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.396405064 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.474549523 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.33951879 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.396199326 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.215874554 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.356640985 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.122944152 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.21544171 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.32476239 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.224975622 seconds)
done (took 238.785645989 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.449055931 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.454317328 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.381840653 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.323741543 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.465564478 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.385849722 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.177862846 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.543897043 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.154732995 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.565629667 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.317285368 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.259647184 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.461406826 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.32834634 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.45348305 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.34173767 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.154808044 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.359622401 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.551151939 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.503044707 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.11702205 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.317600135 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.24482668 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.487570886 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.094885917 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.106438323 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.406637026 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.225051738 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.369225071 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.116892873 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.123010551 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.362074835 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.405955839 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.27900788 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.535267902 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.100620093 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.409952482 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.175959855 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.361350834 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.440581653 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.411503095 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.904219196 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.121241459 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.129362503 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.206429494 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.37657755 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.172679301 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.370907041 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.095178142 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.09835886 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.396306865 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.148300646 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.258790658 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.363070286 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.329832466 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.225113395 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.486176724 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.510269055 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.504736929 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.4062836 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.359716341 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.523429454 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.487257209 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.2234316 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.12326712 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.394953182 seconds)
  done (took 125.04644055 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.503589142 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.419924671 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.542218022 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.41887927 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.656486554 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.562458272 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.494158052 seconds)
  done (took 13.702124802 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.162448068 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.153518763 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.353525533 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.395380584 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.154570122 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.274832771 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.240794947 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.123516301 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.37374864 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.195380363 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.468158939 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.368133292 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.058291919 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.11188282 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.240480373 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.392855948 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.127481772 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.218071063 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.212535698 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.410841099 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.118336258 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.099081184 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.3065452 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.134797086 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.156070178 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.194659572 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.151383375 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.124980276 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.150365021 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.137657775 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.160489709 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.264815707 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.146186209 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.09410142 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.137402274 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.471962118 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.158122075 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.155162343 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.291498906 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.101766253 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.132165913 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.156462084 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.293721743 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.161248604 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.132569763 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.339812451 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.139541569 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.160284264 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.138155955 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.151315452 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.339932131 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.151531943 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.137337121 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.070862161 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.360540577 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.099817995 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.218644186 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.146870559 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.146831937 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.209240847 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.148760117 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.411919506 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.36828918 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.133708953 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.395189542 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.458471898 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.15029941 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.138643936 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.132880319 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.39516577 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.14684337 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.349139331 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.155051223 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.200215102 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.157400147 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.278196392 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.340336097 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.952416398 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.919821333 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.060371094 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.505426454 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.134994641 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.48928733 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.085353657 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.068325188 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.138238542 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.155698206 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.805611657 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.060922805 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.149025915 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.462251619 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.135094596 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.206205124 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.200353473 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.134331971 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.211808722 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.317972896 seconds)
  done (took 143.077596103 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.266175793 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.315426005 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.495314095 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.061426993 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.145825397 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.358716861 seconds)
  done (took 14.747423043 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.582518512 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.987487942 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.174132631 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.167853829 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.206099715 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.106558322 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.106490828 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.305348323 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.333616729 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.160906829 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.110768473 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.107235361 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.107323383 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.289692229 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.107699996 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.158900538 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.107107844 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.174652773 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.156234497 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.216886823 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.306390406 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.206633265 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.215920356 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.823351427 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.204523252 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.161295428 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.908097226 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.159751181 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.161813313 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.493517811 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.309907654 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.110164594 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.828661359 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.281356112 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.904576602 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.830308577 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.334740037 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.116701606 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.15595638 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.107313092 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.107629617 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.216888867 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.169373623 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.107599816 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.481428777 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.784211006 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.202247076 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.465792778 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.107572265 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.107811792 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.108517668 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.168644759 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.106994464 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.108085413 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.400579724 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.685335319 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.107719728 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.114934909 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.206738129 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.833293217 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.263557136 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.11841485 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.529855547 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.087964173 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.103772663 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.108615149 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.836229046 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.321079904 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.224813114 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.165374326 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.107763184 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.173701093 seconds)
  done (took 113.072143519 seconds)
done (took 410.741681678 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.329924983 seconds)
  done (took 7.434949367 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.252545647 seconds)
  done (took 7.457747115 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.096820629 seconds)
  done (took 7.228060371 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.10480134 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.146994284 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.124971905 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.111676143 seconds)
  done (took 25.640755595 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.749439385 seconds)
  done (took 7.856988959 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.096703754 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.109267671 seconds)
  done (took 13.325136807 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.256376799 seconds)
  done (took 7.37338508 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.3689918 seconds)
  done (took 7.514692727 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.113379651 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.113913525 seconds)
  done (took 13.368736762 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.095347352 seconds)
  done (took 7.20119471 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 11.190987117 seconds)
  done (took 12.347218631 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.09694629 seconds)
  done (took 7.323108352 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.105942997 seconds)
  done (took 7.212642792 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.548968453 seconds)
  done (took 7.655231929 seconds)
done (took 140.036336496 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.095775475 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.102439018 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.101488187 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.098794437 seconds)
  done (took 25.503516656 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.431766564 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.431286076 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.408711406 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.483193848 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.375817022 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.375043644 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.432228209 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.430781609 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.375193322 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.477207395 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.431222272 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.582090684 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.482572155 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.408574511 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.409623103 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.477468984 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.483551693 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.432311868 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.375221703 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.409026108 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.474877899 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.483053053 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.851370785 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.840424213 seconds)
  done (took 36.471645391 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.303239724 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.279518339 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.256489888 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.233991112 seconds)
  done (took 6.179473654 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.143365021 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.481391602 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.464261623 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.522992913 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.463404748 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.274862496 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.464737664 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.315970673 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.285052354 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.286939965 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.720340858 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.257942589 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.271408847 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.522877711 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.274933334 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.107605571 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.107679014 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.245754709 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.481299247 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.35293708 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.366809499 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.464997726 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.463728915 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.464174654 seconds)
  done (took 33.911342849 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.867660008 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.033646806 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.466713679 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.021064154 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.804952121 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.898961736 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.388103654 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.604970143 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.372794559 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.346797573 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.829925143 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.845653616 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.24998652 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.99343135 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.865805537 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.283253283 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.283418563 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.95233357 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.539388923 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.406625706 seconds)
  done (took 38.161759573 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.096215825 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.349570188 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.349670182 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.272607716 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.097997748 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 4.541472689 seconds)
  done (took 21.813103113 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.282082322 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.229419762 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.39472973 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.367692952 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.263264392 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.230892063 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.555653261 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.321344414 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.839940022 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.694239199 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.435609973 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.516932547 seconds)
  done (took 21.242497634 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.09642691 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.128660128 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.103590345 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.261088612 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.842076795 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.96584972 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.422015312 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.097080687 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.096869599 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.295624767 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.96174539 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.270837085 seconds)
  done (took 39.666231558 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.282661242 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.269852681 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.414473814 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.139511068 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.530736407 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.14620167 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.463626009 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.097726046 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.679719557 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.873994921 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.659626669 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.113893407 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.628414633 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.0719627 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.835587473 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.396560736 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.937713461 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.593324493 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.418716478 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.140776332 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059909954 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.168205086 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.102796103 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.535560604 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.384580385 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.096919023 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.294312852 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.345332269 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.096878278 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.353232473 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.097471839 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.666701098 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.263514658 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.405647538 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.505675466 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.153192492 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.297735351 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.097785659 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.729277409 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.394249648 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.246830669 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.261984585 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.097375897 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.107718289 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.355301401 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.881394713 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.109543693 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.831402938 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.081329759 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.360257556 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.859636221 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.553645198 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.425805855 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.801974943 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.241723646 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.395663271 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.261502818 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.931908987 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.440800536 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.284506541 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.135071048 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.292339359 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.283474982 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.071126183 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.484391048 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.306022907 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.277929851 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.307723806 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.414623317 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.388092366 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.43419919 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.360650089 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.792848097 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.154412126 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.643862994 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.013404494 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.453721014 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.101324675 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.815991844 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.632460894 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.077975703 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.214243785 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.822724049 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.063149976 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.097118148 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.272522796 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.097620244 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.069279776 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.109806561 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.292262586 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.348269502 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.15228214 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.169385113 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.291977324 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.803456387 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080128039 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09964934 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.398499483 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.069196081 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.659780844 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.924062194 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.168412719 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.029527998 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.705172717 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.492795809 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.889020195 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.877731608 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.730921729 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.393963947 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.693815404 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.263077791 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.931518247 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.441581361 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.427627842 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.097006359 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.040496026 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.95157942 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.385015986 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.314174928 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.097303066 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.070674575 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.503682964 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.262609485 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.929627657 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.41557972 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.099698382 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.247177684 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.097222885 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.66401738 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.097662268 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.342172928 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.560380825 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.189657799 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.246379099 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.066886157 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.24503361 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.542019499 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.105314525 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.45162636 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.436348556 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.28825613 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.877742541 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.091474336 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.921930108 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.476181853 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.322659417 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.437951678 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.760201269 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.265428104 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.108241286 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.096867523 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.283773382 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.107016069 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.663107235 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.037976906 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.874282185 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.08600001 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.353627209 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.097554189 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.257722634 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.924399323 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.34917293 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.537708353 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.261636176 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.274926391 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.372977874 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.270885612 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.097632462 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.069066689 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.373793948 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.316384609 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.563184134 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.336439543 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.532889484 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.550093371 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.582077155 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.292878087 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.438620255 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.76116374 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.333484159 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.350783076 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.120571135 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.142155385 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.131872862 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.319595475 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.381703005 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.331231519 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.880645424 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.292407323 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.486089042 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.188483238 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.574114293 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.071060992 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247458698 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.481528521 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.100162685 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.600951116 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.18428928 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.511910748 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.588808926 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.132723156 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.400699649 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.727209944 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.613325949 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.456161166 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.428908895 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.076407718 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.19122913 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.684724818 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.32442953 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.11005669 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.564370594 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.73303226 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.283907011 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.098899969 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.445871776 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.407707453 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.746714423 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.600113032 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.687556236 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.918222566 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.245618756 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.654701513 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.104960147 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.924179134 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.401712549 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.302308416 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.111876778 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.554167591 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.324878314 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.427517465 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.097630215 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10063173 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.373137115 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40687576 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.373492337 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.546437256 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.324739821 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.772533098 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.203289482 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.729883845 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.266903954 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.126342653 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.472515606 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.297860215 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.921868489 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.260890006 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.730597229 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.381194829 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.836166585 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.362924797 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.098610968 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.470818966 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.674882755 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.100165995 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.075168702 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.21995168 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.098466757 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.311728371 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.856060505 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.154332742 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.233305711 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.343485662 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.314399872 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.257576929 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.487999323 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.515860955 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.842900237 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.069719433 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258109608 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.194211623 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.389665606 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.098464888 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.376190656 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.722842182 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.528631458 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.056008439 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.596890089 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.468632172 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.613682816 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.470812942 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.307805914 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.385563271 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.017311403 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.661480733 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.107390328 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.239317679 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.071034473 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.702462745 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.548140842 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.472810011 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.480334945 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123238534 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.512099735 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.43350589 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.313580955 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107922665 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.359019886 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.097563601 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.384875029 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.097565023 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.206547551 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.521641408 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.102134857 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.298063255 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.329365263 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.433715648 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.260374057 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.605678969 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.254893837 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231065131 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.657955766 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.277604645 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.238224142 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.444277179 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.733093023 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.118104489 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.180432742 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.653843009 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.738488927 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.476382523 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.677058015 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.598980212 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.457603725 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.874623047 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.099757229 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.296715119 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.262830055 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.098580159 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.285765626 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.479916681 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.124095659 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.286040849 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.414088675 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.23745426 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.660887683 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07958433 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.785257852 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.339095768 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.60382935 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.661921274 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.884139493 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.350514583 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.257251928 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.437282904 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.232679666 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.261171095 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.358455109 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.841496478 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.141169982 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.935013064 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.887217716 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.161194198 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.636772735 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.106695273 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.97458673 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.263011889 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.335039109 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.293123091 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.236813851 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.065783862 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.690079012 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.87425788 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.37839272 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.263245737 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.255720287 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.147781365 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.355411415 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.694901772 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.410353236 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.874082474 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.471162279 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.290428427 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.070933898 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.099086015 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.799337345 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.475456472 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.110807223 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.389550577 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.431424409 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.100828054 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.125513682 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.003556202 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.363352292 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.944841639 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.823316278 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.345435697 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.516608424 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.669690994 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.126820155 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.875915249 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.294812808 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.454945015 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.499691898 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.904077242 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.531733537 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.389508215 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.253422669 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.070616636 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.258288969 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.101782635 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.232403241 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.922261626 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.392903376 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.0961695 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.054414562 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.738987846 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.952460179 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.191115018 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.099327306 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.319943834 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.29589166 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.097846368 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.687498892 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.461175466 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.248782098 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08326242 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.861431665 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.069473053 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.295866003 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.098343574 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.348112686 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.936689101 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.093930738 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.871300944 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.541040516 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.992201761 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.345517768 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.071137108 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.702117576 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.245573717 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.55476396 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.052324369 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.350596782 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.62419932 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.256706747 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.101400312 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.427320372 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.234776871 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.412611868 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.57083547 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.476889014 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.493870217 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.37012471 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.365094027 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.529946053 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.353552153 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.34517268 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.071154442 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.963299206 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.18277702 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.47542371 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.461363908 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.0978429 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.663493382 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.347929828 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.157555211 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.35627911 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.154017156 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.733679103 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.308447377 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.166430342 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.352880365 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.159257022 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.416361428 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.958263553 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.347856983 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.099512413 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.146021237 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.29559584 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.349057391 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.485474621 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.406712275 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.99486273 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.262007439 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.531832347 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.925613682 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.632489525 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100280835 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.740593703 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.568002604 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.100038115 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.482983657 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.704634622 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.256392856 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.372212498 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.33237373 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.116308699 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.33331255 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.604859618 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.112419328 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.765504173 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.471343477 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.099650576 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.472949705 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.142065701 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.264419948 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.879178607 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.599012506 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.099447364 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.704241479 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.312833035 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.652838987 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.373841846 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.111556899 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.258320462 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.684204689 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.077681719 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.099889005 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.247809635 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.630459015 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.118312454 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.650061933 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.144779211 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.35013907 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.111033109 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.170579351 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.105339934 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.293691083 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.701676357 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.345382773 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.371079877 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.25635108 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.100848671 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.695978296 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.786236876 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.204479042 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.323756375 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.098751975 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.487981403 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.923416078 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.981293644 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.706195844 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.274179969 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.09709887 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.490576259 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.359047317 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.128660522 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.282835662 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.94274344 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.455494805 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.260589774 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.599984521 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.344930657 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.310152251 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.240962108 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.128234452 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.638145549 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.472007634 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.938211037 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.098705496 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.408823781 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.099044646 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.70782344 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.765063235 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.261588136 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.15927779 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.981022981 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.813360384 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.947135284 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.364182907 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.101630493 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.312905511 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.610884537 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.070600214 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.70899039 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.138631121 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.309472613 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.429301105 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.071984469 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.257283163 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117528578 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.079611462 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.598757078 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.099636191 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.409637783 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073295778 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.650441359 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.109099041 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.119652174 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.346233749 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.459992253 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.099733303 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.817997981 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.268581038 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.09893937 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.099246619 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.431357093 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.248868369 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.349507583 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.472044752 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.229270132 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.542093744 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.00872211 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.723698811 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.23946295 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.410864653 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.933578191 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.654751039 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.136503457 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.726843618 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.715763568 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.24464188 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.641995988 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.347446394 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.839225661 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.174523669 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.606464566 seconds)
  done (took 1946.885650297 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.154595199 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.154916431 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.122124754 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.149694673 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.182118622 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.17956469 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.192487323 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.12979685 seconds)
  done (took 50.373479839 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.099352485 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.138753992 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.595409133 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.364730673 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.125431436 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.180748858 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.355869952 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.735470136 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.119762919 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.060768206 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.248940632 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.307218465 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.126960342 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.138600503 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.895634184 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.237205965 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.104548514 seconds)
  done (took 92.981488376 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.126959094 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.752747919 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.126825001 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.764753094 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.168557076 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.522940855 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.118890343 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.103713376 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.462477653 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.388964043 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.15123713 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.199406648 seconds)
  done (took 85.035305908 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.139061682 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.138655173 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.138071146 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.142198798 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.138024291 seconds)
  done (took 6.804005779 seconds)
done (took 2406.155008338 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.327806708 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.631924277 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.659803627 seconds)
  done (took 4.399474832 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.16738405 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.231065166 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.301313644 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.250237669 seconds)
  done (took 6.082262844 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.40622413 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.582465994 seconds)
  done (took 4.096697129 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.441828064 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.124910795 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.669213291 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.098754554 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.108748202 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.107862523 seconds)
  done (took 19.43979743 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.131024673 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.13137936 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.133931199 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.125451092 seconds)
  done (took 5.637869799 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.10017656 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.183033005 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.109641084 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.109608092 seconds)
  done (took 18.610240512 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.414891869 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.375322039 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.865794245 seconds)
  done (took 5.777302954 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.921490731 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.235342076 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.90141087 seconds)
  done (took 6.166545655 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.911539267 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.019052 seconds)
  done (took 6.039790857 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.273174112 seconds)
  done (took 2.3812304 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.594452796 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.589295001 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.766759812 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.835959412 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.011737379 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.395010311 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.519924729 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.346225954 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.627684368 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.656497675 seconds)
  done (took 17.452807139 seconds)
done (took 107.747240649 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.046636497 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.525143871 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.254787321 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.384254267 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.211181561 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.250746565 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.129242386 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.19801572 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.514542873 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.513543292 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.918580729 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.211366968 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.164462475 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.501961651 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.164828886 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.456358393 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.506813807 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.047689427 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.860773935 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.465362726 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.154446444 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.491856867 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.665489029 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.515739603 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.530701433 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.26042141 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.074080828 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.480193393 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.058795747 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.09666182 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.279125742 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.674731537 seconds)
  done (took 151.717334593 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.098899506 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.124331863 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.125793285 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.110099782 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.093509752 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.12457434 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.112135157 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.10988722 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.914150122 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.909823579 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.123640324 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.102997246 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.123055891 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.110334015 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.125919242 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.110013664 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.143709043 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.123227709 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.124067743 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.124008743 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.124183239 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.829440157 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.123980543 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.847235261 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.138108371 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.126054747 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.1096325 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.124342317 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.123613909 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.123804872 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.125225084 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.110289531 seconds)
  done (took 187.973661005 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.099226581 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.123231774 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.12715914 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.110227688 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.125023216 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.12527249 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.110491948 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.110090676 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.12454755 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.125083066 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.124790765 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.123794998 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.12629986 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.110199497 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.127276174 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.110987272 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.124055293 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.123354222 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.123341641 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.125423053 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.123593645 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.110922122 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.123723275 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.123787253 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.12467712 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.12421127 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.11004205 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.124753514 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.124325932 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.123125475 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.125051588 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.111151017 seconds)
  done (took 196.983025089 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.407767361 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.141256297 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.076139146 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.672982941 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.050002397 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.131714912 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.67141955 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.409764427 seconds)
  done (took 13.695406317 seconds)
done (took 551.491312516 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.719117729 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.000509634 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.290516433 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.342913781 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.640676997 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.423484114 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.343208501 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.549146443 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.845490529 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.529041429 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.56997706 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.337563381 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.915595605 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.337306066 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.283303904 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.577606265 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.528234826 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.813188658 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.297625892 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.931131722 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.322687716 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.003951595 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.586028033 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.895210815 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.588209471 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.051355943 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.28398203 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.531172045 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.322841822 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.292515019 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.118965727 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.574529425 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.341210223 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.339360343 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.622267858 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.582560644 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.528992364 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.586863882 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.294701948 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.79748491 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.929059059 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.722324768 seconds)
  done (took 74.701994494 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.128726173 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.145250621 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.30680505 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.208364407 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.795976547 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.207450233 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.361726082 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.359264041 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.218092386 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.328056468 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.391670073 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.831591227 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.380707743 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.83533276 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.381228232 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.400467246 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.211953841 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.782545704 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.386495241 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.356709733 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.175984176 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.307289468 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.174563474 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.322370616 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.16690296 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.176746692 seconds)
  done (took 36.481064853 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.182479003 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.313193112 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.376721715 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.184749274 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.371185752 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.127466969 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.436635116 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.278208065 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.730607219 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.4921472 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.235985194 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.261273337 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.316651956 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.410613717 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.3578512 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.306495231 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.297830115 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.30039685 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.320870147 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.364273196 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.23459163 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.218421991 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.440623336 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.046007426 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.985046078 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.630775783 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.339400483 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.713585911 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.298135929 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.312634456 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.276161944 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.420058967 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.534740118 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.384170799 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.275521952 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.153192937 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.1533546 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.238545415 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.040679068 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.382449926 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.431834974 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.534456845 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.486229975 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.69478988 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.415878898 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.359211621 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.592022658 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.248093768 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.26762702 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.006283516 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.415910116 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.771996443 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.362839847 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.330381956 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.265146341 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.60463157 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.338812929 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.509125033 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.240454604 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.780524894 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.219330612 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.531633078 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.324867564 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.421358386 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.434762984 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.350332389 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.305976889 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.653813825 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.485088159 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.278389739 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.750245428 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.229876128 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.171395483 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.23437376 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.31631397 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.625723094 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.010783442 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.479962388 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.534466373 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.424409386 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.371632956 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.720619755 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.15647116 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.523912909 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.320297952 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.139797143 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.223709115 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.463841831 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.417752077 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.668346787 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.72008698 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.529615525 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.549444598 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.289046367 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.770264978 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.604697795 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.142213414 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.155009415 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.366687523 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.71246695 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.227379435 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.34711888 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.746330851 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.628037886 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.449845754 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.296992282 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.498795437 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.42190687 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.530164824 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.13009941 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.340293528 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.232955323 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.394906995 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.540785612 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.133473041 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.677609818 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.255518111 seconds)
  done (took 236.994006906 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.100540072 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.119365656 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.103306309 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.119435138 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.100772878 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.65528743 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.155954483 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.100514171 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.654548209 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.155499766 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.102009632 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.101033406 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.102213333 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.100943447 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.283040228 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.3060521 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.949281188 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.100606844 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.100315908 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.111888211 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.928831878 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.102509233 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.101642919 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.112415033 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.10412463 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.101776437 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.104685627 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.117303892 seconds)
  done (took 151.311379743 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.158711961 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.52974394 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.188905196 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.252453004 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.197249385 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.184260673 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.668257043 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.296557155 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.245936081 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.178047588 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.168555017 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.388518219 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.467784388 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.761782645 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.298930098 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.371928546 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.816705713 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.312418656 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.179196617 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.170970118 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.318232194 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.510548146 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.423022739 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.444146334 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.311509938 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.451003049 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.234870578 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.171075799 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.288732404 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.655452717 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.183520444 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.510093563 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.309430534 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.168876242 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.67229119 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.551947786 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.747102103 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.816182989 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.370454762 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.129851748 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.126511845 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.402439559 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.483688298 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.205681814 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.16243239 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.797893773 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.187107851 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.417214492 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.184598456 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.126852347 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.265252501 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.285287809 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.407941687 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.017514038 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.348534763 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.324444721 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.752415738 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.149836984 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.176745313 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.504306581 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.144090289 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.676726761 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.708965165 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.222251658 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.183100722 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.018412052 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.250839233 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.696426898 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.777307867 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.21289006 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.543948095 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.361526782 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.143290571 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.418668961 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.345824337 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.598672154 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.73994618 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.302205757 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.267592498 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.251521454 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.432216097 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.155507588 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.694270237 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.273365186 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.141913304 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.682014214 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.598050778 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.142590869 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.157430366 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.327554612 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.326491954 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.373516873 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.454488587 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.243374635 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.080529833 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.431490812 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.455166547 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.190795838 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.285987526 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.156408517 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.508557833 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.370163818 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.148599689 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.472961046 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.567646387 seconds)
  done (took 156.083552871 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.871795935 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.211352895 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.343654353 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.689821053 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.53054425 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.558885247 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.435657678 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.230045281 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.446277052 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.380472181 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.373648162 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.246839634 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.873703201 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.886928944 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.209353754 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.348159343 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.235758778 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.723541024 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.423698655 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.047772042 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.592017035 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.915420638 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.47443943 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.572702842 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.540058914 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.642560535 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.865546807 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.28135606 seconds)
  done (took 48.07643623 seconds)
done (took 704.748063523 seconds)
SAVING RESULT...
DONE!
